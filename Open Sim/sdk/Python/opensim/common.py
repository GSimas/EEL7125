# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_common')).lstrip('.')
        return importlib.import_module(mname)
    _common = swig_import_helper()
    del swig_import_helper
elif version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_common', [dirname(__file__)])
        except ImportError:
            import _common
            return _common
        if fp is not None:
            try:
                _mod = imp.load_module('_common', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _common = swig_import_helper()
    del swig_import_helper
else:
    import _common
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _common.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _common.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _common.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _common.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _common.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _common.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _common.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _common.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _common.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _common.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _common.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _common.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import opensim.simbody

def opensim_version_common(major, minor, build):
    """
    opensim_version_common(int * major, int * minor, int * build)

    Parameters
    ----------
    major: int *
    minor: int *
    build: int *

    """
    return _common.opensim_version_common(major, minor, build)

def opensim_about_common(key, maxlen, value):
    """
    opensim_about_common(char const * key, int maxlen, char * value)

    Parameters
    ----------
    key: char const *
    maxlen: int
    value: char *

    """
    return _common.opensim_about_common(key, maxlen, value)

def GetVersionAndDate():
    """GetVersionAndDate() -> std::string"""
    return _common.GetVersionAndDate()

def GetVersion():
    """GetVersion() -> std::string"""
    return _common.GetVersion()

def GetOSInfoVerbose():
    """GetOSInfoVerbose() -> std::string"""
    return _common.GetOSInfoVerbose()

def GetOSInfo():
    """GetOSInfo() -> std::string"""
    return _common.GetOSInfo()

def GetCompilerVersion():
    """GetCompilerVersion() -> std::string"""
    return _common.GetCompilerVersion()
class OpenSimException(_object):
    """Proxy of C++ OpenSim::Exception class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenSimException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenSimException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Exception(std::string const & aMsg, std::string const & aFile, int aLine=-1) -> OpenSimException

        Parameters
        ----------
        aMsg: std::string const &
        aFile: std::string const &
        aLine: int

        Exception(std::string const & aMsg, std::string const & aFile) -> OpenSimException

        Parameters
        ----------
        aMsg: std::string const &
        aFile: std::string const &

        Exception(std::string const & aMsg) -> OpenSimException

        Parameters
        ----------
        aMsg: std::string const &

        Exception() -> OpenSimException
        Exception(std::string const & file, size_t line, std::string const & func) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        Exception(std::string const & file, size_t line, std::string const & func, std::string const & msg) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        Exception(std::string const & file, size_t line, std::string const & func, OpenSimObject obj) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &

        __init__(OpenSim::Exception self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & msg) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        msg: std::string const &

        """
        this = _common.new_OpenSimException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_OpenSimException
    __del__ = lambda self: None

    def setMessage(self, aMsg):
        """
        setMessage(OpenSimException self, std::string const & aMsg)

        Parameters
        ----------
        aMsg: std::string const &

        """
        return _common.OpenSimException_setMessage(self, aMsg)


    def getMessage(self):
        """
        getMessage(OpenSimException self) -> char const *

        Parameters
        ----------
        self: OpenSim::Exception const *

        """
        return _common.OpenSimException_getMessage(self)


    def what(self):
        """
        what(OpenSimException self) -> char const *

        Parameters
        ----------
        self: OpenSim::Exception const *

        """
        return _common.OpenSimException_what(self)

OpenSimException_swigregister = _common.OpenSimException_swigregister
OpenSimException_swigregister(OpenSimException)

class InvalidArgument(OpenSimException):
    """Proxy of C++ OpenSim::InvalidArgument class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgument, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgument, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::InvalidArgument self, std::string const & file, size_t line, std::string const & func, std::string const & msg) -> InvalidArgument

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        __init__(OpenSim::InvalidArgument self, std::string const & file, size_t line, std::string const & func) -> InvalidArgument

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_InvalidArgument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidArgument
    __del__ = lambda self: None
InvalidArgument_swigregister = _common.InvalidArgument_swigregister
InvalidArgument_swigregister(InvalidArgument)

class InvalidCall(OpenSimException):
    """Proxy of C++ OpenSim::InvalidCall class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidCall, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidCall, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::InvalidCall self, std::string const & file, size_t line, std::string const & func, std::string const & msg) -> InvalidCall

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        __init__(OpenSim::InvalidCall self, std::string const & file, size_t line, std::string const & func) -> InvalidCall

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_InvalidCall(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidCall
    __del__ = lambda self: None
InvalidCall_swigregister = _common.InvalidCall_swigregister
InvalidCall_swigregister(InvalidCall)

class InvalidTemplateArgument(OpenSimException):
    """Proxy of C++ OpenSim::InvalidTemplateArgument class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidTemplateArgument, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidTemplateArgument, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, msg):
        """
        __init__(OpenSim::InvalidTemplateArgument self, std::string const & file, size_t line, std::string const & func, std::string const & msg) -> InvalidTemplateArgument

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        """
        this = _common.new_InvalidTemplateArgument(file, line, func, msg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidTemplateArgument
    __del__ = lambda self: None
InvalidTemplateArgument_swigregister = _common.InvalidTemplateArgument_swigregister
InvalidTemplateArgument_swigregister(InvalidTemplateArgument)

class IndexOutOfRange(OpenSimException):
    """Proxy of C++ OpenSim::IndexOutOfRange class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfRange, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfRange, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, index, min, max):
        """
        __init__(OpenSim::IndexOutOfRange self, std::string const & file, size_t line, std::string const & func, size_t index, size_t min, size_t max) -> IndexOutOfRange

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        index: size_t
        min: size_t
        max: size_t

        """
        this = _common.new_IndexOutOfRange(file, line, func, index, min, max)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IndexOutOfRange
    __del__ = lambda self: None
IndexOutOfRange_swigregister = _common.IndexOutOfRange_swigregister
IndexOutOfRange_swigregister(IndexOutOfRange)

class KeyNotFound(OpenSimException):
    """Proxy of C++ OpenSim::KeyNotFound class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        """
        __init__(OpenSim::KeyNotFound self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> KeyNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        this = _common.new_KeyNotFound(file, line, func, key)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_KeyNotFound
    __del__ = lambda self: None
KeyNotFound_swigregister = _common.KeyNotFound_swigregister
KeyNotFound_swigregister(KeyNotFound)

class IOError(OpenSimException):
    """Proxy of C++ OpenSim::IOError class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOError, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOError, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::IOError self) -> IOError"""
        this = _common.new_IOError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IOError
    __del__ = lambda self: None
IOError_swigregister = _common.IOError_swigregister
IOError_swigregister(IOError)

class ComponentNotFound(OpenSimException):
    """Proxy of C++ OpenSim::ComponentNotFound class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, toFindName, toFindClassName, thisName):
        """
        __init__(OpenSim::ComponentNotFound self, std::string const & file, size_t line, std::string const & func, std::string const & toFindName, std::string const & toFindClassName, std::string const & thisName) -> ComponentNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        toFindName: std::string const &
        toFindClassName: std::string const &
        thisName: std::string const &

        """
        this = _common.new_ComponentNotFound(file, line, func, toFindName, toFindClassName, thisName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ComponentNotFound
    __del__ = lambda self: None
ComponentNotFound_swigregister = _common.ComponentNotFound_swigregister
ComponentNotFound_swigregister(ComponentNotFound)

class InvalidPropertyValue(OpenSimException):
    """Proxy of C++ OpenSim::InvalidPropertyValue class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidPropertyValue, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidPropertyValue, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, obj, propertyName, errorMsg):
        """
        __init__(OpenSim::InvalidPropertyValue self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & propertyName, std::string const & errorMsg) -> InvalidPropertyValue

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        propertyName: std::string const &
        errorMsg: std::string const &

        """
        this = _common.new_InvalidPropertyValue(file, line, func, obj, propertyName, errorMsg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidPropertyValue
    __del__ = lambda self: None
InvalidPropertyValue_swigregister = _common.InvalidPropertyValue_swigregister
InvalidPropertyValue_swigregister(InvalidPropertyValue)
cvar = _common.cvar
Array_CAPMIN = cvar.Array_CAPMIN

class AbstractProperty(_object):
    """Proxy of C++ OpenSim::AbstractProperty class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractProperty, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setAllowableListSize(self, *args):
        """
        setAllowableListSize(AbstractProperty self, int aMin, int aMax)

        Parameters
        ----------
        aMin: int
        aMax: int

        setAllowableListSize(AbstractProperty self, int aNum)

        Parameters
        ----------
        aNum: int

        """
        return _common.AbstractProperty_setAllowableListSize(self, *args)

    __swig_destroy__ = _common.delete_AbstractProperty
    __del__ = lambda self: None

    def clone(self):
        """
        clone(AbstractProperty self) -> AbstractProperty

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_clone(self)


    def toString(self):
        """
        toString(AbstractProperty self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_toString(self)


    def toStringForDisplay(self, precision):
        """
        toStringForDisplay(AbstractProperty self, int const precision) -> std::string

        Parameters
        ----------
        precision: int const

        """
        return _common.AbstractProperty_toStringForDisplay(self, precision)


    def getTypeName(self):
        """
        getTypeName(AbstractProperty self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_getTypeName(self)


    def isObjectProperty(self):
        """
        isObjectProperty(AbstractProperty self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_isObjectProperty(self)


    def isUnnamedProperty(self):
        """
        isUnnamedProperty(AbstractProperty self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_isUnnamedProperty(self)


    def equals(self, other):
        """
        equals(AbstractProperty self, AbstractProperty other) -> bool

        Parameters
        ----------
        other: OpenSim::AbstractProperty const &

        """
        return _common.AbstractProperty_equals(self, other)


    def isSamePropertyClass(self, other):
        """
        isSamePropertyClass(AbstractProperty self, AbstractProperty other) -> bool

        Parameters
        ----------
        other: OpenSim::AbstractProperty const &

        """
        return _common.AbstractProperty_isSamePropertyClass(self, other)


    def size(self):
        """
        size(AbstractProperty self) -> int

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_size(self)


    def empty(self):
        """
        empty(AbstractProperty self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_empty(self)


    def clear(self):
        """
        clear(AbstractProperty self)

        Parameters
        ----------
        self: OpenSim::AbstractProperty *

        """
        return _common.AbstractProperty_clear(self)


    def getValueAsObject(self, index=-1):
        """
        getValueAsObject(AbstractProperty self, int index=-1) -> OpenSimObject

        Parameters
        ----------
        index: int

        getValueAsObject(AbstractProperty self) -> OpenSimObject

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_getValueAsObject(self, index)


    def updValueAsObject(self, index=-1):
        """
        updValueAsObject(AbstractProperty self, int index=-1) -> OpenSimObject

        Parameters
        ----------
        index: int

        updValueAsObject(AbstractProperty self) -> OpenSimObject

        Parameters
        ----------
        self: OpenSim::AbstractProperty *

        """
        return _common.AbstractProperty_updValueAsObject(self, index)


    def setValueAsObject(self, obj, index=-1):
        """
        setValueAsObject(AbstractProperty self, OpenSimObject obj, int index=-1)

        Parameters
        ----------
        obj: OpenSim::Object const &
        index: int

        setValueAsObject(AbstractProperty self, OpenSimObject obj)

        Parameters
        ----------
        obj: OpenSim::Object const &

        """
        return _common.AbstractProperty_setValueAsObject(self, obj, index)


    def assign(self, that):
        """
        assign(AbstractProperty self, AbstractProperty that)

        Parameters
        ----------
        that: OpenSim::AbstractProperty const &

        """
        return _common.AbstractProperty_assign(self, that)


    def setAllPropertiesUseDefault(self, shouldUseDefault):
        """
        setAllPropertiesUseDefault(AbstractProperty self, bool shouldUseDefault)

        Parameters
        ----------
        shouldUseDefault: bool

        """
        return _common.AbstractProperty_setAllPropertiesUseDefault(self, shouldUseDefault)


    def readFromXMLParentElement(self, parent, versionNumber):
        """
        readFromXMLParentElement(AbstractProperty self, SimTK::Xml::Element & parent, int versionNumber)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.AbstractProperty_readFromXMLParentElement(self, parent, versionNumber)


    def writeToXMLParentElement(self, parent):
        """
        writeToXMLParentElement(AbstractProperty self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _common.AbstractProperty_writeToXMLParentElement(self, parent)


    def setName(self, name):
        """
        setName(AbstractProperty self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _common.AbstractProperty_setName(self, name)


    def setComment(self, aComment):
        """
        setComment(AbstractProperty self, std::string const & aComment)

        Parameters
        ----------
        aComment: std::string const &

        """
        return _common.AbstractProperty_setComment(self, aComment)


    def setValueIsDefault(self, isDefault):
        """
        setValueIsDefault(AbstractProperty self, bool isDefault)

        Parameters
        ----------
        isDefault: bool

        """
        return _common.AbstractProperty_setValueIsDefault(self, isDefault)


    def getName(self):
        """
        getName(AbstractProperty self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_getName(self)


    def getComment(self):
        """
        getComment(AbstractProperty self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_getComment(self)


    def getValueIsDefault(self):
        """
        getValueIsDefault(AbstractProperty self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_getValueIsDefault(self)


    def getMinListSize(self):
        """
        getMinListSize(AbstractProperty self) -> int

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_getMinListSize(self)


    def getMaxListSize(self):
        """
        getMaxListSize(AbstractProperty self) -> int

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_getMaxListSize(self)


    def isOptionalProperty(self):
        """
        isOptionalProperty(AbstractProperty self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_isOptionalProperty(self)


    def isListProperty(self):
        """
        isListProperty(AbstractProperty self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_isListProperty(self)


    def isOneValueProperty(self):
        """
        isOneValueProperty(AbstractProperty self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_isOneValueProperty(self)


    def isOneObjectProperty(self):
        """
        isOneObjectProperty(AbstractProperty self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractProperty const *

        """
        return _common.AbstractProperty_isOneObjectProperty(self)

AbstractProperty_swigregister = _common.AbstractProperty_swigregister
AbstractProperty_swigregister(AbstractProperty)

class PropertyGroup(_object):
    """Proxy of C++ OpenSim::PropertyGroup class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::PropertyGroup self) -> PropertyGroup
        __init__(OpenSim::PropertyGroup self, std::string & aName) -> PropertyGroup

        Parameters
        ----------
        aName: std::string &

        __init__(OpenSim::PropertyGroup self, PropertyGroup aGroup) -> PropertyGroup

        Parameters
        ----------
        aGroup: OpenSim::PropertyGroup const &

        """
        this = _common.new_PropertyGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_PropertyGroup
    __del__ = lambda self: None

    def clone(self):
        """
        clone(PropertyGroup self) -> PropertyGroup

        Parameters
        ----------
        self: OpenSim::PropertyGroup const *

        """
        return _common.PropertyGroup_clone(self)


    def copyData(self, aGroup):
        """
        copyData(PropertyGroup self, PropertyGroup aGroup)

        Parameters
        ----------
        aGroup: OpenSim::PropertyGroup const &

        """
        return _common.PropertyGroup_copyData(self, aGroup)


    def clear(self):
        """
        clear(PropertyGroup self)

        Parameters
        ----------
        self: OpenSim::PropertyGroup *

        """
        return _common.PropertyGroup_clear(self)


    def contains(self, aName):
        """
        contains(PropertyGroup self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.PropertyGroup_contains(self, aName)


    def add(self, aProperty):
        """
        add(PropertyGroup self, Property_Deprecated * aProperty)

        Parameters
        ----------
        aProperty: Property_Deprecated *

        """
        return _common.PropertyGroup_add(self, aProperty)


    def remove(self, aProperty):
        """
        remove(PropertyGroup self, Property_Deprecated * aProperty)

        Parameters
        ----------
        aProperty: Property_Deprecated *

        """
        return _common.PropertyGroup_remove(self, aProperty)


    def get(self, aIndex):
        """
        get(PropertyGroup self, int aIndex) -> Property_Deprecated *

        Parameters
        ----------
        aIndex: int

        """
        return _common.PropertyGroup_get(self, aIndex)


    def getPropertyIndex(self, aProperty):
        """
        getPropertyIndex(PropertyGroup self, Property_Deprecated * aProperty) -> int

        Parameters
        ----------
        aProperty: Property_Deprecated *

        """
        return _common.PropertyGroup_getPropertyIndex(self, aProperty)


    def setName(self, aName):
        """
        setName(PropertyGroup self, std::string const & aName)

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.PropertyGroup_setName(self, aName)


    def getName(self):
        """
        getName(PropertyGroup self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PropertyGroup const *

        """
        return _common.PropertyGroup_getName(self)

PropertyGroup_swigregister = _common.PropertyGroup_swigregister
PropertyGroup_swigregister(PropertyGroup)

class ArrayPtrsPropertyGroup(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(OpenSim::PropertyGroup)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPtrsPropertyGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPtrsPropertyGroup, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayPtrsPropertyGroup
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(OpenSim::PropertyGroup)> self, int aCapacity=1) -> ArrayPtrsPropertyGroup

        Parameters
        ----------
        aCapacity: int

        __init__(OpenSim::ArrayPtrs<(OpenSim::PropertyGroup)> self) -> ArrayPtrsPropertyGroup
        __init__(OpenSim::ArrayPtrs<(OpenSim::PropertyGroup)> self, ArrayPtrsPropertyGroup aArray) -> ArrayPtrsPropertyGroup

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const &

        """
        this = _common.new_ArrayPtrsPropertyGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(ArrayPtrsPropertyGroup self)

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > *

        """
        return _common.ArrayPtrsPropertyGroup_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPtrsPropertyGroup self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayPtrsPropertyGroup_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPtrsPropertyGroup self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const *

        """
        return _common.ArrayPtrsPropertyGroup_getSize(self)


    def size(self):
        """
        size(ArrayPtrsPropertyGroup self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const *

        """
        return _common.ArrayPtrsPropertyGroup_size(self)


    def getIndex(self, *args):
        """
        getIndex(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT *
        aStartIndex: int

        getIndex(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT * aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT *

        getIndex(ArrayPtrsPropertyGroup self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(ArrayPtrsPropertyGroup self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsPropertyGroup_getIndex(self, *args)


    def append(self, *args):
        """
        append(ArrayPtrsPropertyGroup self, PropertyGroup aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::PropertyGroup *

        append(ArrayPtrsPropertyGroup self, ArrayPtrsPropertyGroup aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > &

        """
        return _common.ArrayPtrsPropertyGroup_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(ArrayPtrsPropertyGroup self, int aIndex, PropertyGroup aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::PropertyGroup *

        """
        return _common.ArrayPtrsPropertyGroup_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(ArrayPtrsPropertyGroup self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT *

        """
        return _common.ArrayPtrsPropertyGroup_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(ArrayPtrsPropertyGroup self, int aIndex, PropertyGroup aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::PropertyGroup *

        """
        return _common.ArrayPtrsPropertyGroup_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(ArrayPtrsPropertyGroup self, int aIndex) -> PropertyGroup

        Parameters
        ----------
        aIndex: int

        get(ArrayPtrsPropertyGroup self, std::string const & aName) -> PropertyGroup

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsPropertyGroup_get(self, *args)


    def getLast(self):
        """
        getLast(ArrayPtrsPropertyGroup self) -> PropertyGroup

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const *

        """
        return _common.ArrayPtrsPropertyGroup_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT & aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT & aObject, bool aFindFirst=False) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT &
        aFindFirst: bool

        searchBinary(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT & aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT &

        """
        return _common.ArrayPtrsPropertyGroup_searchBinary(self, aObject, aFindFirst, aLo, aHi)

ArrayPtrsPropertyGroup_swigregister = _common.ArrayPtrsPropertyGroup_swigregister
ArrayPtrsPropertyGroup_swigregister(ArrayPtrsPropertyGroup)

class PropertyString(AbstractProperty):
    """Proxy of C++ OpenSim::Property<(std::string)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyString, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyString, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(PropertyString self) -> PropertyString

        Parameters
        ----------
        self: OpenSim::Property< std::string > const *

        """
        return _common.PropertyString_clone(self)


    def getTypeName(self):
        """
        getTypeName(PropertyString self) -> std::string

        Parameters
        ----------
        self: OpenSim::Property< std::string > const *

        """
        return _common.PropertyString_getTypeName(self)


    def setValue(self, *args):
        """
        setValue(PropertyString self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        setValue(PropertyString self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.PropertyString_setValue(self, *args)


    def getValue(self, index=-1):
        """
        getValue(PropertyString self, int index=-1) -> std::string const

        Parameters
        ----------
        index: int

        getValue(PropertyString self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Property< std::string > const *

        """
        return _common.PropertyString_getValue(self, index)


    def updValue(self, index=-1):
        """
        updValue(PropertyString self, int index=-1) -> std::string

        Parameters
        ----------
        index: int

        updValue(PropertyString self) -> std::string &

        Parameters
        ----------
        self: OpenSim::Property< std::string > *

        """
        return _common.PropertyString_updValue(self, index)


    def appendValue(self, value):
        """
        appendValue(PropertyString self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.PropertyString_appendValue(self, value)


    def adoptAndAppendValue(self, value):
        """
        adoptAndAppendValue(PropertyString self, std::string * value) -> int

        Parameters
        ----------
        value: std::string *

        """
        return _common.PropertyString_adoptAndAppendValue(self, value)


    def findIndex(self, value):
        """
        findIndex(PropertyString self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.PropertyString_findIndex(self, value)


    def findIndexForName(self, name):
        """
        findIndexForName(PropertyString self, SimTK::String const & name) -> int

        Parameters
        ----------
        name: SimTK::String const &

        """
        return _common.PropertyString_findIndexForName(self, name)


    def isA(prop):
        """
        isA(AbstractProperty prop) -> bool

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyString_isA(prop)

    isA = staticmethod(isA)

    def getAs(prop):
        """
        getAs(AbstractProperty prop) -> PropertyString

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyString_getAs(prop)

    getAs = staticmethod(getAs)

    def updAs(prop):
        """
        updAs(AbstractProperty prop) -> PropertyString

        Parameters
        ----------
        prop: OpenSim::AbstractProperty &

        """
        return _common.PropertyString_updAs(prop)

    updAs = staticmethod(updAs)
PropertyString_swigregister = _common.PropertyString_swigregister
PropertyString_swigregister(PropertyString)

def PropertyString_isA(prop):
    """
    PropertyString_isA(AbstractProperty prop) -> bool

    Parameters
    ----------
    prop: OpenSim::AbstractProperty const &

    """
    return _common.PropertyString_isA(prop)

def PropertyString_getAs(prop):
    """
    PropertyString_getAs(AbstractProperty prop) -> PropertyString

    Parameters
    ----------
    prop: OpenSim::AbstractProperty const &

    """
    return _common.PropertyString_getAs(prop)

def PropertyString_updAs(prop):
    """
    PropertyString_updAs(AbstractProperty prop) -> PropertyString

    Parameters
    ----------
    prop: OpenSim::AbstractProperty &

    """
    return _common.PropertyString_updAs(prop)

class OpenSimObject(_object):
    """Proxy of C++ OpenSim::Object class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenSimObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenSimObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_OpenSimObject
    __del__ = lambda self: None

    def clone(self):
        """
        clone(OpenSimObject self) -> OpenSimObject

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(OpenSimObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getConcreteClassName(self)


    def assign(self, aObject):
        """
        assign(OpenSimObject self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.OpenSimObject_assign(self, aObject)


    def isEqualTo(self, aObject):
        """
        isEqualTo(OpenSimObject self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _common.OpenSimObject_isEqualTo(self, aObject)


    def setName(self, name):
        """
        setName(OpenSimObject self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OpenSimObject_setName(self, name)


    def getName(self):
        """
        getName(OpenSimObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getName(self)


    def setDescription(self, description):
        """
        setDescription(OpenSimObject self, std::string const & description)

        Parameters
        ----------
        description: std::string const &

        """
        return _common.OpenSimObject_setDescription(self, description)


    def getDescription(self):
        """
        getDescription(OpenSimObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(OpenSimObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getAuthors(self)


    def setAuthors(self, authors):
        """
        setAuthors(OpenSimObject self, std::string const & authors)

        Parameters
        ----------
        authors: std::string const &

        """
        return _common.OpenSimObject_setAuthors(self, authors)


    def getReferences(self):
        """
        getReferences(OpenSimObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getReferences(self)


    def setReferences(self, references):
        """
        setReferences(OpenSimObject self, std::string const & references)

        Parameters
        ----------
        references: std::string const &

        """
        return _common.OpenSimObject_setReferences(self, references)


    def getNumProperties(self):
        """
        getNumProperties(OpenSimObject self) -> int

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(OpenSimObject self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _common.OpenSimObject_getPropertyByIndex(self, propertyIndex)


    def updPropertyByIndex(self, propertyIndex):
        """
        updPropertyByIndex(OpenSimObject self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _common.OpenSimObject_updPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(OpenSimObject self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OpenSimObject_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(OpenSimObject self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OpenSimObject_getPropertyByName(self, name)


    def updPropertyByName(self, name):
        """
        updPropertyByName(OpenSimObject self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OpenSimObject_updPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(OpenSimObject self) -> bool

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_isObjectUpToDateWithProperties(self)


    def PrintPropertyInfo(*args):
        """
        PrintPropertyInfo(std::ostream & os, std::string const & classNameDotPropertyName, bool printFlagInfo=True) -> bool

        Parameters
        ----------
        os: std::ostream &
        classNameDotPropertyName: std::string const &
        printFlagInfo: bool

        PrintPropertyInfo(std::ostream & os, std::string const & classNameDotPropertyName) -> bool

        Parameters
        ----------
        os: std::ostream &
        classNameDotPropertyName: std::string const &

        PrintPropertyInfo(std::ostream & os, std::string const & className, std::string const & propertyName, bool printFlagInfo=True) -> bool

        Parameters
        ----------
        os: std::ostream &
        className: std::string const &
        propertyName: std::string const &
        printFlagInfo: bool

        PrintPropertyInfo(std::ostream & os, std::string const & className, std::string const & propertyName) -> bool

        Parameters
        ----------
        os: std::ostream &
        className: std::string const &
        propertyName: std::string const &

        """
        return _common.OpenSimObject_PrintPropertyInfo(*args)

    PrintPropertyInfo = staticmethod(PrintPropertyInfo)

    def registerType(defaultObject):
        """
        registerType(OpenSimObject defaultObject)

        Parameters
        ----------
        defaultObject: OpenSim::Object const &

        """
        return _common.OpenSimObject_registerType(defaultObject)

    registerType = staticmethod(registerType)

    def renameType(oldTypeName, newTypeName):
        """
        renameType(std::string const & oldTypeName, std::string const & newTypeName)

        Parameters
        ----------
        oldTypeName: std::string const &
        newTypeName: std::string const &

        """
        return _common.OpenSimObject_renameType(oldTypeName, newTypeName)

    renameType = staticmethod(renameType)

    def getDefaultInstanceOfType(concreteClassName):
        """
        getDefaultInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

        Parameters
        ----------
        concreteClassName: std::string const &

        """
        return _common.OpenSimObject_getDefaultInstanceOfType(concreteClassName)

    getDefaultInstanceOfType = staticmethod(getDefaultInstanceOfType)

    def newInstanceOfType(concreteClassName):
        """
        newInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

        Parameters
        ----------
        concreteClassName: std::string const &

        """
        return _common.OpenSimObject_newInstanceOfType(concreteClassName)

    newInstanceOfType = staticmethod(newInstanceOfType)

    def getRegisteredTypenames(typeNames):
        """
        getRegisteredTypenames(ArrayStr typeNames)

        Parameters
        ----------
        typeNames: OpenSim::Array< std::string > &

        """
        return _common.OpenSimObject_getRegisteredTypenames(typeNames)

    getRegisteredTypenames = staticmethod(getRegisteredTypenames)

    def makeObjectFromFile(fileName):
        """
        makeObjectFromFile(std::string const & fileName) -> OpenSimObject

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.OpenSimObject_makeObjectFromFile(fileName)

    makeObjectFromFile = staticmethod(makeObjectFromFile)

    def readObjectFromXMLNodeOrFile(self, objectElement, versionNumber):
        """
        readObjectFromXMLNodeOrFile(OpenSimObject self, SimTK::Xml::Element & objectElement, int versionNumber)

        Parameters
        ----------
        objectElement: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.OpenSimObject_readObjectFromXMLNodeOrFile(self, objectElement, versionNumber)


    def updateFromXMLNode(self, objectElement, versionNumber):
        """
        updateFromXMLNode(OpenSimObject self, SimTK::Xml::Element & objectElement, int versionNumber)

        Parameters
        ----------
        objectElement: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.OpenSimObject_updateFromXMLNode(self, objectElement, versionNumber)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(OpenSimObject self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(OpenSimObject self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _common.OpenSimObject_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(OpenSimObject self) -> bool

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getInlined(self)


    def setInlined(self, *args):
        """
        setInlined(OpenSimObject self, bool aInlined, std::string const & aFileName)

        Parameters
        ----------
        aInlined: bool
        aFileName: std::string const &

        setInlined(OpenSimObject self, bool aInlined)

        Parameters
        ----------
        aInlined: bool

        """
        return _common.OpenSimObject_setInlined(self, *args)


    def getDocumentFileName(self):
        """
        getDocumentFileName(OpenSimObject self) -> std::string

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(OpenSimObject self) -> int

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_getDocumentFileVersion(self)


    def setAllPropertiesUseDefault(self, aUseDefault):
        """
        setAllPropertiesUseDefault(OpenSimObject self, bool aUseDefault)

        Parameters
        ----------
        aUseDefault: bool

        """
        return _common.OpenSimObject_setAllPropertiesUseDefault(self, aUseDefault)


    def printToXML(self, fileName):
        """
        printToXML(OpenSimObject self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.OpenSimObject_printToXML(self, fileName)


    def dump(self):
        """
        dump(OpenSimObject self) -> std::string

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_dump(self)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.OpenSimObject_getClassName()

    getClassName = staticmethod(getClassName)

    def setSerializeAllDefaults(shouldSerializeDefaults):
        """
        setSerializeAllDefaults(bool shouldSerializeDefaults)

        Parameters
        ----------
        shouldSerializeDefaults: bool

        """
        return _common.OpenSimObject_setSerializeAllDefaults(shouldSerializeDefaults)

    setSerializeAllDefaults = staticmethod(setSerializeAllDefaults)

    def getSerializeAllDefaults():
        """getSerializeAllDefaults() -> bool"""
        return _common.OpenSimObject_getSerializeAllDefaults()

    getSerializeAllDefaults = staticmethod(getSerializeAllDefaults)

    def isKindOf(type):
        """
        isKindOf(char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _common.OpenSimObject_isKindOf(type)

    isKindOf = staticmethod(isKindOf)

    def isA(self, type):
        """
        isA(OpenSimObject self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _common.OpenSimObject_isA(self, type)


    def setDebugLevel(newLevel):
        """
        setDebugLevel(int newLevel)

        Parameters
        ----------
        newLevel: int

        """
        return _common.OpenSimObject_setDebugLevel(newLevel)

    setDebugLevel = staticmethod(setDebugLevel)

    def getDebugLevel():
        """getDebugLevel() -> int"""
        return _common.OpenSimObject_getDebugLevel()

    getDebugLevel = staticmethod(getDebugLevel)

    def toString(self):
        """
        toString(OpenSimObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Object const *

        """
        return _common.OpenSimObject_toString(self)


    def SafeCopy(aObject):
        """
        SafeCopy(OpenSimObject aObject) -> OpenSimObject

        Parameters
        ----------
        aObject: OpenSim::Object const *

        """
        return _common.OpenSimObject_SafeCopy(aObject)

    SafeCopy = staticmethod(SafeCopy)

    def RegisterType(defaultObject):
        """
        RegisterType(OpenSimObject defaultObject)

        Parameters
        ----------
        defaultObject: OpenSim::Object const &

        """
        return _common.OpenSimObject_RegisterType(defaultObject)

    RegisterType = staticmethod(RegisterType)

    def RenameType(oldName, newName):
        """
        RenameType(std::string const & oldName, std::string const & newName)

        Parameters
        ----------
        oldName: std::string const &
        newName: std::string const &

        """
        return _common.OpenSimObject_RenameType(oldName, newName)

    RenameType = staticmethod(RenameType)

    def _markAdopted(self):
        if self.this and self.thisown:
            self.thisown = False

OpenSimObject_swigregister = _common.OpenSimObject_swigregister
OpenSimObject_swigregister(OpenSimObject)
ObjectDEFAULT_NAME = cvar.ObjectDEFAULT_NAME

def OpenSimObject_PrintPropertyInfo(*args):
    """
    PrintPropertyInfo(std::ostream & os, std::string const & classNameDotPropertyName, bool printFlagInfo=True) -> bool

    Parameters
    ----------
    os: std::ostream &
    classNameDotPropertyName: std::string const &
    printFlagInfo: bool

    PrintPropertyInfo(std::ostream & os, std::string const & classNameDotPropertyName) -> bool

    Parameters
    ----------
    os: std::ostream &
    classNameDotPropertyName: std::string const &

    PrintPropertyInfo(std::ostream & os, std::string const & className, std::string const & propertyName, bool printFlagInfo=True) -> bool

    Parameters
    ----------
    os: std::ostream &
    className: std::string const &
    propertyName: std::string const &
    printFlagInfo: bool

    OpenSimObject_PrintPropertyInfo(std::ostream & os, std::string const & className, std::string const & propertyName) -> bool

    Parameters
    ----------
    os: std::ostream &
    className: std::string const &
    propertyName: std::string const &

    """
    return _common.OpenSimObject_PrintPropertyInfo(*args)

def OpenSimObject_registerType(defaultObject):
    """
    OpenSimObject_registerType(OpenSimObject defaultObject)

    Parameters
    ----------
    defaultObject: OpenSim::Object const &

    """
    return _common.OpenSimObject_registerType(defaultObject)

def OpenSimObject_renameType(oldTypeName, newTypeName):
    """
    OpenSimObject_renameType(std::string const & oldTypeName, std::string const & newTypeName)

    Parameters
    ----------
    oldTypeName: std::string const &
    newTypeName: std::string const &

    """
    return _common.OpenSimObject_renameType(oldTypeName, newTypeName)

def OpenSimObject_getDefaultInstanceOfType(concreteClassName):
    """
    OpenSimObject_getDefaultInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

    Parameters
    ----------
    concreteClassName: std::string const &

    """
    return _common.OpenSimObject_getDefaultInstanceOfType(concreteClassName)

def OpenSimObject_newInstanceOfType(concreteClassName):
    """
    OpenSimObject_newInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

    Parameters
    ----------
    concreteClassName: std::string const &

    """
    return _common.OpenSimObject_newInstanceOfType(concreteClassName)

def OpenSimObject_getRegisteredTypenames(typeNames):
    """
    OpenSimObject_getRegisteredTypenames(ArrayStr typeNames)

    Parameters
    ----------
    typeNames: OpenSim::Array< std::string > &

    """
    return _common.OpenSimObject_getRegisteredTypenames(typeNames)

def OpenSimObject_makeObjectFromFile(fileName):
    """
    OpenSimObject_makeObjectFromFile(std::string const & fileName) -> OpenSimObject

    Parameters
    ----------
    fileName: std::string const &

    """
    return _common.OpenSimObject_makeObjectFromFile(fileName)

def OpenSimObject_getClassName():
    """OpenSimObject_getClassName() -> std::string const &"""
    return _common.OpenSimObject_getClassName()

def OpenSimObject_setSerializeAllDefaults(shouldSerializeDefaults):
    """
    OpenSimObject_setSerializeAllDefaults(bool shouldSerializeDefaults)

    Parameters
    ----------
    shouldSerializeDefaults: bool

    """
    return _common.OpenSimObject_setSerializeAllDefaults(shouldSerializeDefaults)

def OpenSimObject_getSerializeAllDefaults():
    """OpenSimObject_getSerializeAllDefaults() -> bool"""
    return _common.OpenSimObject_getSerializeAllDefaults()

def OpenSimObject_isKindOf(type):
    """
    OpenSimObject_isKindOf(char const * type) -> bool

    Parameters
    ----------
    type: char const *

    """
    return _common.OpenSimObject_isKindOf(type)

def OpenSimObject_setDebugLevel(newLevel):
    """
    OpenSimObject_setDebugLevel(int newLevel)

    Parameters
    ----------
    newLevel: int

    """
    return _common.OpenSimObject_setDebugLevel(newLevel)

def OpenSimObject_getDebugLevel():
    """OpenSimObject_getDebugLevel() -> int"""
    return _common.OpenSimObject_getDebugLevel()

def OpenSimObject_SafeCopy(aObject):
    """
    OpenSimObject_SafeCopy(OpenSimObject aObject) -> OpenSimObject

    Parameters
    ----------
    aObject: OpenSim::Object const *

    """
    return _common.OpenSimObject_SafeCopy(aObject)

def OpenSimObject_RegisterType(defaultObject):
    """
    OpenSimObject_RegisterType(OpenSimObject defaultObject)

    Parameters
    ----------
    defaultObject: OpenSim::Object const &

    """
    return _common.OpenSimObject_RegisterType(defaultObject)

def OpenSimObject_RenameType(oldName, newName):
    """
    OpenSimObject_RenameType(std::string const & oldName, std::string const & newName)

    Parameters
    ----------
    oldName: std::string const &
    newName: std::string const &

    """
    return _common.OpenSimObject_RenameType(oldName, newName)

class ObjectGroup(OpenSimObject):
    """Proxy of C++ OpenSim::ObjectGroup class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectGroup, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ObjectGroup

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ObjectGroup_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ObjectGroup self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ObjectGroup_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ObjectGroup_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ObjectGroup self) -> ObjectGroup

        Parameters
        ----------
        self: OpenSim::ObjectGroup const *

        """
        return _common.ObjectGroup_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ObjectGroup self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ObjectGroup const *

        """
        return _common.ObjectGroup_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ObjectGroup self) -> ObjectGroup
        __init__(OpenSim::ObjectGroup self, std::string const & aName) -> ObjectGroup

        Parameters
        ----------
        aName: std::string const &

        __init__(OpenSim::ObjectGroup self, ObjectGroup aGroup) -> ObjectGroup

        Parameters
        ----------
        aGroup: OpenSim::ObjectGroup const &

        """
        this = _common.new_ObjectGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ObjectGroup
    __del__ = lambda self: None

    def copyData(self, aGroup):
        """
        copyData(ObjectGroup self, ObjectGroup aGroup)

        Parameters
        ----------
        aGroup: OpenSim::ObjectGroup const &

        """
        return _common.ObjectGroup_copyData(self, aGroup)


    def contains(self, aName):
        """
        contains(ObjectGroup self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ObjectGroup_contains(self, aName)


    def add(self, aObject):
        """
        add(ObjectGroup self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object const *

        """
        return _common.ObjectGroup_add(self, aObject)


    def remove(self, aObject):
        """
        remove(ObjectGroup self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object const *

        """
        return _common.ObjectGroup_remove(self, aObject)


    def replace(self, aOldObject, aNewObject):
        """
        replace(ObjectGroup self, OpenSimObject aOldObject, OpenSimObject aNewObject)

        Parameters
        ----------
        aOldObject: OpenSim::Object const *
        aNewObject: OpenSim::Object const *

        """
        return _common.ObjectGroup_replace(self, aOldObject, aNewObject)


    def setupGroup(self, aObjects):
        """
        setupGroup(ObjectGroup self, ArrayPtrsObj aObjects)

        Parameters
        ----------
        aObjects: OpenSim::ArrayPtrs< OpenSim::Object > &

        """
        return _common.ObjectGroup_setupGroup(self, aObjects)


    def getMembers(self):
        """
        getMembers(ObjectGroup self) -> ArrayConstObjPtr

        Parameters
        ----------
        self: OpenSim::ObjectGroup const *

        """
        return _common.ObjectGroup_getMembers(self)

ObjectGroup_swigregister = _common.ObjectGroup_swigregister
ObjectGroup_swigregister(ObjectGroup)

def ObjectGroup_safeDownCast(obj):
    """
    ObjectGroup_safeDownCast(OpenSimObject obj) -> ObjectGroup

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ObjectGroup_safeDownCast(obj)

def ObjectGroup_getClassName():
    """ObjectGroup_getClassName() -> std::string const &"""
    return _common.ObjectGroup_getClassName()

class OpenSimObjectSet(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Object,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenSimObjectSet, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenSimObjectSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> OpenSimObjectSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.OpenSimObjectSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(OpenSimObjectSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.OpenSimObjectSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.OpenSimObjectSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(OpenSimObjectSet self) -> OpenSimObjectSet

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Object,OpenSim::Object > const *

        """
        return _common.OpenSimObjectSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(OpenSimObjectSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Object,OpenSim::Object > const *

        """
        return _common.OpenSimObjectSet_getConcreteClassName(self)

    __swig_destroy__ = _common.delete_OpenSimObjectSet
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Object,OpenSim::Object)> self) -> OpenSimObjectSet
        __init__(OpenSim::Set<(OpenSim::Object,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> OpenSimObjectSet

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Object,OpenSim::Object)> self, std::string const & aFileName) -> OpenSimObjectSet

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Object,OpenSim::Object)> self, OpenSimObjectSet aSet) -> OpenSimObjectSet

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Object,OpenSim::Object > const &

        """
        this = _common.new_OpenSimObjectSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(OpenSimObjectSet self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Object,OpenSim::Object > *

        """
        return _common.OpenSimObjectSet_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(OpenSimObjectSet self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.OpenSimObjectSet_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(OpenSimObjectSet self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.OpenSimObjectSet_setSize(self, aSize)


    def getSize(self):
        """
        getSize(OpenSimObjectSet self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Object,OpenSim::Object > const *

        """
        return _common.OpenSimObjectSet_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(OpenSimObjectSet self, OpenSimObject aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Object const *
        aStartIndex: int

        getIndex(OpenSimObjectSet self, OpenSimObject aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Object const *

        getIndex(OpenSimObjectSet self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(OpenSimObjectSet self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.OpenSimObjectSet_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(OpenSimObjectSet self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.OpenSimObjectSet_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(OpenSimObjectSet self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object *

        """
        return _common.OpenSimObjectSet_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(OpenSimObjectSet self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _common.OpenSimObjectSet_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(OpenSimObjectSet self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *

        """
        return _common.OpenSimObjectSet_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(OpenSimObjectSet self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(OpenSimObjectSet self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const *

        """
        return _common.OpenSimObjectSet_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(OpenSimObjectSet self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Object,OpenSim::Object > *

        """
        return _common.OpenSimObjectSet_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(OpenSimObjectSet self, int aIndex, OpenSimObject aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *
        preserveGroups: bool

        set(OpenSimObjectSet self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *

        """
        return _common.OpenSimObjectSet_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(OpenSimObjectSet self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        get(OpenSimObjectSet self, std::string const & aName) -> OpenSimObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.OpenSimObjectSet_get(self, *args)


    def contains(self, aName):
        """
        contains(OpenSimObjectSet self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.OpenSimObjectSet_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(OpenSimObjectSet self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _common.OpenSimObjectSet_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(OpenSimObjectSet self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Object,OpenSim::Object > const *

        """
        return _common.OpenSimObjectSet_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(OpenSimObjectSet self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.OpenSimObjectSet_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(OpenSimObjectSet self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.OpenSimObjectSet_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(OpenSimObjectSet self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _common.OpenSimObjectSet_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(OpenSimObjectSet self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _common.OpenSimObjectSet_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(OpenSimObjectSet self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.OpenSimObjectSet_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(OpenSimObjectSet self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(OpenSimObjectSet self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _common.OpenSimObjectSet_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

OpenSimObjectSet_swigregister = _common.OpenSimObjectSet_swigregister
OpenSimObjectSet_swigregister(OpenSimObjectSet)

def OpenSimObjectSet_safeDownCast(obj):
    """
    OpenSimObjectSet_safeDownCast(OpenSimObject obj) -> OpenSimObjectSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.OpenSimObjectSet_safeDownCast(obj)

def OpenSimObjectSet_getClassName():
    """OpenSimObjectSet_getClassName() -> std::string const &"""
    return _common.OpenSimObjectSet_getClassName()

class StateVector(_object):
    """Proxy of C++ OpenSim::StateVector class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_StateVector
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::StateVector self) -> StateVector
        __init__(OpenSim::StateVector self, StateVector arg2) -> StateVector

        Parameters
        ----------
        arg2: OpenSim::StateVector const &

        __init__(OpenSim::StateVector self, double aT) -> StateVector

        Parameters
        ----------
        aT: double

        __init__(OpenSim::StateVector self, double aT, Vector data) -> StateVector

        Parameters
        ----------
        aT: double
        data: SimTK::Vector_< double > const &

        """
        this = _common.new_StateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setStates(self, aT, data):
        """
        setStates(StateVector self, double aT, Vector data)

        Parameters
        ----------
        aT: double
        data: SimTK::Vector_< double > const &

        """
        return _common.StateVector_setStates(self, aT, data)


    def getSize(self):
        """
        getSize(StateVector self) -> int

        Parameters
        ----------
        self: OpenSim::StateVector const *

        """
        return _common.StateVector_getSize(self)


    def setTime(self, aT):
        """
        setTime(StateVector self, double aT)

        Parameters
        ----------
        aT: double

        """
        return _common.StateVector_setTime(self, aT)


    def getTime(self):
        """
        getTime(StateVector self) -> double

        Parameters
        ----------
        self: OpenSim::StateVector const *

        """
        return _common.StateVector_getTime(self)


    def getDataValue(self, aIndex, rValue):
        """
        getDataValue(StateVector self, int aIndex, double & rValue) -> int

        Parameters
        ----------
        aIndex: int
        rValue: double &

        """
        return _common.StateVector_getDataValue(self, aIndex, rValue)


    def setDataValue(self, aIndex, aValue):
        """
        setDataValue(StateVector self, int aIndex, double & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double &

        """
        return _common.StateVector_setDataValue(self, aIndex, aValue)


    def getData(self):
        """
        getData(StateVector self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::StateVector *

        """
        return _common.StateVector_getData(self)


    def shiftTime(self, aValue):
        """
        shiftTime(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.StateVector_shiftTime(self, aValue)


    def scaleTime(self, aValue):
        """
        scaleTime(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.StateVector_scaleTime(self, aValue)


    def add(self, *args):
        """
        add(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        add(StateVector self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        add(StateVector self, int aN, double aValue)

        Parameters
        ----------
        aN: int
        aValue: double

        add(StateVector self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        """
        return _common.StateVector_add(self, *args)


    def subtract(self, *args):
        """
        subtract(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        subtract(StateVector self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        subtract(StateVector self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        """
        return _common.StateVector_subtract(self, *args)


    def multiply(self, *args):
        """
        multiply(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        multiply(StateVector self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        multiply(StateVector self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        """
        return _common.StateVector_multiply(self, *args)


    def divide(self, *args):
        """
        divide(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        divide(StateVector self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        divide(StateVector self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        """
        return _common.StateVector_divide(self, *args)

StateVector_swigregister = _common.StateVector_swigregister
StateVector_swigregister(StateVector)

class ArrayStateVector(_object):
    """Proxy of C++ OpenSim::Array<(OpenSim::StateVector)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayStateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayStateVector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayStateVector
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(OpenSim::StateVector)> self, StateVector aDefaultValue, int aSize=0, int aCapacity) -> ArrayStateVector

        Parameters
        ----------
        aDefaultValue: OpenSim::StateVector const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(OpenSim::StateVector)> self, StateVector aDefaultValue, int aSize=0) -> ArrayStateVector

        Parameters
        ----------
        aDefaultValue: OpenSim::StateVector const &
        aSize: int

        __init__(OpenSim::Array<(OpenSim::StateVector)> self, StateVector aDefaultValue) -> ArrayStateVector

        Parameters
        ----------
        aDefaultValue: OpenSim::StateVector const &

        __init__(OpenSim::Array<(OpenSim::StateVector)> self) -> ArrayStateVector
        __init__(OpenSim::Array<(OpenSim::StateVector)> self, ArrayStateVector aArray) -> ArrayStateVector

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        """
        this = _common.new_ArrayStateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayStateVector self, ArrayStateVector aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        """
        return _common.ArrayStateVector_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayStateVector self)

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::StateVector > *

        """
        return _common.ArrayStateVector_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayStateVector self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayStateVector_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayStateVector self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::StateVector > const *

        """
        return _common.ArrayStateVector_getSize(self)


    def size(self):
        """
        size(ArrayStateVector self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::StateVector > const *

        """
        return _common.ArrayStateVector_size(self)


    def append(self, *args):
        """
        append(ArrayStateVector self, StateVector aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &

        append(ArrayStateVector self, ArrayStateVector aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        """
        return _common.ArrayStateVector_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayStateVector self, int aIndex, StateVector aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayStateVector self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayStateVector_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayStateVector self, int aIndex, StateVector aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayStateVector self, int aIndex) -> StateVector

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayStateVector_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayStateVector self, int index) -> StateVector

        Parameters
        ----------
        index: int

        """
        return _common.ArrayStateVector_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayStateVector self, int index, StateVector val)

        Parameters
        ----------
        index: int
        val: OpenSim::StateVector

        """
        return _common.ArrayStateVector_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayStateVector self) -> StateVector

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::StateVector > const *

        """
        return _common.ArrayStateVector_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayStateVector self, StateVector aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayStateVector self, StateVector aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayStateVector self, StateVector aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayStateVector self, StateVector aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayStateVector self, StateVector aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &
        aFindFirst: bool

        searchBinary(ArrayStateVector self, StateVector aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayStateVector_swigregister = _common.ArrayStateVector_swigregister
ArrayStateVector_swigregister(ArrayStateVector)

class StorageInterface(OpenSimObject):
    """Proxy of C++ OpenSim::StorageInterface class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StorageInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StorageInterface

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.StorageInterface_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(StorageInterface self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.StorageInterface_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.StorageInterface_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(StorageInterface self) -> StorageInterface

        Parameters
        ----------
        self: OpenSim::StorageInterface const *

        """
        return _common.StorageInterface_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StorageInterface self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::StorageInterface const *

        """
        return _common.StorageInterface_getConcreteClassName(self)

    __swig_destroy__ = _common.delete_StorageInterface
    __del__ = lambda self: None

    def getSize(self):
        """
        getSize(StorageInterface self) -> int

        Parameters
        ----------
        self: OpenSim::StorageInterface const *

        """
        return _common.StorageInterface_getSize(self)


    def getStateVector(self, aTimeIndex):
        """
        getStateVector(StorageInterface self, int aTimeIndex) -> StateVector

        Parameters
        ----------
        aTimeIndex: int

        """
        return _common.StorageInterface_getStateVector(self, aTimeIndex)


    def getLastStateVector(self):
        """
        getLastStateVector(StorageInterface self) -> StateVector

        Parameters
        ----------
        self: OpenSim::StorageInterface const *

        """
        return _common.StorageInterface_getLastStateVector(self)


    def getFirstTime(self):
        """
        getFirstTime(StorageInterface self) -> double

        Parameters
        ----------
        self: OpenSim::StorageInterface const *

        """
        return _common.StorageInterface_getFirstTime(self)


    def getLastTime(self):
        """
        getLastTime(StorageInterface self) -> double

        Parameters
        ----------
        self: OpenSim::StorageInterface const *

        """
        return _common.StorageInterface_getLastTime(self)


    def getTimeColumn(self, rTimes, aStateIndex=-1):
        """
        getTimeColumn(StorageInterface self, ArrayDouble rTimes, int aStateIndex=-1) -> int

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &
        aStateIndex: int

        getTimeColumn(StorageInterface self, ArrayDouble rTimes) -> int

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &

        """
        return _common.StorageInterface_getTimeColumn(self, rTimes, aStateIndex)


    def getTimeColumnWithStartTime(self, rTimes, startTime=0.0):
        """
        getTimeColumnWithStartTime(StorageInterface self, ArrayDouble rTimes, double startTime=0.0)

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &
        startTime: double

        getTimeColumnWithStartTime(StorageInterface self, ArrayDouble rTimes)

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &

        """
        return _common.StorageInterface_getTimeColumnWithStartTime(self, rTimes, startTime)


    def getDataAtTime(self, aTime, aN, rData):
        """
        getDataAtTime(StorageInterface self, double aTime, int aN, ArrayDouble rData) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        rData: OpenSim::Array< double > &

        """
        return _common.StorageInterface_getDataAtTime(self, aTime, aN, rData)


    def getDataColumn(self, columnName, data, startTime=0.0):
        """
        getDataColumn(StorageInterface self, std::string const & columnName, ArrayDouble data, double startTime=0.0)

        Parameters
        ----------
        columnName: std::string const &
        data: OpenSim::Array< double > &
        startTime: double

        getDataColumn(StorageInterface self, std::string const & columnName, ArrayDouble data)

        Parameters
        ----------
        columnName: std::string const &
        data: OpenSim::Array< double > &

        """
        return _common.StorageInterface_getDataColumn(self, columnName, data, startTime)


    def append(self, *args):
        """
        append(StorageInterface self, StateVector aVec, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aVec: OpenSim::StateVector const &
        aCheckForDuplicateTime: bool

        append(StorageInterface self, StateVector aVec) -> int

        Parameters
        ----------
        aVec: OpenSim::StateVector const &

        append(StorageInterface self, ArrayStateVector aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        append(StorageInterface self, double aT, int aN, double const * aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aN: int
        aY: double const *
        aCheckForDuplicateTime: bool

        append(StorageInterface self, double aT, int aN, double const * aY) -> int

        Parameters
        ----------
        aT: double
        aN: int
        aY: double const *

        append(StorageInterface self, double aT, Vector aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vector const &
        aCheckForDuplicateTime: bool

        append(StorageInterface self, double aT, Vector aY) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vector const &

        append(StorageInterface self, double aT, Vec3 aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vec3 const &
        aCheckForDuplicateTime: bool

        append(StorageInterface self, double aT, Vec3 aY) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vec3 const &

        """
        return _common.StorageInterface_append(self, *args)


    def store(self, aStep, aT, aN, aY):
        """
        store(StorageInterface self, int aStep, double aT, int aN, double const * aY) -> int

        Parameters
        ----------
        aStep: int
        aT: double
        aN: int
        aY: double const *

        """
        return _common.StorageInterface_store(self, aStep, aT, aN, aY)


    def findIndex(self, *args):
        """
        findIndex(StorageInterface self, double aT) -> int

        Parameters
        ----------
        aT: double

        findIndex(StorageInterface self, int aI, double aT) -> int

        Parameters
        ----------
        aI: int
        aT: double

        """
        return _common.StorageInterface_findIndex(self, *args)


    def setOutputFileName(self, aFileName):
        """
        setOutputFileName(StorageInterface self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _common.StorageInterface_setOutputFileName(self, aFileName)

StorageInterface_swigregister = _common.StorageInterface_swigregister
StorageInterface_swigregister(StorageInterface)

def StorageInterface_safeDownCast(obj):
    """
    StorageInterface_safeDownCast(OpenSimObject obj) -> StorageInterface

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.StorageInterface_safeDownCast(obj)

def StorageInterface_getClassName():
    """StorageInterface_getClassName() -> std::string const &"""
    return _common.StorageInterface_getClassName()

class Storage(StorageInterface):
    """Proxy of C++ OpenSim::Storage class."""

    __swig_setmethods__ = {}
    for _s in [StorageInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage, name, value)
    __swig_getmethods__ = {}
    for _s in [StorageInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Storage, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Storage

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Storage_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Storage self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Storage_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.Storage_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Storage self) -> Storage

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Storage self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getConcreteClassName(self)

    __swig_setmethods__["DEFAULT_HEADER_TOKEN"] = _common.Storage_DEFAULT_HEADER_TOKEN_set
    __swig_getmethods__["DEFAULT_HEADER_TOKEN"] = _common.Storage_DEFAULT_HEADER_TOKEN_get
    if _newclass:
        DEFAULT_HEADER_TOKEN = _swig_property(_common.Storage_DEFAULT_HEADER_TOKEN_get, _common.Storage_DEFAULT_HEADER_TOKEN_set)
    __swig_setmethods__["DEFAULT_HEADER_SEPARATOR"] = _common.Storage_DEFAULT_HEADER_SEPARATOR_set
    __swig_getmethods__["DEFAULT_HEADER_SEPARATOR"] = _common.Storage_DEFAULT_HEADER_SEPARATOR_get
    if _newclass:
        DEFAULT_HEADER_SEPARATOR = _swig_property(_common.Storage_DEFAULT_HEADER_SEPARATOR_get, _common.Storage_DEFAULT_HEADER_SEPARATOR_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::Storage self, int aCapacity, std::string const & aName) -> Storage

        Parameters
        ----------
        aCapacity: int
        aName: std::string const &

        __init__(OpenSim::Storage self, int aCapacity) -> Storage

        Parameters
        ----------
        aCapacity: int

        __init__(OpenSim::Storage self) -> Storage
        __init__(OpenSim::Storage self, std::string const & aFileName, bool readHeadersOnly=False) -> Storage

        Parameters
        ----------
        aFileName: std::string const &
        readHeadersOnly: bool

        __init__(OpenSim::Storage self, std::string const & aFileName) -> Storage

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Storage self, Storage aStorage, bool aCopyData=True) -> Storage

        Parameters
        ----------
        aStorage: OpenSim::Storage const &
        aCopyData: bool

        __init__(OpenSim::Storage self, Storage aStorage) -> Storage

        Parameters
        ----------
        aStorage: OpenSim::Storage const &

        __init__(OpenSim::Storage self, Storage aStorage, int aStateIndex, int aN, char const * aDelimiter) -> Storage

        Parameters
        ----------
        aStorage: OpenSim::Storage const &
        aStateIndex: int
        aN: int
        aDelimiter: char const *

        __init__(OpenSim::Storage self, Storage aStorage, int aStateIndex, int aN) -> Storage

        Parameters
        ----------
        aStorage: OpenSim::Storage const &
        aStateIndex: int
        aN: int

        """
        this = _common.new_Storage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_Storage
    __del__ = lambda self: None

    def getName(self):
        """
        getName(Storage self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getName(self)


    def getDescription(self):
        """
        getDescription(Storage self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getDescription(self)


    def setName(self, aName):
        """
        setName(Storage self, std::string const & aName)

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.Storage_setName(self, aName)


    def setDescription(self, aDescription):
        """
        setDescription(Storage self, std::string const & aDescription)

        Parameters
        ----------
        aDescription: std::string const &

        """
        return _common.Storage_setDescription(self, aDescription)


    def getLatestVersion():
        """getLatestVersion() -> int const &"""
        return _common.Storage_getLatestVersion()

    getLatestVersion = staticmethod(getLatestVersion)

    def getFileVersion(self):
        """
        getFileVersion(Storage self) -> int const &

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getFileVersion(self)


    def getSize(self):
        """
        getSize(Storage self) -> int

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getSize(self)


    def getSmallestNumberOfStates(self):
        """
        getSmallestNumberOfStates(Storage self) -> int

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getSmallestNumberOfStates(self)


    def getStateVector(self, aTimeIndex):
        """
        getStateVector(Storage self, int aTimeIndex) -> StateVector

        Parameters
        ----------
        aTimeIndex: int

        """
        return _common.Storage_getStateVector(self, aTimeIndex)


    def getLastStateVector(self):
        """
        getLastStateVector(Storage self) -> StateVector

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getLastStateVector(self)


    def getFirstTime(self):
        """
        getFirstTime(Storage self) -> double

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getFirstTime(self)


    def getLastTime(self):
        """
        getLastTime(Storage self) -> double

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getLastTime(self)


    def getMinTimeStep(self):
        """
        getMinTimeStep(Storage self) -> double

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getMinTimeStep(self)


    def getTime(self, aTimeIndex, rTime, aStateIndex=-1):
        """
        getTime(Storage self, int aTimeIndex, double & rTime, int aStateIndex=-1) -> bool

        Parameters
        ----------
        aTimeIndex: int
        rTime: double &
        aStateIndex: int

        getTime(Storage self, int aTimeIndex, double & rTime) -> bool

        Parameters
        ----------
        aTimeIndex: int
        rTime: double &

        """
        return _common.Storage_getTime(self, aTimeIndex, rTime, aStateIndex)


    def getTimeColumn(self, *args):
        """
        getTimeColumn(Storage self, double *& rTimes, int aStateIndex=-1) -> int

        Parameters
        ----------
        rTimes: double *&
        aStateIndex: int

        getTimeColumn(Storage self, double *& rTimes) -> int

        Parameters
        ----------
        rTimes: double *&

        getTimeColumn(Storage self, ArrayDouble rTimes, int aStateIndex=-1) -> int

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &
        aStateIndex: int

        getTimeColumn(Storage self, ArrayDouble rTimes) -> int

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &

        """
        return _common.Storage_getTimeColumn(self, *args)


    def getTimeColumnWithStartTime(self, rTimes, startTime=0.0):
        """
        getTimeColumnWithStartTime(Storage self, ArrayDouble rTimes, double startTime=0.0)

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &
        startTime: double

        getTimeColumnWithStartTime(Storage self, ArrayDouble rTimes)

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &

        """
        return _common.Storage_getTimeColumnWithStartTime(self, rTimes, startTime)


    def addKeyValuePair(self, aKey, aValue):
        """
        addKeyValuePair(Storage self, std::string const & aKey, std::string const & aValue)

        Parameters
        ----------
        aKey: std::string const &
        aValue: std::string const &

        """
        return _common.Storage_addKeyValuePair(self, aKey, aValue)


    def getValueForKey(self, aKey, rValue):
        """
        getValueForKey(Storage self, std::string const & aKey, std::string & rValue)

        Parameters
        ----------
        aKey: std::string const &
        rValue: std::string &

        """
        return _common.Storage_getValueForKey(self, aKey, rValue)


    def hasKey(self, aKey):
        """
        hasKey(Storage self, std::string const & aKey) -> bool

        Parameters
        ----------
        aKey: std::string const &

        """
        return _common.Storage_hasKey(self, aKey)


    def isInDegrees(self):
        """
        isInDegrees(Storage self) -> bool const

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_isInDegrees(self)


    def setInDegrees(self, isInDegrees):
        """
        setInDegrees(Storage self, bool const isInDegrees)

        Parameters
        ----------
        isInDegrees: bool const

        """
        return _common.Storage_setInDegrees(self, isInDegrees)


    def getData(self, *args):
        """
        getData(Storage self, int aTimeIndex, int aStateIndex, double & rValue) -> int

        Parameters
        ----------
        aTimeIndex: int
        aStateIndex: int
        rValue: double &

        getData(Storage self, int aTimeIndex, int aStateIndex, int aN, double ** rData) -> int

        Parameters
        ----------
        aTimeIndex: int
        aStateIndex: int
        aN: int
        rData: double **

        """
        return _common.Storage_getData(self, *args)


    def getDataAtTime(self, *args):
        """
        getDataAtTime(Storage self, double aTime, int aN, double ** rData) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        rData: double **

        getDataAtTime(Storage self, double aTime, int aN, double * rData) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        rData: double *

        getDataAtTime(Storage self, double aTime, int aN, ArrayDouble rData) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        rData: OpenSim::Array< double > &

        getDataAtTime(Storage self, double aTime, int aN, Vector v) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        v: SimTK::Vector &

        """
        return _common.Storage_getDataAtTime(self, *args)


    def setDataColumnToFixedValue(self, columnName, newValue):
        """
        setDataColumnToFixedValue(Storage self, std::string const & columnName, double newValue)

        Parameters
        ----------
        columnName: std::string const &
        newValue: double

        """
        return _common.Storage_setDataColumnToFixedValue(self, columnName, newValue)


    def setDataColumn(self, aStateIndex, aData):
        """
        setDataColumn(Storage self, int aStateIndex, ArrayDouble aData)

        Parameters
        ----------
        aStateIndex: int
        aData: OpenSim::Array< double > const &

        """
        return _common.Storage_setDataColumn(self, aStateIndex, aData)


    def getDataColumn(self, *args):
        """
        getDataColumn(Storage self, int aStateIndex, double *& rData) -> int

        Parameters
        ----------
        aStateIndex: int
        rData: double *&

        getDataColumn(Storage self, int aStateIndex, ArrayDouble rData) -> int

        Parameters
        ----------
        aStateIndex: int
        rData: OpenSim::Array< double > &

        getDataColumn(Storage self, std::string const & columnName, double *& rData) -> int

        Parameters
        ----------
        columnName: std::string const &
        rData: double *&

        getDataColumn(Storage self, std::string const & columnName, ArrayDouble data, double startTime=0.0)

        Parameters
        ----------
        columnName: std::string const &
        data: OpenSim::Array< double > &
        startTime: double

        getDataColumn(Storage self, std::string const & columnName, ArrayDouble data)

        Parameters
        ----------
        columnName: std::string const &
        data: OpenSim::Array< double > &

        """
        return _common.Storage_getDataColumn(self, *args)


    def exportToTable(self):
        """
        exportToTable(Storage self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_exportToTable(self)


    def getColumnIndicesForIdentifier(self, identifier):
        """
        getColumnIndicesForIdentifier(Storage self, std::string const & identifier) -> ArrayInt

        Parameters
        ----------
        identifier: std::string const &

        """
        return _common.Storage_getColumnIndicesForIdentifier(self, identifier)


    def setStepInterval(self, aStepInterval):
        """
        setStepInterval(Storage self, int aStepInterval)

        Parameters
        ----------
        aStepInterval: int

        """
        return _common.Storage_setStepInterval(self, aStepInterval)


    def getStepInterval(self):
        """
        getStepInterval(Storage self) -> int

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getStepInterval(self)


    def setCapacityIncrement(self, aIncrement):
        """
        setCapacityIncrement(Storage self, int aIncrement)

        Parameters
        ----------
        aIncrement: int

        """
        return _common.Storage_setCapacityIncrement(self, aIncrement)


    def getCapacityIncrement(self):
        """
        getCapacityIncrement(Storage self) -> int

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getCapacityIncrement(self)


    def setWriteSIMMHeader(self, aTrueFalse):
        """
        setWriteSIMMHeader(Storage self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.Storage_setWriteSIMMHeader(self, aTrueFalse)


    def getWriteSIMMHeader(self):
        """
        getWriteSIMMHeader(Storage self) -> bool

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getWriteSIMMHeader(self)


    def setHeaderToken(self, aToken):
        """
        setHeaderToken(Storage self, std::string const & aToken)

        Parameters
        ----------
        aToken: std::string const &

        """
        return _common.Storage_setHeaderToken(self, aToken)


    def getHeaderToken(self):
        """
        getHeaderToken(Storage self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getHeaderToken(self)


    def getStateIndex(self, aColumnName, startIndex=0):
        """
        getStateIndex(Storage self, std::string const & aColumnName, int startIndex=0) -> int const

        Parameters
        ----------
        aColumnName: std::string const &
        startIndex: int

        getStateIndex(Storage self, std::string const & aColumnName) -> int const

        Parameters
        ----------
        aColumnName: std::string const &

        """
        return _common.Storage_getStateIndex(self, aColumnName, startIndex)


    def setColumnLabels(self, aColumnLabels):
        """
        setColumnLabels(Storage self, ArrayStr aColumnLabels)

        Parameters
        ----------
        aColumnLabels: OpenSim::Array< std::string > const &

        """
        return _common.Storage_setColumnLabels(self, aColumnLabels)


    def getColumnLabels(self):
        """
        getColumnLabels(Storage self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_getColumnLabels(self)


    def reset(self, *args):
        """
        reset(Storage self, int aIndex=0) -> int

        Parameters
        ----------
        aIndex: int

        reset(Storage self) -> int
        reset(Storage self, double aTime) -> int

        Parameters
        ----------
        aTime: double

        """
        return _common.Storage_reset(self, *args)


    def purge(self):
        """
        purge(Storage self)

        Parameters
        ----------
        self: OpenSim::Storage *

        """
        return _common.Storage_purge(self)


    def crop(self, newStartTime, newFinalTime):
        """
        crop(Storage self, double const newStartTime, double const newFinalTime)

        Parameters
        ----------
        newStartTime: double const
        newFinalTime: double const

        """
        return _common.Storage_crop(self, newStartTime, newFinalTime)


    def append(self, *args):
        """
        append(Storage self, StateVector aVec, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aVec: OpenSim::StateVector const &
        aCheckForDuplicateTime: bool

        append(Storage self, StateVector aVec) -> int

        Parameters
        ----------
        aVec: OpenSim::StateVector const &

        append(Storage self, ArrayStateVector aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        append(Storage self, double aT, int aN, double const * aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aN: int
        aY: double const *
        aCheckForDuplicateTime: bool

        append(Storage self, double aT, int aN, double const * aY) -> int

        Parameters
        ----------
        aT: double
        aN: int
        aY: double const *

        append(Storage self, double aT, Vector aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vector const &
        aCheckForDuplicateTime: bool

        append(Storage self, double aT, Vector aY) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vector const &

        append(Storage self, double aT, ArrayDouble aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: OpenSim::Array< double > const &
        aCheckForDuplicateTime: bool

        append(Storage self, double aT, ArrayDouble aY) -> int

        Parameters
        ----------
        aT: double
        aY: OpenSim::Array< double > const &

        append(Storage self, double aT, Vec3 aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vec3 const &
        aCheckForDuplicateTime: bool

        append(Storage self, double aT, Vec3 aY) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vec3 const &

        """
        return _common.Storage_append(self, *args)


    def store(self, aStep, aT, aN, aY):
        """
        store(Storage self, int aStep, double aT, int aN, double const * aY) -> int

        Parameters
        ----------
        aStep: int
        aT: double
        aN: int
        aY: double const *

        """
        return _common.Storage_store(self, aStep, aT, aN, aY)


    def shiftTime(self, aValue):
        """
        shiftTime(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.Storage_shiftTime(self, aValue)


    def scaleTime(self, aValue):
        """
        scaleTime(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.Storage_scaleTime(self, aValue)


    def add(self, *args):
        """
        add(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        add(Storage self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        add(Storage self, int aN, double aValue)

        Parameters
        ----------
        aN: int
        aValue: double

        add(Storage self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        add(Storage self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage *

        """
        return _common.Storage_add(self, *args)


    def subtract(self, *args):
        """
        subtract(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        subtract(Storage self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        subtract(Storage self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        subtract(Storage self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage *

        """
        return _common.Storage_subtract(self, *args)


    def multiplyColumn(self, aIndex, aValue):
        """
        multiplyColumn(Storage self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.Storage_multiplyColumn(self, aIndex, aValue)


    def multiply(self, *args):
        """
        multiply(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        multiply(Storage self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        multiply(Storage self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        multiply(Storage self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage *

        """
        return _common.Storage_multiply(self, *args)


    def divide(self, *args):
        """
        divide(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        divide(Storage self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        divide(Storage self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        divide(Storage self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage *

        """
        return _common.Storage_divide(self, *args)


    def integrate(self, *args):
        """
        integrate(Storage self, int aI1=-2, int aI2=-1) -> Storage

        Parameters
        ----------
        aI1: int
        aI2: int

        integrate(Storage self, int aI1=-2) -> Storage

        Parameters
        ----------
        aI1: int

        integrate(Storage self) -> Storage
        integrate(Storage self, double aT1, double aT2) -> Storage

        Parameters
        ----------
        aT1: double
        aT2: double

        """
        return _common.Storage_integrate(self, *args)


    def computeArea(self, *args):
        """
        computeArea(Storage self, int aN, double * aArea) -> int

        Parameters
        ----------
        aN: int
        aArea: double *

        computeArea(Storage self, double aTI, double aTF, int aN, double * aArea) -> int

        Parameters
        ----------
        aTI: double
        aTF: double
        aN: int
        aArea: double *

        """
        return _common.Storage_computeArea(self, *args)


    def computeAverage(self, *args):
        """
        computeAverage(Storage self, int aN, double * aAve) -> int

        Parameters
        ----------
        aN: int
        aAve: double *

        computeAverage(Storage self, double aTI, double aTF, int aN, double * aAve) -> int

        Parameters
        ----------
        aTI: double
        aTF: double
        aN: int
        aAve: double *

        """
        return _common.Storage_computeAverage(self, *args)


    def pad(self, aPadSize):
        """
        pad(Storage self, int aPadSize)

        Parameters
        ----------
        aPadSize: int

        """
        return _common.Storage_pad(self, aPadSize)


    def smoothSpline(self, order, cutoffFrequency):
        """
        smoothSpline(Storage self, int order, double cutoffFrequency)

        Parameters
        ----------
        order: int
        cutoffFrequency: double

        """
        return _common.Storage_smoothSpline(self, order, cutoffFrequency)


    def lowpassIIR(self, cutoffFrequency):
        """
        lowpassIIR(Storage self, double cutoffFrequency)

        Parameters
        ----------
        cutoffFrequency: double

        """
        return _common.Storage_lowpassIIR(self, cutoffFrequency)


    def lowpassFIR(self, order, cutoffFrequency):
        """
        lowpassFIR(Storage self, int order, double cutoffFrequency)

        Parameters
        ----------
        order: int
        cutoffFrequency: double

        """
        return _common.Storage_lowpassFIR(self, order, cutoffFrequency)


    def addToRdStorage(self, rStorage, aStartTime, aEndTime):
        """
        addToRdStorage(Storage self, Storage rStorage, double aStartTime, double aEndTime)

        Parameters
        ----------
        rStorage: OpenSim::Storage &
        aStartTime: double
        aEndTime: double

        """
        return _common.Storage_addToRdStorage(self, rStorage, aStartTime, aEndTime)


    def findIndex(self, *args):
        """
        findIndex(Storage self, double aT) -> int

        Parameters
        ----------
        aT: double

        findIndex(Storage self, int aI, double aT) -> int

        Parameters
        ----------
        aI: int
        aT: double

        """
        return _common.Storage_findIndex(self, *args)


    def findFrameRange(self, aStartTime, aEndTime, oStartFrame, oEndFrame):
        """
        findFrameRange(Storage self, double aStartTime, double aEndTime, int & oStartFrame, int & oEndFrame)

        Parameters
        ----------
        aStartTime: double
        aEndTime: double
        oStartFrame: int &
        oEndFrame: int &

        """
        return _common.Storage_findFrameRange(self, aStartTime, aEndTime, oStartFrame, oEndFrame)


    def resample(self, aDT, aDegree):
        """
        resample(Storage self, double aDT, int aDegree) -> double

        Parameters
        ----------
        aDT: double
        aDegree: int

        """
        return _common.Storage_resample(self, aDT, aDegree)


    def resampleLinear(self, aDT):
        """
        resampleLinear(Storage self, double aDT) -> double

        Parameters
        ----------
        aDT: double

        """
        return _common.Storage_resampleLinear(self, aDT)


    def compareColumn(self, aOtherStorage, aColumnName, startTime, endTime=-1.0):
        """
        compareColumn(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime, double endTime=-1.0) -> double

        Parameters
        ----------
        aOtherStorage: OpenSim::Storage &
        aColumnName: std::string const &
        startTime: double
        endTime: double

        compareColumn(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime) -> double

        Parameters
        ----------
        aOtherStorage: OpenSim::Storage &
        aColumnName: std::string const &
        startTime: double

        """
        return _common.Storage_compareColumn(self, aOtherStorage, aColumnName, startTime, endTime)


    def compareColumnRMS(self, *args):
        """
        compareColumnRMS(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime, double endTime) -> double

        Parameters
        ----------
        aOtherStorage: OpenSim::Storage const &
        aColumnName: std::string const &
        startTime: double
        endTime: double

        compareColumnRMS(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime) -> double

        Parameters
        ----------
        aOtherStorage: OpenSim::Storage const &
        aColumnName: std::string const &
        startTime: double

        compareColumnRMS(Storage self, Storage aOtherStorage, std::string const & aColumnName) -> double

        Parameters
        ----------
        aOtherStorage: OpenSim::Storage const &
        aColumnName: std::string const &

        """
        return _common.Storage_compareColumnRMS(self, *args)


    def compareWithStandard(self, standard, columnsUsed, comparisons):
        """
        compareWithStandard(Storage self, Storage standard, StdVectorString columnsUsed, StdVectorDouble comparisons)

        Parameters
        ----------
        standard: OpenSim::Storage const &
        columnsUsed: std::vector< std::string,std::allocator< std::string > > &
        comparisons: std::vector< double,std::allocator< double > > &

        """
        return _common.Storage_compareWithStandard(self, standard, columnsUsed, comparisons)


    def makeStorageLabelsUnique(self):
        """
        makeStorageLabelsUnique(Storage self) -> bool

        Parameters
        ----------
        self: OpenSim::Storage *

        """
        return _common.Storage_makeStorageLabelsUnique(self)


    def storageLabelsAreUnique(self):
        """
        storageLabelsAreUnique(Storage self) -> bool

        Parameters
        ----------
        self: OpenSim::Storage const *

        """
        return _common.Storage_storageLabelsAreUnique(self)


    def printToXML(self, *args):
        """
        printToXML(Storage self, std::string const & aFileName) -> bool

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _common.Storage_printToXML(self, *args)


    def printToFile(self, *args):
        """
        printToFile(Storage self, std::string const & aFileName, std::string const & aMode, std::string const & aComment) -> bool

        Parameters
        ----------
        aFileName: std::string const &
        aMode: std::string const &
        aComment: std::string const &

        printToFile(Storage self, std::string const & aFileName, std::string const & aMode) -> bool

        Parameters
        ----------
        aFileName: std::string const &
        aMode: std::string const &

        printToFile(Storage self, std::string const & aFileName, double aDT, std::string const & aMode) -> int

        Parameters
        ----------
        aFileName: std::string const &
        aDT: double
        aMode: std::string const &

        printToFile(Storage self, std::string const & aFileName, double aDT) -> int

        Parameters
        ----------
        aFileName: std::string const &
        aDT: double

        """
        return _common.Storage_printToFile(self, *args)


    def setOutputFileName(self, aFileName):
        """
        setOutputFileName(Storage self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _common.Storage_setOutputFileName(self, aFileName)


    def printResult(aStorage, aName, aDir, aDT, aExtension):
        """
        printResult(Storage aStorage, std::string const & aName, std::string const & aDir, double aDT, std::string const & aExtension)

        Parameters
        ----------
        aStorage: OpenSim::Storage const *
        aName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        """
        return _common.Storage_printResult(aStorage, aName, aDir, aDT, aExtension)

    printResult = staticmethod(printResult)

    def interpolateAt(self, targetTimes):
        """
        interpolateAt(Storage self, ArrayDouble targetTimes)

        Parameters
        ----------
        targetTimes: OpenSim::Array< double > const &

        """
        return _common.Storage_interpolateAt(self, targetTimes)

Storage_swigregister = _common.Storage_swigregister
Storage_swigregister(Storage)
Storage_DEFAULT_CAPACITY = cvar.Storage_DEFAULT_CAPACITY

def Storage_safeDownCast(obj):
    """
    Storage_safeDownCast(OpenSimObject obj) -> Storage

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.Storage_safeDownCast(obj)

def Storage_getClassName():
    """Storage_getClassName() -> std::string const &"""
    return _common.Storage_getClassName()
Storage.MAX_RESAMPLE_SIZE = _common.cvar.Storage_MAX_RESAMPLE_SIZE

def Storage_getLatestVersion():
    """Storage_getLatestVersion() -> int const &"""
    return _common.Storage_getLatestVersion()

def Storage_printResult(aStorage, aName, aDir, aDT, aExtension):
    """
    Storage_printResult(Storage aStorage, std::string const & aName, std::string const & aDir, double aDT, std::string const & aExtension)

    Parameters
    ----------
    aStorage: OpenSim::Storage const *
    aName: std::string const &
    aDir: std::string const &
    aDT: double
    aExtension: std::string const &

    """
    return _common.Storage_printResult(aStorage, aName, aDir, aDT, aExtension)

class ArrayStorage(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(OpenSim::Storage)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayStorage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayStorage
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(OpenSim::Storage)> self, int aCapacity=1) -> ArrayStorage

        Parameters
        ----------
        aCapacity: int

        __init__(OpenSim::ArrayPtrs<(OpenSim::Storage)> self) -> ArrayStorage
        __init__(OpenSim::ArrayPtrs<(OpenSim::Storage)> self, ArrayStorage aArray) -> ArrayStorage

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Storage > const &

        """
        this = _common.new_ArrayStorage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(ArrayStorage self)

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Storage > *

        """
        return _common.ArrayStorage_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(ArrayStorage self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayStorage_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayStorage self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Storage > const *

        """
        return _common.ArrayStorage_getSize(self)


    def size(self):
        """
        size(ArrayStorage self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Storage > const *

        """
        return _common.ArrayStorage_size(self)


    def getIndex(self, *args):
        """
        getIndex(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT *
        aStartIndex: int

        getIndex(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT * aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT *

        getIndex(ArrayStorage self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(ArrayStorage self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayStorage_getIndex(self, *args)


    def append(self, *args):
        """
        append(ArrayStorage self, Storage aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Storage *

        append(ArrayStorage self, ArrayStorage aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Storage > &

        """
        return _common.ArrayStorage_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(ArrayStorage self, int aIndex, Storage aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Storage *

        """
        return _common.ArrayStorage_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(ArrayStorage self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT *

        """
        return _common.ArrayStorage_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(ArrayStorage self, int aIndex, Storage aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Storage *

        """
        return _common.ArrayStorage_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(ArrayStorage self, int aIndex) -> Storage

        Parameters
        ----------
        aIndex: int

        get(ArrayStorage self, std::string const & aName) -> Storage

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayStorage_get(self, *args)


    def getLast(self):
        """
        getLast(ArrayStorage self) -> Storage

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Storage > const *

        """
        return _common.ArrayStorage_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT & aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT & aObject, bool aFindFirst=False) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT &
        aFindFirst: bool

        searchBinary(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT & aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT &

        """
        return _common.ArrayStorage_searchBinary(self, aObject, aFindFirst, aLo, aHi)

ArrayStorage_swigregister = _common.ArrayStorage_swigregister
ArrayStorage_swigregister(ArrayStorage)

class Units(_object):
    """Proxy of C++ OpenSim::Units class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Units, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Units, name)
    __repr__ = _swig_repr
    UnknownUnits = _common.Units_UnknownUnits
    Radians = _common.Units_Radians
    Degrees = _common.Units_Degrees
    Millimeters = _common.Units_Millimeters
    Centimeters = _common.Units_Centimeters
    Meters = _common.Units_Meters
    Seconds = _common.Units_Seconds
    Milliseconds = _common.Units_Milliseconds
    Newtons = _common.Units_Newtons

    def __init__(self, *args):
        """
        __init__(OpenSim::Units self) -> Units
        __init__(OpenSim::Units self, Units aUnits) -> Units

        Parameters
        ----------
        aUnits: OpenSim::Units const &

        __init__(OpenSim::Units self, std::string const aString) -> Units

        Parameters
        ----------
        aString: std::string const

        __init__(OpenSim::Units self, OpenSim::Units::UnitType aType) -> Units

        Parameters
        ----------
        aType: enum OpenSim::Units::UnitType

        """
        this = _common.new_Units(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_Units
    __del__ = lambda self: None

    def convertTo(self, *args):
        """
        convertTo(Units self, OpenSim::Units::UnitType aType, double aValue) -> double

        Parameters
        ----------
        aType: enum OpenSim::Units::UnitType
        aValue: double

        convertTo(Units self, OpenSim::Units::UnitType aType) -> double

        Parameters
        ----------
        aType: enum OpenSim::Units::UnitType

        convertTo(Units self, Units aUnit) -> double

        Parameters
        ----------
        aUnit: OpenSim::Units const &

        """
        return _common.Units_convertTo(self, *args)


    def getType(self):
        """
        getType(Units self) -> OpenSim::Units::UnitType

        Parameters
        ----------
        self: OpenSim::Units const *

        """
        return _common.Units_getType(self)


    def getLabel(self):
        """
        getLabel(Units self) -> std::string

        Parameters
        ----------
        self: OpenSim::Units const *

        """
        return _common.Units_getLabel(self)


    def getAbbreviation(self):
        """
        getAbbreviation(Units self) -> std::string

        Parameters
        ----------
        self: OpenSim::Units const *

        """
        return _common.Units_getAbbreviation(self)

Units_swigregister = _common.Units_swigregister
Units_swigregister(Units)

class IO(_object):
    """Proxy of C++ OpenSim::IO class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IO, name)
    __repr__ = _swig_repr

    def ConstructDateAndTimeStamp():
        """ConstructDateAndTimeStamp() -> char *"""
        return _common.IO_ConstructDateAndTimeStamp()

    ConstructDateAndTimeStamp = staticmethod(ConstructDateAndTimeStamp)

    def FixSlashesInFilePath(path):
        """
        FixSlashesInFilePath(std::string const & path) -> std::string

        Parameters
        ----------
        path: std::string const &

        """
        return _common.IO_FixSlashesInFilePath(path)

    FixSlashesInFilePath = staticmethod(FixSlashesInFilePath)

    def SetScientific(aTrueFalse):
        """
        SetScientific(bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.IO_SetScientific(aTrueFalse)

    SetScientific = staticmethod(SetScientific)

    def GetScientific():
        """GetScientific() -> bool"""
        return _common.IO_GetScientific()

    GetScientific = staticmethod(GetScientific)

    def SetGFormatForDoubleOutput(aTrueFalse):
        """
        SetGFormatForDoubleOutput(bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.IO_SetGFormatForDoubleOutput(aTrueFalse)

    SetGFormatForDoubleOutput = staticmethod(SetGFormatForDoubleOutput)

    def GetGFormatForDoubleOutput():
        """GetGFormatForDoubleOutput() -> bool"""
        return _common.IO_GetGFormatForDoubleOutput()

    GetGFormatForDoubleOutput = staticmethod(GetGFormatForDoubleOutput)

    def SetDigitsPad(aPad):
        """
        SetDigitsPad(int aPad)

        Parameters
        ----------
        aPad: int

        """
        return _common.IO_SetDigitsPad(aPad)

    SetDigitsPad = staticmethod(SetDigitsPad)

    def GetDigitsPad():
        """GetDigitsPad() -> int"""
        return _common.IO_GetDigitsPad()

    GetDigitsPad = staticmethod(GetDigitsPad)

    def SetPrecision(aPlaces):
        """
        SetPrecision(int aPlaces)

        Parameters
        ----------
        aPlaces: int

        """
        return _common.IO_SetPrecision(aPlaces)

    SetPrecision = staticmethod(SetPrecision)

    def GetPrecision():
        """GetPrecision() -> int"""
        return _common.IO_GetPrecision()

    GetPrecision = staticmethod(GetPrecision)

    def GetDoubleOutputFormat():
        """GetDoubleOutputFormat() -> char const *"""
        return _common.IO_GetDoubleOutputFormat()

    GetDoubleOutputFormat = staticmethod(GetDoubleOutputFormat)

    def SetPrintOfflineDocuments(aTrueFalse):
        """
        SetPrintOfflineDocuments(bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.IO_SetPrintOfflineDocuments(aTrueFalse)

    SetPrintOfflineDocuments = staticmethod(SetPrintOfflineDocuments)

    def GetPrintOfflineDocuments():
        """GetPrintOfflineDocuments() -> bool"""
        return _common.IO_GetPrintOfflineDocuments()

    GetPrintOfflineDocuments = staticmethod(GetPrintOfflineDocuments)

    def makeDir(aDirName):
        """
        makeDir(std::string const & aDirName) -> int

        Parameters
        ----------
        aDirName: std::string const &

        """
        return _common.IO_makeDir(aDirName)

    makeDir = staticmethod(makeDir)

    def chDir(aDirName):
        """
        chDir(std::string const & aDirName) -> int

        Parameters
        ----------
        aDirName: std::string const &

        """
        return _common.IO_chDir(aDirName)

    chDir = staticmethod(chDir)

    def getCwd():
        """getCwd() -> std::string"""
        return _common.IO_getCwd()

    getCwd = staticmethod(getCwd)

    def getParentDirectory(fileName):
        """
        getParentDirectory(std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.IO_getParentDirectory(fileName)

    getParentDirectory = staticmethod(getParentDirectory)

    def GetFileNameFromURI(aURI):
        """
        GetFileNameFromURI(std::string const & aURI) -> std::string

        Parameters
        ----------
        aURI: std::string const &

        """
        return _common.IO_GetFileNameFromURI(aURI)

    GetFileNameFromURI = staticmethod(GetFileNameFromURI)

    def formatText(*args):
        """
        formatText(std::string const & aComment, std::string const & leadingWhitespace, int width, std::string const & endlineTokenToInsert) -> std::string

        Parameters
        ----------
        aComment: std::string const &
        leadingWhitespace: std::string const &
        width: int
        endlineTokenToInsert: std::string const &

        formatText(std::string const & aComment, std::string const & leadingWhitespace, int width) -> std::string

        Parameters
        ----------
        aComment: std::string const &
        leadingWhitespace: std::string const &
        width: int

        """
        return _common.IO_formatText(*args)

    formatText = staticmethod(formatText)

    def GetSuffix(aStr, aLen):
        """
        GetSuffix(std::string const & aStr, int aLen) -> std::string

        Parameters
        ----------
        aStr: std::string const &
        aLen: int

        """
        return _common.IO_GetSuffix(aStr, aLen)

    GetSuffix = staticmethod(GetSuffix)

    def RemoveSuffix(rStr, aLen):
        """
        RemoveSuffix(std::string & rStr, int aLen)

        Parameters
        ----------
        rStr: std::string &
        aLen: int

        """
        return _common.IO_RemoveSuffix(rStr, aLen)

    RemoveSuffix = staticmethod(RemoveSuffix)

    def replaceSubstring(aStr, aFrom, aTo):
        """
        replaceSubstring(std::string const & aStr, std::string const & aFrom, std::string const & aTo) -> std::string

        Parameters
        ----------
        aStr: std::string const &
        aFrom: std::string const &
        aTo: std::string const &

        """
        return _common.IO_replaceSubstring(aStr, aFrom, aTo)

    replaceSubstring = staticmethod(replaceSubstring)

    def TrimLeadingWhitespace(rStr):
        """
        TrimLeadingWhitespace(std::string & rStr)

        Parameters
        ----------
        rStr: std::string &

        """
        return _common.IO_TrimLeadingWhitespace(rStr)

    TrimLeadingWhitespace = staticmethod(TrimLeadingWhitespace)

    def TrimTrailingWhitespace(rStr):
        """
        TrimTrailingWhitespace(std::string & rStr)

        Parameters
        ----------
        rStr: std::string &

        """
        return _common.IO_TrimTrailingWhitespace(rStr)

    TrimTrailingWhitespace = staticmethod(TrimTrailingWhitespace)

    def TrimWhitespace(rStr):
        """
        TrimWhitespace(std::string & rStr)

        Parameters
        ----------
        rStr: std::string &

        """
        return _common.IO_TrimWhitespace(rStr)

    TrimWhitespace = staticmethod(TrimWhitespace)

    def Lowercase(aStr):
        """
        Lowercase(std::string const & aStr) -> std::string

        Parameters
        ----------
        aStr: std::string const &

        """
        return _common.IO_Lowercase(aStr)

    Lowercase = staticmethod(Lowercase)

    def Uppercase(aStr):
        """
        Uppercase(std::string const & aStr) -> std::string

        Parameters
        ----------
        aStr: std::string const &

        """
        return _common.IO_Uppercase(aStr)

    Uppercase = staticmethod(Uppercase)

    def eraseEmptyElements(list):
        """
        eraseEmptyElements(StdVectorString list)

        Parameters
        ----------
        list: std::vector< std::string,std::allocator< std::string > > &

        """
        return _common.IO_eraseEmptyElements(list)

    eraseEmptyElements = staticmethod(eraseEmptyElements)

    def __init__(self):
        """__init__(OpenSim::IO self) -> IO"""
        this = _common.new_IO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IO
    __del__ = lambda self: None
IO_swigregister = _common.IO_swigregister
IO_swigregister(IO)
IO_STRLEN = cvar.IO_STRLEN

def IO_ConstructDateAndTimeStamp():
    """IO_ConstructDateAndTimeStamp() -> char *"""
    return _common.IO_ConstructDateAndTimeStamp()

def IO_FixSlashesInFilePath(path):
    """
    IO_FixSlashesInFilePath(std::string const & path) -> std::string

    Parameters
    ----------
    path: std::string const &

    """
    return _common.IO_FixSlashesInFilePath(path)

def IO_SetScientific(aTrueFalse):
    """
    IO_SetScientific(bool aTrueFalse)

    Parameters
    ----------
    aTrueFalse: bool

    """
    return _common.IO_SetScientific(aTrueFalse)

def IO_GetScientific():
    """IO_GetScientific() -> bool"""
    return _common.IO_GetScientific()

def IO_SetGFormatForDoubleOutput(aTrueFalse):
    """
    IO_SetGFormatForDoubleOutput(bool aTrueFalse)

    Parameters
    ----------
    aTrueFalse: bool

    """
    return _common.IO_SetGFormatForDoubleOutput(aTrueFalse)

def IO_GetGFormatForDoubleOutput():
    """IO_GetGFormatForDoubleOutput() -> bool"""
    return _common.IO_GetGFormatForDoubleOutput()

def IO_SetDigitsPad(aPad):
    """
    IO_SetDigitsPad(int aPad)

    Parameters
    ----------
    aPad: int

    """
    return _common.IO_SetDigitsPad(aPad)

def IO_GetDigitsPad():
    """IO_GetDigitsPad() -> int"""
    return _common.IO_GetDigitsPad()

def IO_SetPrecision(aPlaces):
    """
    IO_SetPrecision(int aPlaces)

    Parameters
    ----------
    aPlaces: int

    """
    return _common.IO_SetPrecision(aPlaces)

def IO_GetPrecision():
    """IO_GetPrecision() -> int"""
    return _common.IO_GetPrecision()

def IO_GetDoubleOutputFormat():
    """IO_GetDoubleOutputFormat() -> char const *"""
    return _common.IO_GetDoubleOutputFormat()

def IO_SetPrintOfflineDocuments(aTrueFalse):
    """
    IO_SetPrintOfflineDocuments(bool aTrueFalse)

    Parameters
    ----------
    aTrueFalse: bool

    """
    return _common.IO_SetPrintOfflineDocuments(aTrueFalse)

def IO_GetPrintOfflineDocuments():
    """IO_GetPrintOfflineDocuments() -> bool"""
    return _common.IO_GetPrintOfflineDocuments()

def IO_makeDir(aDirName):
    """
    IO_makeDir(std::string const & aDirName) -> int

    Parameters
    ----------
    aDirName: std::string const &

    """
    return _common.IO_makeDir(aDirName)

def IO_chDir(aDirName):
    """
    IO_chDir(std::string const & aDirName) -> int

    Parameters
    ----------
    aDirName: std::string const &

    """
    return _common.IO_chDir(aDirName)

def IO_getCwd():
    """IO_getCwd() -> std::string"""
    return _common.IO_getCwd()

def IO_getParentDirectory(fileName):
    """
    IO_getParentDirectory(std::string const & fileName) -> std::string

    Parameters
    ----------
    fileName: std::string const &

    """
    return _common.IO_getParentDirectory(fileName)

def IO_GetFileNameFromURI(aURI):
    """
    IO_GetFileNameFromURI(std::string const & aURI) -> std::string

    Parameters
    ----------
    aURI: std::string const &

    """
    return _common.IO_GetFileNameFromURI(aURI)

def IO_formatText(*args):
    """
    formatText(std::string const & aComment, std::string const & leadingWhitespace, int width, std::string const & endlineTokenToInsert) -> std::string

    Parameters
    ----------
    aComment: std::string const &
    leadingWhitespace: std::string const &
    width: int
    endlineTokenToInsert: std::string const &

    IO_formatText(std::string const & aComment, std::string const & leadingWhitespace, int width) -> std::string

    Parameters
    ----------
    aComment: std::string const &
    leadingWhitespace: std::string const &
    width: int

    """
    return _common.IO_formatText(*args)

def IO_GetSuffix(aStr, aLen):
    """
    IO_GetSuffix(std::string const & aStr, int aLen) -> std::string

    Parameters
    ----------
    aStr: std::string const &
    aLen: int

    """
    return _common.IO_GetSuffix(aStr, aLen)

def IO_RemoveSuffix(rStr, aLen):
    """
    IO_RemoveSuffix(std::string & rStr, int aLen)

    Parameters
    ----------
    rStr: std::string &
    aLen: int

    """
    return _common.IO_RemoveSuffix(rStr, aLen)

def IO_replaceSubstring(aStr, aFrom, aTo):
    """
    IO_replaceSubstring(std::string const & aStr, std::string const & aFrom, std::string const & aTo) -> std::string

    Parameters
    ----------
    aStr: std::string const &
    aFrom: std::string const &
    aTo: std::string const &

    """
    return _common.IO_replaceSubstring(aStr, aFrom, aTo)

def IO_TrimLeadingWhitespace(rStr):
    """
    IO_TrimLeadingWhitespace(std::string & rStr)

    Parameters
    ----------
    rStr: std::string &

    """
    return _common.IO_TrimLeadingWhitespace(rStr)

def IO_TrimTrailingWhitespace(rStr):
    """
    IO_TrimTrailingWhitespace(std::string & rStr)

    Parameters
    ----------
    rStr: std::string &

    """
    return _common.IO_TrimTrailingWhitespace(rStr)

def IO_TrimWhitespace(rStr):
    """
    IO_TrimWhitespace(std::string & rStr)

    Parameters
    ----------
    rStr: std::string &

    """
    return _common.IO_TrimWhitespace(rStr)

def IO_Lowercase(aStr):
    """
    IO_Lowercase(std::string const & aStr) -> std::string

    Parameters
    ----------
    aStr: std::string const &

    """
    return _common.IO_Lowercase(aStr)

def IO_Uppercase(aStr):
    """
    IO_Uppercase(std::string const & aStr) -> std::string

    Parameters
    ----------
    aStr: std::string const &

    """
    return _common.IO_Uppercase(aStr)

def IO_eraseEmptyElements(list):
    """
    IO_eraseEmptyElements(StdVectorString list)

    Parameters
    ----------
    list: std::vector< std::string,std::allocator< std::string > > &

    """
    return _common.IO_eraseEmptyElements(list)

class Function(OpenSimObject):
    """Proxy of C++ OpenSim::Function class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Function

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Function_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Function self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Function_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.Function_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Function self) -> Function

        Parameters
        ----------
        self: OpenSim::Function const *

        """
        return _common.Function_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Function self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Function const *

        """
        return _common.Function_getConcreteClassName(self)

    __swig_destroy__ = _common.delete_Function
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(Function self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.Function_init(self, aFunction)


    def makeFunctionOfType(aFunction, aNewTypeName):
        """
        makeFunctionOfType(Function aFunction, std::string const & aNewTypeName) -> Function

        Parameters
        ----------
        aFunction: OpenSim::Function *
        aNewTypeName: std::string const &

        """
        return _common.Function_makeFunctionOfType(aFunction, aNewTypeName)

    makeFunctionOfType = staticmethod(makeFunctionOfType)

    def calcValue(self, x):
        """
        calcValue(Function self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.Function_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(Function self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.Function_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(Function self) -> int

        Parameters
        ----------
        self: OpenSim::Function const *

        """
        return _common.Function_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(Function self) -> int

        Parameters
        ----------
        self: OpenSim::Function const *

        """
        return _common.Function_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(Function self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::Function const *

        """
        return _common.Function_createSimTKFunction(self)

Function_swigregister = _common.Function_swigregister
Function_swigregister(Function)

def Function_safeDownCast(obj):
    """
    Function_safeDownCast(OpenSimObject obj) -> Function

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.Function_safeDownCast(obj)

def Function_getClassName():
    """Function_getClassName() -> std::string const &"""
    return _common.Function_getClassName()

def Function_makeFunctionOfType(aFunction, aNewTypeName):
    """
    Function_makeFunctionOfType(Function aFunction, std::string const & aNewTypeName) -> Function

    Parameters
    ----------
    aFunction: OpenSim::Function *
    aNewTypeName: std::string const &

    """
    return _common.Function_makeFunctionOfType(aFunction, aNewTypeName)

class SetFunctions(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Function,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetFunctions, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetFunctions, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetFunctions

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.SetFunctions_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetFunctions self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.SetFunctions_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.SetFunctions_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetFunctions self) -> SetFunctions

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Function,OpenSim::Object > const *

        """
        return _common.SetFunctions_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetFunctions self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Function,OpenSim::Object > const *

        """
        return _common.SetFunctions_getConcreteClassName(self)

    __swig_destroy__ = _common.delete_SetFunctions
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Function,OpenSim::Object)> self) -> SetFunctions
        __init__(OpenSim::Set<(OpenSim::Function,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetFunctions

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Function,OpenSim::Object)> self, std::string const & aFileName) -> SetFunctions

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Function,OpenSim::Object)> self, SetFunctions aSet) -> SetFunctions

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Function,OpenSim::Object > const &

        """
        this = _common.new_SetFunctions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetFunctions self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Function,OpenSim::Object > *

        """
        return _common.SetFunctions_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetFunctions self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.SetFunctions_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetFunctions self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.SetFunctions_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetFunctions self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Function,OpenSim::Object > const *

        """
        return _common.SetFunctions_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetFunctions self, Function aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Function const *
        aStartIndex: int

        getIndex(SetFunctions self, Function aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Function const *

        getIndex(SetFunctions self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetFunctions self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetFunctions_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetFunctions self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.SetFunctions_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetFunctions self, Function aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Function *

        """
        return _common.SetFunctions_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetFunctions self, Function aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Function const &

        """
        return _common.SetFunctions_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetFunctions self, int aIndex, Function aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Function *

        """
        return _common.SetFunctions_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetFunctions self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetFunctions self, Function aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Function const *

        """
        return _common.SetFunctions_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetFunctions self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Function,OpenSim::Object > *

        """
        return _common.SetFunctions_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetFunctions self, int aIndex, Function aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Function *
        preserveGroups: bool

        set(SetFunctions self, int aIndex, Function aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Function *

        """
        return _common.SetFunctions_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetFunctions self, int aIndex) -> Function

        Parameters
        ----------
        aIndex: int

        get(SetFunctions self, std::string const & aName) -> Function

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetFunctions_get(self, *args)


    def contains(self, aName):
        """
        contains(SetFunctions self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetFunctions_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetFunctions self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _common.SetFunctions_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetFunctions self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Function,OpenSim::Object > const *

        """
        return _common.SetFunctions_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetFunctions self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.SetFunctions_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetFunctions self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.SetFunctions_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetFunctions self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _common.SetFunctions_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetFunctions self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _common.SetFunctions_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetFunctions self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.SetFunctions_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetFunctions self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetFunctions self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _common.SetFunctions_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetFunctions_swigregister = _common.SetFunctions_swigregister
SetFunctions_swigregister(SetFunctions)

def SetFunctions_safeDownCast(obj):
    """
    SetFunctions_safeDownCast(OpenSimObject obj) -> SetFunctions

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.SetFunctions_safeDownCast(obj)

def SetFunctions_getClassName():
    """SetFunctions_getClassName() -> std::string const &"""
    return _common.SetFunctions_getClassName()

class FunctionSet(SetFunctions):
    """Proxy of C++ OpenSim::FunctionSet class."""

    __swig_setmethods__ = {}
    for _s in [SetFunctions]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetFunctions]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FunctionSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.FunctionSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(FunctionSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.FunctionSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.FunctionSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(FunctionSet self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::FunctionSet const *

        """
        return _common.FunctionSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FunctionSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::FunctionSet const *

        """
        return _common.FunctionSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::FunctionSet self) -> FunctionSet
        __init__(OpenSim::FunctionSet self, std::string const & aFileName) -> FunctionSet

        Parameters
        ----------
        aFileName: std::string const &

        """
        this = _common.new_FunctionSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_FunctionSet
    __del__ = lambda self: None

    def evaluate(self, *args):
        """
        evaluate(FunctionSet self, int aIndex, int aDerivOrder, double aX=0.0) -> double

        Parameters
        ----------
        aIndex: int
        aDerivOrder: int
        aX: double

        evaluate(FunctionSet self, int aIndex, int aDerivOrder) -> double

        Parameters
        ----------
        aIndex: int
        aDerivOrder: int

        evaluate(FunctionSet self, ArrayDouble rValues, int aDerivOrder, double aX=0.0)

        Parameters
        ----------
        rValues: OpenSim::Array< double > &
        aDerivOrder: int
        aX: double

        evaluate(FunctionSet self, ArrayDouble rValues, int aDerivOrder)

        Parameters
        ----------
        rValues: OpenSim::Array< double > &
        aDerivOrder: int

        """
        return _common.FunctionSet_evaluate(self, *args)


    def adoptAndAppend(self, aFunction):
        aFunction._markAdopted()
        return super(FunctionSet, self).adoptAndAppend(aFunction)

FunctionSet_swigregister = _common.FunctionSet_swigregister
FunctionSet_swigregister(FunctionSet)

def FunctionSet_safeDownCast(obj):
    """
    FunctionSet_safeDownCast(OpenSimObject obj) -> FunctionSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.FunctionSet_safeDownCast(obj)

def FunctionSet_getClassName():
    """FunctionSet_getClassName() -> std::string const &"""
    return _common.FunctionSet_getClassName()

class Constant(Function):
    """Proxy of C++ OpenSim::Constant class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Constant

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Constant_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Constant self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Constant_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.Constant_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Constant self) -> Constant

        Parameters
        ----------
        self: OpenSim::Constant const *

        """
        return _common.Constant_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Constant self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Constant const *

        """
        return _common.Constant_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Constant self) -> Constant
        __init__(OpenSim::Constant self, double value) -> Constant

        Parameters
        ----------
        value: double

        __init__(OpenSim::Constant self, Constant aSpline) -> Constant

        Parameters
        ----------
        aSpline: OpenSim::Constant const &

        """
        this = _common.new_Constant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_Constant
    __del__ = lambda self: None

    def setValue(self, aValue):
        """
        setValue(Constant self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.Constant_setValue(self, aValue)


    def calcValue(self, xUnused):
        """
        calcValue(Constant self, Vector xUnused) -> double

        Parameters
        ----------
        xUnused: SimTK::Vector const &

        """
        return _common.Constant_calcValue(self, xUnused)


    def getValue(self):
        """
        getValue(Constant self) -> double const

        Parameters
        ----------
        self: OpenSim::Constant const *

        """
        return _common.Constant_getValue(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(Constant self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::Constant const *

        """
        return _common.Constant_createSimTKFunction(self)

Constant_swigregister = _common.Constant_swigregister
Constant_swigregister(Constant)

def Constant_safeDownCast(obj):
    """
    Constant_safeDownCast(OpenSimObject obj) -> Constant

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.Constant_safeDownCast(obj)

def Constant_getClassName():
    """Constant_getClassName() -> std::string const &"""
    return _common.Constant_getClassName()

class SimmSpline(Function):
    """Proxy of C++ OpenSim::SimmSpline class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimmSpline, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimmSpline, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SimmSpline

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.SimmSpline_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SimmSpline self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.SimmSpline_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.SimmSpline_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SimmSpline self) -> SimmSpline

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SimmSpline self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::SimmSpline self) -> SimmSpline
        __init__(OpenSim::SimmSpline self, int aN, double const * aTimes, double const * aValues, std::string const & aName) -> SimmSpline

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *
        aName: std::string const &

        __init__(OpenSim::SimmSpline self, int aN, double const * aTimes, double const * aValues) -> SimmSpline

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *

        __init__(OpenSim::SimmSpline self, SimmSpline aSpline) -> SimmSpline

        Parameters
        ----------
        aSpline: OpenSim::SimmSpline const &

        """
        this = _common.new_SimmSpline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_SimmSpline
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(SimmSpline self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.SimmSpline_init(self, aFunction)


    def getSize(self):
        """
        getSize(SimmSpline self) -> int

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_getSize(self)


    def getXValues(self):
        """
        getXValues(SimmSpline self) -> double const *

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_getXValues(self)


    def getYValues(self):
        """
        getYValues(SimmSpline self) -> double const *

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_getYValues(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(SimmSpline self) -> int

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_getNumberOfPoints(self)


    def getX(self, *args):
        """
        getX(SimmSpline self) -> ArrayDouble
        getX(SimmSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.SimmSpline_getX(self, *args)


    def getY(self, *args):
        """
        getY(SimmSpline self) -> ArrayDouble
        getY(SimmSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.SimmSpline_getY(self, *args)


    def getZ(self, aIndex):
        """
        getZ(SimmSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.SimmSpline_getZ(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(SimmSpline self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.SimmSpline_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(SimmSpline self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.SimmSpline_setY(self, aIndex, aValue)


    def deletePoint(self, aIndex):
        """
        deletePoint(SimmSpline self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.SimmSpline_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(SimmSpline self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.SimmSpline_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(SimmSpline self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.SimmSpline_addPoint(self, aX, aY)


    def calcValue(self, x):
        """
        calcValue(SimmSpline self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.SimmSpline_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(SimmSpline self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.SimmSpline_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(SimmSpline self) -> int

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(SimmSpline self) -> int

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(SimmSpline self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::SimmSpline const *

        """
        return _common.SimmSpline_createSimTKFunction(self)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(SimmSpline self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(SimmSpline self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _common.SimmSpline_updateFromXMLNode(self, aNode, versionNumber)

SimmSpline_swigregister = _common.SimmSpline_swigregister
SimmSpline_swigregister(SimmSpline)

def SimmSpline_safeDownCast(obj):
    """
    SimmSpline_safeDownCast(OpenSimObject obj) -> SimmSpline

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.SimmSpline_safeDownCast(obj)

def SimmSpline_getClassName():
    """SimmSpline_getClassName() -> std::string const &"""
    return _common.SimmSpline_getClassName()

class StepFunction(Function):
    """Proxy of C++ OpenSim::StepFunction class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StepFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.StepFunction_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(StepFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.StepFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.StepFunction_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(StepFunction self) -> StepFunction

        Parameters
        ----------
        self: OpenSim::StepFunction const *

        """
        return _common.StepFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StepFunction self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::StepFunction const *

        """
        return _common.StepFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::StepFunction self) -> StepFunction
        __init__(OpenSim::StepFunction self, double startTime, double endTime, double startValue=0.0, double endValue=1.0) -> StepFunction

        Parameters
        ----------
        startTime: double
        endTime: double
        startValue: double
        endValue: double

        __init__(OpenSim::StepFunction self, double startTime, double endTime, double startValue=0.0) -> StepFunction

        Parameters
        ----------
        startTime: double
        endTime: double
        startValue: double

        __init__(OpenSim::StepFunction self, double startTime, double endTime) -> StepFunction

        Parameters
        ----------
        startTime: double
        endTime: double

        __init__(OpenSim::StepFunction self, StepFunction aSpline) -> StepFunction

        Parameters
        ----------
        aSpline: OpenSim::StepFunction const &

        """
        this = _common.new_StepFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_StepFunction
    __del__ = lambda self: None

    def setStartTime(self, time):
        """
        setStartTime(StepFunction self, double time)

        Parameters
        ----------
        time: double

        """
        return _common.StepFunction_setStartTime(self, time)


    def getStartTime(self):
        """
        getStartTime(StepFunction self) -> double

        Parameters
        ----------
        self: OpenSim::StepFunction const *

        """
        return _common.StepFunction_getStartTime(self)


    def setEndTime(self, time):
        """
        setEndTime(StepFunction self, double time)

        Parameters
        ----------
        time: double

        """
        return _common.StepFunction_setEndTime(self, time)


    def getEndTime(self):
        """
        getEndTime(StepFunction self) -> double

        Parameters
        ----------
        self: OpenSim::StepFunction const *

        """
        return _common.StepFunction_getEndTime(self)


    def setStartValue(self, start):
        """
        setStartValue(StepFunction self, double start)

        Parameters
        ----------
        start: double

        """
        return _common.StepFunction_setStartValue(self, start)


    def getStartValue(self):
        """
        getStartValue(StepFunction self) -> double

        Parameters
        ----------
        self: OpenSim::StepFunction const *

        """
        return _common.StepFunction_getStartValue(self)


    def setEndValue(self, end):
        """
        setEndValue(StepFunction self, double end)

        Parameters
        ----------
        end: double

        """
        return _common.StepFunction_setEndValue(self, end)


    def getEndValue(self):
        """
        getEndValue(StepFunction self) -> double

        Parameters
        ----------
        self: OpenSim::StepFunction const *

        """
        return _common.StepFunction_getEndValue(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(StepFunction self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::StepFunction const *

        """
        return _common.StepFunction_createSimTKFunction(self)

StepFunction_swigregister = _common.StepFunction_swigregister
StepFunction_swigregister(StepFunction)

def StepFunction_safeDownCast(obj):
    """
    StepFunction_safeDownCast(OpenSimObject obj) -> StepFunction

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.StepFunction_safeDownCast(obj)

def StepFunction_getClassName():
    """StepFunction_getClassName() -> std::string const &"""
    return _common.StepFunction_getClassName()

class PiecewiseConstantFunction(Function):
    """Proxy of C++ OpenSim::PiecewiseConstantFunction class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseConstantFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseConstantFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PiecewiseConstantFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.PiecewiseConstantFunction_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PiecewiseConstantFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.PiecewiseConstantFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.PiecewiseConstantFunction_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PiecewiseConstantFunction self) -> PiecewiseConstantFunction

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PiecewiseConstantFunction self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PiecewiseConstantFunction self) -> PiecewiseConstantFunction
        __init__(OpenSim::PiecewiseConstantFunction self, int aN, double const * aTimes, double const * aValues, std::string const & aName) -> PiecewiseConstantFunction

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *
        aName: std::string const &

        __init__(OpenSim::PiecewiseConstantFunction self, int aN, double const * aTimes, double const * aValues) -> PiecewiseConstantFunction

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *

        __init__(OpenSim::PiecewiseConstantFunction self, PiecewiseConstantFunction aFunction) -> PiecewiseConstantFunction

        Parameters
        ----------
        aFunction: OpenSim::PiecewiseConstantFunction const &

        """
        this = _common.new_PiecewiseConstantFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_PiecewiseConstantFunction
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(PiecewiseConstantFunction self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.PiecewiseConstantFunction_init(self, aFunction)


    def getSize(self):
        """
        getSize(PiecewiseConstantFunction self) -> int

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_getSize(self)


    def getXValues(self):
        """
        getXValues(PiecewiseConstantFunction self) -> double const *

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_getXValues(self)


    def getYValues(self):
        """
        getYValues(PiecewiseConstantFunction self) -> double const *

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_getYValues(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(PiecewiseConstantFunction self) -> int

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_getNumberOfPoints(self)


    def getX(self, *args):
        """
        getX(PiecewiseConstantFunction self) -> ArrayDouble
        getX(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseConstantFunction_getX(self, *args)


    def getY(self, *args):
        """
        getY(PiecewiseConstantFunction self) -> ArrayDouble
        getY(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseConstantFunction_getY(self, *args)


    def getZ(self, aIndex):
        """
        getZ(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseConstantFunction_getZ(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(PiecewiseConstantFunction self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.PiecewiseConstantFunction_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(PiecewiseConstantFunction self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.PiecewiseConstantFunction_setY(self, aIndex, aValue)


    def deletePoint(self, aIndex):
        """
        deletePoint(PiecewiseConstantFunction self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseConstantFunction_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(PiecewiseConstantFunction self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.PiecewiseConstantFunction_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(PiecewiseConstantFunction self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.PiecewiseConstantFunction_addPoint(self, aX, aY)


    def evaluateTotalFirstDerivative(self, aX, aDxdt):
        """
        evaluateTotalFirstDerivative(PiecewiseConstantFunction self, double aX, double aDxdt) -> double

        Parameters
        ----------
        aX: double
        aDxdt: double

        """
        return _common.PiecewiseConstantFunction_evaluateTotalFirstDerivative(self, aX, aDxdt)


    def evaluateTotalSecondDerivative(self, aX, aDxdt, aD2xdt2):
        """
        evaluateTotalSecondDerivative(PiecewiseConstantFunction self, double aX, double aDxdt, double aD2xdt2) -> double

        Parameters
        ----------
        aX: double
        aDxdt: double
        aD2xdt2: double

        """
        return _common.PiecewiseConstantFunction_evaluateTotalSecondDerivative(self, aX, aDxdt, aD2xdt2)


    def calcValue(self, x):
        """
        calcValue(PiecewiseConstantFunction self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.PiecewiseConstantFunction_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(PiecewiseConstantFunction self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.PiecewiseConstantFunction_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(PiecewiseConstantFunction self) -> int

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(PiecewiseConstantFunction self) -> int

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(PiecewiseConstantFunction self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::PiecewiseConstantFunction const *

        """
        return _common.PiecewiseConstantFunction_createSimTKFunction(self)

PiecewiseConstantFunction_swigregister = _common.PiecewiseConstantFunction_swigregister
PiecewiseConstantFunction_swigregister(PiecewiseConstantFunction)

def PiecewiseConstantFunction_safeDownCast(obj):
    """
    PiecewiseConstantFunction_safeDownCast(OpenSimObject obj) -> PiecewiseConstantFunction

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.PiecewiseConstantFunction_safeDownCast(obj)

def PiecewiseConstantFunction_getClassName():
    """PiecewiseConstantFunction_getClassName() -> std::string const &"""
    return _common.PiecewiseConstantFunction_getClassName()

class LinearFunction(Function):
    """Proxy of C++ OpenSim::LinearFunction class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> LinearFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.LinearFunction_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(LinearFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.LinearFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.LinearFunction_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(LinearFunction self) -> LinearFunction

        Parameters
        ----------
        self: OpenSim::LinearFunction const *

        """
        return _common.LinearFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(LinearFunction self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::LinearFunction const *

        """
        return _common.LinearFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::LinearFunction self) -> LinearFunction
        __init__(OpenSim::LinearFunction self, ArrayDouble coefficients) -> LinearFunction

        Parameters
        ----------
        coefficients: OpenSim::Array< double >

        __init__(OpenSim::LinearFunction self, double slope, double intercept) -> LinearFunction

        Parameters
        ----------
        slope: double
        intercept: double

        __init__(OpenSim::LinearFunction self, LinearFunction aSpline) -> LinearFunction

        Parameters
        ----------
        aSpline: OpenSim::LinearFunction const &

        """
        this = _common.new_LinearFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_LinearFunction
    __del__ = lambda self: None

    def setCoefficients(self, coefficients):
        """
        setCoefficients(LinearFunction self, ArrayDouble coefficients)

        Parameters
        ----------
        coefficients: OpenSim::Array< double >

        """
        return _common.LinearFunction_setCoefficients(self, coefficients)


    def setSlope(self, slope):
        """
        setSlope(LinearFunction self, double slope)

        Parameters
        ----------
        slope: double

        """
        return _common.LinearFunction_setSlope(self, slope)


    def setIntercept(self, intercept):
        """
        setIntercept(LinearFunction self, double intercept)

        Parameters
        ----------
        intercept: double

        """
        return _common.LinearFunction_setIntercept(self, intercept)


    def getCoefficients(self):
        """
        getCoefficients(LinearFunction self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::LinearFunction const *

        """
        return _common.LinearFunction_getCoefficients(self)


    def getSlope(self):
        """
        getSlope(LinearFunction self) -> double

        Parameters
        ----------
        self: OpenSim::LinearFunction const *

        """
        return _common.LinearFunction_getSlope(self)


    def getIntercept(self):
        """
        getIntercept(LinearFunction self) -> double

        Parameters
        ----------
        self: OpenSim::LinearFunction const *

        """
        return _common.LinearFunction_getIntercept(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(LinearFunction self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::LinearFunction const *

        """
        return _common.LinearFunction_createSimTKFunction(self)

LinearFunction_swigregister = _common.LinearFunction_swigregister
LinearFunction_swigregister(LinearFunction)

def LinearFunction_safeDownCast(obj):
    """
    LinearFunction_safeDownCast(OpenSimObject obj) -> LinearFunction

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.LinearFunction_safeDownCast(obj)

def LinearFunction_getClassName():
    """LinearFunction_getClassName() -> std::string const &"""
    return _common.LinearFunction_getClassName()

class PiecewiseLinearFunction(Function):
    """Proxy of C++ OpenSim::PiecewiseLinearFunction class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PiecewiseLinearFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.PiecewiseLinearFunction_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PiecewiseLinearFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.PiecewiseLinearFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.PiecewiseLinearFunction_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PiecewiseLinearFunction self) -> PiecewiseLinearFunction

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PiecewiseLinearFunction self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PiecewiseLinearFunction self) -> PiecewiseLinearFunction
        __init__(OpenSim::PiecewiseLinearFunction self, int aN, double const * aTimes, double const * aValues, std::string const & aName) -> PiecewiseLinearFunction

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *
        aName: std::string const &

        __init__(OpenSim::PiecewiseLinearFunction self, int aN, double const * aTimes, double const * aValues) -> PiecewiseLinearFunction

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *

        __init__(OpenSim::PiecewiseLinearFunction self, PiecewiseLinearFunction aFunction) -> PiecewiseLinearFunction

        Parameters
        ----------
        aFunction: OpenSim::PiecewiseLinearFunction const &

        """
        this = _common.new_PiecewiseLinearFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_PiecewiseLinearFunction
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(PiecewiseLinearFunction self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.PiecewiseLinearFunction_init(self, aFunction)


    def getSize(self):
        """
        getSize(PiecewiseLinearFunction self) -> int

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_getSize(self)


    def getXValues(self):
        """
        getXValues(PiecewiseLinearFunction self) -> double const *

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_getXValues(self)


    def getYValues(self):
        """
        getYValues(PiecewiseLinearFunction self) -> double const *

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_getYValues(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(PiecewiseLinearFunction self) -> int

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_getNumberOfPoints(self)


    def getX(self, *args):
        """
        getX(PiecewiseLinearFunction self) -> ArrayDouble
        getX(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseLinearFunction_getX(self, *args)


    def getY(self, *args):
        """
        getY(PiecewiseLinearFunction self) -> ArrayDouble
        getY(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseLinearFunction_getY(self, *args)


    def getZ(self, aIndex):
        """
        getZ(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseLinearFunction_getZ(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(PiecewiseLinearFunction self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.PiecewiseLinearFunction_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(PiecewiseLinearFunction self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.PiecewiseLinearFunction_setY(self, aIndex, aValue)


    def deletePoint(self, aIndex):
        """
        deletePoint(PiecewiseLinearFunction self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseLinearFunction_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(PiecewiseLinearFunction self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.PiecewiseLinearFunction_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(PiecewiseLinearFunction self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.PiecewiseLinearFunction_addPoint(self, aX, aY)


    def calcValue(self, x):
        """
        calcValue(PiecewiseLinearFunction self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.PiecewiseLinearFunction_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(PiecewiseLinearFunction self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.PiecewiseLinearFunction_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(PiecewiseLinearFunction self) -> int

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(PiecewiseLinearFunction self) -> int

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(PiecewiseLinearFunction self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::PiecewiseLinearFunction const *

        """
        return _common.PiecewiseLinearFunction_createSimTKFunction(self)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(PiecewiseLinearFunction self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(PiecewiseLinearFunction self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _common.PiecewiseLinearFunction_updateFromXMLNode(self, aNode, versionNumber)

PiecewiseLinearFunction_swigregister = _common.PiecewiseLinearFunction_swigregister
PiecewiseLinearFunction_swigregister(PiecewiseLinearFunction)

def PiecewiseLinearFunction_safeDownCast(obj):
    """
    PiecewiseLinearFunction_safeDownCast(OpenSimObject obj) -> PiecewiseLinearFunction

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.PiecewiseLinearFunction_safeDownCast(obj)

def PiecewiseLinearFunction_getClassName():
    """PiecewiseLinearFunction_getClassName() -> std::string const &"""
    return _common.PiecewiseLinearFunction_getClassName()

class MultiplierFunction(Function):
    """Proxy of C++ OpenSim::MultiplierFunction class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiplierFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiplierFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MultiplierFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.MultiplierFunction_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MultiplierFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.MultiplierFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.MultiplierFunction_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MultiplierFunction self) -> MultiplierFunction

        Parameters
        ----------
        self: OpenSim::MultiplierFunction const *

        """
        return _common.MultiplierFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MultiplierFunction self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MultiplierFunction const *

        """
        return _common.MultiplierFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MultiplierFunction self) -> MultiplierFunction
        __init__(OpenSim::MultiplierFunction self, Function aFunction) -> MultiplierFunction

        Parameters
        ----------
        aFunction: OpenSim::Function *

        __init__(OpenSim::MultiplierFunction self, Function aFunction, double aScaleFactor) -> MultiplierFunction

        Parameters
        ----------
        aFunction: OpenSim::Function *
        aScaleFactor: double

        __init__(OpenSim::MultiplierFunction self, MultiplierFunction aFunction) -> MultiplierFunction

        Parameters
        ----------
        aFunction: OpenSim::MultiplierFunction const &

        """
        this = _common.new_MultiplierFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_MultiplierFunction
    __del__ = lambda self: None

    def init(self, aFunction):
        """
        init(MultiplierFunction self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.MultiplierFunction_init(self, aFunction)


    def setFunction(self, aFunction):
        """
        setFunction(MultiplierFunction self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.MultiplierFunction_setFunction(self, aFunction)


    def setScale(self, aScaleFactor):
        """
        setScale(MultiplierFunction self, double aScaleFactor)

        Parameters
        ----------
        aScaleFactor: double

        """
        return _common.MultiplierFunction_setScale(self, aScaleFactor)


    def getFunction(self):
        """
        getFunction(MultiplierFunction self) -> Function

        Parameters
        ----------
        self: OpenSim::MultiplierFunction const *

        """
        return _common.MultiplierFunction_getFunction(self)


    def getScale(self):
        """
        getScale(MultiplierFunction self) -> double

        Parameters
        ----------
        self: OpenSim::MultiplierFunction const *

        """
        return _common.MultiplierFunction_getScale(self)


    def calcValue(self, x):
        """
        calcValue(MultiplierFunction self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.MultiplierFunction_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(MultiplierFunction self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.MultiplierFunction_calcDerivative(self, derivComponents, x)


    def getArgumentSize(self):
        """
        getArgumentSize(MultiplierFunction self) -> int

        Parameters
        ----------
        self: OpenSim::MultiplierFunction const *

        """
        return _common.MultiplierFunction_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(MultiplierFunction self) -> int

        Parameters
        ----------
        self: OpenSim::MultiplierFunction const *

        """
        return _common.MultiplierFunction_getMaxDerivativeOrder(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(MultiplierFunction self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::MultiplierFunction const *

        """
        return _common.MultiplierFunction_createSimTKFunction(self)

MultiplierFunction_swigregister = _common.MultiplierFunction_swigregister
MultiplierFunction_swigregister(MultiplierFunction)

def MultiplierFunction_safeDownCast(obj):
    """
    MultiplierFunction_safeDownCast(OpenSimObject obj) -> MultiplierFunction

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.MultiplierFunction_safeDownCast(obj)

def MultiplierFunction_getClassName():
    """MultiplierFunction_getClassName() -> std::string const &"""
    return _common.MultiplierFunction_getClassName()

class GCVSpline(Function):
    """Proxy of C++ OpenSim::GCVSpline class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCVSpline, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCVSpline, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GCVSpline

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.GCVSpline_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(GCVSpline self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.GCVSpline_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.GCVSpline_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(GCVSpline self) -> GCVSpline

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GCVSpline self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::GCVSpline self) -> GCVSpline
        __init__(OpenSim::GCVSpline self, int aDegree, int aN, double const * aX, double const * aF, std::string const & aName, double aErrorVariance=0.0) -> GCVSpline

        Parameters
        ----------
        aDegree: int
        aN: int
        aX: double const *
        aF: double const *
        aName: std::string const &
        aErrorVariance: double

        __init__(OpenSim::GCVSpline self, int aDegree, int aN, double const * aX, double const * aF, std::string const & aName) -> GCVSpline

        Parameters
        ----------
        aDegree: int
        aN: int
        aX: double const *
        aF: double const *
        aName: std::string const &

        __init__(OpenSim::GCVSpline self, int aDegree, int aN, double const * aX, double const * aF) -> GCVSpline

        Parameters
        ----------
        aDegree: int
        aN: int
        aX: double const *
        aF: double const *

        __init__(OpenSim::GCVSpline self, GCVSpline aSpline) -> GCVSpline

        Parameters
        ----------
        aSpline: OpenSim::GCVSpline const &

        """
        this = _common.new_GCVSpline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_GCVSpline
    __del__ = lambda self: None

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(GCVSpline self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(GCVSpline self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _common.GCVSpline_updateFromXMLNode(self, aNode, versionNumber)


    def setDegree(self, aDegree):
        """
        setDegree(GCVSpline self, int aDegree)

        Parameters
        ----------
        aDegree: int

        """
        return _common.GCVSpline_setDegree(self, aDegree)


    def getDegree(self):
        """
        getDegree(GCVSpline self) -> int

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getDegree(self)


    def getOrder(self):
        """
        getOrder(GCVSpline self) -> int

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getOrder(self)


    def getHalfOrder(self):
        """
        getHalfOrder(GCVSpline self) -> int

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getHalfOrder(self)


    def getSize(self):
        """
        getSize(GCVSpline self) -> int

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getSize(self)


    def getXValues(self):
        """
        getXValues(GCVSpline self) -> double const *

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getXValues(self)


    def getYValues(self):
        """
        getYValues(GCVSpline self) -> double const *

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getYValues(self)


    def getCoefficients(self):
        """
        getCoefficients(GCVSpline self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getCoefficients(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(GCVSpline self) -> int

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getNumberOfPoints(self)


    def getX(self, *args):
        """
        getX(GCVSpline self) -> ArrayDouble
        getX(GCVSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSpline_getX(self, *args)


    def getY(self, aIndex):
        """
        getY(GCVSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSpline_getY(self, aIndex)


    def getZ(self, aIndex):
        """
        getZ(GCVSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSpline_getZ(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(GCVSpline self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.GCVSpline_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(GCVSpline self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.GCVSpline_setY(self, aIndex, aValue)


    def getMinX(self):
        """
        getMinX(GCVSpline self) -> double

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getMinX(self)


    def getMaxX(self):
        """
        getMaxX(GCVSpline self) -> double

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_getMaxX(self)


    def deletePoint(self, aIndex):
        """
        deletePoint(GCVSpline self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSpline_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(GCVSpline self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.GCVSpline_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(GCVSpline self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.GCVSpline_addPoint(self, aX, aY)


    def createSimTKFunction(self):
        """
        createSimTKFunction(GCVSpline self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::GCVSpline const *

        """
        return _common.GCVSpline_createSimTKFunction(self)

GCVSpline_swigregister = _common.GCVSpline_swigregister
GCVSpline_swigregister(GCVSpline)

def GCVSpline_safeDownCast(obj):
    """
    GCVSpline_safeDownCast(OpenSimObject obj) -> GCVSpline

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.GCVSpline_safeDownCast(obj)

def GCVSpline_getClassName():
    """GCVSpline_getClassName() -> std::string const &"""
    return _common.GCVSpline_getClassName()

class Sine(Function):
    """Proxy of C++ OpenSim::Sine class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sine, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sine, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Sine

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Sine_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Sine self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Sine_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.Sine_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Sine self) -> Sine

        Parameters
        ----------
        self: OpenSim::Sine const *

        """
        return _common.Sine_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Sine self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Sine const *

        """
        return _common.Sine_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Sine self) -> Sine
        __init__(OpenSim::Sine self, double amplitude, double omega, double phase, double offset=0) -> Sine

        Parameters
        ----------
        amplitude: double
        omega: double
        phase: double
        offset: double

        __init__(OpenSim::Sine self, double amplitude, double omega, double phase) -> Sine

        Parameters
        ----------
        amplitude: double
        omega: double
        phase: double

        """
        this = _common.new_Sine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_Sine
    __del__ = lambda self: None

    def calcValue(self, x):
        """
        calcValue(Sine self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.Sine_calcValue(self, x)


    def calcDerivative(self, derivComponents, x):
        """
        calcDerivative(Sine self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.Sine_calcDerivative(self, derivComponents, x)


    def createSimTKFunction(self):
        """
        createSimTKFunction(Sine self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::Sine const *

        """
        return _common.Sine_createSimTKFunction(self)


    def getArgumentSize(self):
        """
        getArgumentSize(Sine self) -> int

        Parameters
        ----------
        self: OpenSim::Sine const *

        """
        return _common.Sine_getArgumentSize(self)


    def getMaxDerivativeOrder(self):
        """
        getMaxDerivativeOrder(Sine self) -> int

        Parameters
        ----------
        self: OpenSim::Sine const *

        """
        return _common.Sine_getMaxDerivativeOrder(self)

Sine_swigregister = _common.Sine_swigregister
Sine_swigregister(Sine)

def Sine_safeDownCast(obj):
    """
    Sine_safeDownCast(OpenSimObject obj) -> Sine

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.Sine_safeDownCast(obj)

def Sine_getClassName():
    """Sine_getClassName() -> std::string const &"""
    return _common.Sine_getClassName()

class PolynomialFunction(Function):
    """Proxy of C++ OpenSim::PolynomialFunction class."""

    __swig_setmethods__ = {}
    for _s in [Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialFunction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PolynomialFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.PolynomialFunction_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PolynomialFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.PolynomialFunction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.PolynomialFunction_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PolynomialFunction self) -> PolynomialFunction

        Parameters
        ----------
        self: OpenSim::PolynomialFunction const *

        """
        return _common.PolynomialFunction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PolynomialFunction self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PolynomialFunction const *

        """
        return _common.PolynomialFunction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PolynomialFunction self) -> PolynomialFunction
        __init__(OpenSim::PolynomialFunction self, Vector coefficients) -> PolynomialFunction

        Parameters
        ----------
        coefficients: SimTK::Vector

        """
        this = _common.new_PolynomialFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_PolynomialFunction
    __del__ = lambda self: None

    def setCoefficients(self, coefficients):
        """
        setCoefficients(PolynomialFunction self, Vector coefficients)

        Parameters
        ----------
        coefficients: SimTK::Vector

        """
        return _common.PolynomialFunction_setCoefficients(self, coefficients)


    def getCoefficients(self):
        """
        getCoefficients(PolynomialFunction self) -> Vector

        Parameters
        ----------
        self: OpenSim::PolynomialFunction const *

        """
        return _common.PolynomialFunction_getCoefficients(self)


    def createSimTKFunction(self):
        """
        createSimTKFunction(PolynomialFunction self) -> SimTK::Function *

        Parameters
        ----------
        self: OpenSim::PolynomialFunction const *

        """
        return _common.PolynomialFunction_createSimTKFunction(self)

PolynomialFunction_swigregister = _common.PolynomialFunction_swigregister
PolynomialFunction_swigregister(PolynomialFunction)

def PolynomialFunction_safeDownCast(obj):
    """
    PolynomialFunction_safeDownCast(OpenSimObject obj) -> PolynomialFunction

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.PolynomialFunction_safeDownCast(obj)

def PolynomialFunction_getClassName():
    """PolynomialFunction_getClassName() -> std::string const &"""
    return _common.PolynomialFunction_getClassName()

class SmoothSegmentedFunctionFactory(_object):
    """Proxy of C++ OpenSim::SmoothSegmentedFunctionFactory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothSegmentedFunctionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothSegmentedFunctionFactory, name)
    __repr__ = _swig_repr

    def createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName):
        """
        createFiberActiveForceLengthCurve(double lce0, double lce1, double lce2, double lce3, double minActiveForceLengthValue, double plateauSlope, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        lce0: double
        lce1: double
        lce2: double
        lce3: double
        minActiveForceLengthValue: double
        plateauSlope: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName)

    createFiberActiveForceLengthCurve = staticmethod(createFiberActiveForceLengthCurve)

    def createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName):
        """
        createFiberForceVelocityCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        fmaxE: double
        dydxC: double
        dydxNearC: double
        dydxIso: double
        dydxE: double
        dydxNearE: double
        concCurviness: double
        eccCurviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName)

    createFiberForceVelocityCurve = staticmethod(createFiberForceVelocityCurve)

    def createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName):
        """
        createFiberForceVelocityInverseCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & muscleName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        fmaxE: double
        dydxC: double
        dydxNearC: double
        dydxIso: double
        dydxE: double
        dydxNearE: double
        concCurviness: double
        eccCurviness: double
        computeIntegral: bool
        muscleName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName)

    createFiberForceVelocityInverseCurve = staticmethod(createFiberForceVelocityInverseCurve)

    def createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName):
        """
        createFiberCompressiveForcePennationCurve(double phi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        phi0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName)

    createFiberCompressiveForcePennationCurve = staticmethod(createFiberCompressiveForcePennationCurve)

    def createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName):
        """
        createFiberCompressiveForceCosPennationCurve(double cosPhi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        cosPhi0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName)

    createFiberCompressiveForceCosPennationCurve = staticmethod(createFiberCompressiveForceCosPennationCurve)

    def createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName):
        """
        createFiberCompressiveForceLengthCurve(double l0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        l0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName)

    createFiberCompressiveForceLengthCurve = staticmethod(createFiberCompressiveForceLengthCurve)

    def createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName):
        """
        createFiberForceLengthCurve(double eZero, double eIso, double kLow, double kIso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        eZero: double
        eIso: double
        kLow: double
        kIso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName)

    createFiberForceLengthCurve = staticmethod(createFiberForceLengthCurve)

    def createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName):
        """
        createTendonForceLengthCurve(double eIso, double kIso, double fToe, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        eIso: double
        kIso: double
        fToe: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName)

    createTendonForceLengthCurve = staticmethod(createTendonForceLengthCurve)

    def __init__(self):
        """__init__(OpenSim::SmoothSegmentedFunctionFactory self) -> SmoothSegmentedFunctionFactory"""
        this = _common.new_SmoothSegmentedFunctionFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_SmoothSegmentedFunctionFactory
    __del__ = lambda self: None
SmoothSegmentedFunctionFactory_swigregister = _common.SmoothSegmentedFunctionFactory_swigregister
SmoothSegmentedFunctionFactory_swigregister(SmoothSegmentedFunctionFactory)

def SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(double lce0, double lce1, double lce2, double lce3, double minActiveForceLengthValue, double plateauSlope, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters
    ----------
    lce0: double
    lce1: double
    lce2: double
    lce3: double
    minActiveForceLengthValue: double
    plateauSlope: double
    curviness: double
    computeIntegral: bool
    curveName: std::string const &

    """
    return _common.SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters
    ----------
    fmaxE: double
    dydxC: double
    dydxNearC: double
    dydxIso: double
    dydxE: double
    dydxNearE: double
    concCurviness: double
    eccCurviness: double
    computeIntegral: bool
    curveName: std::string const &

    """
    return _common.SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName):
    """
    SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & muscleName) -> SmoothSegmentedFunction *

    Parameters
    ----------
    fmaxE: double
    dydxC: double
    dydxNearC: double
    dydxIso: double
    dydxE: double
    dydxNearE: double
    concCurviness: double
    eccCurviness: double
    computeIntegral: bool
    muscleName: std::string const &

    """
    return _common.SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName)

def SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(double phi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters
    ----------
    phi0: double
    kiso: double
    curviness: double
    computeIntegral: bool
    curveName: std::string const &

    """
    return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(double cosPhi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters
    ----------
    cosPhi0: double
    kiso: double
    curviness: double
    computeIntegral: bool
    curveName: std::string const &

    """
    return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(double l0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters
    ----------
    l0: double
    kiso: double
    curviness: double
    computeIntegral: bool
    curveName: std::string const &

    """
    return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(double eZero, double eIso, double kLow, double kIso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters
    ----------
    eZero: double
    eIso: double
    kLow: double
    kIso: double
    curviness: double
    computeIntegral: bool
    curveName: std::string const &

    """
    return _common.SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName)

def SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName):
    """
    SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(double eIso, double kIso, double fToe, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

    Parameters
    ----------
    eIso: double
    kIso: double
    fToe: double
    curviness: double
    computeIntegral: bool
    curveName: std::string const &

    """
    return _common.SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName)

class SmoothSegmentedFunction(_object):
    """Proxy of C++ OpenSim::SmoothSegmentedFunction class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothSegmentedFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothSegmentedFunction, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::SmoothSegmentedFunction self) -> SmoothSegmentedFunction"""
        this = _common.new_SmoothSegmentedFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calcValue(self, x):
        """
        calcValue(SmoothSegmentedFunction self, double x) -> double

        Parameters
        ----------
        x: double

        """
        return _common.SmoothSegmentedFunction_calcValue(self, x)


    def calcDerivative(self, x, order):
        """
        calcDerivative(SmoothSegmentedFunction self, double x, int order) -> double

        Parameters
        ----------
        x: double
        order: int

        """
        return _common.SmoothSegmentedFunction_calcDerivative(self, x, order)


    def calcIntegral(self, x):
        """
        calcIntegral(SmoothSegmentedFunction self, double x) -> double

        Parameters
        ----------
        x: double

        """
        return _common.SmoothSegmentedFunction_calcIntegral(self, x)


    def isIntegralAvailable(self):
        """
        isIntegralAvailable(SmoothSegmentedFunction self) -> bool

        Parameters
        ----------
        self: OpenSim::SmoothSegmentedFunction const *

        """
        return _common.SmoothSegmentedFunction_isIntegralAvailable(self)


    def isIntegralComputedLeftToRight(self):
        """
        isIntegralComputedLeftToRight(SmoothSegmentedFunction self) -> bool

        Parameters
        ----------
        self: OpenSim::SmoothSegmentedFunction const *

        """
        return _common.SmoothSegmentedFunction_isIntegralComputedLeftToRight(self)


    def getName(self):
        """
        getName(SmoothSegmentedFunction self) -> std::string

        Parameters
        ----------
        self: OpenSim::SmoothSegmentedFunction const *

        """
        return _common.SmoothSegmentedFunction_getName(self)


    def setName(self, name):
        """
        setName(SmoothSegmentedFunction self, std::string & name)

        Parameters
        ----------
        name: std::string &

        """
        return _common.SmoothSegmentedFunction_setName(self, name)


    def getCurveDomain(self):
        """
        getCurveDomain(SmoothSegmentedFunction self) -> Vec2

        Parameters
        ----------
        self: OpenSim::SmoothSegmentedFunction const *

        """
        return _common.SmoothSegmentedFunction_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path, domainMin, domainMax):
        """
        printMuscleCurveToCSVFile(SmoothSegmentedFunction self, std::string const & path, double domainMin, double domainMax)

        Parameters
        ----------
        path: std::string const &
        domainMin: double
        domainMax: double

        """
        return _common.SmoothSegmentedFunction_printMuscleCurveToCSVFile(self, path, domainMin, domainMax)


    def calcSampledMuscleCurve(self, maxOrder, domainMin, domainMax):
        """
        calcSampledMuscleCurve(SmoothSegmentedFunction self, int maxOrder, double domainMin, double domainMax) -> Matrix

        Parameters
        ----------
        maxOrder: int
        domainMin: double
        domainMax: double

        """
        return _common.SmoothSegmentedFunction_calcSampledMuscleCurve(self, maxOrder, domainMin, domainMax)

    __swig_destroy__ = _common.delete_SmoothSegmentedFunction
    __del__ = lambda self: None
SmoothSegmentedFunction_swigregister = _common.SmoothSegmentedFunction_swigregister
SmoothSegmentedFunction_swigregister(SmoothSegmentedFunction)

class XYPoint(_object):
    """Proxy of C++ OpenSim::XYPoint class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_x"] = _common.XYPoint__x_set
    __swig_getmethods__["_x"] = _common.XYPoint__x_get
    if _newclass:
        _x = _swig_property(_common.XYPoint__x_get, _common.XYPoint__x_set)
    __swig_setmethods__["_y"] = _common.XYPoint__y_set
    __swig_getmethods__["_y"] = _common.XYPoint__y_get
    if _newclass:
        _y = _swig_property(_common.XYPoint__y_get, _common.XYPoint__y_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::XYPoint self) -> XYPoint
        __init__(OpenSim::XYPoint self, double aX, double aY) -> XYPoint

        Parameters
        ----------
        aX: double
        aY: double

        """
        this = _common.new_XYPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_XYPoint
    __del__ = lambda self: None
XYPoint_swigregister = _common.XYPoint_swigregister
XYPoint_swigregister(XYPoint)

class XYFunctionInterface(OpenSimObject):
    """Proxy of C++ OpenSim::XYFunctionInterface class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYFunctionInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XYFunctionInterface, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> XYFunctionInterface

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.XYFunctionInterface_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(XYFunctionInterface self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.XYFunctionInterface_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.XYFunctionInterface_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(XYFunctionInterface self) -> XYFunctionInterface

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(XYFunctionInterface self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getConcreteClassName(self)

    typeConstant = _common.XYFunctionInterface_typeConstant
    typeStepFunction = _common.XYFunctionInterface_typeStepFunction
    typePiecewiseConstantFunction = _common.XYFunctionInterface_typePiecewiseConstantFunction
    typePiecewiseLinearFunction = _common.XYFunctionInterface_typePiecewiseLinearFunction
    typeLinearFunction = _common.XYFunctionInterface_typeLinearFunction
    typeNatCubicSpline = _common.XYFunctionInterface_typeNatCubicSpline
    typeGCVSpline = _common.XYFunctionInterface_typeGCVSpline
    typeUndefined = _common.XYFunctionInterface_typeUndefined

    def isXYFunction(f):
        """
        isXYFunction(Function f) -> bool

        Parameters
        ----------
        f: OpenSim::Function *

        """
        return _common.XYFunctionInterface_isXYFunction(f)

    isXYFunction = staticmethod(isXYFunction)

    def __init__(self, f):
        """
        __init__(OpenSim::XYFunctionInterface self, Function f) -> XYFunctionInterface

        Parameters
        ----------
        f: OpenSim::Function *

        """
        this = _common.new_XYFunctionInterface(f)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isSpecifiedByControlPoints(self):
        """
        isSpecifiedByControlPoints(XYFunctionInterface self) -> bool

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_isSpecifiedByControlPoints(self)


    def getNumberOfPoints(self):
        """
        getNumberOfPoints(XYFunctionInterface self) -> int

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getNumberOfPoints(self)


    def getXValues(self):
        """
        getXValues(XYFunctionInterface self) -> double const *

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getXValues(self)


    def getYValues(self):
        """
        getYValues(XYFunctionInterface self) -> double const *

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getYValues(self)


    def getX(self, aIndex):
        """
        getX(XYFunctionInterface self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.XYFunctionInterface_getX(self, aIndex)


    def getY(self, aIndex):
        """
        getY(XYFunctionInterface self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.XYFunctionInterface_getY(self, aIndex)


    def setX(self, aIndex, aValue):
        """
        setX(XYFunctionInterface self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.XYFunctionInterface_setX(self, aIndex, aValue)


    def setY(self, aIndex, aValue):
        """
        setY(XYFunctionInterface self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.XYFunctionInterface_setY(self, aIndex, aValue)


    def deletePoint(self, aIndex):
        """
        deletePoint(XYFunctionInterface self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.XYFunctionInterface_deletePoint(self, aIndex)


    def deletePoints(self, indices):
        """
        deletePoints(XYFunctionInterface self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.XYFunctionInterface_deletePoints(self, indices)


    def addPoint(self, aX, aY):
        """
        addPoint(XYFunctionInterface self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.XYFunctionInterface_addPoint(self, aX, aY)


    def renderAsLineSegments(self, aIndex):
        """
        renderAsLineSegments(XYFunctionInterface self, int aIndex) -> ArrayXYPoint

        Parameters
        ----------
        aIndex: int

        """
        return _common.XYFunctionInterface_renderAsLineSegments(self, aIndex)


    def deleteXYPointArray(aArray):
        """
        deleteXYPointArray(ArrayXYPoint aArray)

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::XYPoint > *

        """
        return _common.XYFunctionInterface_deleteXYPointArray(aArray)

    deleteXYPointArray = staticmethod(deleteXYPointArray)

    def getFunctionType(self):
        """
        getFunctionType(XYFunctionInterface self) -> OpenSim::XYFunctionInterface::FunctionType

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getFunctionType(self)


    def getScale(self):
        """
        getScale(XYFunctionInterface self) -> double

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getScale(self)


    def getConstant(self):
        """
        getConstant(XYFunctionInterface self) -> Constant

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getConstant(self)


    def getStepFunction(self):
        """
        getStepFunction(XYFunctionInterface self) -> StepFunction

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getStepFunction(self)


    def getMultiStepFunction(self):
        """
        getMultiStepFunction(XYFunctionInterface self) -> PiecewiseConstantFunction

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getMultiStepFunction(self)


    def getPiecewiseLinearFunction(self):
        """
        getPiecewiseLinearFunction(XYFunctionInterface self) -> PiecewiseLinearFunction

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getPiecewiseLinearFunction(self)


    def getLinearFunction(self):
        """
        getLinearFunction(XYFunctionInterface self) -> LinearFunction

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getLinearFunction(self)


    def getSimmSpline(self):
        """
        getSimmSpline(XYFunctionInterface self) -> SimmSpline

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getSimmSpline(self)


    def getGCVSpline(self):
        """
        getGCVSpline(XYFunctionInterface self) -> GCVSpline

        Parameters
        ----------
        self: OpenSim::XYFunctionInterface const *

        """
        return _common.XYFunctionInterface_getGCVSpline(self)

    __swig_destroy__ = _common.delete_XYFunctionInterface
    __del__ = lambda self: None
XYFunctionInterface_swigregister = _common.XYFunctionInterface_swigregister
XYFunctionInterface_swigregister(XYFunctionInterface)

def XYFunctionInterface_safeDownCast(obj):
    """
    XYFunctionInterface_safeDownCast(OpenSimObject obj) -> XYFunctionInterface

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.XYFunctionInterface_safeDownCast(obj)

def XYFunctionInterface_getClassName():
    """XYFunctionInterface_getClassName() -> std::string const &"""
    return _common.XYFunctionInterface_getClassName()

def XYFunctionInterface_isXYFunction(f):
    """
    XYFunctionInterface_isXYFunction(Function f) -> bool

    Parameters
    ----------
    f: OpenSim::Function *

    """
    return _common.XYFunctionInterface_isXYFunction(f)

def XYFunctionInterface_deleteXYPointArray(aArray):
    """
    XYFunctionInterface_deleteXYPointArray(ArrayXYPoint aArray)

    Parameters
    ----------
    aArray: OpenSim::Array< OpenSim::XYPoint > *

    """
    return _common.XYFunctionInterface_deleteXYPointArray(aArray)

class ArrayXYPoint(_object):
    """Proxy of C++ OpenSim::Array<(XYPoint)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayXYPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayXYPoint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayXYPoint
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(XYPoint)> self, XYPoint aDefaultValue, int aSize=0, int aCapacity) -> ArrayXYPoint

        Parameters
        ----------
        aDefaultValue: OpenSim::XYPoint const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(XYPoint)> self, XYPoint aDefaultValue, int aSize=0) -> ArrayXYPoint

        Parameters
        ----------
        aDefaultValue: OpenSim::XYPoint const &
        aSize: int

        __init__(OpenSim::Array<(XYPoint)> self, XYPoint aDefaultValue) -> ArrayXYPoint

        Parameters
        ----------
        aDefaultValue: OpenSim::XYPoint const &

        __init__(OpenSim::Array<(XYPoint)> self) -> ArrayXYPoint
        __init__(OpenSim::Array<(XYPoint)> self, ArrayXYPoint aArray) -> ArrayXYPoint

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::XYPoint > const &

        """
        this = _common.new_ArrayXYPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayXYPoint self, ArrayXYPoint aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::XYPoint > const &

        """
        return _common.ArrayXYPoint_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayXYPoint self)

        Parameters
        ----------
        self: OpenSim::Array< XYPoint > *

        """
        return _common.ArrayXYPoint_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayXYPoint self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayXYPoint_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayXYPoint self) -> int

        Parameters
        ----------
        self: OpenSim::Array< XYPoint > const *

        """
        return _common.ArrayXYPoint_getSize(self)


    def size(self):
        """
        size(ArrayXYPoint self) -> int

        Parameters
        ----------
        self: OpenSim::Array< XYPoint > const *

        """
        return _common.ArrayXYPoint_size(self)


    def append(self, *args):
        """
        append(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &

        append(ArrayXYPoint self, ArrayXYPoint aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::XYPoint > const &

        """
        return _common.ArrayXYPoint_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayXYPoint self, int aIndex, XYPoint aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayXYPoint self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayXYPoint_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayXYPoint self, int aIndex, XYPoint aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayXYPoint self, int aIndex) -> XYPoint

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayXYPoint_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayXYPoint self, int index) -> XYPoint

        Parameters
        ----------
        index: int

        """
        return _common.ArrayXYPoint_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayXYPoint self, int index, XYPoint val)

        Parameters
        ----------
        index: int
        val: OpenSim::XYPoint

        """
        return _common.ArrayXYPoint_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayXYPoint self) -> XYPoint

        Parameters
        ----------
        self: OpenSim::Array< XYPoint > const *

        """
        return _common.ArrayXYPoint_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayXYPoint self, XYPoint aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayXYPoint self, XYPoint aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayXYPoint self, XYPoint aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &
        aFindFirst: bool

        searchBinary(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayXYPoint_swigregister = _common.ArrayXYPoint_swigregister
ArrayXYPoint_swigregister(ArrayXYPoint)

class ArrayBool(_object):
    """Proxy of C++ OpenSim::Array<(bool)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayBool, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayBool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(bool)> self, bool const & aDefaultValue, int aSize=0, int aCapacity) -> ArrayBool

        Parameters
        ----------
        aDefaultValue: bool const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(bool)> self, bool const & aDefaultValue, int aSize=0) -> ArrayBool

        Parameters
        ----------
        aDefaultValue: bool const &
        aSize: int

        __init__(OpenSim::Array<(bool)> self, bool const & aDefaultValue) -> ArrayBool

        Parameters
        ----------
        aDefaultValue: bool const &

        __init__(OpenSim::Array<(bool)> self) -> ArrayBool
        __init__(OpenSim::Array<(bool)> self, ArrayBool aArray) -> ArrayBool

        Parameters
        ----------
        aArray: OpenSim::Array< bool > const &

        """
        this = _common.new_ArrayBool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayBool self, ArrayBool aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< bool > const &

        """
        return _common.ArrayBool_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayBool self)

        Parameters
        ----------
        self: OpenSim::Array< bool > *

        """
        return _common.ArrayBool_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayBool self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayBool_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayBool self) -> int

        Parameters
        ----------
        self: OpenSim::Array< bool > const *

        """
        return _common.ArrayBool_getSize(self)


    def size(self):
        """
        size(ArrayBool self) -> int

        Parameters
        ----------
        self: OpenSim::Array< bool > const *

        """
        return _common.ArrayBool_size(self)


    def append(self, *args):
        """
        append(ArrayBool self, bool const & aValue) -> int

        Parameters
        ----------
        aValue: bool const &

        append(ArrayBool self, ArrayBool aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< bool > const &

        """
        return _common.ArrayBool_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayBool self, int aIndex, bool const & aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: bool const &

        """
        return _common.ArrayBool_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayBool self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayBool_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayBool self, int aIndex, bool const & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: bool const &

        """
        return _common.ArrayBool_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayBool self, int aIndex) -> bool const &

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayBool_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayBool self, int index) -> bool

        Parameters
        ----------
        index: int

        """
        return _common.ArrayBool_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayBool self, int index, bool val)

        Parameters
        ----------
        index: int
        val: bool

        """
        return _common.ArrayBool_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayBool self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Array< bool > const *

        """
        return _common.ArrayBool_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayBool self, bool const & aValue) -> int

        Parameters
        ----------
        aValue: bool const &

        """
        return _common.ArrayBool_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayBool self, bool const & aValue) -> int

        Parameters
        ----------
        aValue: bool const &

        """
        return _common.ArrayBool_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayBool self, bool const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: bool const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayBool self, bool const & aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: bool const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayBool self, bool const & aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: bool const &
        aFindFirst: bool

        searchBinary(ArrayBool self, bool const & aValue) -> int

        Parameters
        ----------
        aValue: bool const &

        """
        return _common.ArrayBool_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayBool_swigregister = _common.ArrayBool_swigregister
ArrayBool_swigregister(ArrayBool)

class ArrayDouble(_object):
    """Proxy of C++ OpenSim::Array<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayDouble, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayDouble
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(double)> self, double const & aDefaultValue, int aSize=0, int aCapacity) -> ArrayDouble

        Parameters
        ----------
        aDefaultValue: double const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(double)> self, double const & aDefaultValue, int aSize=0) -> ArrayDouble

        Parameters
        ----------
        aDefaultValue: double const &
        aSize: int

        __init__(OpenSim::Array<(double)> self, double const & aDefaultValue) -> ArrayDouble

        Parameters
        ----------
        aDefaultValue: double const &

        __init__(OpenSim::Array<(double)> self) -> ArrayDouble
        __init__(OpenSim::Array<(double)> self, ArrayDouble aArray) -> ArrayDouble

        Parameters
        ----------
        aArray: OpenSim::Array< double > const &

        """
        this = _common.new_ArrayDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayDouble self, ArrayDouble aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< double > const &

        """
        return _common.ArrayDouble_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayDouble self)

        Parameters
        ----------
        self: OpenSim::Array< double > *

        """
        return _common.ArrayDouble_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayDouble self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayDouble_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayDouble self) -> int

        Parameters
        ----------
        self: OpenSim::Array< double > const *

        """
        return _common.ArrayDouble_getSize(self)


    def size(self):
        """
        size(ArrayDouble self) -> int

        Parameters
        ----------
        self: OpenSim::Array< double > const *

        """
        return _common.ArrayDouble_size(self)


    def append(self, *args):
        """
        append(ArrayDouble self, double const & aValue) -> int

        Parameters
        ----------
        aValue: double const &

        append(ArrayDouble self, ArrayDouble aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< double > const &

        """
        return _common.ArrayDouble_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayDouble self, int aIndex, double const & aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: double const &

        """
        return _common.ArrayDouble_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayDouble self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayDouble_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayDouble self, int aIndex, double const & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double const &

        """
        return _common.ArrayDouble_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayDouble self, int aIndex) -> double const &

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayDouble_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayDouble self, int index) -> double

        Parameters
        ----------
        index: int

        """
        return _common.ArrayDouble_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayDouble self, int index, double val)

        Parameters
        ----------
        index: int
        val: double

        """
        return _common.ArrayDouble_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayDouble self) -> double const &

        Parameters
        ----------
        self: OpenSim::Array< double > const *

        """
        return _common.ArrayDouble_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayDouble self, double const & aValue) -> int

        Parameters
        ----------
        aValue: double const &

        """
        return _common.ArrayDouble_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayDouble self, double const & aValue) -> int

        Parameters
        ----------
        aValue: double const &

        """
        return _common.ArrayDouble_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayDouble self, double const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: double const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayDouble self, double const & aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: double const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayDouble self, double const & aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: double const &
        aFindFirst: bool

        searchBinary(ArrayDouble self, double const & aValue) -> int

        Parameters
        ----------
        aValue: double const &

        """
        return _common.ArrayDouble_searchBinary(self, aValue, aFindFirst, aLo, aHi)


    def appendVec3(self, vec3):
        """
        appendVec3(ArrayDouble self, Vec3 vec3)

        Parameters
        ----------
        vec3: SimTK::Vec3

        """
        return _common.ArrayDouble_appendVec3(self, vec3)


    def appendVector(self, vec):
        """
        appendVector(ArrayDouble self, Vector vec)

        Parameters
        ----------
        vec: SimTK::Vector

        """
        return _common.ArrayDouble_appendVector(self, vec)


    def getAsVec3(self):
        """
        getAsVec3(ArrayDouble self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Array< double > *

        """
        return _common.ArrayDouble_getAsVec3(self)


    def createVec3(*args):
        """
        createVec3(double e1, double e2, double e3) -> Vec3

        Parameters
        ----------
        e1: double
        e2: double
        e3: double

        createVec3(double e1) -> Vec3

        Parameters
        ----------
        e1: double

        createVec3(double [3] es) -> Vec3

        Parameters
        ----------
        es: double [3]

        """
        return _common.ArrayDouble_createVec3(*args)

    createVec3 = staticmethod(createVec3)

    def getAsVector(self):
        """
        getAsVector(ArrayDouble self) -> Vector

        Parameters
        ----------
        self: OpenSim::Array< double > *

        """
        return _common.ArrayDouble_getAsVector(self)


    def populateFromVector(self, aVector):
        """
        populateFromVector(ArrayDouble self, Vector aVector)

        Parameters
        ----------
        aVector: SimTK::Vector_< double >

        """
        return _common.ArrayDouble_populateFromVector(self, aVector)


    def getValuesFromVec3(vec3):
        """
        getValuesFromVec3(Vec3 vec3) -> ArrayDouble

        Parameters
        ----------
        vec3: SimTK::Vec3

        """
        return _common.ArrayDouble_getValuesFromVec3(vec3)

    getValuesFromVec3 = staticmethod(getValuesFromVec3)

    def toString(self):
        """
        toString(ArrayDouble self) -> std::string

        Parameters
        ----------
        self: OpenSim::Array< double > const *

        """
        return _common.ArrayDouble_toString(self)


    def setFromPyArray(self, dValues, size):
        """
        setFromPyArray(ArrayDouble self, double * dValues, int size)

        Parameters
        ----------
        dValues: double *
        size: int

        """
        return _common.ArrayDouble_setFromPyArray(self, dValues, size)

ArrayDouble_swigregister = _common.ArrayDouble_swigregister
ArrayDouble_swigregister(ArrayDouble)

def ArrayDouble_createVec3(*args):
    """
    createVec3(double e1, double e2, double e3) -> Vec3

    Parameters
    ----------
    e1: double
    e2: double
    e3: double

    createVec3(double e1) -> Vec3

    Parameters
    ----------
    e1: double

    ArrayDouble_createVec3(double [3] es) -> Vec3

    Parameters
    ----------
    es: double [3]

    """
    return _common.ArrayDouble_createVec3(*args)

def ArrayDouble_getValuesFromVec3(vec3):
    """
    ArrayDouble_getValuesFromVec3(Vec3 vec3) -> ArrayDouble

    Parameters
    ----------
    vec3: SimTK::Vec3

    """
    return _common.ArrayDouble_getValuesFromVec3(vec3)

class ArrayInt(_object):
    """Proxy of C++ OpenSim::Array<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayInt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayInt
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(int)> self, int const & aDefaultValue, int aSize=0, int aCapacity) -> ArrayInt

        Parameters
        ----------
        aDefaultValue: int const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(int)> self, int const & aDefaultValue, int aSize=0) -> ArrayInt

        Parameters
        ----------
        aDefaultValue: int const &
        aSize: int

        __init__(OpenSim::Array<(int)> self, int const & aDefaultValue) -> ArrayInt

        Parameters
        ----------
        aDefaultValue: int const &

        __init__(OpenSim::Array<(int)> self) -> ArrayInt
        __init__(OpenSim::Array<(int)> self, ArrayInt aArray) -> ArrayInt

        Parameters
        ----------
        aArray: OpenSim::Array< int > const &

        """
        this = _common.new_ArrayInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayInt self, ArrayInt aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< int > const &

        """
        return _common.ArrayInt_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayInt self)

        Parameters
        ----------
        self: OpenSim::Array< int > *

        """
        return _common.ArrayInt_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayInt self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayInt_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayInt self) -> int

        Parameters
        ----------
        self: OpenSim::Array< int > const *

        """
        return _common.ArrayInt_getSize(self)


    def size(self):
        """
        size(ArrayInt self) -> int

        Parameters
        ----------
        self: OpenSim::Array< int > const *

        """
        return _common.ArrayInt_size(self)


    def append(self, *args):
        """
        append(ArrayInt self, int const & aValue) -> int

        Parameters
        ----------
        aValue: int const &

        append(ArrayInt self, ArrayInt aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< int > const &

        """
        return _common.ArrayInt_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayInt self, int aIndex, int const & aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: int const &

        """
        return _common.ArrayInt_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayInt self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayInt_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayInt self, int aIndex, int const & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: int const &

        """
        return _common.ArrayInt_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayInt self, int aIndex) -> int const &

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayInt_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayInt self, int index) -> int

        Parameters
        ----------
        index: int

        """
        return _common.ArrayInt_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayInt self, int index, int val)

        Parameters
        ----------
        index: int
        val: int

        """
        return _common.ArrayInt_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayInt self) -> int const &

        Parameters
        ----------
        self: OpenSim::Array< int > const *

        """
        return _common.ArrayInt_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayInt self, int const & aValue) -> int

        Parameters
        ----------
        aValue: int const &

        """
        return _common.ArrayInt_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayInt self, int const & aValue) -> int

        Parameters
        ----------
        aValue: int const &

        """
        return _common.ArrayInt_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayInt self, int const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: int const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayInt self, int const & aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: int const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayInt self, int const & aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: int const &
        aFindFirst: bool

        searchBinary(ArrayInt self, int const & aValue) -> int

        Parameters
        ----------
        aValue: int const &

        """
        return _common.ArrayInt_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayInt_swigregister = _common.ArrayInt_swigregister
ArrayInt_swigregister(ArrayInt)

class ArrayStr(_object):
    """Proxy of C++ OpenSim::Array<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayStr, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayStr
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(std::string)> self, std::string const & aDefaultValue, int aSize=0, int aCapacity) -> ArrayStr

        Parameters
        ----------
        aDefaultValue: std::string const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(std::string)> self, std::string const & aDefaultValue, int aSize=0) -> ArrayStr

        Parameters
        ----------
        aDefaultValue: std::string const &
        aSize: int

        __init__(OpenSim::Array<(std::string)> self, std::string const & aDefaultValue) -> ArrayStr

        Parameters
        ----------
        aDefaultValue: std::string const &

        __init__(OpenSim::Array<(std::string)> self) -> ArrayStr
        __init__(OpenSim::Array<(std::string)> self, ArrayStr aArray) -> ArrayStr

        Parameters
        ----------
        aArray: OpenSim::Array< std::string > const &

        """
        this = _common.new_ArrayStr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayStr self, ArrayStr aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< std::string > const &

        """
        return _common.ArrayStr_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayStr self)

        Parameters
        ----------
        self: OpenSim::Array< std::string > *

        """
        return _common.ArrayStr_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayStr self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayStr_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayStr self) -> int

        Parameters
        ----------
        self: OpenSim::Array< std::string > const *

        """
        return _common.ArrayStr_getSize(self)


    def size(self):
        """
        size(ArrayStr self) -> int

        Parameters
        ----------
        self: OpenSim::Array< std::string > const *

        """
        return _common.ArrayStr_size(self)


    def append(self, *args):
        """
        append(ArrayStr self, std::string const & aValue) -> int

        Parameters
        ----------
        aValue: std::string const &

        append(ArrayStr self, ArrayStr aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< std::string > const &

        """
        return _common.ArrayStr_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayStr self, int aIndex, std::string const & aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: std::string const &

        """
        return _common.ArrayStr_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayStr self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayStr_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayStr self, int aIndex, std::string const & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: std::string const &

        """
        return _common.ArrayStr_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayStr self, int aIndex) -> std::string const &

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayStr_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayStr self, int index) -> std::string

        Parameters
        ----------
        index: int

        """
        return _common.ArrayStr_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayStr self, int index, std::string val)

        Parameters
        ----------
        index: int
        val: std::string

        """
        return _common.ArrayStr_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayStr self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Array< std::string > const *

        """
        return _common.ArrayStr_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayStr self, std::string const & aValue) -> int

        Parameters
        ----------
        aValue: std::string const &

        """
        return _common.ArrayStr_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayStr self, std::string const & aValue) -> int

        Parameters
        ----------
        aValue: std::string const &

        """
        return _common.ArrayStr_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayStr self, std::string const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: std::string const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayStr self, std::string const & aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: std::string const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayStr self, std::string const & aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: std::string const &
        aFindFirst: bool

        searchBinary(ArrayStr self, std::string const & aValue) -> int

        Parameters
        ----------
        aValue: std::string const &

        """
        return _common.ArrayStr_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayStr_swigregister = _common.ArrayStr_swigregister
ArrayStr_swigregister(ArrayStr)

class ArrayVec3(_object):
    """Proxy of C++ OpenSim::Array<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayVec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayVec3, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayVec3
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(SimTK::Vec3)> self, Vec3 aDefaultValue, int aSize=0, int aCapacity) -> ArrayVec3

        Parameters
        ----------
        aDefaultValue: SimTK::Vec< 3,double,1 > const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(SimTK::Vec3)> self, Vec3 aDefaultValue, int aSize=0) -> ArrayVec3

        Parameters
        ----------
        aDefaultValue: SimTK::Vec< 3,double,1 > const &
        aSize: int

        __init__(OpenSim::Array<(SimTK::Vec3)> self, Vec3 aDefaultValue) -> ArrayVec3

        Parameters
        ----------
        aDefaultValue: SimTK::Vec< 3,double,1 > const &

        __init__(OpenSim::Array<(SimTK::Vec3)> self) -> ArrayVec3
        __init__(OpenSim::Array<(SimTK::Vec3)> self, ArrayVec3 aArray) -> ArrayVec3

        Parameters
        ----------
        aArray: OpenSim::Array< SimTK::Vec< 3,double,1 > > const &

        """
        this = _common.new_ArrayVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayVec3 self, ArrayVec3 aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< SimTK::Vec< 3,double,1 > > const &

        """
        return _common.ArrayVec3_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayVec3 self)

        Parameters
        ----------
        self: OpenSim::Array< SimTK::Vec3 > *

        """
        return _common.ArrayVec3_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayVec3 self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayVec3_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayVec3 self) -> int

        Parameters
        ----------
        self: OpenSim::Array< SimTK::Vec3 > const *

        """
        return _common.ArrayVec3_getSize(self)


    def size(self):
        """
        size(ArrayVec3 self) -> int

        Parameters
        ----------
        self: OpenSim::Array< SimTK::Vec3 > const *

        """
        return _common.ArrayVec3_size(self)


    def append(self, *args):
        """
        append(ArrayVec3 self, Vec3 aValue) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &

        append(ArrayVec3 self, ArrayVec3 aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< SimTK::Vec< 3,double,1 > > const &

        """
        return _common.ArrayVec3_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayVec3 self, int aIndex, Vec3 aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayVec3 self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayVec3_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayVec3 self, int aIndex, Vec3 aValue)

        Parameters
        ----------
        aIndex: int
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayVec3 self, int aIndex) -> Vec3

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayVec3_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayVec3 self, int index) -> Vec3

        Parameters
        ----------
        index: int

        """
        return _common.ArrayVec3_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayVec3 self, int index, Vec3 val)

        Parameters
        ----------
        index: int
        val: SimTK::Vec< 3,double,1 >

        """
        return _common.ArrayVec3_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayVec3 self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Array< SimTK::Vec3 > const *

        """
        return _common.ArrayVec3_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayVec3 self, Vec3 aValue) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayVec3 self, Vec3 aValue) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayVec3 self, Vec3 aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayVec3 self, Vec3 aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayVec3 self, Vec3 aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &
        aFindFirst: bool

        searchBinary(ArrayVec3 self, Vec3 aValue) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayVec3_swigregister = _common.ArrayVec3_swigregister
ArrayVec3_swigregister(ArrayVec3)

class ArrayObjPtr(_object):
    """Proxy of C++ OpenSim::Array<(p.OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayObjPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayObjPtr, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayObjPtr
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(p.OpenSim::Object)> self, OpenSimObject aDefaultValue, int aSize=0, int aCapacity) -> ArrayObjPtr

        Parameters
        ----------
        aDefaultValue: OpenSim::Object *const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(p.OpenSim::Object)> self, OpenSimObject aDefaultValue, int aSize=0) -> ArrayObjPtr

        Parameters
        ----------
        aDefaultValue: OpenSim::Object *const &
        aSize: int

        __init__(OpenSim::Array<(p.OpenSim::Object)> self, OpenSimObject aDefaultValue) -> ArrayObjPtr

        Parameters
        ----------
        aDefaultValue: OpenSim::Object *const &

        __init__(OpenSim::Array<(p.OpenSim::Object)> self) -> ArrayObjPtr
        __init__(OpenSim::Array<(p.OpenSim::Object)> self, ArrayObjPtr aArray) -> ArrayObjPtr

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object * > const &

        """
        this = _common.new_ArrayObjPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayObjPtr self, ArrayObjPtr aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object * > const &

        """
        return _common.ArrayObjPtr_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayObjPtr self)

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::Object * > *

        """
        return _common.ArrayObjPtr_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayObjPtr self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayObjPtr_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayObjPtr self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::Object * > const *

        """
        return _common.ArrayObjPtr_getSize(self)


    def size(self):
        """
        size(ArrayObjPtr self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::Object * > const *

        """
        return _common.ArrayObjPtr_size(self)


    def append(self, *args):
        """
        append(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &

        append(ArrayObjPtr self, ArrayObjPtr aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object * > const &

        """
        return _common.ArrayObjPtr_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayObjPtr self, int aIndex, OpenSimObject aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayObjPtr self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayObjPtr_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayObjPtr self, int aIndex, OpenSimObject aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayObjPtr self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayObjPtr_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayObjPtr self, int index) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.ArrayObjPtr_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayObjPtr self, int index, OpenSimObject val)

        Parameters
        ----------
        index: int
        val: OpenSim::Object *

        """
        return _common.ArrayObjPtr_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayObjPtr self) -> OpenSimObject

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::Object * > const *

        """
        return _common.ArrayObjPtr_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayObjPtr self, OpenSimObject aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayObjPtr self, OpenSimObject aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayObjPtr self, OpenSimObject aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &
        aFindFirst: bool

        searchBinary(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayObjPtr_swigregister = _common.ArrayObjPtr_swigregister
ArrayObjPtr_swigregister(ArrayObjPtr)

class ArrayPtrsObj(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPtrsObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPtrsObj, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayPtrsObj
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(OpenSim::Object)> self, int aCapacity=1) -> ArrayPtrsObj

        Parameters
        ----------
        aCapacity: int

        __init__(OpenSim::ArrayPtrs<(OpenSim::Object)> self) -> ArrayPtrsObj
        __init__(OpenSim::ArrayPtrs<(OpenSim::Object)> self, ArrayPtrsObj aArray) -> ArrayPtrsObj

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Object > const &

        """
        this = _common.new_ArrayPtrsObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(ArrayPtrsObj self)

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Object > *

        """
        return _common.ArrayPtrsObj_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPtrsObj self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayPtrsObj_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPtrsObj self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Object > const *

        """
        return _common.ArrayPtrsObj_getSize(self)


    def size(self):
        """
        size(ArrayPtrsObj self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Object > const *

        """
        return _common.ArrayPtrsObj_size(self)


    def getIndex(self, *args):
        """
        getIndex(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT *
        aStartIndex: int

        getIndex(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT * aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT *

        getIndex(ArrayPtrsObj self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(ArrayPtrsObj self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsObj_getIndex(self, *args)


    def append(self, *args):
        """
        append(ArrayPtrsObj self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object *

        append(ArrayPtrsObj self, ArrayPtrsObj aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Object > &

        """
        return _common.ArrayPtrsObj_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(ArrayPtrsObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *

        """
        return _common.ArrayPtrsObj_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(ArrayPtrsObj self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT *

        """
        return _common.ArrayPtrsObj_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(ArrayPtrsObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *

        """
        return _common.ArrayPtrsObj_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(ArrayPtrsObj self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        get(ArrayPtrsObj self, std::string const & aName) -> OpenSimObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsObj_get(self, *args)


    def getLast(self):
        """
        getLast(ArrayPtrsObj self) -> OpenSimObject

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Object > const *

        """
        return _common.ArrayPtrsObj_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT & aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT & aObject, bool aFindFirst=False) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT &
        aFindFirst: bool

        searchBinary(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT & aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT &

        """
        return _common.ArrayPtrsObj_searchBinary(self, aObject, aFindFirst, aLo, aHi)

ArrayPtrsObj_swigregister = _common.ArrayPtrsObj_swigregister
ArrayPtrsObj_swigregister(ArrayPtrsObj)

class ArrayConstObjPtr(_object):
    """Proxy of C++ OpenSim::Array<(p.q(const).OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayConstObjPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayConstObjPtr, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayConstObjPtr
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(p.q(const).OpenSim::Object)> self, OpenSimObject aDefaultValue, int aSize=0, int aCapacity) -> ArrayConstObjPtr

        Parameters
        ----------
        aDefaultValue: OpenSim::Object const *const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(p.q(const).OpenSim::Object)> self, OpenSimObject aDefaultValue, int aSize=0) -> ArrayConstObjPtr

        Parameters
        ----------
        aDefaultValue: OpenSim::Object const *const &
        aSize: int

        __init__(OpenSim::Array<(p.q(const).OpenSim::Object)> self, OpenSimObject aDefaultValue) -> ArrayConstObjPtr

        Parameters
        ----------
        aDefaultValue: OpenSim::Object const *const &

        __init__(OpenSim::Array<(p.q(const).OpenSim::Object)> self) -> ArrayConstObjPtr
        __init__(OpenSim::Array<(p.q(const).OpenSim::Object)> self, ArrayConstObjPtr aArray) -> ArrayConstObjPtr

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object const * > const &

        """
        this = _common.new_ArrayConstObjPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayConstObjPtr self, ArrayConstObjPtr aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object const * > const &

        """
        return _common.ArrayConstObjPtr_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayConstObjPtr self)

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::Object const * > *

        """
        return _common.ArrayConstObjPtr_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayConstObjPtr self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayConstObjPtr_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayConstObjPtr self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::Object const * > const *

        """
        return _common.ArrayConstObjPtr_getSize(self)


    def size(self):
        """
        size(ArrayConstObjPtr self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::Object const * > const *

        """
        return _common.ArrayConstObjPtr_size(self)


    def append(self, *args):
        """
        append(ArrayConstObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &

        append(ArrayConstObjPtr self, ArrayConstObjPtr aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object const * > const &

        """
        return _common.ArrayConstObjPtr_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayConstObjPtr self, int aIndex, OpenSimObject aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayConstObjPtr self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayConstObjPtr_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayConstObjPtr self, int aIndex, OpenSimObject aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayConstObjPtr self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayConstObjPtr_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayConstObjPtr self, int index) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.ArrayConstObjPtr_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayConstObjPtr self, int index, OpenSimObject val)

        Parameters
        ----------
        index: int
        val: OpenSim::Object const *

        """
        return _common.ArrayConstObjPtr_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayConstObjPtr self) -> OpenSimObject

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::Object const * > const *

        """
        return _common.ArrayConstObjPtr_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayConstObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayConstObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayConstObjPtr self, OpenSimObject aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayConstObjPtr self, OpenSimObject aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayConstObjPtr self, OpenSimObject aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &
        aFindFirst: bool

        searchBinary(ArrayConstObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayConstObjPtr_swigregister = _common.ArrayConstObjPtr_swigregister
ArrayConstObjPtr_swigregister(ArrayConstObjPtr)

class ArrayPtrsConstObj(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(q(const).OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPtrsConstObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPtrsConstObj, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayPtrsConstObj
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(q(const).OpenSim::Object)> self, int aCapacity=1) -> ArrayPtrsConstObj

        Parameters
        ----------
        aCapacity: int

        __init__(OpenSim::ArrayPtrs<(q(const).OpenSim::Object)> self) -> ArrayPtrsConstObj
        __init__(OpenSim::ArrayPtrs<(q(const).OpenSim::Object)> self, ArrayPtrsConstObj aArray) -> ArrayPtrsConstObj

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Object const > const &

        """
        this = _common.new_ArrayPtrsConstObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(ArrayPtrsConstObj self)

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Object const > *

        """
        return _common.ArrayPtrsConstObj_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPtrsConstObj self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayPtrsConstObj_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPtrsConstObj self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Object const > const *

        """
        return _common.ArrayPtrsConstObj_getSize(self)


    def size(self):
        """
        size(ArrayPtrsConstObj self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Object const > const *

        """
        return _common.ArrayPtrsConstObj_size(self)


    def getIndex(self, *args):
        """
        getIndex(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT *
        aStartIndex: int

        getIndex(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT * aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT *

        getIndex(ArrayPtrsConstObj self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(ArrayPtrsConstObj self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsConstObj_getIndex(self, *args)


    def append(self, *args):
        """
        append(ArrayPtrsConstObj self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const *

        append(ArrayPtrsConstObj self, ArrayPtrsConstObj aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Object const > &

        """
        return _common.ArrayPtrsConstObj_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(ArrayPtrsConstObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object const *

        """
        return _common.ArrayPtrsConstObj_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(ArrayPtrsConstObj self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT *

        """
        return _common.ArrayPtrsConstObj_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(ArrayPtrsConstObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object const *

        """
        return _common.ArrayPtrsConstObj_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(ArrayPtrsConstObj self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        get(ArrayPtrsConstObj self, std::string const & aName) -> OpenSimObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsConstObj_get(self, *args)


    def getLast(self):
        """
        getLast(ArrayPtrsConstObj self) -> OpenSimObject

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::Object const > const *

        """
        return _common.ArrayPtrsConstObj_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT & aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT & aObject, bool aFindFirst=False) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT &
        aFindFirst: bool

        searchBinary(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT & aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT &

        """
        return _common.ArrayPtrsConstObj_searchBinary(self, aObject, aFindFirst, aLo, aHi)

ArrayPtrsConstObj_swigregister = _common.ArrayPtrsConstObj_swigregister
ArrayPtrsConstObj_swigregister(ArrayPtrsConstObj)


def LoadOpenSimLibrary(*args):
    """
    LoadOpenSimLibrary(std::string const & lpLibFileName, bool verbose)

    Parameters
    ----------
    lpLibFileName: std::string const &
    verbose: bool

    LoadOpenSimLibrary(std::string const & aLibraryName)

    Parameters
    ----------
    aLibraryName: std::string const &

    """
    return _common.LoadOpenSimLibrary(*args)

def LoadOpenSimLibraryExact(exactPath, verbose=True):
    """
    LoadOpenSimLibraryExact(std::string const & exactPath, bool verbose=True) -> bool

    Parameters
    ----------
    exactPath: std::string const &
    verbose: bool

    LoadOpenSimLibraryExact(std::string const & exactPath) -> bool

    Parameters
    ----------
    exactPath: std::string const &

    """
    return _common.LoadOpenSimLibraryExact(exactPath, verbose)
class ModelDisplayHints(OpenSimObject):
    """Proxy of C++ OpenSim::ModelDisplayHints class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelDisplayHints, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelDisplayHints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelDisplayHints

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ModelDisplayHints_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelDisplayHints self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ModelDisplayHints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ModelDisplayHints_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelDisplayHints self) -> ModelDisplayHints

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelDisplayHints self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_getConcreteClassName(self)


    def copyProperty_show_wrap_geometry(self, source):
        """
        copyProperty_show_wrap_geometry(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_wrap_geometry(self, source)


    def append_show_wrap_geometry(self, value):
        """
        append_show_wrap_geometry(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_wrap_geometry(self, value)


    def constructProperty_show_wrap_geometry(self, initValue):
        """
        constructProperty_show_wrap_geometry(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_wrap_geometry(self, initValue)


    def get_show_wrap_geometry(self, *args):
        """
        get_show_wrap_geometry(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_wrap_geometry(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_wrap_geometry(self, *args)


    def upd_show_wrap_geometry(self, *args):
        """
        upd_show_wrap_geometry(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_wrap_geometry(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_wrap_geometry(self, *args)


    def set_show_wrap_geometry(self, *args):
        """
        set_show_wrap_geometry(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_wrap_geometry(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_wrap_geometry(self, *args)


    def copyProperty_show_contact_geometry(self, source):
        """
        copyProperty_show_contact_geometry(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_contact_geometry(self, source)


    def append_show_contact_geometry(self, value):
        """
        append_show_contact_geometry(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_contact_geometry(self, value)


    def constructProperty_show_contact_geometry(self, initValue):
        """
        constructProperty_show_contact_geometry(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_contact_geometry(self, initValue)


    def get_show_contact_geometry(self, *args):
        """
        get_show_contact_geometry(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_contact_geometry(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_contact_geometry(self, *args)


    def upd_show_contact_geometry(self, *args):
        """
        upd_show_contact_geometry(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_contact_geometry(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_contact_geometry(self, *args)


    def set_show_contact_geometry(self, *args):
        """
        set_show_contact_geometry(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_contact_geometry(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_contact_geometry(self, *args)


    def copyProperty_show_path_geometry(self, source):
        """
        copyProperty_show_path_geometry(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_path_geometry(self, source)


    def append_show_path_geometry(self, value):
        """
        append_show_path_geometry(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_path_geometry(self, value)


    def constructProperty_show_path_geometry(self, initValue):
        """
        constructProperty_show_path_geometry(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_path_geometry(self, initValue)


    def get_show_path_geometry(self, *args):
        """
        get_show_path_geometry(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_path_geometry(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_path_geometry(self, *args)


    def upd_show_path_geometry(self, *args):
        """
        upd_show_path_geometry(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_path_geometry(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_path_geometry(self, *args)


    def set_show_path_geometry(self, *args):
        """
        set_show_path_geometry(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_path_geometry(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_path_geometry(self, *args)


    def copyProperty_show_path_points(self, source):
        """
        copyProperty_show_path_points(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_path_points(self, source)


    def append_show_path_points(self, value):
        """
        append_show_path_points(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_path_points(self, value)


    def constructProperty_show_path_points(self, initValue):
        """
        constructProperty_show_path_points(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_path_points(self, initValue)


    def get_show_path_points(self, *args):
        """
        get_show_path_points(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_path_points(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_path_points(self, *args)


    def upd_show_path_points(self, *args):
        """
        upd_show_path_points(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_path_points(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_path_points(self, *args)


    def set_show_path_points(self, *args):
        """
        set_show_path_points(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_path_points(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_path_points(self, *args)


    def copyProperty_show_markers(self, source):
        """
        copyProperty_show_markers(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_markers(self, source)


    def append_show_markers(self, value):
        """
        append_show_markers(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_markers(self, value)


    def constructProperty_show_markers(self, initValue):
        """
        constructProperty_show_markers(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_markers(self, initValue)


    def get_show_markers(self, *args):
        """
        get_show_markers(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_markers(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_markers(self, *args)


    def upd_show_markers(self, *args):
        """
        upd_show_markers(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_markers(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_markers(self, *args)


    def set_show_markers(self, *args):
        """
        set_show_markers(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_markers(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_markers(self, *args)


    def copyProperty_marker_color(self, source):
        """
        copyProperty_marker_color(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_marker_color(self, source)


    def append_marker_color(self, value):
        """
        append_marker_color(ModelDisplayHints self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _common.ModelDisplayHints_append_marker_color(self, value)


    def constructProperty_marker_color(self, initValue):
        """
        constructProperty_marker_color(ModelDisplayHints self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _common.ModelDisplayHints_constructProperty_marker_color(self, initValue)


    def get_marker_color(self, *args):
        """
        get_marker_color(ModelDisplayHints self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_marker_color(ModelDisplayHints self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_marker_color(self, *args)


    def upd_marker_color(self, *args):
        """
        upd_marker_color(ModelDisplayHints self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_marker_color(ModelDisplayHints self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_marker_color(self, *args)


    def set_marker_color(self, *args):
        """
        set_marker_color(ModelDisplayHints self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_marker_color(ModelDisplayHints self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _common.ModelDisplayHints_set_marker_color(self, *args)


    def copyProperty_show_forces(self, source):
        """
        copyProperty_show_forces(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_forces(self, source)


    def append_show_forces(self, value):
        """
        append_show_forces(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_forces(self, value)


    def constructProperty_show_forces(self, initValue):
        """
        constructProperty_show_forces(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_forces(self, initValue)


    def get_show_forces(self, *args):
        """
        get_show_forces(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_forces(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_forces(self, *args)


    def upd_show_forces(self, *args):
        """
        upd_show_forces(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_forces(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_forces(self, *args)


    def set_show_forces(self, *args):
        """
        set_show_forces(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_forces(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_forces(self, *args)


    def copyProperty_show_frames(self, source):
        """
        copyProperty_show_frames(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_frames(self, source)


    def append_show_frames(self, value):
        """
        append_show_frames(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_frames(self, value)


    def constructProperty_show_frames(self, initValue):
        """
        constructProperty_show_frames(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_frames(self, initValue)


    def get_show_frames(self, *args):
        """
        get_show_frames(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_frames(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_frames(self, *args)


    def upd_show_frames(self, *args):
        """
        upd_show_frames(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_frames(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_frames(self, *args)


    def set_show_frames(self, *args):
        """
        set_show_frames(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_frames(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_frames(self, *args)


    def copyProperty_show_labels(self, source):
        """
        copyProperty_show_labels(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_labels(self, source)


    def append_show_labels(self, value):
        """
        append_show_labels(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_labels(self, value)


    def constructProperty_show_labels(self, initValue):
        """
        constructProperty_show_labels(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_labels(self, initValue)


    def get_show_labels(self, *args):
        """
        get_show_labels(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_labels(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_labels(self, *args)


    def upd_show_labels(self, *args):
        """
        upd_show_labels(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_labels(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_labels(self, *args)


    def set_show_labels(self, *args):
        """
        set_show_labels(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_labels(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_labels(self, *args)


    def copyProperty_show_debug_geometry(self, source):
        """
        copyProperty_show_debug_geometry(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_debug_geometry(self, source)


    def append_show_debug_geometry(self, value):
        """
        append_show_debug_geometry(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_debug_geometry(self, value)


    def constructProperty_show_debug_geometry(self, initValue):
        """
        constructProperty_show_debug_geometry(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_debug_geometry(self, initValue)


    def get_show_debug_geometry(self, *args):
        """
        get_show_debug_geometry(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_debug_geometry(ModelDisplayHints self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints const *

        """
        return _common.ModelDisplayHints_get_show_debug_geometry(self, *args)


    def upd_show_debug_geometry(self, *args):
        """
        upd_show_debug_geometry(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_debug_geometry(ModelDisplayHints self) -> bool &

        Parameters
        ----------
        self: OpenSim::ModelDisplayHints *

        """
        return _common.ModelDisplayHints_upd_show_debug_geometry(self, *args)


    def set_show_debug_geometry(self, *args):
        """
        set_show_debug_geometry(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_debug_geometry(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_debug_geometry(self, *args)


    def __init__(self):
        """__init__(OpenSim::ModelDisplayHints self) -> ModelDisplayHints"""
        this = _common.new_ModelDisplayHints()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ModelDisplayHints
    __del__ = lambda self: None
ModelDisplayHints_swigregister = _common.ModelDisplayHints_swigregister
ModelDisplayHints_swigregister(ModelDisplayHints)

def ModelDisplayHints_safeDownCast(obj):
    """
    ModelDisplayHints_safeDownCast(OpenSimObject obj) -> ModelDisplayHints

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ModelDisplayHints_safeDownCast(obj)

def ModelDisplayHints_getClassName():
    """ModelDisplayHints_getClassName() -> std::string const &"""
    return _common.ModelDisplayHints_getClassName()

class AbstractChannel(_object):
    """Proxy of C++ OpenSim::AbstractChannel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractChannel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractChannel
    __del__ = lambda self: None

    def getChannelName(self):
        """
        getChannelName(AbstractChannel self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractChannel const *

        """
        return _common.AbstractChannel_getChannelName(self)


    def getTypeName(self):
        """
        getTypeName(AbstractChannel self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractChannel const *

        """
        return _common.AbstractChannel_getTypeName(self)


    def getName(self):
        """
        getName(AbstractChannel self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractChannel const *

        """
        return _common.AbstractChannel_getName(self)


    def getPathName(self):
        """
        getPathName(AbstractChannel self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractChannel const *

        """
        return _common.AbstractChannel_getPathName(self)

AbstractChannel_swigregister = _common.AbstractChannel_swigregister
AbstractChannel_swigregister(AbstractChannel)

class AbstractOutput(_object):
    """Proxy of C++ OpenSim::AbstractOutput class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractOutput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractOutput
    __del__ = lambda self: None

    def getName(self):
        """
        getName(AbstractOutput self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractOutput const *

        """
        return _common.AbstractOutput_getName(self)


    def getDependsOnStage(self):
        """
        getDependsOnStage(AbstractOutput self) -> Stage

        Parameters
        ----------
        self: OpenSim::AbstractOutput const *

        """
        return _common.AbstractOutput_getDependsOnStage(self)


    def isListOutput(self):
        """
        isListOutput(AbstractOutput self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractOutput const *

        """
        return _common.AbstractOutput_isListOutput(self)


    def getOwner(self):
        """
        getOwner(AbstractOutput self) -> Component

        Parameters
        ----------
        self: OpenSim::AbstractOutput const *

        """
        return _common.AbstractOutput_getOwner(self)


    def getPathName(self):
        """
        getPathName(AbstractOutput self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractOutput const *

        """
        return _common.AbstractOutput_getPathName(self)


    def clearChannels(self):
        """
        clearChannels(AbstractOutput self)

        Parameters
        ----------
        self: OpenSim::AbstractOutput *

        """
        return _common.AbstractOutput_clearChannels(self)


    def addChannel(self, channelName):
        """
        addChannel(AbstractOutput self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.AbstractOutput_addChannel(self, channelName)


    def getChannel(self, name):
        """
        getChannel(AbstractOutput self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.AbstractOutput_getChannel(self, name)


    def getTypeName(self):
        """
        getTypeName(AbstractOutput self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractOutput const *

        """
        return _common.AbstractOutput_getTypeName(self)


    def getValueAsString(self, state):
        """
        getValueAsString(AbstractOutput self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.AbstractOutput_getValueAsString(self, state)


    def isCompatible(self, arg2):
        """
        isCompatible(AbstractOutput self, AbstractOutput arg2) -> bool

        Parameters
        ----------
        arg2: OpenSim::AbstractOutput const &

        """
        return _common.AbstractOutput_isCompatible(self, arg2)


    def compatibleAssign(self, arg2):
        """
        compatibleAssign(AbstractOutput self, AbstractOutput arg2)

        Parameters
        ----------
        arg2: OpenSim::AbstractOutput const &

        """
        return _common.AbstractOutput_compatibleAssign(self, arg2)


    def clone(self):
        """
        clone(AbstractOutput self) -> AbstractOutput

        Parameters
        ----------
        self: OpenSim::AbstractOutput const *

        """
        return _common.AbstractOutput_clone(self)


    def getNumberOfSignificantDigits(self):
        """
        getNumberOfSignificantDigits(AbstractOutput self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::AbstractOutput const *

        """
        return _common.AbstractOutput_getNumberOfSignificantDigits(self)


    def setNumberOfSignificantDigits(self, numSigFigs):
        """
        setNumberOfSignificantDigits(AbstractOutput self, unsigned int numSigFigs)

        Parameters
        ----------
        numSigFigs: unsigned int

        """
        return _common.AbstractOutput_setNumberOfSignificantDigits(self, numSigFigs)

AbstractOutput_swigregister = _common.AbstractOutput_swigregister
AbstractOutput_swigregister(AbstractOutput)

class OutputDouble(AbstractOutput):
    """Proxy of C++ OpenSim::Output<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::Output<(double)> self) -> OutputDouble
        __init__(OpenSim::Output<(double)> self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,double &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputDouble

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,double &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OpenSim::Output<(double)> self, OutputDouble source) -> OutputDouble

        Parameters
        ----------
        source: OpenSim::Output< double > const &

        """
        this = _common.new_OutputDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_OutputDouble
    __del__ = lambda self: None

    def isCompatible(self, o):
        """
        isCompatible(OutputDouble self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputDouble_isCompatible(self, o)


    def compatibleAssign(self, o):
        """
        compatibleAssign(OutputDouble self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputDouble_compatibleAssign(self, o)


    def clearChannels(self):
        """
        clearChannels(OutputDouble self)

        Parameters
        ----------
        self: OpenSim::Output< double > *

        """
        return _common.OutputDouble_clearChannels(self)


    def addChannel(self, channelName):
        """
        addChannel(OutputDouble self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputDouble_addChannel(self, channelName)


    def getChannel(self, name):
        """
        getChannel(OutputDouble self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputDouble_getChannel(self, name)


    def getChannels(self):
        """
        getChannels(OutputDouble self) -> OpenSim::Output< double >::ChannelMap const &

        Parameters
        ----------
        self: OpenSim::Output< double > const *

        """
        return _common.OutputDouble_getChannels(self)


    def getValue(self, state):
        """
        getValue(OutputDouble self, State state) -> double const &

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputDouble_getValue(self, state)


    def getTypeName(self):
        """
        getTypeName(OutputDouble self) -> std::string

        Parameters
        ----------
        self: OpenSim::Output< double > const *

        """
        return _common.OutputDouble_getTypeName(self)


    def getValueAsString(self, state):
        """
        getValueAsString(OutputDouble self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputDouble_getValueAsString(self, state)


    def clone(self):
        """
        clone(OutputDouble self) -> OutputDouble

        Parameters
        ----------
        self: OpenSim::Output< double > const *

        """
        return _common.OutputDouble_clone(self)


    def isA(p):
        """
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputDouble_isA(p)

    isA = staticmethod(isA)

    def downcast(p):
        """
        downcast(AbstractOutput p) -> OutputDouble

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputDouble_downcast(p)

    downcast = staticmethod(downcast)

    def updDowncast(p):
        """
        updDowncast(AbstractOutput p) -> OutputDouble

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputDouble_updDowncast(p)

    updDowncast = staticmethod(updDowncast)

    def safeDownCast(parent):
        """
        safeDownCast(AbstractOutput parent) -> OutputDouble

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputDouble_safeDownCast(parent)

    safeDownCast = staticmethod(safeDownCast)
OutputDouble_swigregister = _common.OutputDouble_swigregister
OutputDouble_swigregister(OutputDouble)

def OutputDouble_isA(p):
    """
    OutputDouble_isA(AbstractOutput p) -> bool

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputDouble_isA(p)

def OutputDouble_downcast(p):
    """
    OutputDouble_downcast(AbstractOutput p) -> OutputDouble

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputDouble_downcast(p)

def OutputDouble_updDowncast(p):
    """
    OutputDouble_updDowncast(AbstractOutput p) -> OutputDouble

    Parameters
    ----------
    p: OpenSim::AbstractOutput &

    """
    return _common.OutputDouble_updDowncast(p)

def OutputDouble_safeDownCast(parent):
    """
    OutputDouble_safeDownCast(AbstractOutput parent) -> OutputDouble

    Parameters
    ----------
    parent: OpenSim::AbstractOutput *

    """
    return _common.OutputDouble_safeDownCast(parent)

class OutputVec3(AbstractOutput):
    """Proxy of C++ OpenSim::Output<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputVec3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::Output<(SimTK::Vec3)> self) -> OutputVec3
        __init__(OpenSim::Output<(SimTK::Vec3)> self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vec< 3,double,1 > &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputVec3

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vec< 3,double,1 > &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OpenSim::Output<(SimTK::Vec3)> self, OutputVec3 source) -> OutputVec3

        Parameters
        ----------
        source: OpenSim::Output< SimTK::Vec3 > const &

        """
        this = _common.new_OutputVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_OutputVec3
    __del__ = lambda self: None

    def isCompatible(self, o):
        """
        isCompatible(OutputVec3 self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputVec3_isCompatible(self, o)


    def compatibleAssign(self, o):
        """
        compatibleAssign(OutputVec3 self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputVec3_compatibleAssign(self, o)


    def clearChannels(self):
        """
        clearChannels(OutputVec3 self)

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Vec3 > *

        """
        return _common.OutputVec3_clearChannels(self)


    def addChannel(self, channelName):
        """
        addChannel(OutputVec3 self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputVec3_addChannel(self, channelName)


    def getChannel(self, name):
        """
        getChannel(OutputVec3 self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputVec3_getChannel(self, name)


    def getChannels(self):
        """
        getChannels(OutputVec3 self) -> OpenSim::Output< SimTK::Vec< 3,double,1 > >::ChannelMap const &

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Vec3 > const *

        """
        return _common.OutputVec3_getChannels(self)


    def getValue(self, state):
        """
        getValue(OutputVec3 self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputVec3_getValue(self, state)


    def getTypeName(self):
        """
        getTypeName(OutputVec3 self) -> std::string

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Vec3 > const *

        """
        return _common.OutputVec3_getTypeName(self)


    def getValueAsString(self, state):
        """
        getValueAsString(OutputVec3 self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputVec3_getValueAsString(self, state)


    def clone(self):
        """
        clone(OutputVec3 self) -> OutputVec3

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Vec3 > const *

        """
        return _common.OutputVec3_clone(self)


    def isA(p):
        """
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputVec3_isA(p)

    isA = staticmethod(isA)

    def downcast(p):
        """
        downcast(AbstractOutput p) -> OutputVec3

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputVec3_downcast(p)

    downcast = staticmethod(downcast)

    def updDowncast(p):
        """
        updDowncast(AbstractOutput p) -> OutputVec3

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputVec3_updDowncast(p)

    updDowncast = staticmethod(updDowncast)

    def safeDownCast(parent):
        """
        safeDownCast(AbstractOutput parent) -> OutputVec3

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputVec3_safeDownCast(parent)

    safeDownCast = staticmethod(safeDownCast)
OutputVec3_swigregister = _common.OutputVec3_swigregister
OutputVec3_swigregister(OutputVec3)

def OutputVec3_isA(p):
    """
    OutputVec3_isA(AbstractOutput p) -> bool

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputVec3_isA(p)

def OutputVec3_downcast(p):
    """
    OutputVec3_downcast(AbstractOutput p) -> OutputVec3

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputVec3_downcast(p)

def OutputVec3_updDowncast(p):
    """
    OutputVec3_updDowncast(AbstractOutput p) -> OutputVec3

    Parameters
    ----------
    p: OpenSim::AbstractOutput &

    """
    return _common.OutputVec3_updDowncast(p)

def OutputVec3_safeDownCast(parent):
    """
    OutputVec3_safeDownCast(AbstractOutput parent) -> OutputVec3

    Parameters
    ----------
    parent: OpenSim::AbstractOutput *

    """
    return _common.OutputVec3_safeDownCast(parent)

class OutputTransform(AbstractOutput):
    """Proxy of C++ OpenSim::Output<(SimTK::Transform)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputTransform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::Output<(SimTK::Transform)> self) -> OutputTransform
        __init__(OpenSim::Output<(SimTK::Transform)> self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Transform_< double > &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputTransform

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Transform_< double > &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OpenSim::Output<(SimTK::Transform)> self, OutputTransform source) -> OutputTransform

        Parameters
        ----------
        source: OpenSim::Output< SimTK::Transform > const &

        """
        this = _common.new_OutputTransform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_OutputTransform
    __del__ = lambda self: None

    def isCompatible(self, o):
        """
        isCompatible(OutputTransform self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputTransform_isCompatible(self, o)


    def compatibleAssign(self, o):
        """
        compatibleAssign(OutputTransform self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputTransform_compatibleAssign(self, o)


    def clearChannels(self):
        """
        clearChannels(OutputTransform self)

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Transform > *

        """
        return _common.OutputTransform_clearChannels(self)


    def addChannel(self, channelName):
        """
        addChannel(OutputTransform self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputTransform_addChannel(self, channelName)


    def getChannel(self, name):
        """
        getChannel(OutputTransform self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputTransform_getChannel(self, name)


    def getChannels(self):
        """
        getChannels(OutputTransform self) -> OpenSim::Output< SimTK::Transform_< double > >::ChannelMap const &

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Transform > const *

        """
        return _common.OutputTransform_getChannels(self)


    def getValue(self, state):
        """
        getValue(OutputTransform self, State state) -> Transform

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputTransform_getValue(self, state)


    def getTypeName(self):
        """
        getTypeName(OutputTransform self) -> std::string

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Transform > const *

        """
        return _common.OutputTransform_getTypeName(self)


    def getValueAsString(self, state):
        """
        getValueAsString(OutputTransform self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputTransform_getValueAsString(self, state)


    def clone(self):
        """
        clone(OutputTransform self) -> OutputTransform

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Transform > const *

        """
        return _common.OutputTransform_clone(self)


    def isA(p):
        """
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputTransform_isA(p)

    isA = staticmethod(isA)

    def downcast(p):
        """
        downcast(AbstractOutput p) -> OutputTransform

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputTransform_downcast(p)

    downcast = staticmethod(downcast)

    def updDowncast(p):
        """
        updDowncast(AbstractOutput p) -> OutputTransform

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputTransform_updDowncast(p)

    updDowncast = staticmethod(updDowncast)

    def safeDownCast(parent):
        """
        safeDownCast(AbstractOutput parent) -> OutputTransform

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputTransform_safeDownCast(parent)

    safeDownCast = staticmethod(safeDownCast)
OutputTransform_swigregister = _common.OutputTransform_swigregister
OutputTransform_swigregister(OutputTransform)

def OutputTransform_isA(p):
    """
    OutputTransform_isA(AbstractOutput p) -> bool

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputTransform_isA(p)

def OutputTransform_downcast(p):
    """
    OutputTransform_downcast(AbstractOutput p) -> OutputTransform

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputTransform_downcast(p)

def OutputTransform_updDowncast(p):
    """
    OutputTransform_updDowncast(AbstractOutput p) -> OutputTransform

    Parameters
    ----------
    p: OpenSim::AbstractOutput &

    """
    return _common.OutputTransform_updDowncast(p)

def OutputTransform_safeDownCast(parent):
    """
    OutputTransform_safeDownCast(AbstractOutput parent) -> OutputTransform

    Parameters
    ----------
    parent: OpenSim::AbstractOutput *

    """
    return _common.OutputTransform_safeDownCast(parent)

class OutputVector(AbstractOutput):
    """Proxy of C++ OpenSim::Output<(SimTK::Vector)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputVector, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::Output<(SimTK::Vector)> self) -> OutputVector
        __init__(OpenSim::Output<(SimTK::Vector)> self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vector_< double > &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputVector

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vector_< double > &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OpenSim::Output<(SimTK::Vector)> self, OutputVector source) -> OutputVector

        Parameters
        ----------
        source: OpenSim::Output< SimTK::Vector > const &

        """
        this = _common.new_OutputVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_OutputVector
    __del__ = lambda self: None

    def isCompatible(self, o):
        """
        isCompatible(OutputVector self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputVector_isCompatible(self, o)


    def compatibleAssign(self, o):
        """
        compatibleAssign(OutputVector self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputVector_compatibleAssign(self, o)


    def clearChannels(self):
        """
        clearChannels(OutputVector self)

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Vector > *

        """
        return _common.OutputVector_clearChannels(self)


    def addChannel(self, channelName):
        """
        addChannel(OutputVector self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputVector_addChannel(self, channelName)


    def getChannel(self, name):
        """
        getChannel(OutputVector self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputVector_getChannel(self, name)


    def getChannels(self):
        """
        getChannels(OutputVector self) -> OpenSim::Output< SimTK::Vector_< double > >::ChannelMap const &

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Vector > const *

        """
        return _common.OutputVector_getChannels(self)


    def getValue(self, state):
        """
        getValue(OutputVector self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputVector_getValue(self, state)


    def getTypeName(self):
        """
        getTypeName(OutputVector self) -> std::string

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Vector > const *

        """
        return _common.OutputVector_getTypeName(self)


    def getValueAsString(self, state):
        """
        getValueAsString(OutputVector self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputVector_getValueAsString(self, state)


    def clone(self):
        """
        clone(OutputVector self) -> OutputVector

        Parameters
        ----------
        self: OpenSim::Output< SimTK::Vector > const *

        """
        return _common.OutputVector_clone(self)


    def isA(p):
        """
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputVector_isA(p)

    isA = staticmethod(isA)

    def downcast(p):
        """
        downcast(AbstractOutput p) -> OutputVector

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputVector_downcast(p)

    downcast = staticmethod(downcast)

    def updDowncast(p):
        """
        updDowncast(AbstractOutput p) -> OutputVector

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputVector_updDowncast(p)

    updDowncast = staticmethod(updDowncast)

    def safeDownCast(parent):
        """
        safeDownCast(AbstractOutput parent) -> OutputVector

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputVector_safeDownCast(parent)

    safeDownCast = staticmethod(safeDownCast)
OutputVector_swigregister = _common.OutputVector_swigregister
OutputVector_swigregister(OutputVector)

def OutputVector_isA(p):
    """
    OutputVector_isA(AbstractOutput p) -> bool

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputVector_isA(p)

def OutputVector_downcast(p):
    """
    OutputVector_downcast(AbstractOutput p) -> OutputVector

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputVector_downcast(p)

def OutputVector_updDowncast(p):
    """
    OutputVector_updDowncast(AbstractOutput p) -> OutputVector

    Parameters
    ----------
    p: OpenSim::AbstractOutput &

    """
    return _common.OutputVector_updDowncast(p)

def OutputVector_safeDownCast(parent):
    """
    OutputVector_safeDownCast(AbstractOutput parent) -> OutputVector

    Parameters
    ----------
    parent: OpenSim::AbstractOutput *

    """
    return _common.OutputVector_safeDownCast(parent)

class OutputSpatialVec(AbstractOutput):
    """Proxy of C++ OpenSim::Output<(SimTK::SpatialVec)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputSpatialVec, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractOutput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputSpatialVec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::Output<(SimTK::SpatialVec)> self) -> OutputSpatialVec
        __init__(OpenSim::Output<(SimTK::SpatialVec)> self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputSpatialVec

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OpenSim::Output<(SimTK::SpatialVec)> self, OutputSpatialVec source) -> OutputSpatialVec

        Parameters
        ----------
        source: OpenSim::Output< SimTK::SpatialVec > const &

        """
        this = _common.new_OutputSpatialVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_OutputSpatialVec
    __del__ = lambda self: None

    def isCompatible(self, o):
        """
        isCompatible(OutputSpatialVec self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputSpatialVec_isCompatible(self, o)


    def compatibleAssign(self, o):
        """
        compatibleAssign(OutputSpatialVec self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputSpatialVec_compatibleAssign(self, o)


    def clearChannels(self):
        """
        clearChannels(OutputSpatialVec self)

        Parameters
        ----------
        self: OpenSim::Output< SimTK::SpatialVec > *

        """
        return _common.OutputSpatialVec_clearChannels(self)


    def addChannel(self, channelName):
        """
        addChannel(OutputSpatialVec self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputSpatialVec_addChannel(self, channelName)


    def getChannel(self, name):
        """
        getChannel(OutputSpatialVec self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputSpatialVec_getChannel(self, name)


    def getChannels(self):
        """
        getChannels(OutputSpatialVec self) -> OpenSim::Output< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::ChannelMap const &

        Parameters
        ----------
        self: OpenSim::Output< SimTK::SpatialVec > const *

        """
        return _common.OutputSpatialVec_getChannels(self)


    def getValue(self, state):
        """
        getValue(OutputSpatialVec self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputSpatialVec_getValue(self, state)


    def getTypeName(self):
        """
        getTypeName(OutputSpatialVec self) -> std::string

        Parameters
        ----------
        self: OpenSim::Output< SimTK::SpatialVec > const *

        """
        return _common.OutputSpatialVec_getTypeName(self)


    def getValueAsString(self, state):
        """
        getValueAsString(OutputSpatialVec self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputSpatialVec_getValueAsString(self, state)


    def clone(self):
        """
        clone(OutputSpatialVec self) -> OutputSpatialVec

        Parameters
        ----------
        self: OpenSim::Output< SimTK::SpatialVec > const *

        """
        return _common.OutputSpatialVec_clone(self)


    def isA(p):
        """
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputSpatialVec_isA(p)

    isA = staticmethod(isA)

    def downcast(p):
        """
        downcast(AbstractOutput p) -> OutputSpatialVec

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputSpatialVec_downcast(p)

    downcast = staticmethod(downcast)

    def updDowncast(p):
        """
        updDowncast(AbstractOutput p) -> OutputSpatialVec

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputSpatialVec_updDowncast(p)

    updDowncast = staticmethod(updDowncast)

    def safeDownCast(parent):
        """
        safeDownCast(AbstractOutput parent) -> OutputSpatialVec

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputSpatialVec_safeDownCast(parent)

    safeDownCast = staticmethod(safeDownCast)
OutputSpatialVec_swigregister = _common.OutputSpatialVec_swigregister
OutputSpatialVec_swigregister(OutputSpatialVec)

def OutputSpatialVec_isA(p):
    """
    OutputSpatialVec_isA(AbstractOutput p) -> bool

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputSpatialVec_isA(p)

def OutputSpatialVec_downcast(p):
    """
    OutputSpatialVec_downcast(AbstractOutput p) -> OutputSpatialVec

    Parameters
    ----------
    p: OpenSim::AbstractOutput const &

    """
    return _common.OutputSpatialVec_downcast(p)

def OutputSpatialVec_updDowncast(p):
    """
    OutputSpatialVec_updDowncast(AbstractOutput p) -> OutputSpatialVec

    Parameters
    ----------
    p: OpenSim::AbstractOutput &

    """
    return _common.OutputSpatialVec_updDowncast(p)

def OutputSpatialVec_safeDownCast(parent):
    """
    OutputSpatialVec_safeDownCast(AbstractOutput parent) -> OutputSpatialVec

    Parameters
    ----------
    parent: OpenSim::AbstractOutput *

    """
    return _common.OutputSpatialVec_safeDownCast(parent)

class InputNotConnected(OpenSimException):
    """Proxy of C++ OpenSim::InputNotConnected class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputNotConnected, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputNotConnected, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, inputName):
        """
        __init__(OpenSim::InputNotConnected self, std::string const & file, size_t line, std::string const & func, std::string const & inputName) -> InputNotConnected

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        inputName: std::string const &

        """
        this = _common.new_InputNotConnected(file, line, func, inputName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InputNotConnected
    __del__ = lambda self: None
InputNotConnected_swigregister = _common.InputNotConnected_swigregister
InputNotConnected_swigregister(InputNotConnected)

class AbstractSocket(_object):
    """Proxy of C++ OpenSim::AbstractSocket class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractSocket, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractSocket
    __del__ = lambda self: None

    def clone(self):
        """
        clone(AbstractSocket self) -> AbstractSocket

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_clone(self)


    def getName(self):
        """
        getName(AbstractSocket self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_getName(self)


    def getConnectAtStage(self):
        """
        getConnectAtStage(AbstractSocket self) -> Stage

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_getConnectAtStage(self)


    def isListSocket(self):
        """
        isListSocket(AbstractSocket self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_isListSocket(self)


    def getNumConnectees(self):
        """
        getNumConnectees(AbstractSocket self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_getNumConnectees(self)


    def isConnected(self):
        """
        isConnected(AbstractSocket self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_isConnected(self)


    def getConnecteeTypeName(self):
        """
        getConnecteeTypeName(AbstractSocket self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_getConnecteeTypeName(self)


    def getConnecteeAsObject(self):
        """
        getConnecteeAsObject(AbstractSocket self) -> OpenSimObject

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_getConnecteeAsObject(self)


    def connect(self, connectee):
        """
        connect(AbstractSocket self, OpenSimObject connectee)

        Parameters
        ----------
        connectee: OpenSim::Object const &

        """
        return _common.AbstractSocket_connect(self, connectee)


    def findAndConnect(self, *args):
        """
        findAndConnect(AbstractSocket self, ComponentPath const & connectee)

        Parameters
        ----------
        connectee: ComponentPath const &

        findAndConnect(AbstractSocket self, std::string const & connectee)

        Parameters
        ----------
        connectee: std::string const &

        """
        return _common.AbstractSocket_findAndConnect(self, *args)


    def finalizeConnection(self, root):
        """
        finalizeConnection(AbstractSocket self, Component root)

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        return _common.AbstractSocket_finalizeConnection(self, root)


    def disconnect(self):
        """
        disconnect(AbstractSocket self)

        Parameters
        ----------
        self: OpenSim::AbstractSocket *

        """
        return _common.AbstractSocket_disconnect(self)


    def setConnecteePath(self, *args):
        """
        setConnecteePath(AbstractSocket self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        setConnecteePath(AbstractSocket self, std::string const & name, unsigned int ix)

        Parameters
        ----------
        name: std::string const &
        ix: unsigned int

        """
        return _common.AbstractSocket_setConnecteePath(self, *args)


    def getConnecteePath(self, *args):
        """
        getConnecteePath(AbstractSocket self) -> std::string const
        getConnecteePath(AbstractSocket self, unsigned int ix) -> std::string const &

        Parameters
        ----------
        ix: unsigned int

        """
        return _common.AbstractSocket_getConnecteePath(self, *args)


    def appendConnecteePath(self, name):
        """
        appendConnecteePath(AbstractSocket self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _common.AbstractSocket_appendConnecteePath(self, name)


    def clearConnecteePath(self):
        """
        clearConnecteePath(AbstractSocket self)

        Parameters
        ----------
        self: OpenSim::AbstractSocket *

        """
        return _common.AbstractSocket_clearConnecteePath(self)


    def getOwner(self):
        """
        getOwner(AbstractSocket self) -> Component

        Parameters
        ----------
        self: OpenSim::AbstractSocket const *

        """
        return _common.AbstractSocket_getOwner(self)

AbstractSocket_swigregister = _common.AbstractSocket_swigregister
AbstractSocket_swigregister(AbstractSocket)

class AbstractInput(AbstractSocket):
    """Proxy of C++ OpenSim::AbstractInput class."""

    __swig_setmethods__ = {}
    for _s in [AbstractSocket]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractInput, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractSocket]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractInput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractInput
    __del__ = lambda self: None

    def clone(self):
        """
        clone(AbstractInput self) -> AbstractInput

        Parameters
        ----------
        self: OpenSim::AbstractInput const *

        """
        return _common.AbstractInput_clone(self)


    def connect(self, *args):
        """
        connect(AbstractInput self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        connect(AbstractInput self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connect(AbstractInput self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        connect(AbstractInput self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        connect(AbstractInput self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.AbstractInput_connect(self, *args)


    def getAlias(self, *args):
        """
        getAlias(AbstractInput self) -> std::string const
        getAlias(AbstractInput self, unsigned int index) -> std::string const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.AbstractInput_getAlias(self, *args)


    def setAlias(self, *args):
        """
        setAlias(AbstractInput self, std::string const & alias)

        Parameters
        ----------
        alias: std::string const &

        setAlias(AbstractInput self, unsigned int index, std::string const & alias)

        Parameters
        ----------
        index: unsigned int
        alias: std::string const &

        """
        return _common.AbstractInput_setAlias(self, *args)


    def getLabel(self, *args):
        """
        getLabel(AbstractInput self) -> std::string
        getLabel(AbstractInput self, unsigned int index) -> std::string

        Parameters
        ----------
        index: unsigned int

        """
        return _common.AbstractInput_getLabel(self, *args)


    def parseConnecteePath(connecteePath, componentPath, outputName, channelName, alias):
        """
        parseConnecteePath(std::string const & connecteePath, std::string & componentPath, std::string & outputName, std::string & channelName, std::string & alias) -> bool

        Parameters
        ----------
        connecteePath: std::string const &
        componentPath: std::string &
        outputName: std::string &
        channelName: std::string &
        alias: std::string &

        """
        return _common.AbstractInput_parseConnecteePath(connecteePath, componentPath, outputName, channelName, alias)

    parseConnecteePath = staticmethod(parseConnecteePath)

    def composeConnecteePath(componentPath, outputName, channelName, alias):
        """
        composeConnecteePath(std::string const & componentPath, std::string const & outputName, std::string const & channelName, std::string const & alias) -> std::string

        Parameters
        ----------
        componentPath: std::string const &
        outputName: std::string const &
        channelName: std::string const &
        alias: std::string const &

        """
        return _common.AbstractInput_composeConnecteePath(componentPath, outputName, channelName, alias)

    composeConnecteePath = staticmethod(composeConnecteePath)
AbstractInput_swigregister = _common.AbstractInput_swigregister
AbstractInput_swigregister(AbstractInput)

def AbstractInput_parseConnecteePath(connecteePath, componentPath, outputName, channelName, alias):
    """
    AbstractInput_parseConnecteePath(std::string const & connecteePath, std::string & componentPath, std::string & outputName, std::string & channelName, std::string & alias) -> bool

    Parameters
    ----------
    connecteePath: std::string const &
    componentPath: std::string &
    outputName: std::string &
    channelName: std::string &
    alias: std::string &

    """
    return _common.AbstractInput_parseConnecteePath(connecteePath, componentPath, outputName, channelName, alias)

def AbstractInput_composeConnecteePath(componentPath, outputName, channelName, alias):
    """
    AbstractInput_composeConnecteePath(std::string const & componentPath, std::string const & outputName, std::string const & channelName, std::string const & alias) -> std::string

    Parameters
    ----------
    componentPath: std::string const &
    outputName: std::string const &
    channelName: std::string const &
    alias: std::string const &

    """
    return _common.AbstractInput_composeConnecteePath(componentPath, outputName, channelName, alias)

class InputDouble(AbstractInput):
    """Proxy of C++ OpenSim::Input<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputDouble, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(InputDouble self) -> InputDouble

        Parameters
        ----------
        self: OpenSim::Input< double > const *

        """
        return _common.InputDouble_clone(self)


    def connect(self, *args):
        """
        connect(InputDouble self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connect(InputDouble self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        connect(InputDouble self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        connect(InputDouble self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.InputDouble_connect(self, *args)


    def finalizeConnection(self, root):
        """
        finalizeConnection(InputDouble self, Component root)

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        return _common.InputDouble_finalizeConnection(self, root)


    def disconnect(self):
        """
        disconnect(InputDouble self)

        Parameters
        ----------
        self: OpenSim::Input< double > *

        """
        return _common.InputDouble_disconnect(self)


    def isConnected(self):
        """
        isConnected(InputDouble self) -> bool

        Parameters
        ----------
        self: OpenSim::Input< double > const *

        """
        return _common.InputDouble_isConnected(self)


    def getValue(self, *args):
        """
        getValue(InputDouble self, State state) -> double const

        Parameters
        ----------
        state: SimTK::State const &

        getValue(InputDouble self, State state, unsigned int index) -> double const &

        Parameters
        ----------
        state: SimTK::State const &
        index: unsigned int

        """
        return _common.InputDouble_getValue(self, *args)


    def getChannel(self, *args):
        """
        getChannel(InputDouble self) -> OpenSim::Input< double >::Channel const
        getChannel(InputDouble self, unsigned int index) -> OpenSim::Input< double >::Channel const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputDouble_getChannel(self, *args)


    def getAlias(self, *args):
        """
        getAlias(InputDouble self) -> std::string const
        getAlias(InputDouble self, unsigned int index) -> std::string const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputDouble_getAlias(self, *args)


    def setAlias(self, *args):
        """
        setAlias(InputDouble self, std::string const & alias)

        Parameters
        ----------
        alias: std::string const &

        setAlias(InputDouble self, unsigned int index, std::string const & alias)

        Parameters
        ----------
        index: unsigned int
        alias: std::string const &

        """
        return _common.InputDouble_setAlias(self, *args)


    def getLabel(self, *args):
        """
        getLabel(InputDouble self) -> std::string
        getLabel(InputDouble self, unsigned int index) -> std::string

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputDouble_getLabel(self, *args)


    def getVector(self, state):
        """
        getVector(InputDouble self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.InputDouble_getVector(self, state)


    def getChannels(self):
        """
        getChannels(InputDouble self) -> OpenSim::Input< double >::ChannelList const &

        Parameters
        ----------
        self: OpenSim::Input< double > const *

        """
        return _common.InputDouble_getChannels(self)


    def getConnecteeTypeName(self):
        """
        getConnecteeTypeName(InputDouble self) -> std::string

        Parameters
        ----------
        self: OpenSim::Input< double > const *

        """
        return _common.InputDouble_getConnecteeTypeName(self)


    def isA(p):
        """
        isA(AbstractInput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractInput const &

        """
        return _common.InputDouble_isA(p)

    isA = staticmethod(isA)

    def downcast(p):
        """
        downcast(AbstractInput p) -> InputDouble

        Parameters
        ----------
        p: OpenSim::AbstractInput const &

        """
        return _common.InputDouble_downcast(p)

    downcast = staticmethod(downcast)

    def updDowncast(p):
        """
        updDowncast(AbstractInput p) -> InputDouble

        Parameters
        ----------
        p: OpenSim::AbstractInput &

        """
        return _common.InputDouble_updDowncast(p)

    updDowncast = staticmethod(updDowncast)

    def safeDownCast(base):
        """
        safeDownCast(AbstractInput base) -> InputDouble

        Parameters
        ----------
        base: OpenSim::AbstractInput *

        """
        return _common.InputDouble_safeDownCast(base)

    safeDownCast = staticmethod(safeDownCast)
    __swig_destroy__ = _common.delete_InputDouble
    __del__ = lambda self: None
InputDouble_swigregister = _common.InputDouble_swigregister
InputDouble_swigregister(InputDouble)

def InputDouble_isA(p):
    """
    InputDouble_isA(AbstractInput p) -> bool

    Parameters
    ----------
    p: OpenSim::AbstractInput const &

    """
    return _common.InputDouble_isA(p)

def InputDouble_downcast(p):
    """
    InputDouble_downcast(AbstractInput p) -> InputDouble

    Parameters
    ----------
    p: OpenSim::AbstractInput const &

    """
    return _common.InputDouble_downcast(p)

def InputDouble_updDowncast(p):
    """
    InputDouble_updDowncast(AbstractInput p) -> InputDouble

    Parameters
    ----------
    p: OpenSim::AbstractInput &

    """
    return _common.InputDouble_updDowncast(p)

def InputDouble_safeDownCast(base):
    """
    InputDouble_safeDownCast(AbstractInput base) -> InputDouble

    Parameters
    ----------
    base: OpenSim::AbstractInput *

    """
    return _common.InputDouble_safeDownCast(base)

class InputVec3(AbstractInput):
    """Proxy of C++ OpenSim::Input<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractInput]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractInput]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputVec3, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(InputVec3 self) -> InputVec3

        Parameters
        ----------
        self: OpenSim::Input< SimTK::Vec3 > const *

        """
        return _common.InputVec3_clone(self)


    def connect(self, *args):
        """
        connect(InputVec3 self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connect(InputVec3 self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        connect(InputVec3 self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        connect(InputVec3 self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.InputVec3_connect(self, *args)


    def finalizeConnection(self, root):
        """
        finalizeConnection(InputVec3 self, Component root)

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        return _common.InputVec3_finalizeConnection(self, root)


    def disconnect(self):
        """
        disconnect(InputVec3 self)

        Parameters
        ----------
        self: OpenSim::Input< SimTK::Vec3 > *

        """
        return _common.InputVec3_disconnect(self)


    def isConnected(self):
        """
        isConnected(InputVec3 self) -> bool

        Parameters
        ----------
        self: OpenSim::Input< SimTK::Vec3 > const *

        """
        return _common.InputVec3_isConnected(self)


    def getValue(self, *args):
        """
        getValue(InputVec3 self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        getValue(InputVec3 self, State state, unsigned int index) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        index: unsigned int

        """
        return _common.InputVec3_getValue(self, *args)


    def getChannel(self, *args):
        """
        getChannel(InputVec3 self) -> OpenSim::Input< SimTK::Vec< 3,double,1 > >::Channel const
        getChannel(InputVec3 self, unsigned int index) -> OpenSim::Input< SimTK::Vec< 3,double,1 > >::Channel const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputVec3_getChannel(self, *args)


    def getAlias(self, *args):
        """
        getAlias(InputVec3 self) -> std::string const
        getAlias(InputVec3 self, unsigned int index) -> std::string const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputVec3_getAlias(self, *args)


    def setAlias(self, *args):
        """
        setAlias(InputVec3 self, std::string const & alias)

        Parameters
        ----------
        alias: std::string const &

        setAlias(InputVec3 self, unsigned int index, std::string const & alias)

        Parameters
        ----------
        index: unsigned int
        alias: std::string const &

        """
        return _common.InputVec3_setAlias(self, *args)


    def getLabel(self, *args):
        """
        getLabel(InputVec3 self) -> std::string
        getLabel(InputVec3 self, unsigned int index) -> std::string

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputVec3_getLabel(self, *args)


    def getVector(self, state):
        """
        getVector(InputVec3 self, State state) -> VectorVec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.InputVec3_getVector(self, state)


    def getChannels(self):
        """
        getChannels(InputVec3 self) -> OpenSim::Input< SimTK::Vec< 3,double,1 > >::ChannelList const &

        Parameters
        ----------
        self: OpenSim::Input< SimTK::Vec3 > const *

        """
        return _common.InputVec3_getChannels(self)


    def getConnecteeTypeName(self):
        """
        getConnecteeTypeName(InputVec3 self) -> std::string

        Parameters
        ----------
        self: OpenSim::Input< SimTK::Vec3 > const *

        """
        return _common.InputVec3_getConnecteeTypeName(self)


    def isA(p):
        """
        isA(AbstractInput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractInput const &

        """
        return _common.InputVec3_isA(p)

    isA = staticmethod(isA)

    def downcast(p):
        """
        downcast(AbstractInput p) -> InputVec3

        Parameters
        ----------
        p: OpenSim::AbstractInput const &

        """
        return _common.InputVec3_downcast(p)

    downcast = staticmethod(downcast)

    def updDowncast(p):
        """
        updDowncast(AbstractInput p) -> InputVec3

        Parameters
        ----------
        p: OpenSim::AbstractInput &

        """
        return _common.InputVec3_updDowncast(p)

    updDowncast = staticmethod(updDowncast)

    def safeDownCast(base):
        """
        safeDownCast(AbstractInput base) -> InputVec3

        Parameters
        ----------
        base: OpenSim::AbstractInput *

        """
        return _common.InputVec3_safeDownCast(base)

    safeDownCast = staticmethod(safeDownCast)
    __swig_destroy__ = _common.delete_InputVec3
    __del__ = lambda self: None
InputVec3_swigregister = _common.InputVec3_swigregister
InputVec3_swigregister(InputVec3)

def InputVec3_isA(p):
    """
    InputVec3_isA(AbstractInput p) -> bool

    Parameters
    ----------
    p: OpenSim::AbstractInput const &

    """
    return _common.InputVec3_isA(p)

def InputVec3_downcast(p):
    """
    InputVec3_downcast(AbstractInput p) -> InputVec3

    Parameters
    ----------
    p: OpenSim::AbstractInput const &

    """
    return _common.InputVec3_downcast(p)

def InputVec3_updDowncast(p):
    """
    InputVec3_updDowncast(AbstractInput p) -> InputVec3

    Parameters
    ----------
    p: OpenSim::AbstractInput &

    """
    return _common.InputVec3_updDowncast(p)

def InputVec3_safeDownCast(base):
    """
    InputVec3_safeDownCast(AbstractInput base) -> InputVec3

    Parameters
    ----------
    base: OpenSim::AbstractInput *

    """
    return _common.InputVec3_safeDownCast(base)

class ComponentFilter(_object):
    """Proxy of C++ OpenSim::ComponentFilter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentFilter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ComponentFilter
    __del__ = lambda self: None

    def isMatch(self, comp):
        """
        isMatch(ComponentFilter self, Component comp) -> bool

        Parameters
        ----------
        comp: OpenSim::Component const &

        """
        return _common.ComponentFilter_isMatch(self, comp)


    def clone(self):
        """
        clone(ComponentFilter self) -> ComponentFilter

        Parameters
        ----------
        self: OpenSim::ComponentFilter const *

        """
        return _common.ComponentFilter_clone(self)

ComponentFilter_swigregister = _common.ComponentFilter_swigregister
ComponentFilter_swigregister(ComponentFilter)

class ComponentFilterMatchAll(ComponentFilter):
    """Proxy of C++ OpenSim::ComponentFilterMatchAll class."""

    __swig_setmethods__ = {}
    for _s in [ComponentFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentFilterMatchAll, name, value)
    __swig_getmethods__ = {}
    for _s in [ComponentFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentFilterMatchAll, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::ComponentFilterMatchAll self) -> ComponentFilterMatchAll"""
        this = _common.new_ComponentFilterMatchAll()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isMatch(self, comp):
        """
        isMatch(ComponentFilterMatchAll self, Component comp) -> bool

        Parameters
        ----------
        comp: OpenSim::Component const &

        """
        return _common.ComponentFilterMatchAll_isMatch(self, comp)

    __swig_destroy__ = _common.delete_ComponentFilterMatchAll
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ComponentFilterMatchAll self) -> ComponentFilterMatchAll

        Parameters
        ----------
        self: OpenSim::ComponentFilterMatchAll const *

        """
        return _common.ComponentFilterMatchAll_clone(self)

ComponentFilterMatchAll_swigregister = _common.ComponentFilterMatchAll_swigregister
ComponentFilterMatchAll_swigregister(ComponentFilterMatchAll)

class ComponentFilterAbsolutePathNameContainsString(ComponentFilter):
    """Proxy of C++ OpenSim::ComponentFilterAbsolutePathNameContainsString class."""

    __swig_setmethods__ = {}
    for _s in [ComponentFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentFilterAbsolutePathNameContainsString, name, value)
    __swig_getmethods__ = {}
    for _s in [ComponentFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentFilterAbsolutePathNameContainsString, name)
    __repr__ = _swig_repr

    def __init__(self, substring):
        """
        __init__(OpenSim::ComponentFilterAbsolutePathNameContainsString self, std::string const & substring) -> ComponentFilterAbsolutePathNameContainsString

        Parameters
        ----------
        substring: std::string const &

        """
        this = _common.new_ComponentFilterAbsolutePathNameContainsString(substring)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isMatch(self, comp):
        """
        isMatch(ComponentFilterAbsolutePathNameContainsString self, Component comp) -> bool

        Parameters
        ----------
        comp: OpenSim::Component const &

        """
        return _common.ComponentFilterAbsolutePathNameContainsString_isMatch(self, comp)


    def clone(self):
        """
        clone(ComponentFilterAbsolutePathNameContainsString self) -> ComponentFilterAbsolutePathNameContainsString

        Parameters
        ----------
        self: OpenSim::ComponentFilterAbsolutePathNameContainsString const *

        """
        return _common.ComponentFilterAbsolutePathNameContainsString_clone(self)

    __swig_destroy__ = _common.delete_ComponentFilterAbsolutePathNameContainsString
    __del__ = lambda self: None
ComponentFilterAbsolutePathNameContainsString_swigregister = _common.ComponentFilterAbsolutePathNameContainsString_swigregister
ComponentFilterAbsolutePathNameContainsString_swigregister(ComponentFilterAbsolutePathNameContainsString)

class Path(_object):
    """Proxy of C++ OpenSim::Path class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_Path
    __del__ = lambda self: None

    def toString(self):
        """
        toString(Path self) -> std::string

        Parameters
        ----------
        self: OpenSim::Path const *

        """
        return _common.Path_toString(self)


    def isAbsolute(self):
        """
        isAbsolute(Path self) -> bool

        Parameters
        ----------
        self: OpenSim::Path const *

        """
        return _common.Path_isAbsolute(self)


    def getNumPathLevels(self):
        """
        getNumPathLevels(Path self) -> size_t

        Parameters
        ----------
        self: OpenSim::Path const *

        """
        return _common.Path_getNumPathLevels(self)


    def pushBack(self, pathElement):
        """
        pushBack(Path self, std::string const & pathElement)

        Parameters
        ----------
        pathElement: std::string const &

        """
        return _common.Path_pushBack(self, pathElement)


    def getSeparator(self):
        """
        getSeparator(Path self) -> char const

        Parameters
        ----------
        self: OpenSim::Path const *

        """
        return _common.Path_getSeparator(self)


    def getInvalidChars(self):
        """
        getInvalidChars(Path self) -> std::string const

        Parameters
        ----------
        self: OpenSim::Path const *

        """
        return _common.Path_getInvalidChars(self)


    def isLegalPathElement(self, pathElement):
        """
        isLegalPathElement(Path self, std::string const & pathElement) -> bool

        Parameters
        ----------
        pathElement: std::string const &

        """
        return _common.Path_isLegalPathElement(self, pathElement)


    def trimDotAndDotDotElements(self):
        """
        trimDotAndDotDotElements(Path self)

        Parameters
        ----------
        self: OpenSim::Path *

        """
        return _common.Path_trimDotAndDotDotElements(self)

Path_swigregister = _common.Path_swigregister
Path_swigregister(Path)

class ComponentPath(Path):
    """Proxy of C++ OpenSim::ComponentPath class."""

    __swig_setmethods__ = {}
    for _s in [Path]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentPath, name, value)
    __swig_getmethods__ = {}
    for _s in [Path]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentPath, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentPath self) -> ComponentPath
        __init__(OpenSim::ComponentPath self, std::string const & path) -> ComponentPath

        Parameters
        ----------
        path: std::string const &

        __init__(OpenSim::ComponentPath self, StdVectorString pathVec, bool isAbsolute) -> ComponentPath

        Parameters
        ----------
        pathVec: std::vector< std::string,std::allocator< std::string > > const &
        isAbsolute: bool

        """
        this = _common.new_ComponentPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        """
        __eq__(ComponentPath self, ComponentPath other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentPath const &

        """
        return _common.ComponentPath___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(ComponentPath self, ComponentPath other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentPath const &

        """
        return _common.ComponentPath___ne__(self, other)


    def getSeparator(self):
        """
        getSeparator(ComponentPath self) -> char const

        Parameters
        ----------
        self: OpenSim::ComponentPath const *

        """
        return _common.ComponentPath_getSeparator(self)


    def getInvalidChars(self):
        """
        getInvalidChars(ComponentPath self) -> std::string const

        Parameters
        ----------
        self: OpenSim::ComponentPath const *

        """
        return _common.ComponentPath_getInvalidChars(self)


    def formAbsolutePath(self, otherPath):
        """
        formAbsolutePath(ComponentPath self, ComponentPath otherPath) -> ComponentPath

        Parameters
        ----------
        otherPath: OpenSim::ComponentPath const &

        """
        return _common.ComponentPath_formAbsolutePath(self, otherPath)


    def formRelativePath(self, otherPath):
        """
        formRelativePath(ComponentPath self, ComponentPath otherPath) -> ComponentPath

        Parameters
        ----------
        otherPath: OpenSim::ComponentPath const &

        """
        return _common.ComponentPath_formRelativePath(self, otherPath)


    def getParentPath(self):
        """
        getParentPath(ComponentPath self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentPath const *

        """
        return _common.ComponentPath_getParentPath(self)


    def getParentPathString(self):
        """
        getParentPathString(ComponentPath self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentPath const *

        """
        return _common.ComponentPath_getParentPathString(self)


    def getSubcomponentNameAtLevel(self, index):
        """
        getSubcomponentNameAtLevel(ComponentPath self, size_t index) -> std::string

        Parameters
        ----------
        index: size_t

        """
        return _common.ComponentPath_getSubcomponentNameAtLevel(self, index)


    def getComponentName(self):
        """
        getComponentName(ComponentPath self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentPath const *

        """
        return _common.ComponentPath_getComponentName(self)

    __swig_destroy__ = _common.delete_ComponentPath
    __del__ = lambda self: None
ComponentPath_swigregister = _common.ComponentPath_swigregister
ComponentPath_swigregister(ComponentPath)

class ComponentHasNoName(OpenSimException):
    """Proxy of C++ OpenSim::ComponentHasNoName class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentHasNoName, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentHasNoName, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, componentConcreteClassName):
        """
        __init__(OpenSim::ComponentHasNoName self, std::string const & file, size_t line, std::string const & func, std::string const & componentConcreteClassName) -> ComponentHasNoName

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        componentConcreteClassName: std::string const &

        """
        this = _common.new_ComponentHasNoName(file, line, func, componentConcreteClassName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ComponentHasNoName
    __del__ = lambda self: None
ComponentHasNoName_swigregister = _common.ComponentHasNoName_swigregister
ComponentHasNoName_swigregister(ComponentHasNoName)

class InvalidComponentName(OpenSimException):
    """Proxy of C++ OpenSim::InvalidComponentName class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidComponentName, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidComponentName, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, thisName, invalidChars, componentConcreteClassName):
        """
        __init__(OpenSim::InvalidComponentName self, std::string const & file, size_t line, std::string const & func, std::string const & thisName, std::string const & invalidChars, std::string const & componentConcreteClassName) -> InvalidComponentName

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        thisName: std::string const &
        invalidChars: std::string const &
        componentConcreteClassName: std::string const &

        """
        this = _common.new_InvalidComponentName(file, line, func, thisName, invalidChars, componentConcreteClassName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidComponentName
    __del__ = lambda self: None
InvalidComponentName_swigregister = _common.InvalidComponentName_swigregister
InvalidComponentName_swigregister(InvalidComponentName)

class ComponentNotFoundOnSpecifiedPath(ComponentNotFound):
    """Proxy of C++ OpenSim::ComponentNotFoundOnSpecifiedPath class."""

    __swig_setmethods__ = {}
    for _s in [ComponentNotFound]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentNotFoundOnSpecifiedPath, name, value)
    __swig_getmethods__ = {}
    for _s in [ComponentNotFound]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentNotFoundOnSpecifiedPath, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, toFindName, toFindClassName, thisName):
        """
        __init__(OpenSim::ComponentNotFoundOnSpecifiedPath self, std::string const & file, size_t line, std::string const & func, std::string const & toFindName, std::string const & toFindClassName, std::string const & thisName) -> ComponentNotFoundOnSpecifiedPath

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        toFindName: std::string const &
        toFindClassName: std::string const &
        thisName: std::string const &

        """
        this = _common.new_ComponentNotFoundOnSpecifiedPath(file, line, func, toFindName, toFindClassName, thisName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ComponentNotFoundOnSpecifiedPath
    __del__ = lambda self: None
ComponentNotFoundOnSpecifiedPath_swigregister = _common.ComponentNotFoundOnSpecifiedPath_swigregister
ComponentNotFoundOnSpecifiedPath_swigregister(ComponentNotFoundOnSpecifiedPath)

class ComponentIsAnOrphan(OpenSimException):
    """Proxy of C++ OpenSim::ComponentIsAnOrphan class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentIsAnOrphan, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentIsAnOrphan, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, thisName, componentConcreteClassName):
        """
        __init__(OpenSim::ComponentIsAnOrphan self, std::string const & file, size_t line, std::string const & func, std::string const & thisName, std::string const & componentConcreteClassName) -> ComponentIsAnOrphan

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        thisName: std::string const &
        componentConcreteClassName: std::string const &

        """
        this = _common.new_ComponentIsAnOrphan(file, line, func, thisName, componentConcreteClassName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ComponentIsAnOrphan
    __del__ = lambda self: None
ComponentIsAnOrphan_swigregister = _common.ComponentIsAnOrphan_swigregister
ComponentIsAnOrphan_swigregister(ComponentIsAnOrphan)

class SubcomponentsWithDuplicateName(OpenSimException):
    """Proxy of C++ OpenSim::SubcomponentsWithDuplicateName class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubcomponentsWithDuplicateName, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubcomponentsWithDuplicateName, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, thisName, duplicateName):
        """
        __init__(OpenSim::SubcomponentsWithDuplicateName self, std::string const & file, size_t line, std::string const & func, std::string const & thisName, std::string const & duplicateName) -> SubcomponentsWithDuplicateName

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        thisName: std::string const &
        duplicateName: std::string const &

        """
        this = _common.new_SubcomponentsWithDuplicateName(file, line, func, thisName, duplicateName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_SubcomponentsWithDuplicateName
    __del__ = lambda self: None
SubcomponentsWithDuplicateName_swigregister = _common.SubcomponentsWithDuplicateName_swigregister
SubcomponentsWithDuplicateName_swigregister(SubcomponentsWithDuplicateName)

class ComponentIsRootWithNoSubcomponents(OpenSimException):
    """Proxy of C++ OpenSim::ComponentIsRootWithNoSubcomponents class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentIsRootWithNoSubcomponents, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentIsRootWithNoSubcomponents, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, thisName, componentConcreteClassName):
        """
        __init__(OpenSim::ComponentIsRootWithNoSubcomponents self, std::string const & file, size_t line, std::string const & func, std::string const & thisName, std::string const & componentConcreteClassName) -> ComponentIsRootWithNoSubcomponents

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        thisName: std::string const &
        componentConcreteClassName: std::string const &

        """
        this = _common.new_ComponentIsRootWithNoSubcomponents(file, line, func, thisName, componentConcreteClassName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ComponentIsRootWithNoSubcomponents
    __del__ = lambda self: None
ComponentIsRootWithNoSubcomponents_swigregister = _common.ComponentIsRootWithNoSubcomponents_swigregister
ComponentIsRootWithNoSubcomponents_swigregister(ComponentIsRootWithNoSubcomponents)

class ComponentAlreadyPartOfOwnershipTree(OpenSimException):
    """Proxy of C++ OpenSim::ComponentAlreadyPartOfOwnershipTree class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentAlreadyPartOfOwnershipTree, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentAlreadyPartOfOwnershipTree, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, compName, thisName):
        """
        __init__(OpenSim::ComponentAlreadyPartOfOwnershipTree self, std::string const & file, size_t line, std::string const & func, std::string const & compName, std::string const & thisName) -> ComponentAlreadyPartOfOwnershipTree

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        compName: std::string const &
        thisName: std::string const &

        """
        this = _common.new_ComponentAlreadyPartOfOwnershipTree(file, line, func, compName, thisName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ComponentAlreadyPartOfOwnershipTree
    __del__ = lambda self: None
ComponentAlreadyPartOfOwnershipTree_swigregister = _common.ComponentAlreadyPartOfOwnershipTree_swigregister
ComponentAlreadyPartOfOwnershipTree_swigregister(ComponentAlreadyPartOfOwnershipTree)

class ComponentHasNoSystem(OpenSimException):
    """Proxy of C++ OpenSim::ComponentHasNoSystem class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentHasNoSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentHasNoSystem, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, obj):
        """
        __init__(OpenSim::ComponentHasNoSystem self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj) -> ComponentHasNoSystem

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &

        """
        this = _common.new_ComponentHasNoSystem(file, line, func, obj)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ComponentHasNoSystem
    __del__ = lambda self: None
ComponentHasNoSystem_swigregister = _common.ComponentHasNoSystem_swigregister
ComponentHasNoSystem_swigregister(ComponentHasNoSystem)

class SocketNotFound(OpenSimException):
    """Proxy of C++ OpenSim::SocketNotFound class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, obj, socketName):
        """
        __init__(OpenSim::SocketNotFound self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & socketName) -> SocketNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        socketName: std::string const &

        """
        this = _common.new_SocketNotFound(file, line, func, obj, socketName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_SocketNotFound
    __del__ = lambda self: None
SocketNotFound_swigregister = _common.SocketNotFound_swigregister
SocketNotFound_swigregister(SocketNotFound)

class InputNotFound(OpenSimException):
    """Proxy of C++ OpenSim::InputNotFound class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, obj, inputName):
        """
        __init__(OpenSim::InputNotFound self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & inputName) -> InputNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        inputName: std::string const &

        """
        this = _common.new_InputNotFound(file, line, func, obj, inputName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InputNotFound
    __del__ = lambda self: None
InputNotFound_swigregister = _common.InputNotFound_swigregister
InputNotFound_swigregister(InputNotFound)

class OutputNotFound(OpenSimException):
    """Proxy of C++ OpenSim::OutputNotFound class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, obj, outputName):
        """
        __init__(OpenSim::OutputNotFound self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & outputName) -> OutputNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        outputName: std::string const &

        """
        this = _common.new_OutputNotFound(file, line, func, obj, outputName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_OutputNotFound
    __del__ = lambda self: None
OutputNotFound_swigregister = _common.OutputNotFound_swigregister
OutputNotFound_swigregister(OutputNotFound)

class Component(OpenSimObject):
    """Proxy of C++ OpenSim::Component class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Component

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Component_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Component self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Component_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.Component_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Component self) -> Component

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Component self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getConcreteClassName(self)

    __swig_destroy__ = _common.delete_Component
    __del__ = lambda self: None

    def finalizeFromProperties(self):
        """
        finalizeFromProperties(Component self)

        Parameters
        ----------
        self: OpenSim::Component *

        """
        return _common.Component_finalizeFromProperties(self)


    def finalizeConnections(self, root):
        """
        finalizeConnections(Component self, Component root)

        Parameters
        ----------
        root: OpenSim::Component &

        """
        return _common.Component_finalizeConnections(self, root)


    def clearConnections(self):
        """
        clearConnections(Component self)

        Parameters
        ----------
        self: OpenSim::Component *

        """
        return _common.Component_clearConnections(self)


    def addToSystem(self, system):
        """
        addToSystem(Component self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _common.Component_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(Component self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _common.Component_initStateFromProperties(self, state)


    def setPropertiesFromState(self, state):
        """
        setPropertiesFromState(Component self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.Component_setPropertiesFromState(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(Component self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _common.Component_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(Component self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(Component self) -> bool

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(Component self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _common.Component_isComponentInOwnershipTree(self, component)


    def addComponent(self, subcomponent):
        """
        addComponent(Component self, Component subcomponent)

        Parameters
        ----------
        subcomponent: OpenSim::Component *

        """
        val = _common.Component_addComponent(self, subcomponent)

        subcomponent._markAdopted()


        return val


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(Component self) -> std::string

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(Component self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(Component self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _common.Component_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(Component self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _common.Component_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(Component self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.Component_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(Component self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.Component_getComponent(self, pathname)


    def updComponent(self, pathname):
        """
        updComponent(Component self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.Component_updComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(Component self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _common.Component_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(Component self) -> int

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(Component self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(Component self) -> int

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getNumSockets(self)


    def getSocketNames(self):
        """
        getSocketNames(Component self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::Component *

        """
        return _common.Component_getSocketNames(self)


    def getConnectee(self, name):
        """
        getConnectee(Component self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(Component self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_getSocket(self, name)


    def updSocket(self, name):
        """
        updSocket(Component self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_updSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(Component self) -> int

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(Component self) -> int

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(Component self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(Component self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(Component self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_getInput(self, name)


    def updInput(self, name):
        """
        updInput(Component self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_updInput(self, name)


    def getOutput(self, name):
        """
        getOutput(Component self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_getOutput(self, name)


    def updOutput(self, name):
        """
        updOutput(Component self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_updOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(Component self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(Component self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _common.Component_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(Component self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(Component self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _common.Component_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(Component self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.Component_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(Component self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _common.Component_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(Component self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(Component self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(Component self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _common.Component_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(Component self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(Component self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(Component self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(Component self)

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(Component self)

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(Component self)

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(Component self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(Component self)

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(Component self) -> Component

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(Component self) -> bool

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_hasOwner(self)


    def getRoot(self):
        """
        getRoot(Component self) -> Component

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(Component self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(Component self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _common.Component_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(Component self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::Component const *

        """
        return _common.Component_getComponentsList(self)

Component_swigregister = _common.Component_swigregister
Component_swigregister(Component)

def Component_safeDownCast(obj):
    """
    Component_safeDownCast(OpenSimObject obj) -> Component

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.Component_safeDownCast(obj)

def Component_getClassName():
    """Component_getClassName() -> std::string const &"""
    return _common.Component_getClassName()

class ConnecteeNotSpecified(OpenSimException):
    """Proxy of C++ OpenSim::ConnecteeNotSpecified class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnecteeNotSpecified, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConnecteeNotSpecified, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, socket, owner):
        """
        __init__(OpenSim::ConnecteeNotSpecified self, std::string const & file, size_t line, std::string const & func, AbstractSocket socket, Component owner) -> ConnecteeNotSpecified

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        socket: OpenSim::AbstractSocket const &
        owner: OpenSim::Component const &

        """
        this = _common.new_ConnecteeNotSpecified(file, line, func, socket, owner)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ConnecteeNotSpecified
    __del__ = lambda self: None
ConnecteeNotSpecified_swigregister = _common.ConnecteeNotSpecified_swigregister
ConnecteeNotSpecified_swigregister(ConnecteeNotSpecified)

class ComponentsList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::Component)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentsList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::Component)> self, Component root, ComponentFilter f) -> ComponentsList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::Component)> self, Component root) -> ComponentsList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _common.new_ComponentsList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ComponentsList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(ComponentsList self) -> ComponentIterator
        begin(ComponentsList self) -> OpenSim::ComponentList< OpenSim::Component const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Component const > const *

        """
        return _common.ComponentsList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(ComponentsList self) -> OpenSim::ComponentList< OpenSim::Component const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Component const > const *

        """
        return _common.ComponentsList_cbegin(self)


    def end(self, *args):
        """
        end(ComponentsList self) -> ComponentIterator
        end(ComponentsList self) -> OpenSim::ComponentList< OpenSim::Component const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Component const > const *

        """
        return _common.ComponentsList_end(self, *args)


    def cend(self):
        """
        cend(ComponentsList self) -> OpenSim::ComponentList< OpenSim::Component const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Component const > const *

        """
        return _common.ComponentsList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(ComponentsList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _common.ComponentsList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

ComponentsList_swigregister = _common.ComponentsList_swigregister
ComponentsList_swigregister(ComponentsList)

class ComponentIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::Component)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(ComponentIterator self, ComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Component const > const &

        """
        return _common.ComponentIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(ComponentIterator self, ComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Component const > const &

        """
        return _common.ComponentIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(ComponentIterator self, ComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Component const > const &

        """
        return _common.ComponentIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(ComponentIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator___ref__(self)


    def deref(self):
        """
        deref(ComponentIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_deref(self)


    def __deref__(self):
        """
        __deref__(ComponentIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator___deref__(self)


    def next(self):
        """
        next(ComponentIterator self) -> ComponentIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > *

        """
        return _common.ComponentIterator_next(self)

    __swig_destroy__ = _common.delete_ComponentIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ComponentIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getConcreteClassName(self)


    def addToSystem(self, system):
        """
        addToSystem(ComponentIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _common.ComponentIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(ComponentIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _common.ComponentIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(ComponentIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _common.ComponentIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(ComponentIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(ComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(ComponentIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _common.ComponentIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(ComponentIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(ComponentIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(ComponentIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _common.ComponentIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(ComponentIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _common.ComponentIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(ComponentIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.ComponentIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(ComponentIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.ComponentIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(ComponentIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _common.ComponentIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(ComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(ComponentIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(ComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(ComponentIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(ComponentIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(ComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(ComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(ComponentIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(ComponentIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(ComponentIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(ComponentIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(ComponentIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(ComponentIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _common.ComponentIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(ComponentIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(ComponentIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _common.ComponentIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(ComponentIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.ComponentIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(ComponentIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _common.ComponentIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(ComponentIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(ComponentIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(ComponentIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _common.ComponentIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(ComponentIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(ComponentIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(ComponentIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(ComponentIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(ComponentIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(ComponentIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(ComponentIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(ComponentIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(ComponentIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(ComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(ComponentIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(ComponentIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(ComponentIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _common.ComponentIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(ComponentIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(ComponentIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _common.ComponentIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(ComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getName(self)


    def getDescription(self):
        """
        getDescription(ComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(ComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(ComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(ComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(ComponentIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _common.ComponentIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(ComponentIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(ComponentIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(ComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(ComponentIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(ComponentIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _common.ComponentIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(ComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(ComponentIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(ComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(ComponentIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.ComponentIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(ComponentIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_dump(self)


    def isA(self, type):
        """
        isA(ComponentIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _common.ComponentIterator_isA(self, type)


    def toString(self):
        """
        toString(ComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Component const > const *

        """
        return _common.ComponentIterator_toString(self)

ComponentIterator_swigregister = _common.ComponentIterator_swigregister
ComponentIterator_swigregister(ComponentIterator)

class Scale(OpenSimObject):
    """Proxy of C++ OpenSim::Scale class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Scale

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Scale_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Scale self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Scale_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.Scale_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Scale self) -> Scale

        Parameters
        ----------
        self: OpenSim::Scale const *

        """
        return _common.Scale_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Scale self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Scale const *

        """
        return _common.Scale_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Scale self) -> Scale
        __init__(OpenSim::Scale self, Scale aMarker) -> Scale

        Parameters
        ----------
        aMarker: OpenSim::Scale const &

        __init__(OpenSim::Scale self, std::string const & scaleFileName) -> Scale

        Parameters
        ----------
        scaleFileName: std::string const &

        """
        this = _common.new_Scale(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_Scale
    __del__ = lambda self: None

    def getSegmentName(self):
        """
        getSegmentName(Scale self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Scale const *

        """
        return _common.Scale_getSegmentName(self)


    def setSegmentName(self, aSegmentName):
        """
        setSegmentName(Scale self, std::string const & aSegmentName)

        Parameters
        ----------
        aSegmentName: std::string const &

        """
        return _common.Scale_setSegmentName(self, aSegmentName)


    def getScaleFactors(self, *args):
        """
        getScaleFactors(Scale self, Vec3 aScaleFactors)

        Parameters
        ----------
        aScaleFactors: SimTK::Vec3 &

        getScaleFactors(Scale self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Scale *

        """
        return _common.Scale_getScaleFactors(self, *args)


    def setScaleFactors(self, aScaleFactors):
        """
        setScaleFactors(Scale self, Vec3 aScaleFactors)

        Parameters
        ----------
        aScaleFactors: SimTK::Vec3 const &

        """
        return _common.Scale_setScaleFactors(self, aScaleFactors)


    def getApply(self):
        """
        getApply(Scale self) -> bool

        Parameters
        ----------
        self: OpenSim::Scale const *

        """
        return _common.Scale_getApply(self)


    def setApply(self, state):
        """
        setApply(Scale self, bool state)

        Parameters
        ----------
        state: bool

        """
        return _common.Scale_setApply(self, state)

Scale_swigregister = _common.Scale_swigregister
Scale_swigregister(Scale)

def Scale_safeDownCast(obj):
    """
    Scale_safeDownCast(OpenSimObject obj) -> Scale

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.Scale_safeDownCast(obj)

def Scale_getClassName():
    """Scale_getClassName() -> std::string const &"""
    return _common.Scale_getClassName()

class SetScales(OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Scale,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetScales, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetScales, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetScales

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.SetScales_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetScales self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.SetScales_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.SetScales_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetScales self) -> SetScales

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Scale,OpenSim::Object > const *

        """
        return _common.SetScales_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetScales self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Scale,OpenSim::Object > const *

        """
        return _common.SetScales_getConcreteClassName(self)

    __swig_destroy__ = _common.delete_SetScales
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Scale,OpenSim::Object)> self) -> SetScales
        __init__(OpenSim::Set<(OpenSim::Scale,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetScales

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Scale,OpenSim::Object)> self, std::string const & aFileName) -> SetScales

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Scale,OpenSim::Object)> self, SetScales aSet) -> SetScales

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Scale,OpenSim::Object > const &

        """
        this = _common.new_SetScales(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetScales self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Scale,OpenSim::Object > *

        """
        return _common.SetScales_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetScales self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.SetScales_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetScales self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.SetScales_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetScales self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Scale,OpenSim::Object > const *

        """
        return _common.SetScales_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetScales self, Scale aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Scale const *
        aStartIndex: int

        getIndex(SetScales self, Scale aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Scale const *

        getIndex(SetScales self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetScales self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetScales_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetScales self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.SetScales_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetScales self, Scale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Scale *

        """
        return _common.SetScales_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetScales self, Scale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Scale const &

        """
        return _common.SetScales_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetScales self, int aIndex, Scale aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Scale *

        """
        return _common.SetScales_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetScales self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetScales self, Scale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Scale const *

        """
        return _common.SetScales_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetScales self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Scale,OpenSim::Object > *

        """
        return _common.SetScales_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetScales self, int aIndex, Scale aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Scale *
        preserveGroups: bool

        set(SetScales self, int aIndex, Scale aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Scale *

        """
        return _common.SetScales_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetScales self, int aIndex) -> Scale

        Parameters
        ----------
        aIndex: int

        get(SetScales self, std::string const & aName) -> Scale

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetScales_get(self, *args)


    def contains(self, aName):
        """
        contains(SetScales self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetScales_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetScales self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _common.SetScales_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetScales self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Scale,OpenSim::Object > const *

        """
        return _common.SetScales_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetScales self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.SetScales_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetScales self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.SetScales_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetScales self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _common.SetScales_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetScales self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _common.SetScales_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetScales self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.SetScales_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetScales self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetScales self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _common.SetScales_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetScales_swigregister = _common.SetScales_swigregister
SetScales_swigregister(SetScales)

def SetScales_safeDownCast(obj):
    """
    SetScales_safeDownCast(OpenSimObject obj) -> SetScales

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.SetScales_safeDownCast(obj)

def SetScales_getClassName():
    """SetScales_getClassName() -> std::string const &"""
    return _common.SetScales_getClassName()

class ScaleSet(SetScales):
    """Proxy of C++ OpenSim::ScaleSet class."""

    __swig_setmethods__ = {}
    for _s in [SetScales]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetScales]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ScaleSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ScaleSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ScaleSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ScaleSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ScaleSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ScaleSet self) -> ScaleSet

        Parameters
        ----------
        self: OpenSim::ScaleSet const *

        """
        return _common.ScaleSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ScaleSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ScaleSet const *

        """
        return _common.ScaleSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ScaleSet self) -> ScaleSet
        __init__(OpenSim::ScaleSet self, std::string const & scalesFileName) -> ScaleSet

        Parameters
        ----------
        scalesFileName: std::string const &

        """
        this = _common.new_ScaleSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ScaleSet
    __del__ = lambda self: None

    def adoptAndAppend(self, aScale):
        aScale._markAdopted()
        return super(ScaleSet, self).adoptAndAppend(aScale)

ScaleSet_swigregister = _common.ScaleSet_swigregister
ScaleSet_swigregister(ScaleSet)

def ScaleSet_safeDownCast(obj):
    """
    ScaleSet_safeDownCast(OpenSimObject obj) -> ScaleSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ScaleSet_safeDownCast(obj)

def ScaleSet_getClassName():
    """ScaleSet_getClassName() -> std::string const &"""
    return _common.ScaleSet_getClassName()

class MarkerFrame(OpenSimObject):
    """Proxy of C++ OpenSim::MarkerFrame class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerFrame, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerFrame

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.MarkerFrame_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MarkerFrame self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.MarkerFrame_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.MarkerFrame_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MarkerFrame self) -> MarkerFrame

        Parameters
        ----------
        self: OpenSim::MarkerFrame const *

        """
        return _common.MarkerFrame_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerFrame self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerFrame const *

        """
        return _common.MarkerFrame_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerFrame self) -> MarkerFrame
        __init__(OpenSim::MarkerFrame self, int aNumMarkers, int aFrameNumber, double aTime, Units aUnits) -> MarkerFrame

        Parameters
        ----------
        aNumMarkers: int
        aFrameNumber: int
        aTime: double
        aUnits: OpenSim::Units &

        __init__(OpenSim::MarkerFrame self, MarkerFrame aFrame) -> MarkerFrame

        Parameters
        ----------
        aFrame: OpenSim::MarkerFrame const &

        """
        this = _common.new_MarkerFrame(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_MarkerFrame
    __del__ = lambda self: None

    def addMarker(self, aCoords):
        """
        addMarker(MarkerFrame self, Vec3 aCoords)

        Parameters
        ----------
        aCoords: SimTK::Vec3 const &

        """
        return _common.MarkerFrame_addMarker(self, aCoords)


    def getMarker(self, aIndex):
        """
        getMarker(MarkerFrame self, int aIndex) -> Vec3

        Parameters
        ----------
        aIndex: int

        """
        return _common.MarkerFrame_getMarker(self, aIndex)


    def updMarker(self, aIndex):
        """
        updMarker(MarkerFrame self, int aIndex) -> Vec3

        Parameters
        ----------
        aIndex: int

        """
        return _common.MarkerFrame_updMarker(self, aIndex)


    def getFrameNumber(self):
        """
        getFrameNumber(MarkerFrame self) -> int

        Parameters
        ----------
        self: OpenSim::MarkerFrame const *

        """
        return _common.MarkerFrame_getFrameNumber(self)


    def setFrameNumber(self, aNumber):
        """
        setFrameNumber(MarkerFrame self, int aNumber)

        Parameters
        ----------
        aNumber: int

        """
        return _common.MarkerFrame_setFrameNumber(self, aNumber)


    def getFrameTime(self):
        """
        getFrameTime(MarkerFrame self) -> double

        Parameters
        ----------
        self: OpenSim::MarkerFrame const *

        """
        return _common.MarkerFrame_getFrameTime(self)


    def scale(self, aScaleFactor):
        """
        scale(MarkerFrame self, double aScaleFactor)

        Parameters
        ----------
        aScaleFactor: double

        """
        return _common.MarkerFrame_scale(self, aScaleFactor)


    def getMarkers(self):
        """
        getMarkers(MarkerFrame self) -> SimTKArrayVec3

        Parameters
        ----------
        self: OpenSim::MarkerFrame const *

        """
        return _common.MarkerFrame_getMarkers(self)

MarkerFrame_swigregister = _common.MarkerFrame_swigregister
MarkerFrame_swigregister(MarkerFrame)

def MarkerFrame_safeDownCast(obj):
    """
    MarkerFrame_safeDownCast(OpenSimObject obj) -> MarkerFrame

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.MarkerFrame_safeDownCast(obj)

def MarkerFrame_getClassName():
    """MarkerFrame_getClassName() -> std::string const &"""
    return _common.MarkerFrame_getClassName()

class MarkerData(OpenSimObject):
    """Proxy of C++ OpenSim::MarkerData class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerData, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerData, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerData

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.MarkerData_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MarkerData self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.MarkerData_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.MarkerData_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MarkerData self) -> MarkerData

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerData self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerData self) -> MarkerData
        __init__(OpenSim::MarkerData self, std::string const & aFileName) -> MarkerData

        Parameters
        ----------
        aFileName: std::string const &

        """
        this = _common.new_MarkerData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_MarkerData
    __del__ = lambda self: None

    def findFrameRange(self, aStartTime, aEndTime, rStartFrame, rEndFrame):
        """
        findFrameRange(MarkerData self, double aStartTime, double aEndTime, int & rStartFrame, int & rEndFrame)

        Parameters
        ----------
        aStartTime: double
        aEndTime: double
        rStartFrame: int &
        rEndFrame: int &

        """
        return _common.MarkerData_findFrameRange(self, aStartTime, aEndTime, rStartFrame, rEndFrame)


    def averageFrames(self, *args):
        """
        averageFrames(MarkerData self, double aThreshold=-1.0, double aStartTime, double aEndTime)

        Parameters
        ----------
        aThreshold: double
        aStartTime: double
        aEndTime: double

        averageFrames(MarkerData self, double aThreshold=-1.0, double aStartTime)

        Parameters
        ----------
        aThreshold: double
        aStartTime: double

        averageFrames(MarkerData self, double aThreshold=-1.0)

        Parameters
        ----------
        aThreshold: double

        averageFrames(MarkerData self)

        Parameters
        ----------
        self: OpenSim::MarkerData *

        """
        return _common.MarkerData_averageFrames(self, *args)


    def getFileName(self):
        """
        getFileName(MarkerData self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getFileName(self)


    def makeRdStorage(self, rStorage):
        """
        makeRdStorage(MarkerData self, Storage rStorage)

        Parameters
        ----------
        rStorage: OpenSim::Storage &

        """
        return _common.MarkerData_makeRdStorage(self, rStorage)


    def getFrame(self, aIndex):
        """
        getFrame(MarkerData self, int aIndex) -> MarkerFrame

        Parameters
        ----------
        aIndex: int

        """
        return _common.MarkerData_getFrame(self, aIndex)


    def getMarkerIndex(self, aName):
        """
        getMarkerIndex(MarkerData self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.MarkerData_getMarkerIndex(self, aName)


    def getUnits(self):
        """
        getUnits(MarkerData self) -> Units

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getUnits(self)


    def convertToUnits(self, aUnits):
        """
        convertToUnits(MarkerData self, Units aUnits)

        Parameters
        ----------
        aUnits: OpenSim::Units const &

        """
        return _common.MarkerData_convertToUnits(self, aUnits)


    def getMarkerNames(self):
        """
        getMarkerNames(MarkerData self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getMarkerNames(self)


    def getNumMarkers(self):
        """
        getNumMarkers(MarkerData self) -> int

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getNumMarkers(self)


    def getNumFrames(self):
        """
        getNumFrames(MarkerData self) -> int

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getNumFrames(self)


    def getStartFrameTime(self):
        """
        getStartFrameTime(MarkerData self) -> double

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getStartFrameTime(self)


    def getLastFrameTime(self):
        """
        getLastFrameTime(MarkerData self) -> double

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getLastFrameTime(self)


    def getDataRate(self):
        """
        getDataRate(MarkerData self) -> double

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getDataRate(self)


    def getCameraRate(self):
        """
        getCameraRate(MarkerData self) -> double

        Parameters
        ----------
        self: OpenSim::MarkerData const *

        """
        return _common.MarkerData_getCameraRate(self)

MarkerData_swigregister = _common.MarkerData_swigregister
MarkerData_swigregister(MarkerData)

def MarkerData_safeDownCast(obj):
    """
    MarkerData_safeDownCast(OpenSimObject obj) -> MarkerData

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.MarkerData_safeDownCast(obj)

def MarkerData_getClassName():
    """MarkerData_getClassName() -> std::string const &"""
    return _common.MarkerData_getClassName()

class StdVectorMatrix(_object):
    """Proxy of C++ std::vector<(SimTK::Matrix_<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StdVectorMatrix self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > *

        """
        return _common.StdVectorMatrix_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StdVectorMatrix self) -> bool

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StdVectorMatrix self) -> bool

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix___bool__(self)


    def __len__(self):
        """
        __len__(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::size_type

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, std::vector< SimTK::Matrix_< double > >::difference_type j) -> StdVectorMatrix

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        j: std::vector< SimTK::Matrix_< double > >::difference_type

        """
        return _common.StdVectorMatrix___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, std::vector< SimTK::Matrix_< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        j: std::vector< SimTK::Matrix_< double > >::difference_type

        __setslice__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, std::vector< SimTK::Matrix_< double > >::difference_type j, StdVectorMatrix v)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        j: std::vector< SimTK::Matrix_< double > >::difference_type
        v: std::vector< SimTK::Matrix_< double >,std::allocator< SimTK::Matrix_< double > > > const &

        """
        return _common.StdVectorMatrix___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, std::vector< SimTK::Matrix_< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        j: std::vector< SimTK::Matrix_< double > >::difference_type

        """
        return _common.StdVectorMatrix___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type

        __delitem__(StdVectorMatrix self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _common.StdVectorMatrix___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StdVectorMatrix self, PySliceObject * slice) -> StdVectorMatrix

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i) -> Matrix

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type

        """
        return _common.StdVectorMatrix___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StdVectorMatrix self, PySliceObject * slice, StdVectorMatrix v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< SimTK::Matrix_< double >,std::allocator< SimTK::Matrix_< double > > > const &

        __setitem__(StdVectorMatrix self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, Matrix x)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix___setitem__(self, *args)


    def pop(self):
        """
        pop(StdVectorMatrix self) -> Matrix

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > *

        """
        return _common.StdVectorMatrix_pop(self)


    def append(self, x):
        """
        append(StdVectorMatrix self, Matrix x)

        Parameters
        ----------
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_append(self, x)


    def empty(self):
        """
        empty(StdVectorMatrix self) -> bool

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix_empty(self)


    def size(self):
        """
        size(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::size_type

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix_size(self)


    def swap(self, v):
        """
        swap(StdVectorMatrix self, StdVectorMatrix v)

        Parameters
        ----------
        v: std::vector< SimTK::Matrix_< double > > &

        """
        return _common.StdVectorMatrix_swap(self, v)


    def begin(self):
        """
        begin(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::iterator

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > *

        """
        return _common.StdVectorMatrix_begin(self)


    def end(self):
        """
        end(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::iterator

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > *

        """
        return _common.StdVectorMatrix_end(self)


    def rbegin(self):
        """
        rbegin(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > *

        """
        return _common.StdVectorMatrix_rbegin(self)


    def rend(self):
        """
        rend(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > *

        """
        return _common.StdVectorMatrix_rend(self)


    def clear(self):
        """
        clear(StdVectorMatrix self)

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > *

        """
        return _common.StdVectorMatrix_clear(self)


    def get_allocator(self):
        """
        get_allocator(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::allocator_type

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix_get_allocator(self)


    def pop_back(self):
        """
        pop_back(StdVectorMatrix self)

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > *

        """
        return _common.StdVectorMatrix_pop_back(self)


    def erase(self, *args):
        """
        erase(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::iterator pos) -> std::vector< SimTK::Matrix_< double > >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::Matrix_< double > >::iterator

        erase(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::iterator first, std::vector< SimTK::Matrix_< double > >::iterator last) -> std::vector< SimTK::Matrix_< double > >::iterator

        Parameters
        ----------
        first: std::vector< SimTK::Matrix_< double > >::iterator
        last: std::vector< SimTK::Matrix_< double > >::iterator

        """
        return _common.StdVectorMatrix_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(SimTK::Matrix_<(double)>)> self) -> StdVectorMatrix
        __init__(std::vector<(SimTK::Matrix_<(double)>)> self, StdVectorMatrix arg2) -> StdVectorMatrix

        Parameters
        ----------
        arg2: std::vector< SimTK::Matrix_< double > > const &

        __init__(std::vector<(SimTK::Matrix_<(double)>)> self, std::vector< SimTK::Matrix_< double > >::size_type size) -> StdVectorMatrix

        Parameters
        ----------
        size: std::vector< SimTK::Matrix_< double > >::size_type

        __init__(std::vector<(SimTK::Matrix_<(double)>)> self, std::vector< SimTK::Matrix_< double > >::size_type size, Matrix value) -> StdVectorMatrix

        Parameters
        ----------
        size: std::vector< SimTK::Matrix_< double > >::size_type
        value: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        this = _common.new_StdVectorMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(StdVectorMatrix self, Matrix x)

        Parameters
        ----------
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_push_back(self, x)


    def front(self):
        """
        front(StdVectorMatrix self) -> Matrix

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix_front(self)


    def back(self):
        """
        back(StdVectorMatrix self) -> Matrix

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix_back(self)


    def assign(self, n, x):
        """
        assign(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type n, Matrix x)

        Parameters
        ----------
        n: std::vector< SimTK::Matrix_< double > >::size_type
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< SimTK::Matrix_< double > >::size_type

        resize(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type new_size, Matrix x)

        Parameters
        ----------
        new_size: std::vector< SimTK::Matrix_< double > >::size_type
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_resize(self, *args)


    def insert(self, *args):
        """
        insert(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::iterator pos, Matrix x) -> std::vector< SimTK::Matrix_< double > >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::Matrix_< double > >::iterator
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        insert(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::iterator pos, std::vector< SimTK::Matrix_< double > >::size_type n, Matrix x)

        Parameters
        ----------
        pos: std::vector< SimTK::Matrix_< double > >::iterator
        n: std::vector< SimTK::Matrix_< double > >::size_type
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_insert(self, *args)


    def reserve(self, n):
        """
        reserve(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type n)

        Parameters
        ----------
        n: std::vector< SimTK::Matrix_< double > >::size_type

        """
        return _common.StdVectorMatrix_reserve(self, n)


    def capacity(self):
        """
        capacity(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::size_type

        Parameters
        ----------
        self: std::vector< SimTK::Matrix_< double > > const *

        """
        return _common.StdVectorMatrix_capacity(self)

    __swig_destroy__ = _common.delete_StdVectorMatrix
    __del__ = lambda self: None
StdVectorMatrix_swigregister = _common.StdVectorMatrix_swigregister
StdVectorMatrix_swigregister(StdVectorMatrix)

class InvalidRow(OpenSimException):
    """Proxy of C++ OpenSim::InvalidRow class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidRow, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidRow, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::InvalidRow self) -> InvalidRow"""
        this = _common.new_InvalidRow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidRow
    __del__ = lambda self: None
InvalidRow_swigregister = _common.InvalidRow_swigregister
InvalidRow_swigregister(InvalidRow)

class InvalidColumn(OpenSimException):
    """Proxy of C++ OpenSim::InvalidColumn class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidColumn, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidColumn, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::InvalidColumn self) -> InvalidColumn"""
        this = _common.new_InvalidColumn()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidColumn
    __del__ = lambda self: None
InvalidColumn_swigregister = _common.InvalidColumn_swigregister
InvalidColumn_swigregister(InvalidColumn)

class InvalidColumnLabel(OpenSimException):
    """Proxy of C++ OpenSim::InvalidColumnLabel class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidColumnLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidColumnLabel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::InvalidColumnLabel self) -> InvalidColumnLabel"""
        this = _common.new_InvalidColumnLabel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidColumnLabel
    __del__ = lambda self: None
InvalidColumnLabel_swigregister = _common.InvalidColumnLabel_swigregister
InvalidColumnLabel_swigregister(InvalidColumnLabel)

class IncorrectNumColumns(InvalidRow):
    """Proxy of C++ OpenSim::IncorrectNumColumns class."""

    __swig_setmethods__ = {}
    for _s in [InvalidRow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectNumColumns, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidRow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectNumColumns, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, expected, received):
        """
        __init__(OpenSim::IncorrectNumColumns self, std::string const & file, size_t line, std::string const & func, size_t expected, size_t received) -> IncorrectNumColumns

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        expected: size_t
        received: size_t

        """
        this = _common.new_IncorrectNumColumns(file, line, func, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IncorrectNumColumns
    __del__ = lambda self: None
IncorrectNumColumns_swigregister = _common.IncorrectNumColumns_swigregister
IncorrectNumColumns_swigregister(IncorrectNumColumns)

class IncorrectNumRows(InvalidColumn):
    """Proxy of C++ OpenSim::IncorrectNumRows class."""

    __swig_setmethods__ = {}
    for _s in [InvalidColumn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectNumRows, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidColumn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectNumRows, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, expected, received):
        """
        __init__(OpenSim::IncorrectNumRows self, std::string const & file, size_t line, std::string const & func, size_t expected, size_t received) -> IncorrectNumRows

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        expected: size_t
        received: size_t

        """
        this = _common.new_IncorrectNumRows(file, line, func, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IncorrectNumRows
    __del__ = lambda self: None
IncorrectNumRows_swigregister = _common.IncorrectNumRows_swigregister
IncorrectNumRows_swigregister(IncorrectNumRows)

class RowIndexOutOfRange(IndexOutOfRange):
    """Proxy of C++ OpenSim::RowIndexOutOfRange class."""

    __swig_setmethods__ = {}
    for _s in [IndexOutOfRange]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowIndexOutOfRange, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexOutOfRange]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RowIndexOutOfRange, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_RowIndexOutOfRange
    __del__ = lambda self: None
RowIndexOutOfRange_swigregister = _common.RowIndexOutOfRange_swigregister
RowIndexOutOfRange_swigregister(RowIndexOutOfRange)

class ColumnIndexOutOfRange(IndexOutOfRange):
    """Proxy of C++ OpenSim::ColumnIndexOutOfRange class."""

    __swig_setmethods__ = {}
    for _s in [IndexOutOfRange]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColumnIndexOutOfRange, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexOutOfRange]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColumnIndexOutOfRange, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ColumnIndexOutOfRange
    __del__ = lambda self: None
ColumnIndexOutOfRange_swigregister = _common.ColumnIndexOutOfRange_swigregister
ColumnIndexOutOfRange_swigregister(ColumnIndexOutOfRange)

class MissingMetaData(OpenSimException):
    """Proxy of C++ OpenSim::MissingMetaData class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MissingMetaData, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MissingMetaData, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        """
        __init__(OpenSim::MissingMetaData self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> MissingMetaData

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        this = _common.new_MissingMetaData(file, line, func, key)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_MissingMetaData
    __del__ = lambda self: None
MissingMetaData_swigregister = _common.MissingMetaData_swigregister
MissingMetaData_swigregister(MissingMetaData)

class NoColumnLabels(OpenSimException):
    """Proxy of C++ OpenSim::NoColumnLabels class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoColumnLabels, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoColumnLabels, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        """
        __init__(OpenSim::NoColumnLabels self, std::string const & file, size_t line, std::string const & func) -> NoColumnLabels

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_NoColumnLabels(file, line, func)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_NoColumnLabels
    __del__ = lambda self: None
NoColumnLabels_swigregister = _common.NoColumnLabels_swigregister
NoColumnLabels_swigregister(NoColumnLabels)

class IncorrectMetaDataLength(OpenSimException):
    """Proxy of C++ OpenSim::IncorrectMetaDataLength class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectMetaDataLength, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectMetaDataLength, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key, expected, received):
        """
        __init__(OpenSim::IncorrectMetaDataLength self, std::string const & file, size_t line, std::string const & func, std::string const & key, size_t expected, size_t received) -> IncorrectMetaDataLength

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &
        expected: size_t
        received: size_t

        """
        this = _common.new_IncorrectMetaDataLength(file, line, func, key, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IncorrectMetaDataLength
    __del__ = lambda self: None
IncorrectMetaDataLength_swigregister = _common.IncorrectMetaDataLength_swigregister
IncorrectMetaDataLength_swigregister(IncorrectMetaDataLength)

class EmptyTable(OpenSimException):
    """Proxy of C++ OpenSim::EmptyTable class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyTable, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        """
        __init__(OpenSim::EmptyTable self, std::string const & file, size_t line, std::string const & func) -> EmptyTable

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_EmptyTable(file, line, func)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_EmptyTable
    __del__ = lambda self: None
EmptyTable_swigregister = _common.EmptyTable_swigregister
EmptyTable_swigregister(EmptyTable)

class KeyExists(OpenSimException):
    """Proxy of C++ OpenSim::KeyExists class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyExists, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyExists, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        """
        __init__(OpenSim::KeyExists self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> KeyExists

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        this = _common.new_KeyExists(file, line, func, key)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_KeyExists
    __del__ = lambda self: None
KeyExists_swigregister = _common.KeyExists_swigregister
KeyExists_swigregister(KeyExists)

class AbstractDataTable(_object):
    """Proxy of C++ OpenSim::AbstractDataTable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractDataTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractDataTable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractDataTable
    __del__ = lambda self: None

    def numComponentsPerElement(self):
        """
        numComponentsPerElement(AbstractDataTable self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::AbstractDataTable const *

        """
        return _common.AbstractDataTable_numComponentsPerElement(self)


    def getNumRows(self):
        """
        getNumRows(AbstractDataTable self) -> size_t

        Parameters
        ----------
        self: OpenSim::AbstractDataTable const *

        """
        return _common.AbstractDataTable_getNumRows(self)


    def getNumColumns(self):
        """
        getNumColumns(AbstractDataTable self) -> size_t

        Parameters
        ----------
        self: OpenSim::AbstractDataTable const *

        """
        return _common.AbstractDataTable_getNumColumns(self)


    def hasTableMetaDataKey(self, key):
        """
        hasTableMetaDataKey(AbstractDataTable self, std::string const & key) -> bool

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_hasTableMetaDataKey(self, key)


    def getTableMetaDataAsString(self, key):
        """
        getTableMetaDataAsString(AbstractDataTable self, std::string const & key) -> std::string

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getTableMetaDataAsString(self, key)


    def removeTableMetaDataKey(self, key):
        """
        removeTableMetaDataKey(AbstractDataTable self, std::string const & key)

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_removeTableMetaDataKey(self, key)


    def getTableMetaDataKeys(self):
        """
        getTableMetaDataKeys(AbstractDataTable self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::AbstractDataTable const *

        """
        return _common.AbstractDataTable_getTableMetaDataKeys(self)


    def removeDependentsMetaDataForKey(self, key):
        """
        removeDependentsMetaDataForKey(AbstractDataTable self, std::string const & key)

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_removeDependentsMetaDataForKey(self, key)


    def hasColumnLabels(self):
        """
        hasColumnLabels(AbstractDataTable self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractDataTable const *

        """
        return _common.AbstractDataTable_hasColumnLabels(self)


    def getColumnLabels(self):
        """
        getColumnLabels(AbstractDataTable self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::AbstractDataTable const *

        """
        return _common.AbstractDataTable_getColumnLabels(self)


    def getColumnLabel(self, columnIndex):
        """
        getColumnLabel(AbstractDataTable self, size_t const columnIndex) -> std::string const &

        Parameters
        ----------
        columnIndex: size_t const

        """
        return _common.AbstractDataTable_getColumnLabel(self, columnIndex)


    def setColumnLabel(self, columnIndex, columnLabel):
        """
        setColumnLabel(AbstractDataTable self, size_t const columnIndex, std::string const & columnLabel)

        Parameters
        ----------
        columnIndex: size_t const
        columnLabel: std::string const &

        """
        return _common.AbstractDataTable_setColumnLabel(self, columnIndex, columnLabel)


    def getColumnIndex(self, columnLabel):
        """
        getColumnIndex(AbstractDataTable self, std::string const & columnLabel) -> size_t

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.AbstractDataTable_getColumnIndex(self, columnLabel)


    def hasColumn(self, *args):
        """
        hasColumn(AbstractDataTable self, std::string const & columnLabel) -> bool

        Parameters
        ----------
        columnLabel: std::string const &

        hasColumn(AbstractDataTable self, size_t const columnIndex) -> bool

        Parameters
        ----------
        columnIndex: size_t const

        """
        return _common.AbstractDataTable_hasColumn(self, *args)


    def setColumnLabels(self, columnLabels):
        """
        setColumnLabels(AbstractDataTable self, StdVectorString columnLabels)

        Parameters
        ----------
        columnLabels: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.AbstractDataTable_setColumnLabels(self, columnLabels)


    def addTableMetaDataString(self, key, value):
        """
        addTableMetaDataString(AbstractDataTable self, std::string const & key, std::string const & value)

        Parameters
        ----------
        key: std::string const &
        value: std::string const &

        """
        return _common.AbstractDataTable_addTableMetaDataString(self, key, value)


    def getTableMetaDataVectorMatrix(self, key):
        """
        getTableMetaDataVectorMatrix(AbstractDataTable self, std::string const & key) -> StdVectorMatrix

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getTableMetaDataVectorMatrix(self, key)


    def getTableMetaDataVectorUnsigned(self, key):
        """
        getTableMetaDataVectorUnsigned(AbstractDataTable self, std::string const & key) -> StdVectorUnsigned

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getTableMetaDataVectorUnsigned(self, key)


    def getTableMetaDataString(self, key):
        """
        getTableMetaDataString(AbstractDataTable self, std::string const & key) -> std::string

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getTableMetaDataString(self, key)


    def getDependentsMetaDataString(self, key):
        """
        getDependentsMetaDataString(AbstractDataTable self, std::string const & key) -> StdVectorString

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getDependentsMetaDataString(self, key)

AbstractDataTable_swigregister = _common.AbstractDataTable_swigregister
AbstractDataTable_swigregister(AbstractDataTable)

class InvalidTable(OpenSimException):
    """Proxy of C++ OpenSim::InvalidTable class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidTable, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::InvalidTable self) -> InvalidTable"""
        this = _common.new_InvalidTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidTable
    __del__ = lambda self: None
InvalidTable_swigregister = _common.InvalidTable_swigregister
InvalidTable_swigregister(InvalidTable)

class TimeColumnNotIncreasing(InvalidTable):
    """Proxy of C++ OpenSim::TimeColumnNotIncreasing class."""

    __swig_setmethods__ = {}
    for _s in [InvalidTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeColumnNotIncreasing, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeColumnNotIncreasing, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        """
        __init__(OpenSim::TimeColumnNotIncreasing self, std::string const & file, size_t line, std::string const & func) -> TimeColumnNotIncreasing

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_TimeColumnNotIncreasing(file, line, func)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TimeColumnNotIncreasing
    __del__ = lambda self: None
TimeColumnNotIncreasing_swigregister = _common.TimeColumnNotIncreasing_swigregister
TimeColumnNotIncreasing_swigregister(TimeColumnNotIncreasing)

class InvalidTimestamp(InvalidRow):
    """Proxy of C++ OpenSim::InvalidTimestamp class."""

    __swig_setmethods__ = {}
    for _s in [InvalidRow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidTimestamp, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidRow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidTimestamp, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::InvalidTimestamp self) -> InvalidTimestamp"""
        this = _common.new_InvalidTimestamp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidTimestamp
    __del__ = lambda self: None
InvalidTimestamp_swigregister = _common.InvalidTimestamp_swigregister
InvalidTimestamp_swigregister(InvalidTimestamp)

class TimestampLessThanEqualToPrevious(InvalidTimestamp):
    """Proxy of C++ OpenSim::TimestampLessThanEqualToPrevious class."""

    __swig_setmethods__ = {}
    for _s in [InvalidTimestamp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimestampLessThanEqualToPrevious, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidTimestamp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimestampLessThanEqualToPrevious, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, rowIndex, new_timestamp, prev_timestamp):
        """
        __init__(OpenSim::TimestampLessThanEqualToPrevious self, std::string const & file, size_t line, std::string const & func, size_t rowIndex, double new_timestamp, double prev_timestamp) -> TimestampLessThanEqualToPrevious

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        rowIndex: size_t
        new_timestamp: double
        prev_timestamp: double

        """
        this = _common.new_TimestampLessThanEqualToPrevious(file, line, func, rowIndex, new_timestamp, prev_timestamp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TimestampLessThanEqualToPrevious
    __del__ = lambda self: None
TimestampLessThanEqualToPrevious_swigregister = _common.TimestampLessThanEqualToPrevious_swigregister
TimestampLessThanEqualToPrevious_swigregister(TimestampLessThanEqualToPrevious)

class TimestampGreaterThanEqualToNext(InvalidTimestamp):
    """Proxy of C++ OpenSim::TimestampGreaterThanEqualToNext class."""

    __swig_setmethods__ = {}
    for _s in [InvalidTimestamp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimestampGreaterThanEqualToNext, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidTimestamp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimestampGreaterThanEqualToNext, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, rowIndex, new_timestamp, next_timestamp):
        """
        __init__(OpenSim::TimestampGreaterThanEqualToNext self, std::string const & file, size_t line, std::string const & func, size_t rowIndex, double new_timestamp, double next_timestamp) -> TimestampGreaterThanEqualToNext

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        rowIndex: size_t
        new_timestamp: double
        next_timestamp: double

        """
        this = _common.new_TimestampGreaterThanEqualToNext(file, line, func, rowIndex, new_timestamp, next_timestamp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TimestampGreaterThanEqualToNext
    __del__ = lambda self: None
TimestampGreaterThanEqualToNext_swigregister = _common.TimestampGreaterThanEqualToNext_swigregister
TimestampGreaterThanEqualToNext_swigregister(TimestampGreaterThanEqualToNext)

class TimeOutOfRange(OpenSimException):
    """Proxy of C++ OpenSim::TimeOutOfRange class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeOutOfRange, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeOutOfRange, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, time, min, max):
        """
        __init__(OpenSim::TimeOutOfRange self, std::string const & file, size_t line, std::string const & func, double const time, double const min, double const max) -> TimeOutOfRange

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        time: double const
        min: double const
        max: double const

        """
        this = _common.new_TimeOutOfRange(file, line, func, time, min, max)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TimeOutOfRange
    __del__ = lambda self: None
TimeOutOfRange_swigregister = _common.TimeOutOfRange_swigregister
TimeOutOfRange_swigregister(TimeOutOfRange)

class InvalidTimeRange(OpenSimException):
    """Proxy of C++ OpenSim::InvalidTimeRange class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidTimeRange, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidTimeRange, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, begTime, endTime):
        """
        __init__(OpenSim::InvalidTimeRange self, std::string const & file, size_t line, std::string const & func, double const begTime, double const endTime) -> InvalidTimeRange

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        begTime: double const
        endTime: double const

        """
        this = _common.new_InvalidTimeRange(file, line, func, begTime, endTime)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_InvalidTimeRange
    __del__ = lambda self: None
InvalidTimeRange_swigregister = _common.InvalidTimeRange_swigregister
InvalidTimeRange_swigregister(InvalidTimeRange)

class DataTable(AbstractDataTable):
    """Proxy of C++ OpenSim::DataTable_<(double,double)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTable, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTable
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::DataTable_<(double,double)> self) -> DataTable
        __init__(OpenSim::DataTable_<(double,double)> self, DataTable arg2) -> DataTable

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,double > const &

        __init__(OpenSim::DataTable_<(double,double)> self, std::string const & filename, std::string const & tablename) -> DataTable

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_DataTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def numComponentsPerElement(self):
        """
        numComponentsPerElement(DataTable self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::DataTable_< double,double > const *

        """
        return _common.DataTable_numComponentsPerElement(self)


    def appendRow(self, *args):
        """
        appendRow(DataTable self, double const & indRow, std::initializer_list< double > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< double > const &

        appendRow(DataTable self, double const & indRow, RowVector depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,double >::RowVector const &

        appendRow(DataTable self, double const & indRow, RowVectorView depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,double >::RowVectorView const &

        """
        return _common.DataTable_appendRow(self, *args)


    def getRowAtIndex(self, index):
        """
        getRowAtIndex(DataTable self, size_t index) -> RowVectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_getRowAtIndex(self, index)


    def getRow(self, ind):
        """
        getRow(DataTable self, double const & ind) -> RowVectorView

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTable_getRow(self, ind)


    def updRowAtIndex(self, index):
        """
        updRowAtIndex(DataTable self, size_t index) -> RowVectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_updRowAtIndex(self, index)


    def updRow(self, ind):
        """
        updRow(DataTable self, double const & ind) -> RowVectorView

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTable_updRow(self, ind)


    def setRowAtIndex(self, *args):
        """
        setRowAtIndex(DataTable self, size_t index, RowVectorView depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,double >::RowVectorView const &

        setRowAtIndex(DataTable self, size_t index, RowVector depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,double >::RowVector const &

        """
        return _common.DataTable_setRowAtIndex(self, *args)


    def setRow(self, *args):
        """
        setRow(DataTable self, double const & ind, RowVectorView depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,double >::RowVectorView const &

        setRow(DataTable self, double const & ind, RowVector depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,double >::RowVector const &

        """
        return _common.DataTable_setRow(self, *args)


    def removeRowAtIndex(self, index):
        """
        removeRowAtIndex(DataTable self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_removeRowAtIndex(self, index)


    def removeRow(self, ind):
        """
        removeRow(DataTable self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTable_removeRow(self, ind)


    def getIndependentColumn(self):
        """
        getIndependentColumn(DataTable self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::DataTable_< double,double > const *

        """
        return _common.DataTable_getIndependentColumn(self)


    def appendColumn(self, *args):
        """
        appendColumn(DataTable self, std::string const & columnLabel, std::initializer_list< double > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< double > const &

        appendColumn(DataTable self, std::string const & columnLabel, Vector depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,double >::Vector const &

        appendColumn(DataTable self, std::string const & columnLabel, VectorView depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,double >::VectorView const &

        """
        return _common.DataTable_appendColumn(self, *args)


    def removeColumnAtIndex(self, index):
        """
        removeColumnAtIndex(DataTable self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_removeColumnAtIndex(self, index)


    def removeColumn(self, columnLabel):
        """
        removeColumn(DataTable self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTable_removeColumn(self, columnLabel)


    def getDependentColumnAtIndex(self, index):
        """
        getDependentColumnAtIndex(DataTable self, size_t index) -> VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_getDependentColumnAtIndex(self, index)


    def getDependentColumn(self, columnLabel):
        """
        getDependentColumn(DataTable self, std::string const & columnLabel) -> VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTable_getDependentColumn(self, columnLabel)


    def updDependentColumnAtIndex(self, index):
        """
        updDependentColumnAtIndex(DataTable self, size_t index) -> VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_updDependentColumnAtIndex(self, index)


    def updDependentColumn(self, columnLabel):
        """
        updDependentColumn(DataTable self, std::string const & columnLabel) -> VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTable_updDependentColumn(self, columnLabel)


    def setIndependentValueAtIndex(self, rowIndex, value):
        """
        setIndependentValueAtIndex(DataTable self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTable_setIndependentValueAtIndex(self, rowIndex, value)


    def getMatrix(self):
        """
        getMatrix(DataTable self) -> MatrixView

        Parameters
        ----------
        self: OpenSim::DataTable_< double,double > const *

        """
        return _common.DataTable_getMatrix(self)


    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        getMatrixBlock(DataTable self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTable_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def updMatrix(self):
        """
        updMatrix(DataTable self) -> MatrixView

        Parameters
        ----------
        self: OpenSim::DataTable_< double,double > *

        """
        return _common.DataTable_updMatrix(self)


    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        updMatrixBlock(DataTable self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTable_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def toString(self, *args):
        """
        toString(DataTable self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        toString(DataTable self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int

        toString(DataTable self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int

        toString(DataTable self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const

        toString(DataTable self, StdVectorInt rows, StdVectorString columnLabels) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >

        toString(DataTable self, StdVectorInt rows) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >

        toString(DataTable self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,double > const *

        """
        return _common.DataTable_toString(self, *args)


    def __str__(self):
        """
        __str__(DataTable self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,double > const *

        """
        return _common.DataTable___str__(self)


    def clone(self):
        """
        clone(DataTable self) -> DataTable

        Parameters
        ----------
        self: OpenSim::DataTable_< double,double > const *

        """
        return _common.DataTable_clone(self)


    def packVec3(self, *args):
        """
        packVec3(DataTable self) -> DataTableVec3
        packVec3(DataTable self, StdVectorString suffixes) -> DataTableVec3

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packVec3(self, *args)


    def packUnitVec3(self, *args):
        """
        packUnitVec3(DataTable self) -> DataTableUnitVec3
        packUnitVec3(DataTable self, StdVectorString suffixes) -> DataTableUnitVec3

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packUnitVec3(self, *args)


    def packQuaternion(self, *args):
        """
        packQuaternion(DataTable self) -> DataTableQuaternion
        packQuaternion(DataTable self, StdVectorString suffixes) -> DataTableQuaternion

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packQuaternion(self, *args)


    def packSpatialVec(self, *args):
        """
        packSpatialVec(DataTable self) -> DataTableSpatialVec
        packSpatialVec(DataTable self, StdVectorString suffixes) -> DataTableSpatialVec

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packSpatialVec(self, *args)

DataTable_swigregister = _common.DataTable_swigregister
DataTable_swigregister(DataTable)

class DataTableVec3(AbstractDataTable):
    """Proxy of C++ OpenSim::DataTable_<(double,SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTableVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTableVec3, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableVec3
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::DataTable_<(double,SimTK::Vec3)> self) -> DataTableVec3
        __init__(OpenSim::DataTable_<(double,SimTK::Vec3)> self, DataTableVec3 arg2) -> DataTableVec3

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Vec3 > const &

        __init__(OpenSim::DataTable_<(double,SimTK::Vec3)> self, std::string const & filename, std::string const & tablename) -> DataTableVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_DataTableVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def flatten(self, *args):
        """
        flatten(DataTableVec3 self) -> DataTable
        flatten(DataTableVec3 self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableVec3_flatten(self, *args)


    def numComponentsPerElement(self):
        """
        numComponentsPerElement(DataTableVec3 self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec3 > const *

        """
        return _common.DataTableVec3_numComponentsPerElement(self)


    def appendRow(self, *args):
        """
        appendRow(DataTableVec3 self, double const & indRow, std::initializer_list< SimTK::Vec< 3,double,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Vec< 3,double,1 > > const &

        appendRow(DataTableVec3 self, double const & indRow, RowVectorVec3 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVector const &

        appendRow(DataTableVec3 self, double const & indRow, RowVectorViewVec3 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVectorView const &

        """
        return _common.DataTableVec3_appendRow(self, *args)


    def getRowAtIndex(self, index):
        """
        getRowAtIndex(DataTableVec3 self, size_t index) -> RowVectorViewVec3

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_getRowAtIndex(self, index)


    def getRow(self, ind):
        """
        getRow(DataTableVec3 self, double const & ind) -> RowVectorViewVec3

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec3_getRow(self, ind)


    def updRowAtIndex(self, index):
        """
        updRowAtIndex(DataTableVec3 self, size_t index) -> RowVectorViewVec3

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_updRowAtIndex(self, index)


    def updRow(self, ind):
        """
        updRow(DataTableVec3 self, double const & ind) -> RowVectorViewVec3

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec3_updRow(self, ind)


    def setRowAtIndex(self, *args):
        """
        setRowAtIndex(DataTableVec3 self, size_t index, RowVectorViewVec3 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVectorView const &

        setRowAtIndex(DataTableVec3 self, size_t index, RowVectorVec3 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVector const &

        """
        return _common.DataTableVec3_setRowAtIndex(self, *args)


    def setRow(self, *args):
        """
        setRow(DataTableVec3 self, double const & ind, RowVectorViewVec3 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVectorView const &

        setRow(DataTableVec3 self, double const & ind, RowVectorVec3 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVector const &

        """
        return _common.DataTableVec3_setRow(self, *args)


    def removeRowAtIndex(self, index):
        """
        removeRowAtIndex(DataTableVec3 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_removeRowAtIndex(self, index)


    def removeRow(self, ind):
        """
        removeRow(DataTableVec3 self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec3_removeRow(self, ind)


    def getIndependentColumn(self):
        """
        getIndependentColumn(DataTableVec3 self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec3 > const *

        """
        return _common.DataTableVec3_getIndependentColumn(self)


    def appendColumn(self, *args):
        """
        appendColumn(DataTableVec3 self, std::string const & columnLabel, std::initializer_list< SimTK::Vec< 3,double,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Vec< 3,double,1 > > const &

        appendColumn(DataTableVec3 self, std::string const & columnLabel, VectorVec3 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::Vector const &

        appendColumn(DataTableVec3 self, std::string const & columnLabel, VectorViewVec3 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::VectorView const &

        """
        return _common.DataTableVec3_appendColumn(self, *args)


    def removeColumnAtIndex(self, index):
        """
        removeColumnAtIndex(DataTableVec3 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_removeColumnAtIndex(self, index)


    def removeColumn(self, columnLabel):
        """
        removeColumn(DataTableVec3 self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec3_removeColumn(self, columnLabel)


    def getDependentColumnAtIndex(self, index):
        """
        getDependentColumnAtIndex(DataTableVec3 self, size_t index) -> VectorViewVec3

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_getDependentColumnAtIndex(self, index)


    def getDependentColumn(self, columnLabel):
        """
        getDependentColumn(DataTableVec3 self, std::string const & columnLabel) -> VectorViewVec3

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec3_getDependentColumn(self, columnLabel)


    def updDependentColumnAtIndex(self, index):
        """
        updDependentColumnAtIndex(DataTableVec3 self, size_t index) -> VectorViewVec3

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_updDependentColumnAtIndex(self, index)


    def updDependentColumn(self, columnLabel):
        """
        updDependentColumn(DataTableVec3 self, std::string const & columnLabel) -> VectorViewVec3

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec3_updDependentColumn(self, columnLabel)


    def setIndependentValueAtIndex(self, rowIndex, value):
        """
        setIndependentValueAtIndex(DataTableVec3 self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableVec3_setIndependentValueAtIndex(self, rowIndex, value)


    def getMatrix(self):
        """
        getMatrix(DataTableVec3 self) -> MatrixViewVec3

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec3 > const *

        """
        return _common.DataTableVec3_getMatrix(self)


    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        getMatrixBlock(DataTableVec3 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewVec3

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableVec3_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def updMatrix(self):
        """
        updMatrix(DataTableVec3 self) -> MatrixViewVec3

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec3 > *

        """
        return _common.DataTableVec3_updMatrix(self)


    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        updMatrixBlock(DataTableVec3 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewVec3

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableVec3_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def toString(self, *args):
        """
        toString(DataTableVec3 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        toString(DataTableVec3 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int

        toString(DataTableVec3 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int

        toString(DataTableVec3 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const

        toString(DataTableVec3 self, StdVectorInt rows, StdVectorString columnLabels) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >

        toString(DataTableVec3 self, StdVectorInt rows) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >

        toString(DataTableVec3 self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec3 > const *

        """
        return _common.DataTableVec3_toString(self, *args)


    def __str__(self):
        """
        __str__(DataTableVec3 self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec3 > const *

        """
        return _common.DataTableVec3___str__(self)


    def clone(self):
        """
        clone(DataTableVec3 self) -> DataTableVec3

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec3 > const *

        """
        return _common.DataTableVec3_clone(self)

DataTableVec3_swigregister = _common.DataTableVec3_swigregister
DataTableVec3_swigregister(DataTableVec3)

class DataTableUnitVec3(AbstractDataTable):
    """Proxy of C++ OpenSim::DataTable_<(double,SimTK::UnitVec3)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTableUnitVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTableUnitVec3, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableUnitVec3
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::DataTable_<(double,SimTK::UnitVec3)> self) -> DataTableUnitVec3
        __init__(OpenSim::DataTable_<(double,SimTK::UnitVec3)> self, DataTableUnitVec3 arg2) -> DataTableUnitVec3

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::UnitVec3 > const &

        __init__(OpenSim::DataTable_<(double,SimTK::UnitVec3)> self, std::string const & filename, std::string const & tablename) -> DataTableUnitVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_DataTableUnitVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def flatten(self, *args):
        """
        flatten(DataTableUnitVec3 self) -> DataTable
        flatten(DataTableUnitVec3 self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableUnitVec3_flatten(self, *args)


    def numComponentsPerElement(self):
        """
        numComponentsPerElement(DataTableUnitVec3 self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::UnitVec3 > const *

        """
        return _common.DataTableUnitVec3_numComponentsPerElement(self)


    def appendRow(self, *args):
        """
        appendRow(DataTableUnitVec3 self, double const & indRow, std::initializer_list< SimTK::UnitVec< double,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::UnitVec< double,1 > > const &

        appendRow(DataTableUnitVec3 self, double const & indRow, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const & depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const &

        appendRow(DataTableUnitVec3 self, double const & indRow, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const &

        """
        return _common.DataTableUnitVec3_appendRow(self, *args)


    def getRowAtIndex(self, index):
        """
        getRowAtIndex(DataTableUnitVec3 self, size_t index) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_getRowAtIndex(self, index)


    def getRow(self, ind):
        """
        getRow(DataTableUnitVec3 self, double const & ind) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableUnitVec3_getRow(self, ind)


    def updRowAtIndex(self, index):
        """
        updRowAtIndex(DataTableUnitVec3 self, size_t index) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_updRowAtIndex(self, index)


    def updRow(self, ind):
        """
        updRow(DataTableUnitVec3 self, double const & ind) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableUnitVec3_updRow(self, ind)


    def setRowAtIndex(self, *args):
        """
        setRowAtIndex(DataTableUnitVec3 self, size_t index, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const &

        setRowAtIndex(DataTableUnitVec3 self, size_t index, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const & depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const &

        """
        return _common.DataTableUnitVec3_setRowAtIndex(self, *args)


    def setRow(self, *args):
        """
        setRow(DataTableUnitVec3 self, double const & ind, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const &

        setRow(DataTableUnitVec3 self, double const & ind, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const & depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const &

        """
        return _common.DataTableUnitVec3_setRow(self, *args)


    def removeRowAtIndex(self, index):
        """
        removeRowAtIndex(DataTableUnitVec3 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_removeRowAtIndex(self, index)


    def removeRow(self, ind):
        """
        removeRow(DataTableUnitVec3 self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableUnitVec3_removeRow(self, ind)


    def getIndependentColumn(self):
        """
        getIndependentColumn(DataTableUnitVec3 self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::UnitVec3 > const *

        """
        return _common.DataTableUnitVec3_getIndependentColumn(self)


    def appendColumn(self, *args):
        """
        appendColumn(DataTableUnitVec3 self, std::string const & columnLabel, std::initializer_list< SimTK::UnitVec< double,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::UnitVec< double,1 > > const &

        appendColumn(DataTableUnitVec3 self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::Vector const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::Vector const &

        appendColumn(DataTableUnitVec3 self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView const &

        """
        return _common.DataTableUnitVec3_appendColumn(self, *args)


    def removeColumnAtIndex(self, index):
        """
        removeColumnAtIndex(DataTableUnitVec3 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_removeColumnAtIndex(self, index)


    def removeColumn(self, columnLabel):
        """
        removeColumn(DataTableUnitVec3 self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableUnitVec3_removeColumn(self, columnLabel)


    def getDependentColumnAtIndex(self, index):
        """
        getDependentColumnAtIndex(DataTableUnitVec3 self, size_t index) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_getDependentColumnAtIndex(self, index)


    def getDependentColumn(self, columnLabel):
        """
        getDependentColumn(DataTableUnitVec3 self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableUnitVec3_getDependentColumn(self, columnLabel)


    def updDependentColumnAtIndex(self, index):
        """
        updDependentColumnAtIndex(DataTableUnitVec3 self, size_t index) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_updDependentColumnAtIndex(self, index)


    def updDependentColumn(self, columnLabel):
        """
        updDependentColumn(DataTableUnitVec3 self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableUnitVec3_updDependentColumn(self, columnLabel)


    def setIndependentValueAtIndex(self, rowIndex, value):
        """
        setIndependentValueAtIndex(DataTableUnitVec3 self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableUnitVec3_setIndependentValueAtIndex(self, rowIndex, value)


    def getMatrix(self):
        """
        getMatrix(DataTableUnitVec3 self) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::MatrixView const &

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::UnitVec3 > const *

        """
        return _common.DataTableUnitVec3_getMatrix(self)


    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        getMatrixBlock(DataTableUnitVec3 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableUnitVec3_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def updMatrix(self):
        """
        updMatrix(DataTableUnitVec3 self) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::MatrixView &

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::UnitVec3 > *

        """
        return _common.DataTableUnitVec3_updMatrix(self)


    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        updMatrixBlock(DataTableUnitVec3 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableUnitVec3_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def toString(self, *args):
        """
        toString(DataTableUnitVec3 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        toString(DataTableUnitVec3 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int

        toString(DataTableUnitVec3 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int

        toString(DataTableUnitVec3 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const

        toString(DataTableUnitVec3 self, StdVectorInt rows, StdVectorString columnLabels) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >

        toString(DataTableUnitVec3 self, StdVectorInt rows) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >

        toString(DataTableUnitVec3 self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::UnitVec3 > const *

        """
        return _common.DataTableUnitVec3_toString(self, *args)


    def __str__(self):
        """
        __str__(DataTableUnitVec3 self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::UnitVec3 > const *

        """
        return _common.DataTableUnitVec3___str__(self)


    def clone(self):
        """
        clone(DataTableUnitVec3 self) -> DataTableUnitVec3

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::UnitVec3 > const *

        """
        return _common.DataTableUnitVec3_clone(self)

DataTableUnitVec3_swigregister = _common.DataTableUnitVec3_swigregister
DataTableUnitVec3_swigregister(DataTableUnitVec3)

class DataTableQuaternion(AbstractDataTable):
    """Proxy of C++ OpenSim::DataTable_<(double,SimTK::Quaternion_<(double)>)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTableQuaternion, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTableQuaternion, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableQuaternion
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::DataTable_<(double,SimTK::Quaternion_<(double)>)> self) -> DataTableQuaternion
        __init__(OpenSim::DataTable_<(double,SimTK::Quaternion_<(double)>)> self, DataTableQuaternion arg2) -> DataTableQuaternion

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const &

        __init__(OpenSim::DataTable_<(double,SimTK::Quaternion_<(double)>)> self, std::string const & filename, std::string const & tablename) -> DataTableQuaternion

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_DataTableQuaternion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def flatten(self, *args):
        """
        flatten(DataTableQuaternion self) -> DataTable
        flatten(DataTableQuaternion self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableQuaternion_flatten(self, *args)


    def numComponentsPerElement(self):
        """
        numComponentsPerElement(DataTableQuaternion self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const *

        """
        return _common.DataTableQuaternion_numComponentsPerElement(self)


    def appendRow(self, *args):
        """
        appendRow(DataTableQuaternion self, double const & indRow, std::initializer_list< SimTK::Quaternion_< double > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Quaternion_< double > > const &

        appendRow(DataTableQuaternion self, double const & indRow, RowVectorQuaternion depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVector const &

        appendRow(DataTableQuaternion self, double const & indRow, RowVectorViewQuaternion depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVectorView const &

        """
        return _common.DataTableQuaternion_appendRow(self, *args)


    def getRowAtIndex(self, index):
        """
        getRowAtIndex(DataTableQuaternion self, size_t index) -> RowVectorViewQuaternion

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_getRowAtIndex(self, index)


    def getRow(self, ind):
        """
        getRow(DataTableQuaternion self, double const & ind) -> RowVectorViewQuaternion

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableQuaternion_getRow(self, ind)


    def updRowAtIndex(self, index):
        """
        updRowAtIndex(DataTableQuaternion self, size_t index) -> RowVectorViewQuaternion

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_updRowAtIndex(self, index)


    def updRow(self, ind):
        """
        updRow(DataTableQuaternion self, double const & ind) -> RowVectorViewQuaternion

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableQuaternion_updRow(self, ind)


    def setRowAtIndex(self, *args):
        """
        setRowAtIndex(DataTableQuaternion self, size_t index, RowVectorViewQuaternion depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVectorView const &

        setRowAtIndex(DataTableQuaternion self, size_t index, RowVectorQuaternion depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVector const &

        """
        return _common.DataTableQuaternion_setRowAtIndex(self, *args)


    def setRow(self, *args):
        """
        setRow(DataTableQuaternion self, double const & ind, RowVectorViewQuaternion depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVectorView const &

        setRow(DataTableQuaternion self, double const & ind, RowVectorQuaternion depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVector const &

        """
        return _common.DataTableQuaternion_setRow(self, *args)


    def removeRowAtIndex(self, index):
        """
        removeRowAtIndex(DataTableQuaternion self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_removeRowAtIndex(self, index)


    def removeRow(self, ind):
        """
        removeRow(DataTableQuaternion self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableQuaternion_removeRow(self, ind)


    def getIndependentColumn(self):
        """
        getIndependentColumn(DataTableQuaternion self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const *

        """
        return _common.DataTableQuaternion_getIndependentColumn(self)


    def appendColumn(self, *args):
        """
        appendColumn(DataTableQuaternion self, std::string const & columnLabel, std::initializer_list< SimTK::Quaternion_< double > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Quaternion_< double > > const &

        appendColumn(DataTableQuaternion self, std::string const & columnLabel, VectorQuaternion depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::Vector const &

        appendColumn(DataTableQuaternion self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView const &

        """
        return _common.DataTableQuaternion_appendColumn(self, *args)


    def removeColumnAtIndex(self, index):
        """
        removeColumnAtIndex(DataTableQuaternion self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_removeColumnAtIndex(self, index)


    def removeColumn(self, columnLabel):
        """
        removeColumn(DataTableQuaternion self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableQuaternion_removeColumn(self, columnLabel)


    def getDependentColumnAtIndex(self, index):
        """
        getDependentColumnAtIndex(DataTableQuaternion self, size_t index) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_getDependentColumnAtIndex(self, index)


    def getDependentColumn(self, columnLabel):
        """
        getDependentColumn(DataTableQuaternion self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableQuaternion_getDependentColumn(self, columnLabel)


    def updDependentColumnAtIndex(self, index):
        """
        updDependentColumnAtIndex(DataTableQuaternion self, size_t index) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_updDependentColumnAtIndex(self, index)


    def updDependentColumn(self, columnLabel):
        """
        updDependentColumn(DataTableQuaternion self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableQuaternion_updDependentColumn(self, columnLabel)


    def setIndependentValueAtIndex(self, rowIndex, value):
        """
        setIndependentValueAtIndex(DataTableQuaternion self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableQuaternion_setIndependentValueAtIndex(self, rowIndex, value)


    def getMatrix(self):
        """
        getMatrix(DataTableQuaternion self) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::MatrixView const &

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const *

        """
        return _common.DataTableQuaternion_getMatrix(self)


    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        getMatrixBlock(DataTableQuaternion self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableQuaternion_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def updMatrix(self):
        """
        updMatrix(DataTableQuaternion self) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::MatrixView &

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > *

        """
        return _common.DataTableQuaternion_updMatrix(self)


    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        updMatrixBlock(DataTableQuaternion self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableQuaternion_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def toString(self, *args):
        """
        toString(DataTableQuaternion self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        toString(DataTableQuaternion self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int

        toString(DataTableQuaternion self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int

        toString(DataTableQuaternion self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const

        toString(DataTableQuaternion self, StdVectorInt rows, StdVectorString columnLabels) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >

        toString(DataTableQuaternion self, StdVectorInt rows) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >

        toString(DataTableQuaternion self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const *

        """
        return _common.DataTableQuaternion_toString(self, *args)


    def __str__(self):
        """
        __str__(DataTableQuaternion self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const *

        """
        return _common.DataTableQuaternion___str__(self)


    def clone(self):
        """
        clone(DataTableQuaternion self) -> DataTableQuaternion

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const *

        """
        return _common.DataTableQuaternion_clone(self)

DataTableQuaternion_swigregister = _common.DataTableQuaternion_swigregister
DataTableQuaternion_swigregister(DataTableQuaternion)

class DataTableVec6(AbstractDataTable):
    """Proxy of C++ OpenSim::DataTable_<(double,SimTK::Vec6)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTableVec6, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTableVec6, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableVec6
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::DataTable_<(double,SimTK::Vec6)> self) -> DataTableVec6
        __init__(OpenSim::DataTable_<(double,SimTK::Vec6)> self, DataTableVec6 arg2) -> DataTableVec6

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Vec6 > const &

        __init__(OpenSim::DataTable_<(double,SimTK::Vec6)> self, std::string const & filename, std::string const & tablename) -> DataTableVec6

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_DataTableVec6(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def flatten(self, *args):
        """
        flatten(DataTableVec6 self) -> DataTable
        flatten(DataTableVec6 self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableVec6_flatten(self, *args)


    def numComponentsPerElement(self):
        """
        numComponentsPerElement(DataTableVec6 self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec6 > const *

        """
        return _common.DataTableVec6_numComponentsPerElement(self)


    def appendRow(self, *args):
        """
        appendRow(DataTableVec6 self, double const & indRow, std::initializer_list< SimTK::Vec< 6,double,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Vec< 6,double,1 > > const &

        appendRow(DataTableVec6 self, double const & indRow, RowVectorVec6 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVector const &

        appendRow(DataTableVec6 self, double const & indRow, RowVectorViewVec6 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVectorView const &

        """
        return _common.DataTableVec6_appendRow(self, *args)


    def getRowAtIndex(self, index):
        """
        getRowAtIndex(DataTableVec6 self, size_t index) -> RowVectorViewVec6

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_getRowAtIndex(self, index)


    def getRow(self, ind):
        """
        getRow(DataTableVec6 self, double const & ind) -> RowVectorViewVec6

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec6_getRow(self, ind)


    def updRowAtIndex(self, index):
        """
        updRowAtIndex(DataTableVec6 self, size_t index) -> RowVectorViewVec6

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_updRowAtIndex(self, index)


    def updRow(self, ind):
        """
        updRow(DataTableVec6 self, double const & ind) -> RowVectorViewVec6

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec6_updRow(self, ind)


    def setRowAtIndex(self, *args):
        """
        setRowAtIndex(DataTableVec6 self, size_t index, RowVectorViewVec6 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVectorView const &

        setRowAtIndex(DataTableVec6 self, size_t index, RowVectorVec6 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVector const &

        """
        return _common.DataTableVec6_setRowAtIndex(self, *args)


    def setRow(self, *args):
        """
        setRow(DataTableVec6 self, double const & ind, RowVectorViewVec6 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVectorView const &

        setRow(DataTableVec6 self, double const & ind, RowVectorVec6 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVector const &

        """
        return _common.DataTableVec6_setRow(self, *args)


    def removeRowAtIndex(self, index):
        """
        removeRowAtIndex(DataTableVec6 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_removeRowAtIndex(self, index)


    def removeRow(self, ind):
        """
        removeRow(DataTableVec6 self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec6_removeRow(self, ind)


    def getIndependentColumn(self):
        """
        getIndependentColumn(DataTableVec6 self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec6 > const *

        """
        return _common.DataTableVec6_getIndependentColumn(self)


    def appendColumn(self, *args):
        """
        appendColumn(DataTableVec6 self, std::string const & columnLabel, std::initializer_list< SimTK::Vec< 6,double,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Vec< 6,double,1 > > const &

        appendColumn(DataTableVec6 self, std::string const & columnLabel, VectorVec6 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::Vector const &

        appendColumn(DataTableVec6 self, std::string const & columnLabel, VectorViewVec6 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::VectorView const &

        """
        return _common.DataTableVec6_appendColumn(self, *args)


    def removeColumnAtIndex(self, index):
        """
        removeColumnAtIndex(DataTableVec6 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_removeColumnAtIndex(self, index)


    def removeColumn(self, columnLabel):
        """
        removeColumn(DataTableVec6 self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec6_removeColumn(self, columnLabel)


    def getDependentColumnAtIndex(self, index):
        """
        getDependentColumnAtIndex(DataTableVec6 self, size_t index) -> VectorViewVec6

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_getDependentColumnAtIndex(self, index)


    def getDependentColumn(self, columnLabel):
        """
        getDependentColumn(DataTableVec6 self, std::string const & columnLabel) -> VectorViewVec6

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec6_getDependentColumn(self, columnLabel)


    def updDependentColumnAtIndex(self, index):
        """
        updDependentColumnAtIndex(DataTableVec6 self, size_t index) -> VectorViewVec6

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_updDependentColumnAtIndex(self, index)


    def updDependentColumn(self, columnLabel):
        """
        updDependentColumn(DataTableVec6 self, std::string const & columnLabel) -> VectorViewVec6

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec6_updDependentColumn(self, columnLabel)


    def setIndependentValueAtIndex(self, rowIndex, value):
        """
        setIndependentValueAtIndex(DataTableVec6 self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableVec6_setIndependentValueAtIndex(self, rowIndex, value)


    def getMatrix(self):
        """
        getMatrix(DataTableVec6 self) -> MatrixViewVec6

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec6 > const *

        """
        return _common.DataTableVec6_getMatrix(self)


    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        getMatrixBlock(DataTableVec6 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewVec6

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableVec6_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def updMatrix(self):
        """
        updMatrix(DataTableVec6 self) -> MatrixViewVec6

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec6 > *

        """
        return _common.DataTableVec6_updMatrix(self)


    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        updMatrixBlock(DataTableVec6 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewVec6

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableVec6_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def toString(self, *args):
        """
        toString(DataTableVec6 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        toString(DataTableVec6 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int

        toString(DataTableVec6 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int

        toString(DataTableVec6 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const

        toString(DataTableVec6 self, StdVectorInt rows, StdVectorString columnLabels) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >

        toString(DataTableVec6 self, StdVectorInt rows) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >

        toString(DataTableVec6 self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec6 > const *

        """
        return _common.DataTableVec6_toString(self, *args)


    def __str__(self):
        """
        __str__(DataTableVec6 self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec6 > const *

        """
        return _common.DataTableVec6___str__(self)


    def clone(self):
        """
        clone(DataTableVec6 self) -> DataTableVec6

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Vec6 > const *

        """
        return _common.DataTableVec6_clone(self)

DataTableVec6_swigregister = _common.DataTableVec6_swigregister
DataTableVec6_swigregister(DataTableVec6)

class DataTableSpatialVec(AbstractDataTable):
    """Proxy of C++ OpenSim::DataTable_<(double,SimTK::SpatialVec)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTableSpatialVec, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTableSpatialVec, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableSpatialVec
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::DataTable_<(double,SimTK::SpatialVec)> self) -> DataTableSpatialVec
        __init__(OpenSim::DataTable_<(double,SimTK::SpatialVec)> self, DataTableSpatialVec arg2) -> DataTableSpatialVec

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::SpatialVec > const &

        __init__(OpenSim::DataTable_<(double,SimTK::SpatialVec)> self, std::string const & filename, std::string const & tablename) -> DataTableSpatialVec

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_DataTableSpatialVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def flatten(self, *args):
        """
        flatten(DataTableSpatialVec self) -> DataTable
        flatten(DataTableSpatialVec self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableSpatialVec_flatten(self, *args)


    def numComponentsPerElement(self):
        """
        numComponentsPerElement(DataTableSpatialVec self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::SpatialVec > const *

        """
        return _common.DataTableSpatialVec_numComponentsPerElement(self)


    def appendRow(self, *args):
        """
        appendRow(DataTableSpatialVec self, double const & indRow, std::initializer_list< SimTK::Vec< 2,SimTK::Vec3,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Vec< 2,SimTK::Vec3,1 > > const &

        appendRow(DataTableSpatialVec self, double const & indRow, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const & depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const &

        appendRow(DataTableSpatialVec self, double const & indRow, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const &

        """
        return _common.DataTableSpatialVec_appendRow(self, *args)


    def getRowAtIndex(self, index):
        """
        getRowAtIndex(DataTableSpatialVec self, size_t index) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_getRowAtIndex(self, index)


    def getRow(self, ind):
        """
        getRow(DataTableSpatialVec self, double const & ind) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableSpatialVec_getRow(self, ind)


    def updRowAtIndex(self, index):
        """
        updRowAtIndex(DataTableSpatialVec self, size_t index) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_updRowAtIndex(self, index)


    def updRow(self, ind):
        """
        updRow(DataTableSpatialVec self, double const & ind) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableSpatialVec_updRow(self, ind)


    def setRowAtIndex(self, *args):
        """
        setRowAtIndex(DataTableSpatialVec self, size_t index, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const &

        setRowAtIndex(DataTableSpatialVec self, size_t index, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const & depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const &

        """
        return _common.DataTableSpatialVec_setRowAtIndex(self, *args)


    def setRow(self, *args):
        """
        setRow(DataTableSpatialVec self, double const & ind, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const &

        setRow(DataTableSpatialVec self, double const & ind, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const & depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const &

        """
        return _common.DataTableSpatialVec_setRow(self, *args)


    def removeRowAtIndex(self, index):
        """
        removeRowAtIndex(DataTableSpatialVec self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_removeRowAtIndex(self, index)


    def removeRow(self, ind):
        """
        removeRow(DataTableSpatialVec self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableSpatialVec_removeRow(self, ind)


    def getIndependentColumn(self):
        """
        getIndependentColumn(DataTableSpatialVec self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::SpatialVec > const *

        """
        return _common.DataTableSpatialVec_getIndependentColumn(self)


    def appendColumn(self, *args):
        """
        appendColumn(DataTableSpatialVec self, std::string const & columnLabel, std::initializer_list< SimTK::Vec< 2,SimTK::Vec3,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Vec< 2,SimTK::Vec3,1 > > const &

        appendColumn(DataTableSpatialVec self, std::string const & columnLabel, VectorOfSpatialVec depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::Vector const &

        appendColumn(DataTableSpatialVec self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView const &

        """
        return _common.DataTableSpatialVec_appendColumn(self, *args)


    def removeColumnAtIndex(self, index):
        """
        removeColumnAtIndex(DataTableSpatialVec self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_removeColumnAtIndex(self, index)


    def removeColumn(self, columnLabel):
        """
        removeColumn(DataTableSpatialVec self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableSpatialVec_removeColumn(self, columnLabel)


    def getDependentColumnAtIndex(self, index):
        """
        getDependentColumnAtIndex(DataTableSpatialVec self, size_t index) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_getDependentColumnAtIndex(self, index)


    def getDependentColumn(self, columnLabel):
        """
        getDependentColumn(DataTableSpatialVec self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableSpatialVec_getDependentColumn(self, columnLabel)


    def updDependentColumnAtIndex(self, index):
        """
        updDependentColumnAtIndex(DataTableSpatialVec self, size_t index) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_updDependentColumnAtIndex(self, index)


    def updDependentColumn(self, columnLabel):
        """
        updDependentColumn(DataTableSpatialVec self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableSpatialVec_updDependentColumn(self, columnLabel)


    def setIndependentValueAtIndex(self, rowIndex, value):
        """
        setIndependentValueAtIndex(DataTableSpatialVec self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableSpatialVec_setIndependentValueAtIndex(self, rowIndex, value)


    def getMatrix(self):
        """
        getMatrix(DataTableSpatialVec self) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::MatrixView const &

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::SpatialVec > const *

        """
        return _common.DataTableSpatialVec_getMatrix(self)


    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        getMatrixBlock(DataTableSpatialVec self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableSpatialVec_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def updMatrix(self):
        """
        updMatrix(DataTableSpatialVec self) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::MatrixView &

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::SpatialVec > *

        """
        return _common.DataTableSpatialVec_updMatrix(self)


    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        updMatrixBlock(DataTableSpatialVec self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableSpatialVec_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def toString(self, *args):
        """
        toString(DataTableSpatialVec self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        toString(DataTableSpatialVec self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int

        toString(DataTableSpatialVec self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int

        toString(DataTableSpatialVec self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const

        toString(DataTableSpatialVec self, StdVectorInt rows, StdVectorString columnLabels) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >

        toString(DataTableSpatialVec self, StdVectorInt rows) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >

        toString(DataTableSpatialVec self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::SpatialVec > const *

        """
        return _common.DataTableSpatialVec_toString(self, *args)


    def __str__(self):
        """
        __str__(DataTableSpatialVec self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::SpatialVec > const *

        """
        return _common.DataTableSpatialVec___str__(self)


    def clone(self):
        """
        clone(DataTableSpatialVec self) -> DataTableSpatialVec

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::SpatialVec > const *

        """
        return _common.DataTableSpatialVec_clone(self)

DataTableSpatialVec_swigregister = _common.DataTableSpatialVec_swigregister
DataTableSpatialVec_swigregister(DataTableSpatialVec)

class DataTableMat33(AbstractDataTable):
    """Proxy of C++ OpenSim::DataTable_<(double,SimTK::Mat33)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTableMat33, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTableMat33, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableMat33
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::DataTable_<(double,SimTK::Mat33)> self) -> DataTableMat33
        __init__(OpenSim::DataTable_<(double,SimTK::Mat33)> self, DataTableMat33 arg2) -> DataTableMat33

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Mat33 > const &

        __init__(OpenSim::DataTable_<(double,SimTK::Mat33)> self, std::string const & filename, std::string const & tablename) -> DataTableMat33

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_DataTableMat33(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def flatten(self, *args):
        """
        flatten(DataTableMat33 self) -> DataTable
        flatten(DataTableMat33 self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableMat33_flatten(self, *args)


    def numComponentsPerElement(self):
        """
        numComponentsPerElement(DataTableMat33 self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Mat33 > const *

        """
        return _common.DataTableMat33_numComponentsPerElement(self)


    def appendRow(self, *args):
        """
        appendRow(DataTableMat33 self, double const & indRow, std::initializer_list< SimTK::Mat< 3,3,double,3,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Mat< 3,3,double,3,1 > > const &

        appendRow(DataTableMat33 self, double const & indRow, RowVectorMat33 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVector const &

        appendRow(DataTableMat33 self, double const & indRow, RowVectorViewMat33 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVectorView const &

        """
        return _common.DataTableMat33_appendRow(self, *args)


    def getRowAtIndex(self, index):
        """
        getRowAtIndex(DataTableMat33 self, size_t index) -> RowVectorViewMat33

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_getRowAtIndex(self, index)


    def getRow(self, ind):
        """
        getRow(DataTableMat33 self, double const & ind) -> RowVectorViewMat33

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableMat33_getRow(self, ind)


    def updRowAtIndex(self, index):
        """
        updRowAtIndex(DataTableMat33 self, size_t index) -> RowVectorViewMat33

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_updRowAtIndex(self, index)


    def updRow(self, ind):
        """
        updRow(DataTableMat33 self, double const & ind) -> RowVectorViewMat33

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableMat33_updRow(self, ind)


    def setRowAtIndex(self, *args):
        """
        setRowAtIndex(DataTableMat33 self, size_t index, RowVectorViewMat33 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVectorView const &

        setRowAtIndex(DataTableMat33 self, size_t index, RowVectorMat33 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVector const &

        """
        return _common.DataTableMat33_setRowAtIndex(self, *args)


    def setRow(self, *args):
        """
        setRow(DataTableMat33 self, double const & ind, RowVectorViewMat33 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVectorView const &

        setRow(DataTableMat33 self, double const & ind, RowVectorMat33 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVector const &

        """
        return _common.DataTableMat33_setRow(self, *args)


    def removeRowAtIndex(self, index):
        """
        removeRowAtIndex(DataTableMat33 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_removeRowAtIndex(self, index)


    def removeRow(self, ind):
        """
        removeRow(DataTableMat33 self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableMat33_removeRow(self, ind)


    def getIndependentColumn(self):
        """
        getIndependentColumn(DataTableMat33 self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Mat33 > const *

        """
        return _common.DataTableMat33_getIndependentColumn(self)


    def appendColumn(self, *args):
        """
        appendColumn(DataTableMat33 self, std::string const & columnLabel, std::initializer_list< SimTK::Mat< 3,3,double,3,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Mat< 3,3,double,3,1 > > const &

        appendColumn(DataTableMat33 self, std::string const & columnLabel, VectorMat33 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::Vector const &

        appendColumn(DataTableMat33 self, std::string const & columnLabel, VectorViewMat33 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::VectorView const &

        """
        return _common.DataTableMat33_appendColumn(self, *args)


    def removeColumnAtIndex(self, index):
        """
        removeColumnAtIndex(DataTableMat33 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_removeColumnAtIndex(self, index)


    def removeColumn(self, columnLabel):
        """
        removeColumn(DataTableMat33 self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableMat33_removeColumn(self, columnLabel)


    def getDependentColumnAtIndex(self, index):
        """
        getDependentColumnAtIndex(DataTableMat33 self, size_t index) -> VectorViewMat33

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_getDependentColumnAtIndex(self, index)


    def getDependentColumn(self, columnLabel):
        """
        getDependentColumn(DataTableMat33 self, std::string const & columnLabel) -> VectorViewMat33

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableMat33_getDependentColumn(self, columnLabel)


    def updDependentColumnAtIndex(self, index):
        """
        updDependentColumnAtIndex(DataTableMat33 self, size_t index) -> VectorViewMat33

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_updDependentColumnAtIndex(self, index)


    def updDependentColumn(self, columnLabel):
        """
        updDependentColumn(DataTableMat33 self, std::string const & columnLabel) -> VectorViewMat33

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableMat33_updDependentColumn(self, columnLabel)


    def setIndependentValueAtIndex(self, rowIndex, value):
        """
        setIndependentValueAtIndex(DataTableMat33 self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableMat33_setIndependentValueAtIndex(self, rowIndex, value)


    def getMatrix(self):
        """
        getMatrix(DataTableMat33 self) -> MatrixViewMat33

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Mat33 > const *

        """
        return _common.DataTableMat33_getMatrix(self)


    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        getMatrixBlock(DataTableMat33 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewMat33

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableMat33_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def updMatrix(self):
        """
        updMatrix(DataTableMat33 self) -> MatrixViewMat33

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Mat33 > *

        """
        return _common.DataTableMat33_updMatrix(self)


    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        updMatrixBlock(DataTableMat33 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewMat33

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableMat33_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def toString(self, *args):
        """
        toString(DataTableMat33 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        toString(DataTableMat33 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int

        toString(DataTableMat33 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int

        toString(DataTableMat33 self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const

        toString(DataTableMat33 self, StdVectorInt rows, StdVectorString columnLabels) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >

        toString(DataTableMat33 self, StdVectorInt rows) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >

        toString(DataTableMat33 self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Mat33 > const *

        """
        return _common.DataTableMat33_toString(self, *args)


    def __str__(self):
        """
        __str__(DataTableMat33 self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Mat33 > const *

        """
        return _common.DataTableMat33___str__(self)

DataTableMat33_swigregister = _common.DataTableMat33_swigregister
DataTableMat33_swigregister(DataTableMat33)

class DataTableRotation(AbstractDataTable):
    """Proxy of C++ OpenSim::DataTable_<(double,SimTK::Rotation_<(double)>)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTableRotation, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTableRotation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableRotation
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::DataTable_<(double,SimTK::Rotation_<(double)>)> self) -> DataTableRotation
        __init__(OpenSim::DataTable_<(double,SimTK::Rotation_<(double)>)> self, DataTableRotation arg2) -> DataTableRotation

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const &

        __init__(OpenSim::DataTable_<(double,SimTK::Rotation_<(double)>)> self, std::string const & filename, std::string const & tablename) -> DataTableRotation

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_DataTableRotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def flatten(self, *args):
        """
        flatten(DataTableRotation self) -> DataTable
        flatten(DataTableRotation self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableRotation_flatten(self, *args)


    def numComponentsPerElement(self):
        """
        numComponentsPerElement(DataTableRotation self) -> unsigned int

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const *

        """
        return _common.DataTableRotation_numComponentsPerElement(self)


    def appendRow(self, *args):
        """
        appendRow(DataTableRotation self, double const & indRow, std::initializer_list< SimTK::Rotation_< double > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Rotation_< double > > const &

        appendRow(DataTableRotation self, double const & indRow, RowVectorRotation depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVector const &

        appendRow(DataTableRotation self, double const & indRow, RowVectorViewRotation depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVectorView const &

        """
        return _common.DataTableRotation_appendRow(self, *args)


    def getRowAtIndex(self, index):
        """
        getRowAtIndex(DataTableRotation self, size_t index) -> RowVectorViewRotation

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_getRowAtIndex(self, index)


    def getRow(self, ind):
        """
        getRow(DataTableRotation self, double const & ind) -> RowVectorViewRotation

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableRotation_getRow(self, ind)


    def updRowAtIndex(self, index):
        """
        updRowAtIndex(DataTableRotation self, size_t index) -> RowVectorViewRotation

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_updRowAtIndex(self, index)


    def updRow(self, ind):
        """
        updRow(DataTableRotation self, double const & ind) -> RowVectorViewRotation

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableRotation_updRow(self, ind)


    def setRowAtIndex(self, *args):
        """
        setRowAtIndex(DataTableRotation self, size_t index, RowVectorViewRotation depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVectorView const &

        setRowAtIndex(DataTableRotation self, size_t index, RowVectorRotation depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVector const &

        """
        return _common.DataTableRotation_setRowAtIndex(self, *args)


    def setRow(self, *args):
        """
        setRow(DataTableRotation self, double const & ind, RowVectorViewRotation depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVectorView const &

        setRow(DataTableRotation self, double const & ind, RowVectorRotation depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVector const &

        """
        return _common.DataTableRotation_setRow(self, *args)


    def removeRowAtIndex(self, index):
        """
        removeRowAtIndex(DataTableRotation self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_removeRowAtIndex(self, index)


    def removeRow(self, ind):
        """
        removeRow(DataTableRotation self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableRotation_removeRow(self, ind)


    def getIndependentColumn(self):
        """
        getIndependentColumn(DataTableRotation self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const *

        """
        return _common.DataTableRotation_getIndependentColumn(self)


    def appendColumn(self, *args):
        """
        appendColumn(DataTableRotation self, std::string const & columnLabel, std::initializer_list< SimTK::Rotation_< double > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Rotation_< double > > const &

        appendColumn(DataTableRotation self, std::string const & columnLabel, VectorRotation depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::Vector const &

        appendColumn(DataTableRotation self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView const &

        """
        return _common.DataTableRotation_appendColumn(self, *args)


    def removeColumnAtIndex(self, index):
        """
        removeColumnAtIndex(DataTableRotation self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_removeColumnAtIndex(self, index)


    def removeColumn(self, columnLabel):
        """
        removeColumn(DataTableRotation self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableRotation_removeColumn(self, columnLabel)


    def getDependentColumnAtIndex(self, index):
        """
        getDependentColumnAtIndex(DataTableRotation self, size_t index) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_getDependentColumnAtIndex(self, index)


    def getDependentColumn(self, columnLabel):
        """
        getDependentColumn(DataTableRotation self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableRotation_getDependentColumn(self, columnLabel)


    def updDependentColumnAtIndex(self, index):
        """
        updDependentColumnAtIndex(DataTableRotation self, size_t index) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_updDependentColumnAtIndex(self, index)


    def updDependentColumn(self, columnLabel):
        """
        updDependentColumn(DataTableRotation self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableRotation_updDependentColumn(self, columnLabel)


    def setIndependentValueAtIndex(self, rowIndex, value):
        """
        setIndependentValueAtIndex(DataTableRotation self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableRotation_setIndependentValueAtIndex(self, rowIndex, value)


    def getMatrix(self):
        """
        getMatrix(DataTableRotation self) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::MatrixView const &

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const *

        """
        return _common.DataTableRotation_getMatrix(self)


    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        getMatrixBlock(DataTableRotation self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableRotation_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def updMatrix(self):
        """
        updMatrix(DataTableRotation self) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::MatrixView &

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Rotation_< double > > *

        """
        return _common.DataTableRotation_updMatrix(self)


    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        """
        updMatrixBlock(DataTableRotation self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableRotation_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)


    def toString(self, *args):
        """
        toString(DataTableRotation self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        toString(DataTableRotation self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int

        toString(DataTableRotation self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True, unsigned int splitSize=25) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int

        toString(DataTableRotation self, StdVectorInt rows, StdVectorString columnLabels, bool const withMetaData=True) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const

        toString(DataTableRotation self, StdVectorInt rows, StdVectorString columnLabels) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >

        toString(DataTableRotation self, StdVectorInt rows) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >

        toString(DataTableRotation self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const *

        """
        return _common.DataTableRotation_toString(self, *args)


    def __str__(self):
        """
        __str__(DataTableRotation self) -> std::string

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const *

        """
        return _common.DataTableRotation___str__(self)


    def clone(self):
        """
        clone(DataTableRotation self) -> DataTableRotation

        Parameters
        ----------
        self: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const *

        """
        return _common.DataTableRotation_clone(self)

DataTableRotation_swigregister = _common.DataTableRotation_swigregister
DataTableRotation_swigregister(DataTableRotation)

class TimeSeriesTable(DataTable):
    """Proxy of C++ OpenSim::TimeSeriesTable_<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DataTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTable, name, value)
    __swig_getmethods__ = {}
    for _s in [DataTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTable
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::TimeSeriesTable_<(double)> self) -> TimeSeriesTable
        __init__(OpenSim::TimeSeriesTable_<(double)> self, TimeSeriesTable arg2) -> TimeSeriesTable

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< double > const &

        __init__(OpenSim::TimeSeriesTable_<(double)> self, StdVectorDouble indVec, Matrix depData, StdVectorString labels) -> TimeSeriesTable

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< double > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::TimeSeriesTable_<(double)> self, StdVectorDouble indVec) -> TimeSeriesTable

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(double)> self, DataTable datatable) -> TimeSeriesTable

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,double > const &

        __init__(OpenSim::TimeSeriesTable_<(double)> self, std::string const & filename) -> TimeSeriesTable

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TimeSeriesTable_<(double)> self, std::string const & filename, std::string const & tablename) -> TimeSeriesTable

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TimeSeriesTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        """
        getNearestRowIndexForTime(TimeSeriesTable self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        getNearestRowIndexForTime(TimeSeriesTable self, double const time) -> size_t

        Parameters
        ----------
        time: double const

        """
        return _common.TimeSeriesTable_getNearestRowIndexForTime(self, time, restrictToTimeRange)


    def getRowIndexAfterTime(self, time):
        """
        getRowIndexAfterTime(TimeSeriesTable self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTable_getRowIndexAfterTime(self, time)


    def getRowIndexBeforeTime(self, time):
        """
        getRowIndexBeforeTime(TimeSeriesTable self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTable_getRowIndexBeforeTime(self, time)


    def getNearestRow(self, time, restrictToTimeRange=True):
        """
        getNearestRow(TimeSeriesTable self, double const & time, bool const restrictToTimeRange=True) -> RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        getNearestRow(TimeSeriesTable self, double const & time) -> RowVectorView

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTable_getNearestRow(self, time, restrictToTimeRange)


    def updNearestRow(self, time, restrictToTimeRange=True):
        """
        updNearestRow(TimeSeriesTable self, double const & time, bool const restrictToTimeRange=True) -> RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        updNearestRow(TimeSeriesTable self, double const & time) -> RowVectorView

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTable_updNearestRow(self, time, restrictToTimeRange)


    def averageRow(self, beginTime, endTime):
        """
        averageRow(TimeSeriesTable self, double const & beginTime, double const & endTime) -> RowVector

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTable_averageRow(self, beginTime, endTime)


    def trim(self, newStartTime, newFinalTime):
        """
        trim(TimeSeriesTable self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTable_trim(self, newStartTime, newFinalTime)


    def trimFrom(self, newStartTime):
        """
        trimFrom(TimeSeriesTable self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTable_trimFrom(self, newStartTime)


    def trimTo(self, newFinalTime):
        """
        trimTo(TimeSeriesTable self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTable_trimTo(self, newFinalTime)


    def clone(self):
        """
        clone(TimeSeriesTable self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::TimeSeriesTable_< double > const *

        """
        return _common.TimeSeriesTable_clone(self)


    def packVec3(self, *args):
        """
        packVec3(TimeSeriesTable self) -> TimeSeriesTableVec3
        packVec3(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableVec3

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packVec3(self, *args)


    def packUnitVec3(self, *args):
        """
        packUnitVec3(TimeSeriesTable self) -> TimeSeriesTableUnitVec3
        packUnitVec3(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packUnitVec3(self, *args)


    def packQuaternion(self, *args):
        """
        packQuaternion(TimeSeriesTable self) -> TimeSeriesTableQuaternion
        packQuaternion(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packQuaternion(self, *args)


    def packSpatialVec(self, *args):
        """
        packSpatialVec(TimeSeriesTable self) -> TimeSeriesTableSpatialVec
        packSpatialVec(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packSpatialVec(self, *args)

TimeSeriesTable_swigregister = _common.TimeSeriesTable_swigregister
TimeSeriesTable_swigregister(TimeSeriesTable)

class TimeSeriesTableVec3(DataTableVec3):
    """Proxy of C++ OpenSim::TimeSeriesTable_<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [DataTableVec3]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTableVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [DataTableVec3]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTableVec3, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableVec3
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec3)> self) -> TimeSeriesTableVec3
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec3)> self, TimeSeriesTableVec3 arg2) -> TimeSeriesTableVec3

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Vec3 > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec3)> self, StdVectorDouble indVec, MatrixVec3 depData, StdVectorString labels) -> TimeSeriesTableVec3

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Vec< 3,double,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec3)> self, StdVectorDouble indVec) -> TimeSeriesTableVec3

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec3)> self, DataTableVec3 datatable) -> TimeSeriesTableVec3

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec3)> self, std::string const & filename) -> TimeSeriesTableVec3

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec3)> self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TimeSeriesTableVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        """
        getNearestRowIndexForTime(TimeSeriesTableVec3 self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        getNearestRowIndexForTime(TimeSeriesTableVec3 self, double const time) -> size_t

        Parameters
        ----------
        time: double const

        """
        return _common.TimeSeriesTableVec3_getNearestRowIndexForTime(self, time, restrictToTimeRange)


    def getRowIndexAfterTime(self, time):
        """
        getRowIndexAfterTime(TimeSeriesTableVec3 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec3_getRowIndexAfterTime(self, time)


    def getRowIndexBeforeTime(self, time):
        """
        getRowIndexBeforeTime(TimeSeriesTableVec3 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec3_getRowIndexBeforeTime(self, time)


    def getNearestRow(self, time, restrictToTimeRange=True):
        """
        getNearestRow(TimeSeriesTableVec3 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewVec3

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        getNearestRow(TimeSeriesTableVec3 self, double const & time) -> RowVectorViewVec3

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec3_getNearestRow(self, time, restrictToTimeRange)


    def updNearestRow(self, time, restrictToTimeRange=True):
        """
        updNearestRow(TimeSeriesTableVec3 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewVec3

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        updNearestRow(TimeSeriesTableVec3 self, double const & time) -> RowVectorViewVec3

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec3_updNearestRow(self, time, restrictToTimeRange)


    def averageRow(self, beginTime, endTime):
        """
        averageRow(TimeSeriesTableVec3 self, double const & beginTime, double const & endTime) -> RowVectorVec3

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableVec3_averageRow(self, beginTime, endTime)


    def trim(self, newStartTime, newFinalTime):
        """
        trim(TimeSeriesTableVec3 self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableVec3_trim(self, newStartTime, newFinalTime)


    def trimFrom(self, newStartTime):
        """
        trimFrom(TimeSeriesTableVec3 self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableVec3_trimFrom(self, newStartTime)


    def trimTo(self, newFinalTime):
        """
        trimTo(TimeSeriesTableVec3 self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableVec3_trimTo(self, newFinalTime)


    def clone(self):
        """
        clone(TimeSeriesTableVec3 self) -> TimeSeriesTableVec3

        Parameters
        ----------
        self: OpenSim::TimeSeriesTable_< SimTK::Vec3 > const *

        """
        return _common.TimeSeriesTableVec3_clone(self)


    def flatten(self, *args):
        """
        flatten(TimeSeriesTableVec3 self) -> TimeSeriesTable
        flatten(TimeSeriesTableVec3 self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableVec3_flatten(self, *args)

TimeSeriesTableVec3_swigregister = _common.TimeSeriesTableVec3_swigregister
TimeSeriesTableVec3_swigregister(TimeSeriesTableVec3)

class TimeSeriesTableUnitVec3(DataTableUnitVec3):
    """Proxy of C++ OpenSim::TimeSeriesTable_<(SimTK::UnitVec3)> class."""

    __swig_setmethods__ = {}
    for _s in [DataTableUnitVec3]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTableUnitVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [DataTableUnitVec3]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTableUnitVec3, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableUnitVec3
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::TimeSeriesTable_<(SimTK::UnitVec3)> self) -> TimeSeriesTableUnitVec3
        __init__(OpenSim::TimeSeriesTable_<(SimTK::UnitVec3)> self, TimeSeriesTableUnitVec3 arg2) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::UnitVec3 > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::UnitVec3)> self, StdVectorDouble indVec, SimTK::Matrix_< SimTK::UnitVec< double,1 > > const & depData, StdVectorString labels) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::UnitVec< double,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::UnitVec3)> self, StdVectorDouble indVec) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::UnitVec3)> self, DataTableUnitVec3 datatable) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::UnitVec3)> self, std::string const & filename) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::UnitVec3)> self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TimeSeriesTableUnitVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        """
        getNearestRowIndexForTime(TimeSeriesTableUnitVec3 self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        getNearestRowIndexForTime(TimeSeriesTableUnitVec3 self, double const time) -> size_t

        Parameters
        ----------
        time: double const

        """
        return _common.TimeSeriesTableUnitVec3_getNearestRowIndexForTime(self, time, restrictToTimeRange)


    def getRowIndexAfterTime(self, time):
        """
        getRowIndexAfterTime(TimeSeriesTableUnitVec3 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableUnitVec3_getRowIndexAfterTime(self, time)


    def getRowIndexBeforeTime(self, time):
        """
        getRowIndexBeforeTime(TimeSeriesTableUnitVec3 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableUnitVec3_getRowIndexBeforeTime(self, time)


    def getNearestRow(self, time, restrictToTimeRange=True):
        """
        getNearestRow(TimeSeriesTableUnitVec3 self, double const & time, bool const restrictToTimeRange=True) -> OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        getNearestRow(TimeSeriesTableUnitVec3 self, double const & time) -> OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableUnitVec3_getNearestRow(self, time, restrictToTimeRange)


    def updNearestRow(self, time, restrictToTimeRange=True):
        """
        updNearestRow(TimeSeriesTableUnitVec3 self, double const & time, bool const restrictToTimeRange=True) -> OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        updNearestRow(TimeSeriesTableUnitVec3 self, double const & time) -> OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableUnitVec3_updNearestRow(self, time, restrictToTimeRange)


    def averageRow(self, beginTime, endTime):
        """
        averageRow(TimeSeriesTableUnitVec3 self, double const & beginTime, double const & endTime) -> OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > >::RowVector

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableUnitVec3_averageRow(self, beginTime, endTime)


    def trim(self, newStartTime, newFinalTime):
        """
        trim(TimeSeriesTableUnitVec3 self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableUnitVec3_trim(self, newStartTime, newFinalTime)


    def trimFrom(self, newStartTime):
        """
        trimFrom(TimeSeriesTableUnitVec3 self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableUnitVec3_trimFrom(self, newStartTime)


    def trimTo(self, newFinalTime):
        """
        trimTo(TimeSeriesTableUnitVec3 self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableUnitVec3_trimTo(self, newFinalTime)


    def clone(self):
        """
        clone(TimeSeriesTableUnitVec3 self) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        self: OpenSim::TimeSeriesTable_< SimTK::UnitVec3 > const *

        """
        return _common.TimeSeriesTableUnitVec3_clone(self)


    def flatten(self, *args):
        """
        flatten(TimeSeriesTableUnitVec3 self) -> TimeSeriesTable
        flatten(TimeSeriesTableUnitVec3 self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableUnitVec3_flatten(self, *args)

TimeSeriesTableUnitVec3_swigregister = _common.TimeSeriesTableUnitVec3_swigregister
TimeSeriesTableUnitVec3_swigregister(TimeSeriesTableUnitVec3)

class TimeSeriesTableQuaternion(DataTableQuaternion):
    """Proxy of C++ OpenSim::TimeSeriesTable_<(SimTK::Quaternion_<(double)>)> class."""

    __swig_setmethods__ = {}
    for _s in [DataTableQuaternion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTableQuaternion, name, value)
    __swig_getmethods__ = {}
    for _s in [DataTableQuaternion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTableQuaternion, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableQuaternion
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Quaternion_<(double)>)> self) -> TimeSeriesTableQuaternion
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Quaternion_<(double)>)> self, TimeSeriesTableQuaternion arg2) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Quaternion_<(double)>)> self, StdVectorDouble indVec, MatrixQuaternion depData, StdVectorString labels) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Quaternion_< double > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Quaternion_<(double)>)> self, StdVectorDouble indVec) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Quaternion_<(double)>)> self, DataTableQuaternion datatable) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Quaternion_<(double)>)> self, std::string const & filename) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Quaternion_<(double)>)> self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TimeSeriesTableQuaternion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        """
        getNearestRowIndexForTime(TimeSeriesTableQuaternion self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        getNearestRowIndexForTime(TimeSeriesTableQuaternion self, double const time) -> size_t

        Parameters
        ----------
        time: double const

        """
        return _common.TimeSeriesTableQuaternion_getNearestRowIndexForTime(self, time, restrictToTimeRange)


    def getRowIndexAfterTime(self, time):
        """
        getRowIndexAfterTime(TimeSeriesTableQuaternion self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableQuaternion_getRowIndexAfterTime(self, time)


    def getRowIndexBeforeTime(self, time):
        """
        getRowIndexBeforeTime(TimeSeriesTableQuaternion self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableQuaternion_getRowIndexBeforeTime(self, time)


    def getNearestRow(self, time, restrictToTimeRange=True):
        """
        getNearestRow(TimeSeriesTableQuaternion self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewQuaternion

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        getNearestRow(TimeSeriesTableQuaternion self, double const & time) -> RowVectorViewQuaternion

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableQuaternion_getNearestRow(self, time, restrictToTimeRange)


    def updNearestRow(self, time, restrictToTimeRange=True):
        """
        updNearestRow(TimeSeriesTableQuaternion self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewQuaternion

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        updNearestRow(TimeSeriesTableQuaternion self, double const & time) -> RowVectorViewQuaternion

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableQuaternion_updNearestRow(self, time, restrictToTimeRange)


    def averageRow(self, beginTime, endTime):
        """
        averageRow(TimeSeriesTableQuaternion self, double const & beginTime, double const & endTime) -> RowVectorQuaternion

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableQuaternion_averageRow(self, beginTime, endTime)


    def trim(self, newStartTime, newFinalTime):
        """
        trim(TimeSeriesTableQuaternion self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableQuaternion_trim(self, newStartTime, newFinalTime)


    def trimFrom(self, newStartTime):
        """
        trimFrom(TimeSeriesTableQuaternion self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableQuaternion_trimFrom(self, newStartTime)


    def trimTo(self, newFinalTime):
        """
        trimTo(TimeSeriesTableQuaternion self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableQuaternion_trimTo(self, newFinalTime)


    def clone(self):
        """
        clone(TimeSeriesTableQuaternion self) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        self: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > const *

        """
        return _common.TimeSeriesTableQuaternion_clone(self)

TimeSeriesTableQuaternion_swigregister = _common.TimeSeriesTableQuaternion_swigregister
TimeSeriesTableQuaternion_swigregister(TimeSeriesTableQuaternion)

class TimeSeriesTableVec6(DataTableVec6):
    """Proxy of C++ OpenSim::TimeSeriesTable_<(SimTK::Vec6)> class."""

    __swig_setmethods__ = {}
    for _s in [DataTableVec6]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTableVec6, name, value)
    __swig_getmethods__ = {}
    for _s in [DataTableVec6]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTableVec6, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableVec6
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec6)> self) -> TimeSeriesTableVec6
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec6)> self, TimeSeriesTableVec6 arg2) -> TimeSeriesTableVec6

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Vec6 > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec6)> self, StdVectorDouble indVec, MatrixVec6 depData, StdVectorString labels) -> TimeSeriesTableVec6

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Vec< 6,double,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec6)> self, StdVectorDouble indVec) -> TimeSeriesTableVec6

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec6)> self, DataTableVec6 datatable) -> TimeSeriesTableVec6

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec6)> self, std::string const & filename) -> TimeSeriesTableVec6

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Vec6)> self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableVec6

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TimeSeriesTableVec6(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        """
        getNearestRowIndexForTime(TimeSeriesTableVec6 self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        getNearestRowIndexForTime(TimeSeriesTableVec6 self, double const time) -> size_t

        Parameters
        ----------
        time: double const

        """
        return _common.TimeSeriesTableVec6_getNearestRowIndexForTime(self, time, restrictToTimeRange)


    def getRowIndexAfterTime(self, time):
        """
        getRowIndexAfterTime(TimeSeriesTableVec6 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec6_getRowIndexAfterTime(self, time)


    def getRowIndexBeforeTime(self, time):
        """
        getRowIndexBeforeTime(TimeSeriesTableVec6 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec6_getRowIndexBeforeTime(self, time)


    def getNearestRow(self, time, restrictToTimeRange=True):
        """
        getNearestRow(TimeSeriesTableVec6 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewVec6

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        getNearestRow(TimeSeriesTableVec6 self, double const & time) -> RowVectorViewVec6

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec6_getNearestRow(self, time, restrictToTimeRange)


    def updNearestRow(self, time, restrictToTimeRange=True):
        """
        updNearestRow(TimeSeriesTableVec6 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewVec6

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        updNearestRow(TimeSeriesTableVec6 self, double const & time) -> RowVectorViewVec6

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec6_updNearestRow(self, time, restrictToTimeRange)


    def averageRow(self, beginTime, endTime):
        """
        averageRow(TimeSeriesTableVec6 self, double const & beginTime, double const & endTime) -> RowVectorVec6

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableVec6_averageRow(self, beginTime, endTime)


    def trim(self, newStartTime, newFinalTime):
        """
        trim(TimeSeriesTableVec6 self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableVec6_trim(self, newStartTime, newFinalTime)


    def trimFrom(self, newStartTime):
        """
        trimFrom(TimeSeriesTableVec6 self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableVec6_trimFrom(self, newStartTime)


    def trimTo(self, newFinalTime):
        """
        trimTo(TimeSeriesTableVec6 self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableVec6_trimTo(self, newFinalTime)


    def clone(self):
        """
        clone(TimeSeriesTableVec6 self) -> TimeSeriesTableVec6

        Parameters
        ----------
        self: OpenSim::TimeSeriesTable_< SimTK::Vec6 > const *

        """
        return _common.TimeSeriesTableVec6_clone(self)


    def flatten(self, *args):
        """
        flatten(TimeSeriesTableVec6 self) -> TimeSeriesTable
        flatten(TimeSeriesTableVec6 self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableVec6_flatten(self, *args)

TimeSeriesTableVec6_swigregister = _common.TimeSeriesTableVec6_swigregister
TimeSeriesTableVec6_swigregister(TimeSeriesTableVec6)

class TimeSeriesTableSpatialVec(DataTableSpatialVec):
    """Proxy of C++ OpenSim::TimeSeriesTable_<(SimTK::SpatialVec)> class."""

    __swig_setmethods__ = {}
    for _s in [DataTableSpatialVec]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTableSpatialVec, name, value)
    __swig_getmethods__ = {}
    for _s in [DataTableSpatialVec]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTableSpatialVec, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableSpatialVec
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::TimeSeriesTable_<(SimTK::SpatialVec)> self) -> TimeSeriesTableSpatialVec
        __init__(OpenSim::TimeSeriesTable_<(SimTK::SpatialVec)> self, TimeSeriesTableSpatialVec arg2) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::SpatialVec > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::SpatialVec)> self, StdVectorDouble indVec, MatrixOfSpatialVec depData, StdVectorString labels) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Vec< 2,SimTK::Vec3,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::SpatialVec)> self, StdVectorDouble indVec) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::SpatialVec)> self, DataTableSpatialVec datatable) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec3,1 > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::SpatialVec)> self, std::string const & filename) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::SpatialVec)> self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TimeSeriesTableSpatialVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        """
        getNearestRowIndexForTime(TimeSeriesTableSpatialVec self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        getNearestRowIndexForTime(TimeSeriesTableSpatialVec self, double const time) -> size_t

        Parameters
        ----------
        time: double const

        """
        return _common.TimeSeriesTableSpatialVec_getNearestRowIndexForTime(self, time, restrictToTimeRange)


    def getRowIndexAfterTime(self, time):
        """
        getRowIndexAfterTime(TimeSeriesTableSpatialVec self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableSpatialVec_getRowIndexAfterTime(self, time)


    def getRowIndexBeforeTime(self, time):
        """
        getRowIndexBeforeTime(TimeSeriesTableSpatialVec self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableSpatialVec_getRowIndexBeforeTime(self, time)


    def getNearestRow(self, time, restrictToTimeRange=True):
        """
        getNearestRow(TimeSeriesTableSpatialVec self, double const & time, bool const restrictToTimeRange=True) -> OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        getNearestRow(TimeSeriesTableSpatialVec self, double const & time) -> OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableSpatialVec_getNearestRow(self, time, restrictToTimeRange)


    def updNearestRow(self, time, restrictToTimeRange=True):
        """
        updNearestRow(TimeSeriesTableSpatialVec self, double const & time, bool const restrictToTimeRange=True) -> OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        updNearestRow(TimeSeriesTableSpatialVec self, double const & time) -> OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableSpatialVec_updNearestRow(self, time, restrictToTimeRange)


    def averageRow(self, beginTime, endTime):
        """
        averageRow(TimeSeriesTableSpatialVec self, double const & beginTime, double const & endTime) -> OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableSpatialVec_averageRow(self, beginTime, endTime)


    def trim(self, newStartTime, newFinalTime):
        """
        trim(TimeSeriesTableSpatialVec self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableSpatialVec_trim(self, newStartTime, newFinalTime)


    def trimFrom(self, newStartTime):
        """
        trimFrom(TimeSeriesTableSpatialVec self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableSpatialVec_trimFrom(self, newStartTime)


    def trimTo(self, newFinalTime):
        """
        trimTo(TimeSeriesTableSpatialVec self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableSpatialVec_trimTo(self, newFinalTime)


    def clone(self):
        """
        clone(TimeSeriesTableSpatialVec self) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        self: OpenSim::TimeSeriesTable_< SimTK::SpatialVec > const *

        """
        return _common.TimeSeriesTableSpatialVec_clone(self)


    def flatten(self, *args):
        """
        flatten(TimeSeriesTableSpatialVec self) -> TimeSeriesTable
        flatten(TimeSeriesTableSpatialVec self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableSpatialVec_flatten(self, *args)

TimeSeriesTableSpatialVec_swigregister = _common.TimeSeriesTableSpatialVec_swigregister
TimeSeriesTableSpatialVec_swigregister(TimeSeriesTableSpatialVec)

class TimeSeriesTableMat33(DataTableMat33):
    """Proxy of C++ OpenSim::TimeSeriesTable_<(SimTK::Mat33)> class."""

    __swig_setmethods__ = {}
    for _s in [DataTableMat33]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTableMat33, name, value)
    __swig_getmethods__ = {}
    for _s in [DataTableMat33]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTableMat33, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableMat33
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Mat33)> self) -> TimeSeriesTableMat33
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Mat33)> self, TimeSeriesTableMat33 arg2) -> TimeSeriesTableMat33

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Mat33 > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Mat33)> self, StdVectorDouble indVec, MatrixMat33 depData, StdVectorString labels) -> TimeSeriesTableMat33

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Mat< 3,3,double,3,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Mat33)> self, StdVectorDouble indVec) -> TimeSeriesTableMat33

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Mat33)> self, DataTableMat33 datatable) -> TimeSeriesTableMat33

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Mat33)> self, std::string const & filename) -> TimeSeriesTableMat33

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Mat33)> self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableMat33

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TimeSeriesTableMat33(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        """
        getNearestRowIndexForTime(TimeSeriesTableMat33 self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        getNearestRowIndexForTime(TimeSeriesTableMat33 self, double const time) -> size_t

        Parameters
        ----------
        time: double const

        """
        return _common.TimeSeriesTableMat33_getNearestRowIndexForTime(self, time, restrictToTimeRange)


    def getRowIndexAfterTime(self, time):
        """
        getRowIndexAfterTime(TimeSeriesTableMat33 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableMat33_getRowIndexAfterTime(self, time)


    def getRowIndexBeforeTime(self, time):
        """
        getRowIndexBeforeTime(TimeSeriesTableMat33 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableMat33_getRowIndexBeforeTime(self, time)


    def getNearestRow(self, time, restrictToTimeRange=True):
        """
        getNearestRow(TimeSeriesTableMat33 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewMat33

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        getNearestRow(TimeSeriesTableMat33 self, double const & time) -> RowVectorViewMat33

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableMat33_getNearestRow(self, time, restrictToTimeRange)


    def updNearestRow(self, time, restrictToTimeRange=True):
        """
        updNearestRow(TimeSeriesTableMat33 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewMat33

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        updNearestRow(TimeSeriesTableMat33 self, double const & time) -> RowVectorViewMat33

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableMat33_updNearestRow(self, time, restrictToTimeRange)


    def averageRow(self, beginTime, endTime):
        """
        averageRow(TimeSeriesTableMat33 self, double const & beginTime, double const & endTime) -> RowVectorMat33

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableMat33_averageRow(self, beginTime, endTime)


    def trim(self, newStartTime, newFinalTime):
        """
        trim(TimeSeriesTableMat33 self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableMat33_trim(self, newStartTime, newFinalTime)


    def trimFrom(self, newStartTime):
        """
        trimFrom(TimeSeriesTableMat33 self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableMat33_trimFrom(self, newStartTime)


    def trimTo(self, newFinalTime):
        """
        trimTo(TimeSeriesTableMat33 self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableMat33_trimTo(self, newFinalTime)


    def clone(self):
        """
        clone(TimeSeriesTableMat33 self) -> TimeSeriesTableMat33

        Parameters
        ----------
        self: OpenSim::TimeSeriesTable_< SimTK::Mat33 > const *

        """
        return _common.TimeSeriesTableMat33_clone(self)

TimeSeriesTableMat33_swigregister = _common.TimeSeriesTableMat33_swigregister
TimeSeriesTableMat33_swigregister(TimeSeriesTableMat33)

class TimeSeriesTableRotation(DataTableRotation):
    """Proxy of C++ OpenSim::TimeSeriesTable_<(SimTK::Rotation_<(double)>)> class."""

    __swig_setmethods__ = {}
    for _s in [DataTableRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeriesTableRotation, name, value)
    __swig_getmethods__ = {}
    for _s in [DataTableRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeriesTableRotation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableRotation
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Rotation_<(double)>)> self) -> TimeSeriesTableRotation
        __init__(OpenSim::TimeSeriesTable_<(SimTK::Rotation_<(double)>)> self, TimeSeriesTableRotation arg2) -> TimeSeriesTableRotation

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Rotation_< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Rotation_<(double)>)> self, StdVectorDouble indVec, MatrixRotation depData, StdVectorString labels) -> TimeSeriesTableRotation

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Rotation_< double > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Rotation_<(double)>)> self, StdVectorDouble indVec) -> TimeSeriesTableRotation

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Rotation_<(double)>)> self, DataTableRotation datatable) -> TimeSeriesTableRotation

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Rotation_<(double)>)> self, std::string const & filename) -> TimeSeriesTableRotation

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TimeSeriesTable_<(SimTK::Rotation_<(double)>)> self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableRotation

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TimeSeriesTableRotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        """
        getNearestRowIndexForTime(TimeSeriesTableRotation self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        getNearestRowIndexForTime(TimeSeriesTableRotation self, double const time) -> size_t

        Parameters
        ----------
        time: double const

        """
        return _common.TimeSeriesTableRotation_getNearestRowIndexForTime(self, time, restrictToTimeRange)


    def getRowIndexAfterTime(self, time):
        """
        getRowIndexAfterTime(TimeSeriesTableRotation self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableRotation_getRowIndexAfterTime(self, time)


    def getRowIndexBeforeTime(self, time):
        """
        getRowIndexBeforeTime(TimeSeriesTableRotation self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableRotation_getRowIndexBeforeTime(self, time)


    def getNearestRow(self, time, restrictToTimeRange=True):
        """
        getNearestRow(TimeSeriesTableRotation self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewRotation

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        getNearestRow(TimeSeriesTableRotation self, double const & time) -> RowVectorViewRotation

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableRotation_getNearestRow(self, time, restrictToTimeRange)


    def updNearestRow(self, time, restrictToTimeRange=True):
        """
        updNearestRow(TimeSeriesTableRotation self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewRotation

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        updNearestRow(TimeSeriesTableRotation self, double const & time) -> RowVectorViewRotation

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableRotation_updNearestRow(self, time, restrictToTimeRange)


    def averageRow(self, beginTime, endTime):
        """
        averageRow(TimeSeriesTableRotation self, double const & beginTime, double const & endTime) -> RowVectorRotation

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableRotation_averageRow(self, beginTime, endTime)


    def trim(self, newStartTime, newFinalTime):
        """
        trim(TimeSeriesTableRotation self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableRotation_trim(self, newStartTime, newFinalTime)


    def trimFrom(self, newStartTime):
        """
        trimFrom(TimeSeriesTableRotation self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableRotation_trimFrom(self, newStartTime)


    def trimTo(self, newFinalTime):
        """
        trimTo(TimeSeriesTableRotation self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableRotation_trimTo(self, newFinalTime)


    def clone(self):
        """
        clone(TimeSeriesTableRotation self) -> TimeSeriesTableRotation

        Parameters
        ----------
        self: OpenSim::TimeSeriesTable_< SimTK::Rotation_< double > > const *

        """
        return _common.TimeSeriesTableRotation_clone(self)

TimeSeriesTableRotation_swigregister = _common.TimeSeriesTableRotation_swigregister
TimeSeriesTableRotation_swigregister(TimeSeriesTableRotation)

class Event(_object):
    """Proxy of C++ OpenSim::Event class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _common.Event_label_set
    __swig_getmethods__["label"] = _common.Event_label_get
    if _newclass:
        label = _swig_property(_common.Event_label_get, _common.Event_label_set)
    __swig_setmethods__["time"] = _common.Event_time_set
    __swig_getmethods__["time"] = _common.Event_time_get
    if _newclass:
        time = _swig_property(_common.Event_time_get, _common.Event_time_set)
    __swig_setmethods__["frame"] = _common.Event_frame_set
    __swig_getmethods__["frame"] = _common.Event_frame_get
    if _newclass:
        frame = _swig_property(_common.Event_frame_get, _common.Event_frame_set)
    __swig_setmethods__["description"] = _common.Event_description_set
    __swig_getmethods__["description"] = _common.Event_description_get
    if _newclass:
        description = _swig_property(_common.Event_description_get, _common.Event_description_set)

    def __init__(self):
        """__init__(OpenSim::Event self) -> Event"""
        this = _common.new_Event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_Event
    __del__ = lambda self: None
Event_swigregister = _common.Event_swigregister
Event_swigregister(Event)

class StdVectorEvent(_object):
    """Proxy of C++ std::vector<(OpenSim::Event)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorEvent, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StdVectorEvent self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< OpenSim::Event > *

        """
        return _common.StdVectorEvent_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StdVectorEvent self) -> bool

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StdVectorEvent self) -> bool

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent___bool__(self)


    def __len__(self):
        """
        __len__(StdVectorEvent self) -> std::vector< OpenSim::Event >::size_type

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, std::vector< OpenSim::Event >::difference_type j) -> StdVectorEvent

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        j: std::vector< OpenSim::Event >::difference_type

        """
        return _common.StdVectorEvent___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, std::vector< OpenSim::Event >::difference_type j)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        j: std::vector< OpenSim::Event >::difference_type

        __setslice__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, std::vector< OpenSim::Event >::difference_type j, StdVectorEvent v)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        j: std::vector< OpenSim::Event >::difference_type
        v: std::vector< OpenSim::Event,std::allocator< OpenSim::Event > > const &

        """
        return _common.StdVectorEvent___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, std::vector< OpenSim::Event >::difference_type j)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        j: std::vector< OpenSim::Event >::difference_type

        """
        return _common.StdVectorEvent___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type

        __delitem__(StdVectorEvent self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _common.StdVectorEvent___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StdVectorEvent self, PySliceObject * slice) -> StdVectorEvent

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i) -> Event

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type

        """
        return _common.StdVectorEvent___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StdVectorEvent self, PySliceObject * slice, StdVectorEvent v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< OpenSim::Event,std::allocator< OpenSim::Event > > const &

        __setitem__(StdVectorEvent self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, Event x)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent___setitem__(self, *args)


    def pop(self):
        """
        pop(StdVectorEvent self) -> Event

        Parameters
        ----------
        self: std::vector< OpenSim::Event > *

        """
        return _common.StdVectorEvent_pop(self)


    def append(self, x):
        """
        append(StdVectorEvent self, Event x)

        Parameters
        ----------
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_append(self, x)


    def empty(self):
        """
        empty(StdVectorEvent self) -> bool

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent_empty(self)


    def size(self):
        """
        size(StdVectorEvent self) -> std::vector< OpenSim::Event >::size_type

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent_size(self)


    def swap(self, v):
        """
        swap(StdVectorEvent self, StdVectorEvent v)

        Parameters
        ----------
        v: std::vector< OpenSim::Event > &

        """
        return _common.StdVectorEvent_swap(self, v)


    def begin(self):
        """
        begin(StdVectorEvent self) -> std::vector< OpenSim::Event >::iterator

        Parameters
        ----------
        self: std::vector< OpenSim::Event > *

        """
        return _common.StdVectorEvent_begin(self)


    def end(self):
        """
        end(StdVectorEvent self) -> std::vector< OpenSim::Event >::iterator

        Parameters
        ----------
        self: std::vector< OpenSim::Event > *

        """
        return _common.StdVectorEvent_end(self)


    def rbegin(self):
        """
        rbegin(StdVectorEvent self) -> std::vector< OpenSim::Event >::reverse_iterator

        Parameters
        ----------
        self: std::vector< OpenSim::Event > *

        """
        return _common.StdVectorEvent_rbegin(self)


    def rend(self):
        """
        rend(StdVectorEvent self) -> std::vector< OpenSim::Event >::reverse_iterator

        Parameters
        ----------
        self: std::vector< OpenSim::Event > *

        """
        return _common.StdVectorEvent_rend(self)


    def clear(self):
        """
        clear(StdVectorEvent self)

        Parameters
        ----------
        self: std::vector< OpenSim::Event > *

        """
        return _common.StdVectorEvent_clear(self)


    def get_allocator(self):
        """
        get_allocator(StdVectorEvent self) -> std::vector< OpenSim::Event >::allocator_type

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent_get_allocator(self)


    def pop_back(self):
        """
        pop_back(StdVectorEvent self)

        Parameters
        ----------
        self: std::vector< OpenSim::Event > *

        """
        return _common.StdVectorEvent_pop_back(self)


    def erase(self, *args):
        """
        erase(StdVectorEvent self, std::vector< OpenSim::Event >::iterator pos) -> std::vector< OpenSim::Event >::iterator

        Parameters
        ----------
        pos: std::vector< OpenSim::Event >::iterator

        erase(StdVectorEvent self, std::vector< OpenSim::Event >::iterator first, std::vector< OpenSim::Event >::iterator last) -> std::vector< OpenSim::Event >::iterator

        Parameters
        ----------
        first: std::vector< OpenSim::Event >::iterator
        last: std::vector< OpenSim::Event >::iterator

        """
        return _common.StdVectorEvent_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(OpenSim::Event)> self) -> StdVectorEvent
        __init__(std::vector<(OpenSim::Event)> self, StdVectorEvent arg2) -> StdVectorEvent

        Parameters
        ----------
        arg2: std::vector< OpenSim::Event > const &

        __init__(std::vector<(OpenSim::Event)> self, std::vector< OpenSim::Event >::size_type size) -> StdVectorEvent

        Parameters
        ----------
        size: std::vector< OpenSim::Event >::size_type

        __init__(std::vector<(OpenSim::Event)> self, std::vector< OpenSim::Event >::size_type size, Event value) -> StdVectorEvent

        Parameters
        ----------
        size: std::vector< OpenSim::Event >::size_type
        value: std::vector< OpenSim::Event >::value_type const &

        """
        this = _common.new_StdVectorEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(StdVectorEvent self, Event x)

        Parameters
        ----------
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_push_back(self, x)


    def front(self):
        """
        front(StdVectorEvent self) -> Event

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent_front(self)


    def back(self):
        """
        back(StdVectorEvent self) -> Event

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent_back(self)


    def assign(self, n, x):
        """
        assign(StdVectorEvent self, std::vector< OpenSim::Event >::size_type n, Event x)

        Parameters
        ----------
        n: std::vector< OpenSim::Event >::size_type
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StdVectorEvent self, std::vector< OpenSim::Event >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< OpenSim::Event >::size_type

        resize(StdVectorEvent self, std::vector< OpenSim::Event >::size_type new_size, Event x)

        Parameters
        ----------
        new_size: std::vector< OpenSim::Event >::size_type
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_resize(self, *args)


    def insert(self, *args):
        """
        insert(StdVectorEvent self, std::vector< OpenSim::Event >::iterator pos, Event x) -> std::vector< OpenSim::Event >::iterator

        Parameters
        ----------
        pos: std::vector< OpenSim::Event >::iterator
        x: std::vector< OpenSim::Event >::value_type const &

        insert(StdVectorEvent self, std::vector< OpenSim::Event >::iterator pos, std::vector< OpenSim::Event >::size_type n, Event x)

        Parameters
        ----------
        pos: std::vector< OpenSim::Event >::iterator
        n: std::vector< OpenSim::Event >::size_type
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_insert(self, *args)


    def reserve(self, n):
        """
        reserve(StdVectorEvent self, std::vector< OpenSim::Event >::size_type n)

        Parameters
        ----------
        n: std::vector< OpenSim::Event >::size_type

        """
        return _common.StdVectorEvent_reserve(self, n)


    def capacity(self):
        """
        capacity(StdVectorEvent self) -> std::vector< OpenSim::Event >::size_type

        Parameters
        ----------
        self: std::vector< OpenSim::Event > const *

        """
        return _common.StdVectorEvent_capacity(self)

    __swig_destroy__ = _common.delete_StdVectorEvent
    __del__ = lambda self: None
StdVectorEvent_swigregister = _common.StdVectorEvent_swigregister
StdVectorEvent_swigregister(StdVectorEvent)

class StdMapStringTimeSeriesTableVec3(_object):
    """Proxy of C++ std::map<(std::string,std::shared_ptr<(OpenSim::TimeSeriesTable_<(SimTK::Vec3)>)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdMapStringTimeSeriesTableVec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdMapStringTimeSeriesTableVec3, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StdMapStringTimeSeriesTableVec3 self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StdMapStringTimeSeriesTableVec3 self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > const *

        """
        return _common.StdMapStringTimeSeriesTableVec3___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StdMapStringTimeSeriesTableVec3 self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > const *

        """
        return _common.StdMapStringTimeSeriesTableVec3___bool__(self)


    def __len__(self):
        """
        __len__(StdMapStringTimeSeriesTableVec3 self) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::size_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > const *

        """
        return _common.StdMapStringTimeSeriesTableVec3___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """
        __getitem__(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & key) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3___getitem__(self, key)


    def __delitem__(self, key):
        """
        __delitem__(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3___delitem__(self, key)


    def has_key(self, key):
        """
        has_key(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3_has_key(self, key)


    def keys(self):
        """
        keys(StdMapStringTimeSeriesTableVec3 self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_keys(self)


    def values(self):
        """
        values(StdMapStringTimeSeriesTableVec3 self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_values(self)


    def items(self):
        """
        items(StdMapStringTimeSeriesTableVec3 self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_items(self)


    def __contains__(self, key):
        """
        __contains__(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3___contains__(self, key)


    def key_iterator(self):
        """
        key_iterator(StdMapStringTimeSeriesTableVec3 self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_key_iterator(self)


    def value_iterator(self):
        """
        value_iterator(StdMapStringTimeSeriesTableVec3 self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        __setitem__(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & key, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &
        x: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::mapped_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3___setitem__(self, *args)


    def asdict(self):
        """
        asdict(StdMapStringTimeSeriesTableVec3 self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::TimeSeriesTable_<(SimTK::Vec3)>)>)> self, std::less< std::string > const & arg2) -> StdMapStringTimeSeriesTableVec3

        Parameters
        ----------
        arg2: std::less< std::string > const &

        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::TimeSeriesTable_<(SimTK::Vec3)>)>)> self) -> StdMapStringTimeSeriesTableVec3
        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::TimeSeriesTable_<(SimTK::Vec3)>)>)> self, StdMapStringTimeSeriesTableVec3 arg2) -> StdMapStringTimeSeriesTableVec3

        Parameters
        ----------
        arg2: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > const &

        """
        this = _common.new_StdMapStringTimeSeriesTableVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(StdMapStringTimeSeriesTableVec3 self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > const *

        """
        return _common.StdMapStringTimeSeriesTableVec3_empty(self)


    def size(self):
        """
        size(StdMapStringTimeSeriesTableVec3 self) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::size_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > const *

        """
        return _common.StdMapStringTimeSeriesTableVec3_size(self)


    def swap(self, v):
        """
        swap(StdMapStringTimeSeriesTableVec3 self, StdMapStringTimeSeriesTableVec3 v)

        Parameters
        ----------
        v: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > &

        """
        return _common.StdMapStringTimeSeriesTableVec3_swap(self, v)


    def begin(self):
        """
        begin(StdMapStringTimeSeriesTableVec3 self) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_begin(self)


    def end(self):
        """
        end(StdMapStringTimeSeriesTableVec3 self) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_end(self)


    def rbegin(self):
        """
        rbegin(StdMapStringTimeSeriesTableVec3 self) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::reverse_iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_rbegin(self)


    def rend(self):
        """
        rend(StdMapStringTimeSeriesTableVec3 self) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::reverse_iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_rend(self)


    def clear(self):
        """
        clear(StdMapStringTimeSeriesTableVec3 self)

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > *

        """
        return _common.StdMapStringTimeSeriesTableVec3_clear(self)


    def get_allocator(self):
        """
        get_allocator(StdMapStringTimeSeriesTableVec3 self) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::allocator_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec3 > > > const *

        """
        return _common.StdMapStringTimeSeriesTableVec3_get_allocator(self)


    def count(self, x):
        """
        count(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3_count(self, x)


    def erase(self, *args):
        """
        erase(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        erase(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator

        erase(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator first, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator
        last: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator

        """
        return _common.StdMapStringTimeSeriesTableVec3_erase(self, *args)


    def find(self, x):
        """
        find(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(StdMapStringTimeSeriesTableVec3 self, std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > > >::key_type const &

        """
        return _common.StdMapStringTimeSeriesTableVec3_upper_bound(self, x)

    __swig_destroy__ = _common.delete_StdMapStringTimeSeriesTableVec3
    __del__ = lambda self: None
StdMapStringTimeSeriesTableVec3_swigregister = _common.StdMapStringTimeSeriesTableVec3_swigregister
StdMapStringTimeSeriesTableVec3_swigregister(StdMapStringTimeSeriesTableVec3)

class StdMapStringDataAdapter(_object):
    """Proxy of C++ std::map<(std::string,std::shared_ptr<(OpenSim::DataAdapter)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdMapStringDataAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdMapStringDataAdapter, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StdMapStringDataAdapter self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StdMapStringDataAdapter self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > const *

        """
        return _common.StdMapStringDataAdapter___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StdMapStringDataAdapter self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > const *

        """
        return _common.StdMapStringDataAdapter___bool__(self)


    def __len__(self):
        """
        __len__(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::size_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > const *

        """
        return _common.StdMapStringDataAdapter___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """
        __getitem__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter___getitem__(self, key)


    def __delitem__(self, key):
        """
        __delitem__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter___delitem__(self, key)


    def has_key(self, key):
        """
        has_key(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_has_key(self, key)


    def keys(self):
        """
        keys(StdMapStringDataAdapter self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_keys(self)


    def values(self):
        """
        values(StdMapStringDataAdapter self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_values(self)


    def items(self):
        """
        items(StdMapStringDataAdapter self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_items(self)


    def __contains__(self, key):
        """
        __contains__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter___contains__(self, key)


    def key_iterator(self):
        """
        key_iterator(StdMapStringDataAdapter self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_key_iterator(self)


    def value_iterator(self):
        """
        value_iterator(StdMapStringDataAdapter self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        __setitem__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::mapped_type const &

        """
        return _common.StdMapStringDataAdapter___setitem__(self, *args)


    def asdict(self):
        """
        asdict(StdMapStringDataAdapter self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::DataAdapter)>)> self, std::less< std::string > const & arg2) -> StdMapStringDataAdapter

        Parameters
        ----------
        arg2: std::less< std::string > const &

        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::DataAdapter)>)> self) -> StdMapStringDataAdapter
        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::DataAdapter)>)> self, StdMapStringDataAdapter arg2) -> StdMapStringDataAdapter

        Parameters
        ----------
        arg2: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > const &

        """
        this = _common.new_StdMapStringDataAdapter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(StdMapStringDataAdapter self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > const *

        """
        return _common.StdMapStringDataAdapter_empty(self)


    def size(self):
        """
        size(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::size_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > const *

        """
        return _common.StdMapStringDataAdapter_size(self)


    def swap(self, v):
        """
        swap(StdMapStringDataAdapter self, StdMapStringDataAdapter v)

        Parameters
        ----------
        v: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > &

        """
        return _common.StdMapStringDataAdapter_swap(self, v)


    def begin(self):
        """
        begin(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_begin(self)


    def end(self):
        """
        end(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_end(self)


    def rbegin(self):
        """
        rbegin(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::reverse_iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_rbegin(self)


    def rend(self):
        """
        rend(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::reverse_iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_rend(self)


    def clear(self):
        """
        clear(StdMapStringDataAdapter self)

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > *

        """
        return _common.StdMapStringDataAdapter_clear(self)


    def get_allocator(self):
        """
        get_allocator(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::allocator_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > const *

        """
        return _common.StdMapStringDataAdapter_get_allocator(self)


    def count(self, x):
        """
        count(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_count(self, x)


    def erase(self, *args):
        """
        erase(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        erase(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        erase(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator first, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator
        last: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        """
        return _common.StdMapStringDataAdapter_erase(self, *args)


    def find(self, x):
        """
        find(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_upper_bound(self, x)

    __swig_destroy__ = _common.delete_StdMapStringDataAdapter
    __del__ = lambda self: None
StdMapStringDataAdapter_swigregister = _common.StdMapStringDataAdapter_swigregister
StdMapStringDataAdapter_swigregister(StdMapStringDataAdapter)

class StdMapStringAbstractDataTable(_object):
    """Proxy of C++ std::map<(std::string,std::shared_ptr<(OpenSim::AbstractDataTable)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdMapStringAbstractDataTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdMapStringAbstractDataTable, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StdMapStringAbstractDataTable self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StdMapStringAbstractDataTable self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > const *

        """
        return _common.StdMapStringAbstractDataTable___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StdMapStringAbstractDataTable self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > const *

        """
        return _common.StdMapStringAbstractDataTable___bool__(self)


    def __len__(self):
        """
        __len__(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::size_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > const *

        """
        return _common.StdMapStringAbstractDataTable___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """
        __getitem__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable___getitem__(self, key)


    def __delitem__(self, key):
        """
        __delitem__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable___delitem__(self, key)


    def has_key(self, key):
        """
        has_key(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_has_key(self, key)


    def keys(self):
        """
        keys(StdMapStringAbstractDataTable self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_keys(self)


    def values(self):
        """
        values(StdMapStringAbstractDataTable self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_values(self)


    def items(self):
        """
        items(StdMapStringAbstractDataTable self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_items(self)


    def __contains__(self, key):
        """
        __contains__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable___contains__(self, key)


    def key_iterator(self):
        """
        key_iterator(StdMapStringAbstractDataTable self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_key_iterator(self)


    def value_iterator(self):
        """
        value_iterator(StdMapStringAbstractDataTable self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        __setitem__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::mapped_type const &

        """
        return _common.StdMapStringAbstractDataTable___setitem__(self, *args)


    def asdict(self):
        """
        asdict(StdMapStringAbstractDataTable self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::AbstractDataTable)>)> self, std::less< std::string > const & arg2) -> StdMapStringAbstractDataTable

        Parameters
        ----------
        arg2: std::less< std::string > const &

        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::AbstractDataTable)>)> self) -> StdMapStringAbstractDataTable
        __init__(std::map<(std::string,std::shared_ptr<(OpenSim::AbstractDataTable)>)> self, StdMapStringAbstractDataTable arg2) -> StdMapStringAbstractDataTable

        Parameters
        ----------
        arg2: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > const &

        """
        this = _common.new_StdMapStringAbstractDataTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(StdMapStringAbstractDataTable self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > const *

        """
        return _common.StdMapStringAbstractDataTable_empty(self)


    def size(self):
        """
        size(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::size_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > const *

        """
        return _common.StdMapStringAbstractDataTable_size(self)


    def swap(self, v):
        """
        swap(StdMapStringAbstractDataTable self, StdMapStringAbstractDataTable v)

        Parameters
        ----------
        v: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > &

        """
        return _common.StdMapStringAbstractDataTable_swap(self, v)


    def begin(self):
        """
        begin(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_begin(self)


    def end(self):
        """
        end(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_end(self)


    def rbegin(self):
        """
        rbegin(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::reverse_iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_rbegin(self)


    def rend(self):
        """
        rend(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::reverse_iterator

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_rend(self)


    def clear(self):
        """
        clear(StdMapStringAbstractDataTable self)

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > *

        """
        return _common.StdMapStringAbstractDataTable_clear(self)


    def get_allocator(self):
        """
        get_allocator(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::allocator_type

        Parameters
        ----------
        self: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > const *

        """
        return _common.StdMapStringAbstractDataTable_get_allocator(self)


    def count(self, x):
        """
        count(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_count(self, x)


    def erase(self, *args):
        """
        erase(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        erase(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        erase(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator first, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator
        last: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        """
        return _common.StdMapStringAbstractDataTable_erase(self, *args)


    def find(self, x):
        """
        find(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_upper_bound(self, x)

    __swig_destroy__ = _common.delete_StdMapStringAbstractDataTable
    __del__ = lambda self: None
StdMapStringAbstractDataTable_swigregister = _common.StdMapStringAbstractDataTable_swigregister
StdMapStringAbstractDataTable_swigregister(StdMapStringAbstractDataTable)

class DataAdapterAlreadyRegistered(OpenSimException):
    """Proxy of C++ OpenSim::DataAdapterAlreadyRegistered class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataAdapterAlreadyRegistered, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataAdapterAlreadyRegistered, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        """
        __init__(OpenSim::DataAdapterAlreadyRegistered self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> DataAdapterAlreadyRegistered

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        this = _common.new_DataAdapterAlreadyRegistered(file, line, func, key)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_DataAdapterAlreadyRegistered
    __del__ = lambda self: None
DataAdapterAlreadyRegistered_swigregister = _common.DataAdapterAlreadyRegistered_swigregister
DataAdapterAlreadyRegistered_swigregister(DataAdapterAlreadyRegistered)

class NoRegisteredDataAdapter(OpenSimException):
    """Proxy of C++ OpenSim::NoRegisteredDataAdapter class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRegisteredDataAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoRegisteredDataAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        """
        __init__(OpenSim::NoRegisteredDataAdapter self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> NoRegisteredDataAdapter

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        this = _common.new_NoRegisteredDataAdapter(file, line, func, key)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_NoRegisteredDataAdapter
    __del__ = lambda self: None
NoRegisteredDataAdapter_swigregister = _common.NoRegisteredDataAdapter_swigregister
NoRegisteredDataAdapter_swigregister(NoRegisteredDataAdapter)

class TableNotFoundException(OpenSimException):
    """Proxy of C++ OpenSim::TableNotFoundException class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableNotFoundException, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableNotFoundException, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        """
        __init__(OpenSim::TableNotFoundException self, std::string const & name) -> TableNotFoundException

        Parameters
        ----------
        name: std::string const &

        """
        this = _common.new_TableNotFoundException(name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TableNotFoundException
    __del__ = lambda self: None
TableNotFoundException_swigregister = _common.TableNotFoundException_swigregister
TableNotFoundException_swigregister(TableNotFoundException)

class DataAdapter(_object):
    """Proxy of C++ OpenSim::DataAdapter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataAdapter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """
        clone(DataAdapter self) -> DataAdapter

        Parameters
        ----------
        self: OpenSim::DataAdapter const *

        """
        return _common.DataAdapter_clone(self)

    __swig_destroy__ = _common.delete_DataAdapter
    __del__ = lambda self: None

    def registerDataAdapter(identifier, adapter):
        """
        registerDataAdapter(std::string const & identifier, DataAdapter adapter) -> bool

        Parameters
        ----------
        identifier: std::string const &
        adapter: OpenSim::DataAdapter const &

        """
        return _common.DataAdapter_registerDataAdapter(identifier, adapter)

    registerDataAdapter = staticmethod(registerDataAdapter)

    def read(self, dataSourceSpecification):
        """
        read(DataAdapter self, std::string const & dataSourceSpecification) -> StdMapStringAbstractDataTable

        Parameters
        ----------
        dataSourceSpecification: std::string const &

        """
        return _common.DataAdapter_read(self, dataSourceSpecification)


    def getDataTable(self, tables, tableName):
        """
        getDataTable(DataAdapter self, StdMapStringAbstractDataTable tables, std::string const tableName) -> std::shared_ptr< OpenSim::AbstractDataTable > const

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &
        tableName: std::string const

        """
        return _common.DataAdapter_getDataTable(self, tables, tableName)

DataAdapter_swigregister = _common.DataAdapter_swigregister
DataAdapter_swigregister(DataAdapter)

def DataAdapter_registerDataAdapter(identifier, adapter):
    """
    DataAdapter_registerDataAdapter(std::string const & identifier, DataAdapter adapter) -> bool

    Parameters
    ----------
    identifier: std::string const &
    adapter: OpenSim::DataAdapter const &

    """
    return _common.DataAdapter_registerDataAdapter(identifier, adapter)

class ExperimentalSensor(OpenSimObject):
    """Proxy of C++ OpenSim::ExperimentalSensor class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExperimentalSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExperimentalSensor, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExperimentalSensor

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ExperimentalSensor_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ExperimentalSensor self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ExperimentalSensor_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ExperimentalSensor_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ExperimentalSensor self) -> ExperimentalSensor

        Parameters
        ----------
        self: OpenSim::ExperimentalSensor const *

        """
        return _common.ExperimentalSensor_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExperimentalSensor self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExperimentalSensor const *

        """
        return _common.ExperimentalSensor_getConcreteClassName(self)


    def copyProperty_name_in_model(self, source):
        """
        copyProperty_name_in_model(ExperimentalSensor self, ExperimentalSensor source)

        Parameters
        ----------
        source: OpenSim::ExperimentalSensor::Self const &

        """
        return _common.ExperimentalSensor_copyProperty_name_in_model(self, source)


    def append_name_in_model(self, value):
        """
        append_name_in_model(ExperimentalSensor self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.ExperimentalSensor_append_name_in_model(self, value)


    def constructProperty_name_in_model(self, initValue):
        """
        constructProperty_name_in_model(ExperimentalSensor self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.ExperimentalSensor_constructProperty_name_in_model(self, initValue)


    def get_name_in_model(self, *args):
        """
        get_name_in_model(ExperimentalSensor self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_name_in_model(ExperimentalSensor self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExperimentalSensor const *

        """
        return _common.ExperimentalSensor_get_name_in_model(self, *args)


    def upd_name_in_model(self, *args):
        """
        upd_name_in_model(ExperimentalSensor self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_name_in_model(ExperimentalSensor self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExperimentalSensor *

        """
        return _common.ExperimentalSensor_upd_name_in_model(self, *args)


    def set_name_in_model(self, *args):
        """
        set_name_in_model(ExperimentalSensor self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_name_in_model(ExperimentalSensor self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.ExperimentalSensor_set_name_in_model(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExperimentalSensor self, std::string const & sensorName, std::string const & nameInModel) -> ExperimentalSensor

        Parameters
        ----------
        sensorName: std::string const &
        nameInModel: std::string const &

        __init__(OpenSim::ExperimentalSensor self) -> ExperimentalSensor
        """
        this = _common.new_ExperimentalSensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ExperimentalSensor
    __del__ = lambda self: None
ExperimentalSensor_swigregister = _common.ExperimentalSensor_swigregister
ExperimentalSensor_swigregister(ExperimentalSensor)

def ExperimentalSensor_safeDownCast(obj):
    """
    ExperimentalSensor_safeDownCast(OpenSimObject obj) -> ExperimentalSensor

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ExperimentalSensor_safeDownCast(obj)

def ExperimentalSensor_getClassName():
    """ExperimentalSensor_getClassName() -> std::string const &"""
    return _common.ExperimentalSensor_getClassName()

class IMUDataReader(DataAdapter):
    """Proxy of C++ OpenSim::IMUDataReader class."""

    __swig_setmethods__ = {}
    for _s in [DataAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMUDataReader, name, value)
    __swig_getmethods__ = {}
    for _s in [DataAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMUDataReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_IMUDataReader
    __del__ = lambda self: None

    def getOrientationsTable(tables):
        """
        getOrientationsTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &

        """
        return _common.IMUDataReader_getOrientationsTable(tables)

    getOrientationsTable = staticmethod(getOrientationsTable)

    def getLinearAccelerationsTable(tables):
        """
        getLinearAccelerationsTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &

        """
        return _common.IMUDataReader_getLinearAccelerationsTable(tables)

    getLinearAccelerationsTable = staticmethod(getLinearAccelerationsTable)

    def getMagneticHeadingTable(tables):
        """
        getMagneticHeadingTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &

        """
        return _common.IMUDataReader_getMagneticHeadingTable(tables)

    getMagneticHeadingTable = staticmethod(getMagneticHeadingTable)

    def getAngularVelocityTable(tables):
        """
        getAngularVelocityTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &

        """
        return _common.IMUDataReader_getAngularVelocityTable(tables)

    getAngularVelocityTable = staticmethod(getAngularVelocityTable)
IMUDataReader_swigregister = _common.IMUDataReader_swigregister
IMUDataReader_swigregister(IMUDataReader)
IMUDataReader.Orientations = _common.cvar.IMUDataReader_Orientations
IMUDataReader.LinearAccelerations = _common.cvar.IMUDataReader_LinearAccelerations
IMUDataReader.MagneticHeading = _common.cvar.IMUDataReader_MagneticHeading
IMUDataReader.AngularVelocity = _common.cvar.IMUDataReader_AngularVelocity

def IMUDataReader_getOrientationsTable(tables):
    """
    IMUDataReader_getOrientationsTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableQuaternion

    Parameters
    ----------
    tables: OpenSim::DataAdapter::OutputTables const &

    """
    return _common.IMUDataReader_getOrientationsTable(tables)

def IMUDataReader_getLinearAccelerationsTable(tables):
    """
    IMUDataReader_getLinearAccelerationsTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

    Parameters
    ----------
    tables: OpenSim::DataAdapter::OutputTables const &

    """
    return _common.IMUDataReader_getLinearAccelerationsTable(tables)

def IMUDataReader_getMagneticHeadingTable(tables):
    """
    IMUDataReader_getMagneticHeadingTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

    Parameters
    ----------
    tables: OpenSim::DataAdapter::OutputTables const &

    """
    return _common.IMUDataReader_getMagneticHeadingTable(tables)

def IMUDataReader_getAngularVelocityTable(tables):
    """
    IMUDataReader_getAngularVelocityTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

    Parameters
    ----------
    tables: OpenSim::DataAdapter::OutputTables const &

    """
    return _common.IMUDataReader_getAngularVelocityTable(tables)

class XsensDataReaderSettings(OpenSimObject):
    """Proxy of C++ OpenSim::XsensDataReaderSettings class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsensDataReaderSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsensDataReaderSettings, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> XsensDataReaderSettings

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.XsensDataReaderSettings_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(XsensDataReaderSettings self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.XsensDataReaderSettings_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.XsensDataReaderSettings_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(XsensDataReaderSettings self) -> XsensDataReaderSettings

        Parameters
        ----------
        self: OpenSim::XsensDataReaderSettings const *

        """
        return _common.XsensDataReaderSettings_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(XsensDataReaderSettings self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::XsensDataReaderSettings const *

        """
        return _common.XsensDataReaderSettings_getConcreteClassName(self)


    def copyProperty_data_folder(self, source):
        """
        copyProperty_data_folder(XsensDataReaderSettings self, XsensDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::XsensDataReaderSettings::Self const &

        """
        return _common.XsensDataReaderSettings_copyProperty_data_folder(self, source)


    def append_data_folder(self, value):
        """
        append_data_folder(XsensDataReaderSettings self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_append_data_folder(self, value)


    def constructProperty_data_folder(self, initValue):
        """
        constructProperty_data_folder(XsensDataReaderSettings self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.XsensDataReaderSettings_constructProperty_data_folder(self, initValue)


    def get_data_folder(self, *args):
        """
        get_data_folder(XsensDataReaderSettings self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_data_folder(XsensDataReaderSettings self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::XsensDataReaderSettings const *

        """
        return _common.XsensDataReaderSettings_get_data_folder(self, *args)


    def upd_data_folder(self, *args):
        """
        upd_data_folder(XsensDataReaderSettings self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_data_folder(XsensDataReaderSettings self) -> std::string &

        Parameters
        ----------
        self: OpenSim::XsensDataReaderSettings *

        """
        return _common.XsensDataReaderSettings_upd_data_folder(self, *args)


    def set_data_folder(self, *args):
        """
        set_data_folder(XsensDataReaderSettings self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_data_folder(XsensDataReaderSettings self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_set_data_folder(self, *args)


    def copyProperty_trial_prefix(self, source):
        """
        copyProperty_trial_prefix(XsensDataReaderSettings self, XsensDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::XsensDataReaderSettings::Self const &

        """
        return _common.XsensDataReaderSettings_copyProperty_trial_prefix(self, source)


    def append_trial_prefix(self, value):
        """
        append_trial_prefix(XsensDataReaderSettings self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_append_trial_prefix(self, value)


    def constructProperty_trial_prefix(self, initValue):
        """
        constructProperty_trial_prefix(XsensDataReaderSettings self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.XsensDataReaderSettings_constructProperty_trial_prefix(self, initValue)


    def get_trial_prefix(self, *args):
        """
        get_trial_prefix(XsensDataReaderSettings self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_trial_prefix(XsensDataReaderSettings self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::XsensDataReaderSettings const *

        """
        return _common.XsensDataReaderSettings_get_trial_prefix(self, *args)


    def upd_trial_prefix(self, *args):
        """
        upd_trial_prefix(XsensDataReaderSettings self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_trial_prefix(XsensDataReaderSettings self) -> std::string &

        Parameters
        ----------
        self: OpenSim::XsensDataReaderSettings *

        """
        return _common.XsensDataReaderSettings_upd_trial_prefix(self, *args)


    def set_trial_prefix(self, *args):
        """
        set_trial_prefix(XsensDataReaderSettings self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_trial_prefix(XsensDataReaderSettings self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_set_trial_prefix(self, *args)


    def copyProperty_ExperimentalSensors(self, source):
        """
        copyProperty_ExperimentalSensors(XsensDataReaderSettings self, XsensDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::XsensDataReaderSettings::Self const &

        """
        return _common.XsensDataReaderSettings_copyProperty_ExperimentalSensors(self, source)


    def get_ExperimentalSensors(self, i):
        """
        get_ExperimentalSensors(XsensDataReaderSettings self, int i) -> ExperimentalSensor

        Parameters
        ----------
        i: int

        """
        return _common.XsensDataReaderSettings_get_ExperimentalSensors(self, i)


    def upd_ExperimentalSensors(self, i):
        """
        upd_ExperimentalSensors(XsensDataReaderSettings self, int i) -> ExperimentalSensor

        Parameters
        ----------
        i: int

        """
        return _common.XsensDataReaderSettings_upd_ExperimentalSensors(self, i)


    def set_ExperimentalSensors(self, i, value):
        """
        set_ExperimentalSensors(XsensDataReaderSettings self, int i, ExperimentalSensor value)

        Parameters
        ----------
        i: int
        value: OpenSim::ExperimentalSensor const &

        """
        return _common.XsensDataReaderSettings_set_ExperimentalSensors(self, i, value)


    def append_ExperimentalSensors(self, value):
        """
        append_ExperimentalSensors(XsensDataReaderSettings self, ExperimentalSensor value) -> int

        Parameters
        ----------
        value: OpenSim::ExperimentalSensor const &

        """
        return _common.XsensDataReaderSettings_append_ExperimentalSensors(self, value)


    def constructProperty_ExperimentalSensors(self):
        """
        constructProperty_ExperimentalSensors(XsensDataReaderSettings self)

        Parameters
        ----------
        self: OpenSim::XsensDataReaderSettings *

        """
        return _common.XsensDataReaderSettings_constructProperty_ExperimentalSensors(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::XsensDataReaderSettings self) -> XsensDataReaderSettings
        __init__(OpenSim::XsensDataReaderSettings self, std::string const & xmlFile) -> XsensDataReaderSettings

        Parameters
        ----------
        xmlFile: std::string const &

        __init__(OpenSim::XsensDataReaderSettings self, XsensDataReaderSettings arg2) -> XsensDataReaderSettings

        Parameters
        ----------
        arg2: OpenSim::XsensDataReaderSettings const &

        __init__(OpenSim::XsensDataReaderSettings self, XsensDataReaderSettings arg2) -> XsensDataReaderSettings

        Parameters
        ----------
        arg2: OpenSim::XsensDataReaderSettings &&

        """
        this = _common.new_XsensDataReaderSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_XsensDataReaderSettings
    __del__ = lambda self: None
XsensDataReaderSettings_swigregister = _common.XsensDataReaderSettings_swigregister
XsensDataReaderSettings_swigregister(XsensDataReaderSettings)

def XsensDataReaderSettings_safeDownCast(obj):
    """
    XsensDataReaderSettings_safeDownCast(OpenSimObject obj) -> XsensDataReaderSettings

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.XsensDataReaderSettings_safeDownCast(obj)

def XsensDataReaderSettings_getClassName():
    """XsensDataReaderSettings_getClassName() -> std::string const &"""
    return _common.XsensDataReaderSettings_getClassName()

class XsensDataReader(IMUDataReader):
    """Proxy of C++ OpenSim::XsensDataReader class."""

    __swig_setmethods__ = {}
    for _s in [IMUDataReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsensDataReader, name, value)
    __swig_getmethods__ = {}
    for _s in [IMUDataReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XsensDataReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::XsensDataReader self) -> XsensDataReader
        __init__(OpenSim::XsensDataReader self, XsensDataReaderSettings settings) -> XsensDataReader

        Parameters
        ----------
        settings: OpenSim::XsensDataReaderSettings const &

        __init__(OpenSim::XsensDataReader self, XsensDataReader arg2) -> XsensDataReader

        Parameters
        ----------
        arg2: OpenSim::XsensDataReader const &

        __init__(OpenSim::XsensDataReader self, XsensDataReader arg2) -> XsensDataReader

        Parameters
        ----------
        arg2: OpenSim::XsensDataReader &&

        """
        this = _common.new_XsensDataReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_XsensDataReader
    __del__ = lambda self: None

    def clone(self):
        """
        clone(XsensDataReader self) -> XsensDataReader

        Parameters
        ----------
        self: OpenSim::XsensDataReader const *

        """
        return _common.XsensDataReader_clone(self)


    def getSettings(self):
        """
        getSettings(XsensDataReader self) -> XsensDataReaderSettings

        Parameters
        ----------
        self: OpenSim::XsensDataReader const *

        """
        return _common.XsensDataReader_getSettings(self)


    def updSettings(self):
        """
        updSettings(XsensDataReader self) -> XsensDataReaderSettings

        Parameters
        ----------
        self: OpenSim::XsensDataReader *

        """
        return _common.XsensDataReader_updSettings(self)

XsensDataReader_swigregister = _common.XsensDataReader_swigregister
XsensDataReader_swigregister(XsensDataReader)

class EmptyFileName(InvalidArgument):
    """Proxy of C++ OpenSim::EmptyFileName class."""

    __swig_setmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyFileName, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyFileName, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        """
        __init__(OpenSim::EmptyFileName self, std::string const & file, size_t line, std::string const & func) -> EmptyFileName

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_EmptyFileName(file, line, func)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_EmptyFileName
    __del__ = lambda self: None
EmptyFileName_swigregister = _common.EmptyFileName_swigregister
EmptyFileName_swigregister(EmptyFileName)

class FileDoesNotExist(IOError):
    """Proxy of C++ OpenSim::FileDoesNotExist class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileDoesNotExist, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileDoesNotExist, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename):
        """
        __init__(OpenSim::FileDoesNotExist self, std::string const & file, size_t line, std::string const & func, std::string const filename) -> FileDoesNotExist

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const

        """
        this = _common.new_FileDoesNotExist(file, line, func, filename)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_FileDoesNotExist
    __del__ = lambda self: None
FileDoesNotExist_swigregister = _common.FileDoesNotExist_swigregister
FileDoesNotExist_swigregister(FileDoesNotExist)

class FileIsEmpty(IOError):
    """Proxy of C++ OpenSim::FileIsEmpty class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileIsEmpty, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileIsEmpty, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename):
        """
        __init__(OpenSim::FileIsEmpty self, std::string const & file, size_t line, std::string const & func, std::string const & filename) -> FileIsEmpty

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &

        """
        this = _common.new_FileIsEmpty(file, line, func, filename)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_FileIsEmpty
    __del__ = lambda self: None
FileIsEmpty_swigregister = _common.FileIsEmpty_swigregister
FileIsEmpty_swigregister(FileIsEmpty)

class FileExtensionNotFound(InvalidArgument):
    """Proxy of C++ OpenSim::FileExtensionNotFound class."""

    __swig_setmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileExtensionNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileExtensionNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename):
        """
        __init__(OpenSim::FileExtensionNotFound self, std::string const & file, size_t line, std::string const & func, std::string const & filename) -> FileExtensionNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &

        """
        this = _common.new_FileExtensionNotFound(file, line, func, filename)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_FileExtensionNotFound
    __del__ = lambda self: None
FileExtensionNotFound_swigregister = _common.FileExtensionNotFound_swigregister
FileExtensionNotFound_swigregister(FileExtensionNotFound)

class UnexpectedColumnLabel(IOError):
    """Proxy of C++ OpenSim::UnexpectedColumnLabel class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnexpectedColumnLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnexpectedColumnLabel, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, expected, received):
        """
        __init__(OpenSim::UnexpectedColumnLabel self, std::string const & file, size_t line, std::string const & func, std::string const & filename, std::string const & expected, std::string const & received) -> UnexpectedColumnLabel

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        expected: std::string const &
        received: std::string const &

        """
        this = _common.new_UnexpectedColumnLabel(file, line, func, filename, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_UnexpectedColumnLabel
    __del__ = lambda self: None
UnexpectedColumnLabel_swigregister = _common.UnexpectedColumnLabel_swigregister
UnexpectedColumnLabel_swigregister(UnexpectedColumnLabel)

class RowLengthMismatch(IOError):
    """Proxy of C++ OpenSim::RowLengthMismatch class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowLengthMismatch, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RowLengthMismatch, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, line_num, expected, received):
        """
        __init__(OpenSim::RowLengthMismatch self, std::string const & file, size_t line, std::string const & func, std::string const & filename, size_t line_num, size_t expected, size_t received) -> RowLengthMismatch

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        line_num: size_t
        expected: size_t
        received: size_t

        """
        this = _common.new_RowLengthMismatch(file, line, func, filename, line_num, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_RowLengthMismatch
    __del__ = lambda self: None
RowLengthMismatch_swigregister = _common.RowLengthMismatch_swigregister
RowLengthMismatch_swigregister(RowLengthMismatch)

class NoTableFound(InvalidArgument):
    """Proxy of C++ OpenSim::NoTableFound class."""

    __swig_setmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTableFound, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTableFound, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        """
        __init__(OpenSim::NoTableFound self, std::string const & file, size_t line, std::string const & func) -> NoTableFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_NoTableFound(file, line, func)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_NoTableFound
    __del__ = lambda self: None
NoTableFound_swigregister = _common.NoTableFound_swigregister
NoTableFound_swigregister(NoTableFound)

class KeyMissing(InvalidArgument):
    """Proxy of C++ OpenSim::KeyMissing class."""

    __swig_setmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyMissing, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyMissing, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        """
        __init__(OpenSim::KeyMissing self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> KeyMissing

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        this = _common.new_KeyMissing(file, line, func, key)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_KeyMissing
    __del__ = lambda self: None
KeyMissing_swigregister = _common.KeyMissing_swigregister
KeyMissing_swigregister(KeyMissing)

class IncorrectTableType(InvalidArgument):
    """Proxy of C++ OpenSim::IncorrectTableType class."""

    __swig_setmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectTableType, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidArgument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectTableType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::IncorrectTableType self, std::string const & file, size_t line, std::string const & func, std::string const & message) -> IncorrectTableType

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        message: std::string const &

        __init__(OpenSim::IncorrectTableType self, std::string const & file, size_t line, std::string const & func) -> IncorrectTableType

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_IncorrectTableType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IncorrectTableType
    __del__ = lambda self: None
IncorrectTableType_swigregister = _common.IncorrectTableType_swigregister
IncorrectTableType_swigregister(IncorrectTableType)

class TableMissingHeader(OpenSimException):
    """Proxy of C++ OpenSim::TableMissingHeader class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableMissingHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableMissingHeader, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        """
        __init__(OpenSim::TableMissingHeader self, std::string const & file, size_t line, std::string const & func) -> TableMissingHeader

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _common.new_TableMissingHeader(file, line, func)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TableMissingHeader
    __del__ = lambda self: None
TableMissingHeader_swigregister = _common.TableMissingHeader_swigregister
TableMissingHeader_swigregister(TableMissingHeader)

class FileAdapter(DataAdapter):
    """Proxy of C++ OpenSim::FileAdapter class."""

    __swig_setmethods__ = {}
    for _s in [DataAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [DataAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileAdapter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_FileAdapter
    __del__ = lambda self: None

    def writeFile(tables, fileName):
        """
        writeFile(OpenSim::DataAdapter::InputTables const & tables, std::string const & fileName)

        Parameters
        ----------
        tables: OpenSim::DataAdapter::InputTables const &
        fileName: std::string const &

        """
        return _common.FileAdapter_writeFile(tables, fileName)

    writeFile = staticmethod(writeFile)

    def findExtension(filename):
        """
        findExtension(std::string const & filename) -> std::string

        Parameters
        ----------
        filename: std::string const &

        """
        return _common.FileAdapter_findExtension(filename)

    findExtension = staticmethod(findExtension)

    def getNextLine(stream, delims):
        """
        getNextLine(std::istream & stream, std::string const & delims) -> StdVectorString

        Parameters
        ----------
        stream: std::istream &
        delims: std::string const &

        """
        return _common.FileAdapter_getNextLine(stream, delims)

    getNextLine = staticmethod(getNextLine)

    def tokenize(str, delims):
        """
        tokenize(std::string const & str, std::string const & delims) -> StdVectorString

        Parameters
        ----------
        str: std::string const &
        delims: std::string const &

        """
        return _common.FileAdapter_tokenize(str, delims)

    tokenize = staticmethod(tokenize)

    def createAdapterFromExtension(fileName):
        """
        createAdapterFromExtension(std::string const & fileName) -> std::shared_ptr< OpenSim::DataAdapter >

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.FileAdapter_createAdapterFromExtension(fileName)

    createAdapterFromExtension = staticmethod(createAdapterFromExtension)
FileAdapter_swigregister = _common.FileAdapter_swigregister
FileAdapter_swigregister(FileAdapter)

def FileAdapter_writeFile(tables, fileName):
    """
    FileAdapter_writeFile(OpenSim::DataAdapter::InputTables const & tables, std::string const & fileName)

    Parameters
    ----------
    tables: OpenSim::DataAdapter::InputTables const &
    fileName: std::string const &

    """
    return _common.FileAdapter_writeFile(tables, fileName)

def FileAdapter_findExtension(filename):
    """
    FileAdapter_findExtension(std::string const & filename) -> std::string

    Parameters
    ----------
    filename: std::string const &

    """
    return _common.FileAdapter_findExtension(filename)

def FileAdapter_getNextLine(stream, delims):
    """
    FileAdapter_getNextLine(std::istream & stream, std::string const & delims) -> StdVectorString

    Parameters
    ----------
    stream: std::istream &
    delims: std::string const &

    """
    return _common.FileAdapter_getNextLine(stream, delims)

def FileAdapter_tokenize(str, delims):
    """
    FileAdapter_tokenize(std::string const & str, std::string const & delims) -> StdVectorString

    Parameters
    ----------
    str: std::string const &
    delims: std::string const &

    """
    return _common.FileAdapter_tokenize(str, delims)

def FileAdapter_createAdapterFromExtension(fileName):
    """
    FileAdapter_createAdapterFromExtension(std::string const & fileName) -> std::shared_ptr< OpenSim::DataAdapter >

    Parameters
    ----------
    fileName: std::string const &

    """
    return _common.FileAdapter_createAdapterFromExtension(fileName)

class MissingHeader(IOError):
    """Proxy of C++ OpenSim::MissingHeader class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MissingHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MissingHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::MissingHeader self) -> MissingHeader"""
        this = _common.new_MissingHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_MissingHeader
    __del__ = lambda self: None
MissingHeader_swigregister = _common.MissingHeader_swigregister
MissingHeader_swigregister(MissingHeader)

class IncorrectNumMetaDataKeys(IOError):
    """Proxy of C++ OpenSim::IncorrectNumMetaDataKeys class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectNumMetaDataKeys, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectNumMetaDataKeys, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, expected, received):
        """
        __init__(OpenSim::IncorrectNumMetaDataKeys self, std::string const & file, size_t line, std::string const & func, std::string const & filename, size_t expected, size_t received) -> IncorrectNumMetaDataKeys

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        expected: size_t
        received: size_t

        """
        this = _common.new_IncorrectNumMetaDataKeys(file, line, func, filename, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IncorrectNumMetaDataKeys
    __del__ = lambda self: None
IncorrectNumMetaDataKeys_swigregister = _common.IncorrectNumMetaDataKeys_swigregister
IncorrectNumMetaDataKeys_swigregister(IncorrectNumMetaDataKeys)

class UnexpectedMetaDataKey(IOError):
    """Proxy of C++ OpenSim::UnexpectedMetaDataKey class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnexpectedMetaDataKey, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnexpectedMetaDataKey, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, expected, received):
        """
        __init__(OpenSim::UnexpectedMetaDataKey self, std::string const & file, size_t line, std::string const & func, std::string const & filename, std::string const & expected, std::string const & received) -> UnexpectedMetaDataKey

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        expected: std::string const &
        received: std::string const &

        """
        this = _common.new_UnexpectedMetaDataKey(file, line, func, filename, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_UnexpectedMetaDataKey
    __del__ = lambda self: None
UnexpectedMetaDataKey_swigregister = _common.UnexpectedMetaDataKey_swigregister
UnexpectedMetaDataKey_swigregister(UnexpectedMetaDataKey)

class MetaDataLengthMismatch(IOError):
    """Proxy of C++ OpenSim::MetaDataLengthMismatch class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetaDataLengthMismatch, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetaDataLengthMismatch, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, keys_len, values_len):
        """
        __init__(OpenSim::MetaDataLengthMismatch self, std::string const & file, size_t line, std::string const & func, std::string const & filename, size_t keys_len, size_t values_len) -> MetaDataLengthMismatch

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        keys_len: size_t
        values_len: size_t

        """
        this = _common.new_MetaDataLengthMismatch(file, line, func, filename, keys_len, values_len)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_MetaDataLengthMismatch
    __del__ = lambda self: None
MetaDataLengthMismatch_swigregister = _common.MetaDataLengthMismatch_swigregister
MetaDataLengthMismatch_swigregister(MetaDataLengthMismatch)

class IncorrectNumColumnLabels(IOError):
    """Proxy of C++ OpenSim::IncorrectNumColumnLabels class."""

    __swig_setmethods__ = {}
    for _s in [IOError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectNumColumnLabels, name, value)
    __swig_getmethods__ = {}
    for _s in [IOError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectNumColumnLabels, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, expected, received):
        """
        __init__(OpenSim::IncorrectNumColumnLabels self, std::string const & file, size_t line, std::string const & func, std::string const & filename, size_t expected, size_t received) -> IncorrectNumColumnLabels

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        expected: size_t
        received: size_t

        """
        this = _common.new_IncorrectNumColumnLabels(file, line, func, filename, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IncorrectNumColumnLabels
    __del__ = lambda self: None
IncorrectNumColumnLabels_swigregister = _common.IncorrectNumColumnLabels_swigregister
IncorrectNumColumnLabels_swigregister(IncorrectNumColumnLabels)

class TRCFileAdapter(FileAdapter):
    """Proxy of C++ OpenSim::TRCFileAdapter class."""

    __swig_setmethods__ = {}
    for _s in [FileAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRCFileAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [FileAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRCFileAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::TRCFileAdapter self) -> TRCFileAdapter
        __init__(OpenSim::TRCFileAdapter self, TRCFileAdapter arg2) -> TRCFileAdapter

        Parameters
        ----------
        arg2: OpenSim::TRCFileAdapter const &

        """
        this = _common.new_TRCFileAdapter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TRCFileAdapter
    __del__ = lambda self: None

    def clone(self):
        """
        clone(TRCFileAdapter self) -> TRCFileAdapter

        Parameters
        ----------
        self: OpenSim::TRCFileAdapter const *

        """
        return _common.TRCFileAdapter_clone(self)


    def write(table, filename):
        """
        write(TimeSeriesTableVec3 table, std::string const & filename)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTableVec3 const &
        filename: std::string const &

        """
        return _common.TRCFileAdapter_write(table, filename)

    write = staticmethod(write)
TRCFileAdapter_swigregister = _common.TRCFileAdapter_swigregister
TRCFileAdapter_swigregister(TRCFileAdapter)

def TRCFileAdapter_write(table, filename):
    """
    TRCFileAdapter_write(TimeSeriesTableVec3 table, std::string const & filename)

    Parameters
    ----------
    table: OpenSim::TimeSeriesTableVec3 const &
    filename: std::string const &

    """
    return _common.TRCFileAdapter_write(table, filename)
TRCFileAdapter._markers = _common.cvar.TRCFileAdapter__markers

class IncorrectNumTokens(OpenSimException):
    """Proxy of C++ OpenSim::IncorrectNumTokens class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectNumTokens, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectNumTokens, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, msg):
        """
        __init__(OpenSim::IncorrectNumTokens self, std::string const & file, size_t line, std::string const & func, std::string const & msg) -> IncorrectNumTokens

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        """
        this = _common.new_IncorrectNumTokens(file, line, func, msg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_IncorrectNumTokens
    __del__ = lambda self: None
IncorrectNumTokens_swigregister = _common.IncorrectNumTokens_swigregister
IncorrectNumTokens_swigregister(IncorrectNumTokens)

class DataTypeMismatch(OpenSimException):
    """Proxy of C++ OpenSim::DataTypeMismatch class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataTypeMismatch, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataTypeMismatch, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, expected, received):
        """
        __init__(OpenSim::DataTypeMismatch self, std::string const & file, size_t line, std::string const & func, std::string const & expected, std::string const & received) -> DataTypeMismatch

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        expected: std::string const &
        received: std::string const &

        """
        this = _common.new_DataTypeMismatch(file, line, func, expected, received)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_DataTypeMismatch
    __del__ = lambda self: None
DataTypeMismatch_swigregister = _common.DataTypeMismatch_swigregister
DataTypeMismatch_swigregister(DataTypeMismatch)

class APDMDataReaderSettings(OpenSimObject):
    """Proxy of C++ OpenSim::APDMDataReaderSettings class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, APDMDataReaderSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, APDMDataReaderSettings, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> APDMDataReaderSettings

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.APDMDataReaderSettings_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(APDMDataReaderSettings self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.APDMDataReaderSettings_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.APDMDataReaderSettings_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(APDMDataReaderSettings self) -> APDMDataReaderSettings

        Parameters
        ----------
        self: OpenSim::APDMDataReaderSettings const *

        """
        return _common.APDMDataReaderSettings_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(APDMDataReaderSettings self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::APDMDataReaderSettings const *

        """
        return _common.APDMDataReaderSettings_getConcreteClassName(self)


    def copyProperty_ExperimentalSensors(self, source):
        """
        copyProperty_ExperimentalSensors(APDMDataReaderSettings self, APDMDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::APDMDataReaderSettings::Self const &

        """
        return _common.APDMDataReaderSettings_copyProperty_ExperimentalSensors(self, source)


    def get_ExperimentalSensors(self, i):
        """
        get_ExperimentalSensors(APDMDataReaderSettings self, int i) -> ExperimentalSensor

        Parameters
        ----------
        i: int

        """
        return _common.APDMDataReaderSettings_get_ExperimentalSensors(self, i)


    def upd_ExperimentalSensors(self, i):
        """
        upd_ExperimentalSensors(APDMDataReaderSettings self, int i) -> ExperimentalSensor

        Parameters
        ----------
        i: int

        """
        return _common.APDMDataReaderSettings_upd_ExperimentalSensors(self, i)


    def set_ExperimentalSensors(self, i, value):
        """
        set_ExperimentalSensors(APDMDataReaderSettings self, int i, ExperimentalSensor value)

        Parameters
        ----------
        i: int
        value: OpenSim::ExperimentalSensor const &

        """
        return _common.APDMDataReaderSettings_set_ExperimentalSensors(self, i, value)


    def append_ExperimentalSensors(self, value):
        """
        append_ExperimentalSensors(APDMDataReaderSettings self, ExperimentalSensor value) -> int

        Parameters
        ----------
        value: OpenSim::ExperimentalSensor const &

        """
        return _common.APDMDataReaderSettings_append_ExperimentalSensors(self, value)


    def constructProperty_ExperimentalSensors(self):
        """
        constructProperty_ExperimentalSensors(APDMDataReaderSettings self)

        Parameters
        ----------
        self: OpenSim::APDMDataReaderSettings *

        """
        return _common.APDMDataReaderSettings_constructProperty_ExperimentalSensors(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::APDMDataReaderSettings self) -> APDMDataReaderSettings
        __init__(OpenSim::APDMDataReaderSettings self, std::string const & xmlFile) -> APDMDataReaderSettings

        Parameters
        ----------
        xmlFile: std::string const &

        __init__(OpenSim::APDMDataReaderSettings self, APDMDataReaderSettings arg2) -> APDMDataReaderSettings

        Parameters
        ----------
        arg2: OpenSim::APDMDataReaderSettings const &

        __init__(OpenSim::APDMDataReaderSettings self, APDMDataReaderSettings arg2) -> APDMDataReaderSettings

        Parameters
        ----------
        arg2: OpenSim::APDMDataReaderSettings &&

        """
        this = _common.new_APDMDataReaderSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_APDMDataReaderSettings
    __del__ = lambda self: None
APDMDataReaderSettings_swigregister = _common.APDMDataReaderSettings_swigregister
APDMDataReaderSettings_swigregister(APDMDataReaderSettings)

def APDMDataReaderSettings_safeDownCast(obj):
    """
    APDMDataReaderSettings_safeDownCast(OpenSimObject obj) -> APDMDataReaderSettings

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.APDMDataReaderSettings_safeDownCast(obj)

def APDMDataReaderSettings_getClassName():
    """APDMDataReaderSettings_getClassName() -> std::string const &"""
    return _common.APDMDataReaderSettings_getClassName()

class APDMDataReader(IMUDataReader):
    """Proxy of C++ OpenSim::APDMDataReader class."""

    __swig_setmethods__ = {}
    for _s in [IMUDataReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, APDMDataReader, name, value)
    __swig_getmethods__ = {}
    for _s in [IMUDataReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, APDMDataReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::APDMDataReader self) -> APDMDataReader
        __init__(OpenSim::APDMDataReader self, APDMDataReaderSettings settings) -> APDMDataReader

        Parameters
        ----------
        settings: OpenSim::APDMDataReaderSettings const &

        __init__(OpenSim::APDMDataReader self, APDMDataReader arg2) -> APDMDataReader

        Parameters
        ----------
        arg2: OpenSim::APDMDataReader const &

        __init__(OpenSim::APDMDataReader self, APDMDataReader arg2) -> APDMDataReader

        Parameters
        ----------
        arg2: OpenSim::APDMDataReader &&

        """
        this = _common.new_APDMDataReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_APDMDataReader
    __del__ = lambda self: None

    def clone(self):
        """
        clone(APDMDataReader self) -> APDMDataReader

        Parameters
        ----------
        self: OpenSim::APDMDataReader const *

        """
        return _common.APDMDataReader_clone(self)

APDMDataReader_swigregister = _common.APDMDataReader_swigregister
APDMDataReader_swigregister(APDMDataReader)
APDMDataReader.acceleration_labels = _common.cvar.APDMDataReader_acceleration_labels
APDMDataReader.angular_velocity_labels = _common.cvar.APDMDataReader_angular_velocity_labels
APDMDataReader.magnetic_heading_labels = _common.cvar.APDMDataReader_magnetic_heading_labels
APDMDataReader.orientation_labels = _common.cvar.APDMDataReader_orientation_labels
APDMDataReader.TimeLabel = _common.cvar.APDMDataReader_TimeLabel

class STODataTypeNotSupported(OpenSimException):
    """Proxy of C++ OpenSim::STODataTypeNotSupported class."""

    __swig_setmethods__ = {}
    for _s in [OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, STODataTypeNotSupported, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, STODataTypeNotSupported, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, datatype):
        """
        __init__(OpenSim::STODataTypeNotSupported self, std::string const & file, size_t line, std::string const & func, std::string const & datatype) -> STODataTypeNotSupported

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        datatype: std::string const &

        """
        this = _common.new_STODataTypeNotSupported(file, line, func, datatype)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_STODataTypeNotSupported
    __del__ = lambda self: None
STODataTypeNotSupported_swigregister = _common.STODataTypeNotSupported_swigregister
STODataTypeNotSupported_swigregister(STODataTypeNotSupported)

class STOFileAdapter(_object):
    """Proxy of C++ OpenSim::STOFileAdapter_<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STOFileAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STOFileAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::STOFileAdapter_<(double)> self) -> STOFileAdapter
        __init__(OpenSim::STOFileAdapter_<(double)> self, STOFileAdapter arg2) -> STOFileAdapter

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< double > const &

        """
        this = _common.new_STOFileAdapter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_STOFileAdapter
    __del__ = lambda self: None

    def clone(self):
        """
        clone(STOFileAdapter self) -> STOFileAdapter

        Parameters
        ----------
        self: OpenSim::STOFileAdapter_< double > const *

        """
        return _common.STOFileAdapter_clone(self)


    def write(table, fileName):
        """
        write(TimeSeriesTable table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< double > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapter_write(table, fileName)

    write = staticmethod(write)
STOFileAdapter_swigregister = _common.STOFileAdapter_swigregister
STOFileAdapter_swigregister(STOFileAdapter)

def STOFileAdapter_write(table, fileName):
    """
    STOFileAdapter_write(TimeSeriesTable table, std::string const & fileName)

    Parameters
    ----------
    table: OpenSim::TimeSeriesTable_< double > const &
    fileName: std::string const &

    """
    return _common.STOFileAdapter_write(table, fileName)

class STOFileAdapterVec3(_object):
    """Proxy of C++ OpenSim::STOFileAdapter_<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STOFileAdapterVec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STOFileAdapterVec3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::STOFileAdapter_<(SimTK::Vec3)> self) -> STOFileAdapterVec3
        __init__(OpenSim::STOFileAdapter_<(SimTK::Vec3)> self, STOFileAdapterVec3 arg2) -> STOFileAdapterVec3

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::Vec3 > const &

        """
        this = _common.new_STOFileAdapterVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_STOFileAdapterVec3
    __del__ = lambda self: None

    def clone(self):
        """
        clone(STOFileAdapterVec3 self) -> STOFileAdapterVec3

        Parameters
        ----------
        self: OpenSim::STOFileAdapter_< SimTK::Vec3 > const *

        """
        return _common.STOFileAdapterVec3_clone(self)


    def write(table, fileName):
        """
        write(TimeSeriesTableVec3 table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterVec3_write(table, fileName)

    write = staticmethod(write)
STOFileAdapterVec3_swigregister = _common.STOFileAdapterVec3_swigregister
STOFileAdapterVec3_swigregister(STOFileAdapterVec3)

def STOFileAdapterVec3_write(table, fileName):
    """
    STOFileAdapterVec3_write(TimeSeriesTableVec3 table, std::string const & fileName)

    Parameters
    ----------
    table: OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > const &
    fileName: std::string const &

    """
    return _common.STOFileAdapterVec3_write(table, fileName)

class STOFileAdapterUnitVec3(_object):
    """Proxy of C++ OpenSim::STOFileAdapter_<(SimTK::UnitVec3)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STOFileAdapterUnitVec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STOFileAdapterUnitVec3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::STOFileAdapter_<(SimTK::UnitVec3)> self) -> STOFileAdapterUnitVec3
        __init__(OpenSim::STOFileAdapter_<(SimTK::UnitVec3)> self, STOFileAdapterUnitVec3 arg2) -> STOFileAdapterUnitVec3

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::UnitVec3 > const &

        """
        this = _common.new_STOFileAdapterUnitVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_STOFileAdapterUnitVec3
    __del__ = lambda self: None

    def clone(self):
        """
        clone(STOFileAdapterUnitVec3 self) -> STOFileAdapterUnitVec3

        Parameters
        ----------
        self: OpenSim::STOFileAdapter_< SimTK::UnitVec3 > const *

        """
        return _common.STOFileAdapterUnitVec3_clone(self)


    def write(table, fileName):
        """
        write(TimeSeriesTableUnitVec3 table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterUnitVec3_write(table, fileName)

    write = staticmethod(write)
STOFileAdapterUnitVec3_swigregister = _common.STOFileAdapterUnitVec3_swigregister
STOFileAdapterUnitVec3_swigregister(STOFileAdapterUnitVec3)

def STOFileAdapterUnitVec3_write(table, fileName):
    """
    STOFileAdapterUnitVec3_write(TimeSeriesTableUnitVec3 table, std::string const & fileName)

    Parameters
    ----------
    table: OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > > const &
    fileName: std::string const &

    """
    return _common.STOFileAdapterUnitVec3_write(table, fileName)

class STOFileAdapterQuaternion(_object):
    """Proxy of C++ OpenSim::STOFileAdapter_<(SimTK::Quaternion)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STOFileAdapterQuaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STOFileAdapterQuaternion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::STOFileAdapter_<(SimTK::Quaternion)> self) -> STOFileAdapterQuaternion
        __init__(OpenSim::STOFileAdapter_<(SimTK::Quaternion)> self, STOFileAdapterQuaternion arg2) -> STOFileAdapterQuaternion

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::Quaternion > const &

        """
        this = _common.new_STOFileAdapterQuaternion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_STOFileAdapterQuaternion
    __del__ = lambda self: None

    def clone(self):
        """
        clone(STOFileAdapterQuaternion self) -> STOFileAdapterQuaternion

        Parameters
        ----------
        self: OpenSim::STOFileAdapter_< SimTK::Quaternion > const *

        """
        return _common.STOFileAdapterQuaternion_clone(self)


    def write(table, fileName):
        """
        write(TimeSeriesTableQuaternion table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterQuaternion_write(table, fileName)

    write = staticmethod(write)
STOFileAdapterQuaternion_swigregister = _common.STOFileAdapterQuaternion_swigregister
STOFileAdapterQuaternion_swigregister(STOFileAdapterQuaternion)

def STOFileAdapterQuaternion_write(table, fileName):
    """
    STOFileAdapterQuaternion_write(TimeSeriesTableQuaternion table, std::string const & fileName)

    Parameters
    ----------
    table: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > const &
    fileName: std::string const &

    """
    return _common.STOFileAdapterQuaternion_write(table, fileName)

class STOFileAdapterVec6(_object):
    """Proxy of C++ OpenSim::STOFileAdapter_<(SimTK::Vec6)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STOFileAdapterVec6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STOFileAdapterVec6, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::STOFileAdapter_<(SimTK::Vec6)> self) -> STOFileAdapterVec6
        __init__(OpenSim::STOFileAdapter_<(SimTK::Vec6)> self, STOFileAdapterVec6 arg2) -> STOFileAdapterVec6

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::Vec6 > const &

        """
        this = _common.new_STOFileAdapterVec6(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_STOFileAdapterVec6
    __del__ = lambda self: None

    def clone(self):
        """
        clone(STOFileAdapterVec6 self) -> STOFileAdapterVec6

        Parameters
        ----------
        self: OpenSim::STOFileAdapter_< SimTK::Vec6 > const *

        """
        return _common.STOFileAdapterVec6_clone(self)


    def write(table, fileName):
        """
        write(TimeSeriesTableVec6 table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::Vec< 6,double,1 > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterVec6_write(table, fileName)

    write = staticmethod(write)
STOFileAdapterVec6_swigregister = _common.STOFileAdapterVec6_swigregister
STOFileAdapterVec6_swigregister(STOFileAdapterVec6)

def STOFileAdapterVec6_write(table, fileName):
    """
    STOFileAdapterVec6_write(TimeSeriesTableVec6 table, std::string const & fileName)

    Parameters
    ----------
    table: OpenSim::TimeSeriesTable_< SimTK::Vec< 6,double,1 > > const &
    fileName: std::string const &

    """
    return _common.STOFileAdapterVec6_write(table, fileName)

class STOFileAdapterSpatialVec(_object):
    """Proxy of C++ OpenSim::STOFileAdapter_<(SimTK::SpatialVec)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STOFileAdapterSpatialVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STOFileAdapterSpatialVec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::STOFileAdapter_<(SimTK::SpatialVec)> self) -> STOFileAdapterSpatialVec
        __init__(OpenSim::STOFileAdapter_<(SimTK::SpatialVec)> self, STOFileAdapterSpatialVec arg2) -> STOFileAdapterSpatialVec

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::SpatialVec > const &

        """
        this = _common.new_STOFileAdapterSpatialVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_STOFileAdapterSpatialVec
    __del__ = lambda self: None

    def clone(self):
        """
        clone(STOFileAdapterSpatialVec self) -> STOFileAdapterSpatialVec

        Parameters
        ----------
        self: OpenSim::STOFileAdapter_< SimTK::SpatialVec > const *

        """
        return _common.STOFileAdapterSpatialVec_clone(self)


    def write(table, fileName):
        """
        write(TimeSeriesTableSpatialVec table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterSpatialVec_write(table, fileName)

    write = staticmethod(write)
STOFileAdapterSpatialVec_swigregister = _common.STOFileAdapterSpatialVec_swigregister
STOFileAdapterSpatialVec_swigregister(STOFileAdapterSpatialVec)

def STOFileAdapterSpatialVec_write(table, fileName):
    """
    STOFileAdapterSpatialVec_write(TimeSeriesTableSpatialVec table, std::string const & fileName)

    Parameters
    ----------
    table: OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > > const &
    fileName: std::string const &

    """
    return _common.STOFileAdapterSpatialVec_write(table, fileName)

class CSVFileAdapter(_object):
    """Proxy of C++ OpenSim::CSVFileAdapter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSVFileAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSVFileAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::CSVFileAdapter self) -> CSVFileAdapter
        __init__(OpenSim::CSVFileAdapter self, CSVFileAdapter arg2) -> CSVFileAdapter

        Parameters
        ----------
        arg2: OpenSim::CSVFileAdapter const &

        """
        this = _common.new_CSVFileAdapter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_CSVFileAdapter
    __del__ = lambda self: None

    def clone(self):
        """
        clone(CSVFileAdapter self) -> CSVFileAdapter

        Parameters
        ----------
        self: OpenSim::CSVFileAdapter const *

        """
        return _common.CSVFileAdapter_clone(self)


    def write(table, fileName):
        """
        write(TimeSeriesTable table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        fileName: std::string const &

        """
        return _common.CSVFileAdapter_write(table, fileName)

    write = staticmethod(write)
CSVFileAdapter_swigregister = _common.CSVFileAdapter_swigregister
CSVFileAdapter_swigregister(CSVFileAdapter)

def CSVFileAdapter_write(table, fileName):
    """
    CSVFileAdapter_write(TimeSeriesTable table, std::string const & fileName)

    Parameters
    ----------
    table: OpenSim::TimeSeriesTable const &
    fileName: std::string const &

    """
    return _common.CSVFileAdapter_write(table, fileName)

class C3DFileAdapter(FileAdapter):
    """Proxy of C++ OpenSim::C3DFileAdapter class."""

    __swig_setmethods__ = {}
    for _s in [FileAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, C3DFileAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [FileAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, C3DFileAdapter, name)
    __repr__ = _swig_repr
    ForceLocation_OriginOfForcePlate = _common.C3DFileAdapter_ForceLocation_OriginOfForcePlate
    ForceLocation_CenterOfPressure = _common.C3DFileAdapter_ForceLocation_CenterOfPressure
    ForceLocation_PointOfWrenchApplication = _common.C3DFileAdapter_ForceLocation_PointOfWrenchApplication

    def __init__(self, *args):
        """
        __init__(OpenSim::C3DFileAdapter self) -> C3DFileAdapter
        __init__(OpenSim::C3DFileAdapter self, C3DFileAdapter arg2) -> C3DFileAdapter

        Parameters
        ----------
        arg2: OpenSim::C3DFileAdapter const &

        __init__(OpenSim::C3DFileAdapter self, C3DFileAdapter arg2) -> C3DFileAdapter

        Parameters
        ----------
        arg2: OpenSim::C3DFileAdapter &&

        """
        this = _common.new_C3DFileAdapter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_C3DFileAdapter
    __del__ = lambda self: None

    def clone(self):
        """
        clone(C3DFileAdapter self) -> C3DFileAdapter

        Parameters
        ----------
        self: OpenSim::C3DFileAdapter const *

        """
        return _common.C3DFileAdapter_clone(self)


    def getLocationForForceExpression(self):
        """
        getLocationForForceExpression(C3DFileAdapter self) -> OpenSim::C3DFileAdapter::ForceLocation const

        Parameters
        ----------
        self: OpenSim::C3DFileAdapter const *

        """
        return _common.C3DFileAdapter_getLocationForForceExpression(self)


    def write(markerTable, fileName):
        """
        write(StdMapStringTimeSeriesTableVec3 markerTable, std::string const & fileName)

        Parameters
        ----------
        markerTable: OpenSim::C3DFileAdapter::Tables const &
        fileName: std::string const &

        """
        return _common.C3DFileAdapter_write(markerTable, fileName)

    write = staticmethod(write)

    def getMarkersTable(self, tables):
        """
        getMarkersTable(C3DFileAdapter self, StdMapStringAbstractDataTable tables) -> std::shared_ptr< OpenSim::TimeSeriesTableVec3 >

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables &

        """
        return _common.C3DFileAdapter_getMarkersTable(self, tables)


    def getForcesTable(self, tables):
        """
        getForcesTable(C3DFileAdapter self, StdMapStringAbstractDataTable tables) -> std::shared_ptr< OpenSim::TimeSeriesTableVec3 >

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables &

        """
        return _common.C3DFileAdapter_getForcesTable(self, tables)


    def setLocationForForceExpression(self, *args):
        """
        setLocationForForceExpression(C3DFileAdapter self, OpenSim::C3DFileAdapter::ForceLocation const location)

        Parameters
        ----------
        location: enum OpenSim::C3DFileAdapter::ForceLocation const

        setLocationForForceExpression(C3DFileAdapter self, unsigned int wrt)

        Parameters
        ----------
        wrt: unsigned int

        """
        return _common.C3DFileAdapter_setLocationForForceExpression(self, *args)

C3DFileAdapter_swigregister = _common.C3DFileAdapter_swigregister
C3DFileAdapter_swigregister(C3DFileAdapter)

def C3DFileAdapter_write(markerTable, fileName):
    """
    C3DFileAdapter_write(StdMapStringTimeSeriesTableVec3 markerTable, std::string const & fileName)

    Parameters
    ----------
    markerTable: OpenSim::C3DFileAdapter::Tables const &
    fileName: std::string const &

    """
    return _common.C3DFileAdapter_write(markerTable, fileName)
C3DFileAdapter._markers = _common.cvar.C3DFileAdapter__markers
C3DFileAdapter._forces = _common.cvar.C3DFileAdapter__forces

class TableSource(Component):
    """Proxy of C++ OpenSim::TableSource_<(SimTK::Real)> class."""

    __swig_setmethods__ = {}
    for _s in [Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableSource, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableSource, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TableSource

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableSource_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TableSource self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableSource_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.TableSource_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TableSource self) -> TableSource

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Real > const *

        """
        return _common.TableSource_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TableSource self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Real > const *

        """
        return _common.TableSource_getConcreteClassName(self)


    def copyProperty_filename(self, source):
        """
        copyProperty_filename(TableSource self, TableSource source)

        Parameters
        ----------
        source: OpenSim::TableSource_< double >::Self const &

        """
        return _common.TableSource_copyProperty_filename(self, source)


    def append_filename(self, value):
        """
        append_filename(TableSource self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSource_append_filename(self, value)


    def constructProperty_filename(self, initValue):
        """
        constructProperty_filename(TableSource self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.TableSource_constructProperty_filename(self, initValue)


    def get_filename(self, *args):
        """
        get_filename(TableSource self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_filename(TableSource self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Real > const *

        """
        return _common.TableSource_get_filename(self, *args)


    def upd_filename(self, *args):
        """
        upd_filename(TableSource self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_filename(TableSource self) -> std::string &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Real > *

        """
        return _common.TableSource_upd_filename(self, *args)


    def set_filename(self, *args):
        """
        set_filename(TableSource self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_filename(TableSource self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSource_set_filename(self, *args)


    def copyProperty_tablename(self, source):
        """
        copyProperty_tablename(TableSource self, TableSource source)

        Parameters
        ----------
        source: OpenSim::TableSource_< double >::Self const &

        """
        return _common.TableSource_copyProperty_tablename(self, source)


    def append_tablename(self, value):
        """
        append_tablename(TableSource self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSource_append_tablename(self, value)


    def constructProperty_tablename(self, initValue):
        """
        constructProperty_tablename(TableSource self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.TableSource_constructProperty_tablename(self, initValue)


    def get_tablename(self, *args):
        """
        get_tablename(TableSource self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_tablename(TableSource self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Real > const *

        """
        return _common.TableSource_get_tablename(self, *args)


    def upd_tablename(self, *args):
        """
        upd_tablename(TableSource self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_tablename(TableSource self) -> std::string &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Real > *

        """
        return _common.TableSource_upd_tablename(self, *args)


    def set_tablename(self, *args):
        """
        set_tablename(TableSource self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_tablename(TableSource self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSource_set_tablename(self, *args)

    __swig_setmethods__["_has_output_all_columns"] = _common.TableSource__has_output_all_columns_set
    __swig_getmethods__["_has_output_all_columns"] = _common.TableSource__has_output_all_columns_get
    if _newclass:
        _has_output_all_columns = _swig_property(_common.TableSource__has_output_all_columns_get, _common.TableSource__has_output_all_columns_set)
    __swig_setmethods__["_has_output_column"] = _common.TableSource__has_output_column_set
    __swig_getmethods__["_has_output_column"] = _common.TableSource__has_output_column_get
    if _newclass:
        _has_output_column = _swig_property(_common.TableSource__has_output_column_get, _common.TableSource__has_output_column_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::TableSource_<(SimTK::Real)> self) -> TableSource
        __init__(OpenSim::TableSource_<(SimTK::Real)> self, TableSource arg2) -> TableSource

        Parameters
        ----------
        arg2: OpenSim::TableSource_< SimTK::Real > const &

        __init__(OpenSim::TableSource_<(SimTK::Real)> self, TimeSeriesTable table) -> TableSource

        Parameters
        ----------
        table: OpenSim::TableSource_< double >::Table const &

        __init__(OpenSim::TableSource_<(SimTK::Real)> self, std::string const & filename) -> TableSource

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TableSource_<(SimTK::Real)> self, std::string const & filename, std::string const & tablename) -> TableSource

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TableSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getTable(self):
        """
        getTable(TableSource self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Real > const *

        """
        return _common.TableSource_getTable(self)


    def setTable(self, *args):
        """
        setTable(TableSource self, TimeSeriesTable table)

        Parameters
        ----------
        table: OpenSim::TableSource_< double >::Table const &

        setTable(TableSource self, std::string const & filename)

        Parameters
        ----------
        filename: std::string const &

        setTable(TableSource self, std::string const & filename, std::string const & tablename)

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        return _common.TableSource_setTable(self, *args)

    __swig_destroy__ = _common.delete_TableSource
    __del__ = lambda self: None
TableSource_swigregister = _common.TableSource_swigregister
TableSource_swigregister(TableSource)

def TableSource_safeDownCast(obj):
    """
    TableSource_safeDownCast(OpenSimObject obj) -> TableSource

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.TableSource_safeDownCast(obj)

def TableSource_getClassName():
    """TableSource_getClassName() -> std::string const &"""
    return _common.TableSource_getClassName()

class TableSourceVec3(Component):
    """Proxy of C++ OpenSim::TableSource_<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableSourceVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableSourceVec3, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TableSourceVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableSourceVec3_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TableSourceVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableSourceVec3_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.TableSourceVec3_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TableSourceVec3 self) -> TableSourceVec3

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Vec3 > const *

        """
        return _common.TableSourceVec3_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TableSourceVec3 self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Vec3 > const *

        """
        return _common.TableSourceVec3_getConcreteClassName(self)


    def copyProperty_filename(self, source):
        """
        copyProperty_filename(TableSourceVec3 self, TableSourceVec3 source)

        Parameters
        ----------
        source: OpenSim::TableSource_< SimTK::Vec< 3,double,1 > >::Self const &

        """
        return _common.TableSourceVec3_copyProperty_filename(self, source)


    def append_filename(self, value):
        """
        append_filename(TableSourceVec3 self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSourceVec3_append_filename(self, value)


    def constructProperty_filename(self, initValue):
        """
        constructProperty_filename(TableSourceVec3 self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.TableSourceVec3_constructProperty_filename(self, initValue)


    def get_filename(self, *args):
        """
        get_filename(TableSourceVec3 self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_filename(TableSourceVec3 self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Vec3 > const *

        """
        return _common.TableSourceVec3_get_filename(self, *args)


    def upd_filename(self, *args):
        """
        upd_filename(TableSourceVec3 self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_filename(TableSourceVec3 self) -> std::string &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Vec3 > *

        """
        return _common.TableSourceVec3_upd_filename(self, *args)


    def set_filename(self, *args):
        """
        set_filename(TableSourceVec3 self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_filename(TableSourceVec3 self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSourceVec3_set_filename(self, *args)


    def copyProperty_tablename(self, source):
        """
        copyProperty_tablename(TableSourceVec3 self, TableSourceVec3 source)

        Parameters
        ----------
        source: OpenSim::TableSource_< SimTK::Vec< 3,double,1 > >::Self const &

        """
        return _common.TableSourceVec3_copyProperty_tablename(self, source)


    def append_tablename(self, value):
        """
        append_tablename(TableSourceVec3 self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSourceVec3_append_tablename(self, value)


    def constructProperty_tablename(self, initValue):
        """
        constructProperty_tablename(TableSourceVec3 self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.TableSourceVec3_constructProperty_tablename(self, initValue)


    def get_tablename(self, *args):
        """
        get_tablename(TableSourceVec3 self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_tablename(TableSourceVec3 self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Vec3 > const *

        """
        return _common.TableSourceVec3_get_tablename(self, *args)


    def upd_tablename(self, *args):
        """
        upd_tablename(TableSourceVec3 self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_tablename(TableSourceVec3 self) -> std::string &

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Vec3 > *

        """
        return _common.TableSourceVec3_upd_tablename(self, *args)


    def set_tablename(self, *args):
        """
        set_tablename(TableSourceVec3 self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_tablename(TableSourceVec3 self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSourceVec3_set_tablename(self, *args)

    __swig_setmethods__["_has_output_all_columns"] = _common.TableSourceVec3__has_output_all_columns_set
    __swig_getmethods__["_has_output_all_columns"] = _common.TableSourceVec3__has_output_all_columns_get
    if _newclass:
        _has_output_all_columns = _swig_property(_common.TableSourceVec3__has_output_all_columns_get, _common.TableSourceVec3__has_output_all_columns_set)
    __swig_setmethods__["_has_output_column"] = _common.TableSourceVec3__has_output_column_set
    __swig_getmethods__["_has_output_column"] = _common.TableSourceVec3__has_output_column_get
    if _newclass:
        _has_output_column = _swig_property(_common.TableSourceVec3__has_output_column_get, _common.TableSourceVec3__has_output_column_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::TableSource_<(SimTK::Vec3)> self) -> TableSourceVec3
        __init__(OpenSim::TableSource_<(SimTK::Vec3)> self, TableSourceVec3 arg2) -> TableSourceVec3

        Parameters
        ----------
        arg2: OpenSim::TableSource_< SimTK::Vec3 > const &

        __init__(OpenSim::TableSource_<(SimTK::Vec3)> self, TimeSeriesTableVec3 table) -> TableSourceVec3

        Parameters
        ----------
        table: OpenSim::TableSource_< SimTK::Vec< 3,double,1 > >::Table const &

        __init__(OpenSim::TableSource_<(SimTK::Vec3)> self, std::string const & filename) -> TableSourceVec3

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::TableSource_<(SimTK::Vec3)> self, std::string const & filename, std::string const & tablename) -> TableSourceVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        this = _common.new_TableSourceVec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getTable(self):
        """
        getTable(TableSourceVec3 self) -> TimeSeriesTableVec3

        Parameters
        ----------
        self: OpenSim::TableSource_< SimTK::Vec3 > const *

        """
        return _common.TableSourceVec3_getTable(self)


    def setTable(self, *args):
        """
        setTable(TableSourceVec3 self, TimeSeriesTableVec3 table)

        Parameters
        ----------
        table: OpenSim::TableSource_< SimTK::Vec< 3,double,1 > >::Table const &

        setTable(TableSourceVec3 self, std::string const & filename)

        Parameters
        ----------
        filename: std::string const &

        setTable(TableSourceVec3 self, std::string const & filename, std::string const & tablename)

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        return _common.TableSourceVec3_setTable(self, *args)

    __swig_destroy__ = _common.delete_TableSourceVec3
    __del__ = lambda self: None
TableSourceVec3_swigregister = _common.TableSourceVec3_swigregister
TableSourceVec3_swigregister(TableSourceVec3)

def TableSourceVec3_safeDownCast(obj):
    """
    TableSourceVec3_safeDownCast(OpenSimObject obj) -> TableSourceVec3

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.TableSourceVec3_safeDownCast(obj)

def TableSourceVec3_getClassName():
    """TableSourceVec3_getClassName() -> std::string const &"""
    return _common.TableSourceVec3_getClassName()

class AbstractReporter(Component):
    """Proxy of C++ OpenSim::AbstractReporter class."""

    __swig_setmethods__ = {}
    for _s in [Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractReporter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AbstractReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.AbstractReporter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(AbstractReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.AbstractReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.AbstractReporter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(AbstractReporter self) -> AbstractReporter

        Parameters
        ----------
        self: OpenSim::AbstractReporter const *

        """
        return _common.AbstractReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AbstractReporter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractReporter const *

        """
        return _common.AbstractReporter_getConcreteClassName(self)


    def copyProperty_report_time_interval(self, source):
        """
        copyProperty_report_time_interval(AbstractReporter self, AbstractReporter source)

        Parameters
        ----------
        source: OpenSim::AbstractReporter::Self const &

        """
        return _common.AbstractReporter_copyProperty_report_time_interval(self, source)


    def append_report_time_interval(self, value):
        """
        append_report_time_interval(AbstractReporter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _common.AbstractReporter_append_report_time_interval(self, value)


    def constructProperty_report_time_interval(self, initValue):
        """
        constructProperty_report_time_interval(AbstractReporter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _common.AbstractReporter_constructProperty_report_time_interval(self, initValue)


    def get_report_time_interval(self, *args):
        """
        get_report_time_interval(AbstractReporter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_report_time_interval(AbstractReporter self) -> double const &

        Parameters
        ----------
        self: OpenSim::AbstractReporter const *

        """
        return _common.AbstractReporter_get_report_time_interval(self, *args)


    def upd_report_time_interval(self, *args):
        """
        upd_report_time_interval(AbstractReporter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_report_time_interval(AbstractReporter self) -> double &

        Parameters
        ----------
        self: OpenSim::AbstractReporter *

        """
        return _common.AbstractReporter_upd_report_time_interval(self, *args)


    def set_report_time_interval(self, *args):
        """
        set_report_time_interval(AbstractReporter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_report_time_interval(AbstractReporter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _common.AbstractReporter_set_report_time_interval(self, *args)


    def report(self, s):
        """
        report(AbstractReporter self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _common.AbstractReporter_report(self, s)

AbstractReporter_swigregister = _common.AbstractReporter_swigregister
AbstractReporter_swigregister(AbstractReporter)

def AbstractReporter_safeDownCast(obj):
    """
    AbstractReporter_safeDownCast(OpenSimObject obj) -> AbstractReporter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.AbstractReporter_safeDownCast(obj)

def AbstractReporter_getClassName():
    """AbstractReporter_getClassName() -> std::string const &"""
    return _common.AbstractReporter_getClassName()

class ReporterDouble(AbstractReporter):
    """Proxy of C++ OpenSim::Reporter<(SimTK::Real)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractReporter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReporterDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractReporter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReporterDouble, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ReporterDouble

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ReporterDouble_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ReporterDouble self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ReporterDouble_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ReporterDouble_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ReporterDouble self) -> ReporterDouble

        Parameters
        ----------
        self: OpenSim::Reporter< SimTK::Real > const *

        """
        return _common.ReporterDouble_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ReporterDouble self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Reporter< SimTK::Real > const *

        """
        return _common.ReporterDouble_getConcreteClassName(self)

    __swig_setmethods__["PropertyIndex_input_inputs"] = _common.ReporterDouble_PropertyIndex_input_inputs_set
    __swig_getmethods__["PropertyIndex_input_inputs"] = _common.ReporterDouble_PropertyIndex_input_inputs_get
    if _newclass:
        PropertyIndex_input_inputs = _swig_property(_common.ReporterDouble_PropertyIndex_input_inputs_get, _common.ReporterDouble_PropertyIndex_input_inputs_set)

    def connectInput_inputs(self, *args):
        """
        connectInput_inputs(ReporterDouble self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connectInput_inputs(ReporterDouble self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        connectInput_inputs(ReporterDouble self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        connectInput_inputs(ReporterDouble self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.ReporterDouble_connectInput_inputs(self, *args)


    def addToReport(self, *args):
        """
        addToReport(ReporterDouble self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        addToReport(ReporterDouble self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        addToReport(ReporterDouble self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        addToReport(ReporterDouble self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.ReporterDouble_addToReport(self, *args)

ReporterDouble_swigregister = _common.ReporterDouble_swigregister
ReporterDouble_swigregister(ReporterDouble)

def ReporterDouble_safeDownCast(obj):
    """
    ReporterDouble_safeDownCast(OpenSimObject obj) -> ReporterDouble

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ReporterDouble_safeDownCast(obj)

def ReporterDouble_getClassName():
    """ReporterDouble_getClassName() -> std::string const &"""
    return _common.ReporterDouble_getClassName()

class ReporterVec3(AbstractReporter):
    """Proxy of C++ OpenSim::Reporter<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractReporter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReporterVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractReporter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReporterVec3, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ReporterVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ReporterVec3_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ReporterVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ReporterVec3_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ReporterVec3_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ReporterVec3 self) -> ReporterVec3

        Parameters
        ----------
        self: OpenSim::Reporter< SimTK::Vec3 > const *

        """
        return _common.ReporterVec3_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ReporterVec3 self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Reporter< SimTK::Vec3 > const *

        """
        return _common.ReporterVec3_getConcreteClassName(self)

    __swig_setmethods__["PropertyIndex_input_inputs"] = _common.ReporterVec3_PropertyIndex_input_inputs_set
    __swig_getmethods__["PropertyIndex_input_inputs"] = _common.ReporterVec3_PropertyIndex_input_inputs_get
    if _newclass:
        PropertyIndex_input_inputs = _swig_property(_common.ReporterVec3_PropertyIndex_input_inputs_get, _common.ReporterVec3_PropertyIndex_input_inputs_set)

    def connectInput_inputs(self, *args):
        """
        connectInput_inputs(ReporterVec3 self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connectInput_inputs(ReporterVec3 self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        connectInput_inputs(ReporterVec3 self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        connectInput_inputs(ReporterVec3 self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.ReporterVec3_connectInput_inputs(self, *args)


    def addToReport(self, *args):
        """
        addToReport(ReporterVec3 self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        addToReport(ReporterVec3 self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        addToReport(ReporterVec3 self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        addToReport(ReporterVec3 self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.ReporterVec3_addToReport(self, *args)

ReporterVec3_swigregister = _common.ReporterVec3_swigregister
ReporterVec3_swigregister(ReporterVec3)

def ReporterVec3_safeDownCast(obj):
    """
    ReporterVec3_safeDownCast(OpenSimObject obj) -> ReporterVec3

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ReporterVec3_safeDownCast(obj)

def ReporterVec3_getClassName():
    """ReporterVec3_getClassName() -> std::string const &"""
    return _common.ReporterVec3_getClassName()

class ReporterVector(AbstractReporter):
    """Proxy of C++ OpenSim::Reporter<(SimTK::Vector)> class."""

    __swig_setmethods__ = {}
    for _s in [AbstractReporter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReporterVector, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractReporter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReporterVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ReporterVector

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ReporterVector_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ReporterVector self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ReporterVector_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ReporterVector_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ReporterVector self) -> ReporterVector

        Parameters
        ----------
        self: OpenSim::Reporter< SimTK::Vector > const *

        """
        return _common.ReporterVector_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ReporterVector self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Reporter< SimTK::Vector > const *

        """
        return _common.ReporterVector_getConcreteClassName(self)

    __swig_setmethods__["PropertyIndex_input_inputs"] = _common.ReporterVector_PropertyIndex_input_inputs_set
    __swig_getmethods__["PropertyIndex_input_inputs"] = _common.ReporterVector_PropertyIndex_input_inputs_get
    if _newclass:
        PropertyIndex_input_inputs = _swig_property(_common.ReporterVector_PropertyIndex_input_inputs_get, _common.ReporterVector_PropertyIndex_input_inputs_set)

    def connectInput_inputs(self, *args):
        """
        connectInput_inputs(ReporterVector self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connectInput_inputs(ReporterVector self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        connectInput_inputs(ReporterVector self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        connectInput_inputs(ReporterVector self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.ReporterVector_connectInput_inputs(self, *args)


    def addToReport(self, *args):
        """
        addToReport(ReporterVector self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        addToReport(ReporterVector self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        addToReport(ReporterVector self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        addToReport(ReporterVector self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _common.ReporterVector_addToReport(self, *args)

ReporterVector_swigregister = _common.ReporterVector_swigregister
ReporterVector_swigregister(ReporterVector)

def ReporterVector_safeDownCast(obj):
    """
    ReporterVector_safeDownCast(OpenSimObject obj) -> ReporterVector

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ReporterVector_safeDownCast(obj)

def ReporterVector_getClassName():
    """ReporterVector_getClassName() -> std::string const &"""
    return _common.ReporterVector_getClassName()

class TableReporter(ReporterDouble):
    """Proxy of C++ OpenSim::TableReporter_<(SimTK::Real)> class."""

    __swig_setmethods__ = {}
    for _s in [ReporterDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [ReporterDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TableReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableReporter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TableReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.TableReporter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TableReporter self) -> TableReporter

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Real > const *

        """
        return _common.TableReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TableReporter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Real > const *

        """
        return _common.TableReporter_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::TableReporter_<(SimTK::Real)> self) -> TableReporter"""
        this = _common.new_TableReporter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TableReporter
    __del__ = lambda self: None

    def getTable(self):
        """
        getTable(TableReporter self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Real > const *

        """
        return _common.TableReporter_getTable(self)


    def clearTable(self):
        """
        clearTable(TableReporter self)

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Real > *

        """
        return _common.TableReporter_clearTable(self)

TableReporter_swigregister = _common.TableReporter_swigregister
TableReporter_swigregister(TableReporter)

def TableReporter_safeDownCast(obj):
    """
    TableReporter_safeDownCast(OpenSimObject obj) -> TableReporter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.TableReporter_safeDownCast(obj)

def TableReporter_getClassName():
    """TableReporter_getClassName() -> std::string const &"""
    return _common.TableReporter_getClassName()

class TableReporterVec3(ReporterVec3):
    """Proxy of C++ OpenSim::TableReporter_<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [ReporterVec3]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableReporterVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [ReporterVec3]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableReporterVec3, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TableReporterVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableReporterVec3_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TableReporterVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableReporterVec3_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.TableReporterVec3_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TableReporterVec3 self) -> TableReporterVec3

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Vec3 > const *

        """
        return _common.TableReporterVec3_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TableReporterVec3 self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Vec3 > const *

        """
        return _common.TableReporterVec3_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::TableReporter_<(SimTK::Vec3)> self) -> TableReporterVec3"""
        this = _common.new_TableReporterVec3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TableReporterVec3
    __del__ = lambda self: None

    def getTable(self):
        """
        getTable(TableReporterVec3 self) -> TimeSeriesTableVec3

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Vec3 > const *

        """
        return _common.TableReporterVec3_getTable(self)


    def clearTable(self):
        """
        clearTable(TableReporterVec3 self)

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Vec3 > *

        """
        return _common.TableReporterVec3_clearTable(self)

TableReporterVec3_swigregister = _common.TableReporterVec3_swigregister
TableReporterVec3_swigregister(TableReporterVec3)

def TableReporterVec3_safeDownCast(obj):
    """
    TableReporterVec3_safeDownCast(OpenSimObject obj) -> TableReporterVec3

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.TableReporterVec3_safeDownCast(obj)

def TableReporterVec3_getClassName():
    """TableReporterVec3_getClassName() -> std::string const &"""
    return _common.TableReporterVec3_getClassName()

class TableReporterSpatialVec(_object):
    """Proxy of C++ OpenSim::TableReporter_<(SimTK::SpatialVec)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableReporterSpatialVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableReporterSpatialVec, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TableReporterSpatialVec

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableReporterSpatialVec_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TableReporterSpatialVec self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableReporterSpatialVec_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.TableReporterSpatialVec_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TableReporterSpatialVec self) -> TableReporterSpatialVec

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::SpatialVec > const *

        """
        return _common.TableReporterSpatialVec_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TableReporterSpatialVec self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::SpatialVec > const *

        """
        return _common.TableReporterSpatialVec_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::TableReporter_<(SimTK::SpatialVec)> self) -> TableReporterSpatialVec"""
        this = _common.new_TableReporterSpatialVec()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TableReporterSpatialVec
    __del__ = lambda self: None

    def getTable(self):
        """
        getTable(TableReporterSpatialVec self) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::SpatialVec > const *

        """
        return _common.TableReporterSpatialVec_getTable(self)


    def clearTable(self):
        """
        clearTable(TableReporterSpatialVec self)

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::SpatialVec > *

        """
        return _common.TableReporterSpatialVec_clearTable(self)

TableReporterSpatialVec_swigregister = _common.TableReporterSpatialVec_swigregister
TableReporterSpatialVec_swigregister(TableReporterSpatialVec)

def TableReporterSpatialVec_safeDownCast(obj):
    """
    TableReporterSpatialVec_safeDownCast(OpenSimObject obj) -> TableReporterSpatialVec

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.TableReporterSpatialVec_safeDownCast(obj)

def TableReporterSpatialVec_getClassName():
    """TableReporterSpatialVec_getClassName() -> std::string const &"""
    return _common.TableReporterSpatialVec_getClassName()

class TableReporterVector(ReporterVector):
    """Proxy of C++ OpenSim::TableReporter_<(SimTK::Vector,SimTK::Real)> class."""

    __swig_setmethods__ = {}
    for _s in [ReporterVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableReporterVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ReporterVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableReporterVector, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TableReporterVector

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableReporterVector_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TableReporterVector self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableReporterVector_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.TableReporterVector_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TableReporterVector self) -> TableReporterVector

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Vector,SimTK::Real > const *

        """
        return _common.TableReporterVector_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TableReporterVector self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Vector,SimTK::Real > const *

        """
        return _common.TableReporterVector_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::TableReporter_<(SimTK::Vector,SimTK::Real)> self) -> TableReporterVector"""
        this = _common.new_TableReporterVector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_TableReporterVector
    __del__ = lambda self: None

    def getTable(self):
        """
        getTable(TableReporterVector self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Vector,SimTK::Real > const *

        """
        return _common.TableReporterVector_getTable(self)


    def clearTable(self):
        """
        clearTable(TableReporterVector self)

        Parameters
        ----------
        self: OpenSim::TableReporter_< SimTK::Vector,SimTK::Real > *

        """
        return _common.TableReporterVector_clearTable(self)

TableReporterVector_swigregister = _common.TableReporterVector_swigregister
TableReporterVector_swigregister(TableReporterVector)

def TableReporterVector_safeDownCast(obj):
    """
    TableReporterVector_safeDownCast(OpenSimObject obj) -> TableReporterVector

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.TableReporterVector_safeDownCast(obj)

def TableReporterVector_getClassName():
    """TableReporterVector_getClassName() -> std::string const &"""
    return _common.TableReporterVector_getClassName()

class ConsoleReporter(ReporterDouble):
    """Proxy of C++ OpenSim::ConsoleReporter_<(SimTK::Real)> class."""

    __swig_setmethods__ = {}
    for _s in [ReporterDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [ReporterDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ConsoleReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ConsoleReporter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ConsoleReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ConsoleReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ConsoleReporter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ConsoleReporter self) -> ConsoleReporter

        Parameters
        ----------
        self: OpenSim::ConsoleReporter_< SimTK::Real > const *

        """
        return _common.ConsoleReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ConsoleReporter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ConsoleReporter_< SimTK::Real > const *

        """
        return _common.ConsoleReporter_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::ConsoleReporter_<(SimTK::Real)> self) -> ConsoleReporter"""
        this = _common.new_ConsoleReporter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ConsoleReporter
    __del__ = lambda self: None
ConsoleReporter_swigregister = _common.ConsoleReporter_swigregister
ConsoleReporter_swigregister(ConsoleReporter)

def ConsoleReporter_safeDownCast(obj):
    """
    ConsoleReporter_safeDownCast(OpenSimObject obj) -> ConsoleReporter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ConsoleReporter_safeDownCast(obj)

def ConsoleReporter_getClassName():
    """ConsoleReporter_getClassName() -> std::string const &"""
    return _common.ConsoleReporter_getClassName()

class ConsoleReporterVec3(ReporterVec3):
    """Proxy of C++ OpenSim::ConsoleReporter_<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [ReporterVec3]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleReporterVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [ReporterVec3]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleReporterVec3, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ConsoleReporterVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ConsoleReporterVec3_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ConsoleReporterVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ConsoleReporterVec3_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.ConsoleReporterVec3_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ConsoleReporterVec3 self) -> ConsoleReporterVec3

        Parameters
        ----------
        self: OpenSim::ConsoleReporter_< SimTK::Vec3 > const *

        """
        return _common.ConsoleReporterVec3_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ConsoleReporterVec3 self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ConsoleReporter_< SimTK::Vec3 > const *

        """
        return _common.ConsoleReporterVec3_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::ConsoleReporter_<(SimTK::Vec3)> self) -> ConsoleReporterVec3"""
        this = _common.new_ConsoleReporterVec3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_ConsoleReporterVec3
    __del__ = lambda self: None
ConsoleReporterVec3_swigregister = _common.ConsoleReporterVec3_swigregister
ConsoleReporterVec3_swigregister(ConsoleReporterVec3)

def ConsoleReporterVec3_safeDownCast(obj):
    """
    ConsoleReporterVec3_safeDownCast(OpenSimObject obj) -> ConsoleReporterVec3

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.ConsoleReporterVec3_safeDownCast(obj)

def ConsoleReporterVec3_getClassName():
    """ConsoleReporterVec3_getClassName() -> std::string const &"""
    return _common.ConsoleReporterVec3_getClassName()

class GCVSplineSet(FunctionSet):
    """Proxy of C++ OpenSim::GCVSplineSet class."""

    __swig_setmethods__ = {}
    for _s in [FunctionSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCVSplineSet, name, value)
    __swig_getmethods__ = {}
    for _s in [FunctionSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCVSplineSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GCVSplineSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.GCVSplineSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(GCVSplineSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.GCVSplineSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _common.GCVSplineSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(GCVSplineSet self) -> GCVSplineSet

        Parameters
        ----------
        self: OpenSim::GCVSplineSet const *

        """
        return _common.GCVSplineSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GCVSplineSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::GCVSplineSet const *

        """
        return _common.GCVSplineSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::GCVSplineSet self) -> GCVSplineSet
        __init__(OpenSim::GCVSplineSet self, char const * aFileName) -> GCVSplineSet

        Parameters
        ----------
        aFileName: char const *

        __init__(OpenSim::GCVSplineSet self, int aDegree, Storage aStore, double aErrorVariance=0.0) -> GCVSplineSet

        Parameters
        ----------
        aDegree: int
        aStore: OpenSim::Storage const *
        aErrorVariance: double

        __init__(OpenSim::GCVSplineSet self, int aDegree, Storage aStore) -> GCVSplineSet

        Parameters
        ----------
        aDegree: int
        aStore: OpenSim::Storage const *

        __init__(OpenSim::GCVSplineSet self, TimeSeriesTable table, StdVectorString labels, int degree=5, double errorVariance=0.0) -> GCVSplineSet

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        labels: std::vector< std::string,std::allocator< std::string > > const &
        degree: int
        errorVariance: double

        __init__(OpenSim::GCVSplineSet self, TimeSeriesTable table, StdVectorString labels, int degree=5) -> GCVSplineSet

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        labels: std::vector< std::string,std::allocator< std::string > > const &
        degree: int

        __init__(OpenSim::GCVSplineSet self, TimeSeriesTable table, StdVectorString labels) -> GCVSplineSet

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(OpenSim::GCVSplineSet self, TimeSeriesTable table) -> GCVSplineSet

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &

        """
        this = _common.new_GCVSplineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _common.delete_GCVSplineSet
    __del__ = lambda self: None

    def getGCVSpline(self, aIndex):
        """
        getGCVSpline(GCVSplineSet self, int aIndex) -> GCVSpline

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSplineSet_getGCVSpline(self, aIndex)


    def getMinX(self):
        """
        getMinX(GCVSplineSet self) -> double

        Parameters
        ----------
        self: OpenSim::GCVSplineSet const *

        """
        return _common.GCVSplineSet_getMinX(self)


    def getMaxX(self):
        """
        getMaxX(GCVSplineSet self) -> double

        Parameters
        ----------
        self: OpenSim::GCVSplineSet const *

        """
        return _common.GCVSplineSet_getMaxX(self)


    def constructStorage(self, aDerivOrder, aDX=-1):
        """
        constructStorage(GCVSplineSet self, int aDerivOrder, double aDX=-1) -> Storage

        Parameters
        ----------
        aDerivOrder: int
        aDX: double

        constructStorage(GCVSplineSet self, int aDerivOrder) -> Storage

        Parameters
        ----------
        aDerivOrder: int

        """
        return _common.GCVSplineSet_constructStorage(self, aDerivOrder, aDX)

GCVSplineSet_swigregister = _common.GCVSplineSet_swigregister
GCVSplineSet_swigregister(GCVSplineSet)

def GCVSplineSet_safeDownCast(obj):
    """
    GCVSplineSet_safeDownCast(OpenSimObject obj) -> GCVSplineSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _common.GCVSplineSet_safeDownCast(obj)

def GCVSplineSet_getClassName():
    """GCVSplineSet_getClassName() -> std::string const &"""
    return _common.GCVSplineSet_getClassName()

# This file is compatible with both classic and new-style classes.


