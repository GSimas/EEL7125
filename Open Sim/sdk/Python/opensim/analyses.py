# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_analyses')).lstrip('.')
        return importlib.import_module(mname)
    _analyses = swig_import_helper()
    del swig_import_helper
elif version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_analyses', [dirname(__file__)])
        except ImportError:
            import _analyses
            return _analyses
        if fp is not None:
            try:
                _mod = imp.load_module('_analyses', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _analyses = swig_import_helper()
    del swig_import_helper
else:
    import _analyses
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _analyses.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _analyses.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _analyses.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _analyses.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _analyses.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _analyses.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _analyses.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _analyses.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _analyses.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _analyses.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _analyses.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _analyses.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _analyses.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _analyses.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _analyses.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _analyses.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _analyses.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _analyses.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import opensim.actuators
import opensim.simulation
import opensim.common
import opensim.simbody
class Kinematics(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::Kinematics class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kinematics, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Kinematics, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Kinematics

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.Kinematics_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Kinematics self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.Kinematics_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.Kinematics_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Kinematics self) -> Kinematics

        Parameters
        ----------
        self: OpenSim::Kinematics const *

        """
        return _analyses.Kinematics_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Kinematics self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Kinematics const *

        """
        return _analyses.Kinematics_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Kinematics self, Model aModel=None) -> Kinematics

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::Kinematics self) -> Kinematics
        __init__(OpenSim::Kinematics self, std::string const & aFileName) -> Kinematics

        Parameters
        ----------
        aFileName: std::string const &

        """
        this = _analyses.new_Kinematics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_Kinematics
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(Kinematics self, int aIncrement)

        Parameters
        ----------
        aIncrement: int

        """
        return _analyses.Kinematics_setStorageCapacityIncrements(self, aIncrement)


    def getAccelerationStorage(self):
        """
        getAccelerationStorage(Kinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::Kinematics *

        """
        return _analyses.Kinematics_getAccelerationStorage(self)


    def getVelocityStorage(self):
        """
        getVelocityStorage(Kinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::Kinematics *

        """
        return _analyses.Kinematics_getVelocityStorage(self)


    def getPositionStorage(self):
        """
        getPositionStorage(Kinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::Kinematics *

        """
        return _analyses.Kinematics_getPositionStorage(self)


    def setModel(self, aModel):
        """
        setModel(Kinematics self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.Kinematics_setModel(self, aModel)


    def setRecordAccelerations(self, aRecordAccelerations):
        """
        setRecordAccelerations(Kinematics self, bool aRecordAccelerations)

        Parameters
        ----------
        aRecordAccelerations: bool

        """
        return _analyses.Kinematics_setRecordAccelerations(self, aRecordAccelerations)


    def begin(self, s):
        """
        begin(Kinematics self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.Kinematics_begin(self, s)


    def step(self, s, setNumber):
        """
        step(Kinematics self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.Kinematics_step(self, s, setNumber)


    def end(self, s):
        """
        end(Kinematics self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.Kinematics_end(self, s)


    def printResults(self, *args):
        """
        printResults(Kinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(Kinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(Kinematics self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(Kinematics self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.Kinematics_printResults(self, *args)

Kinematics_swigregister = _analyses.Kinematics_swigregister
Kinematics_swigregister(Kinematics)

def Kinematics_safeDownCast(obj):
    """
    Kinematics_safeDownCast(OpenSimObject obj) -> Kinematics

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.Kinematics_safeDownCast(obj)

def Kinematics_getClassName():
    """Kinematics_getClassName() -> std::string const &"""
    return _analyses.Kinematics_getClassName()

class Actuation(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::Actuation class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actuation, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actuation, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Actuation

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.Actuation_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Actuation self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.Actuation_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.Actuation_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Actuation self) -> Actuation

        Parameters
        ----------
        self: OpenSim::Actuation const *

        """
        return _analyses.Actuation_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Actuation self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Actuation const *

        """
        return _analyses.Actuation_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Actuation self, Model aModel=None) -> Actuation

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::Actuation self) -> Actuation
        __init__(OpenSim::Actuation self, std::string const & aFileName) -> Actuation

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Actuation self, Actuation aObject) -> Actuation

        Parameters
        ----------
        aObject: OpenSim::Actuation const &

        """
        this = _analyses.new_Actuation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_Actuation
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(Actuation self, int aIncrement)

        Parameters
        ----------
        aIncrement: int

        """
        return _analyses.Actuation_setStorageCapacityIncrements(self, aIncrement)


    def getForceStorage(self):
        """
        getForceStorage(Actuation self) -> Storage

        Parameters
        ----------
        self: OpenSim::Actuation const *

        """
        return _analyses.Actuation_getForceStorage(self)


    def getSpeedStorage(self):
        """
        getSpeedStorage(Actuation self) -> Storage

        Parameters
        ----------
        self: OpenSim::Actuation const *

        """
        return _analyses.Actuation_getSpeedStorage(self)


    def getPowerStorage(self):
        """
        getPowerStorage(Actuation self) -> Storage

        Parameters
        ----------
        self: OpenSim::Actuation const *

        """
        return _analyses.Actuation_getPowerStorage(self)


    def setModel(self, aModel):
        """
        setModel(Actuation self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.Actuation_setModel(self, aModel)


    def begin(self, s):
        """
        begin(Actuation self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.Actuation_begin(self, s)


    def step(self, s, setNumber):
        """
        step(Actuation self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.Actuation_step(self, s, setNumber)


    def end(self, s):
        """
        end(Actuation self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.Actuation_end(self, s)


    def printResults(self, *args):
        """
        printResults(Actuation self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(Actuation self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(Actuation self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(Actuation self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.Actuation_printResults(self, *args)

Actuation_swigregister = _analyses.Actuation_swigregister
Actuation_swigregister(Actuation)

def Actuation_safeDownCast(obj):
    """
    Actuation_safeDownCast(OpenSimObject obj) -> Actuation

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.Actuation_safeDownCast(obj)

def Actuation_getClassName():
    """Actuation_getClassName() -> std::string const &"""
    return _analyses.Actuation_getClassName()

class MuscleAnalysis(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::MuscleAnalysis class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleAnalysis, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleAnalysis, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MuscleAnalysis

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.MuscleAnalysis_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MuscleAnalysis self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.MuscleAnalysis_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.MuscleAnalysis_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MuscleAnalysis self) -> MuscleAnalysis

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleAnalysis self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MuscleAnalysis self, Model aModel=None) -> MuscleAnalysis

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::MuscleAnalysis self) -> MuscleAnalysis
        __init__(OpenSim::MuscleAnalysis self, std::string const & aFileName) -> MuscleAnalysis

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::MuscleAnalysis self, MuscleAnalysis aObject) -> MuscleAnalysis

        Parameters
        ----------
        aObject: OpenSim::MuscleAnalysis const &

        """
        this = _analyses.new_MuscleAnalysis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_MuscleAnalysis
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(MuscleAnalysis self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.MuscleAnalysis_setModel(self, aModel)


    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(MuscleAnalysis self, int aIncrement)

        Parameters
        ----------
        aIncrement: int

        """
        return _analyses.MuscleAnalysis_setStorageCapacityIncrements(self, aIncrement)


    def getPennationAngleStorage(self):
        """
        getPennationAngleStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getPennationAngleStorage(self)


    def getMuscleTendonLengthStorage(self):
        """
        getMuscleTendonLengthStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getMuscleTendonLengthStorage(self)


    def getFiberLengthStorage(self):
        """
        getFiberLengthStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getFiberLengthStorage(self)


    def getNormalizedFiberLengthStorage(self):
        """
        getNormalizedFiberLengthStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getNormalizedFiberLengthStorage(self)


    def getTendonLengthStorage(self):
        """
        getTendonLengthStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getTendonLengthStorage(self)


    def getFiberVelocityStorage(self):
        """
        getFiberVelocityStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getFiberVelocityStorage(self)


    def getNormalizedFiberVelocityStorage(self):
        """
        getNormalizedFiberVelocityStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getNormalizedFiberVelocityStorage(self)


    def getPennationAngularVelocityStorage(self):
        """
        getPennationAngularVelocityStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getPennationAngularVelocityStorage(self)


    def getForceStorage(self):
        """
        getForceStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getForceStorage(self)


    def getFiberForceStorage(self):
        """
        getFiberForceStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getFiberForceStorage(self)


    def getActiveFiberForceStorage(self):
        """
        getActiveFiberForceStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getActiveFiberForceStorage(self)


    def getPassiveFiberForceStorage(self):
        """
        getPassiveFiberForceStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getPassiveFiberForceStorage(self)


    def getActiveFiberForceAlongTendonStorage(self):
        """
        getActiveFiberForceAlongTendonStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getActiveFiberForceAlongTendonStorage(self)


    def getPassiveFiberForceAlongTendonStorage(self):
        """
        getPassiveFiberForceAlongTendonStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getPassiveFiberForceAlongTendonStorage(self)


    def getFiberActivePowerStorage(self):
        """
        getFiberActivePowerStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getFiberActivePowerStorage(self)


    def getFiberPassivePowerStorage(self):
        """
        getFiberPassivePowerStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getFiberPassivePowerStorage(self)


    def getTendonPowerStorage(self):
        """
        getTendonPowerStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getTendonPowerStorage(self)


    def getMusclePowerStorage(self):
        """
        getMusclePowerStorage(MuscleAnalysis self) -> Storage

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getMusclePowerStorage(self)


    def setMuscles(self, aMuscles):
        """
        setMuscles(MuscleAnalysis self, ArrayStr aMuscles)

        Parameters
        ----------
        aMuscles: OpenSim::Array< std::string > &

        """
        return _analyses.MuscleAnalysis_setMuscles(self, aMuscles)


    def setCoordinates(self, aCoordinates):
        """
        setCoordinates(MuscleAnalysis self, ArrayStr aCoordinates)

        Parameters
        ----------
        aCoordinates: OpenSim::Array< std::string > &

        """
        return _analyses.MuscleAnalysis_setCoordinates(self, aCoordinates)


    def setComputeMoments(self, aTrueFalse):
        """
        setComputeMoments(MuscleAnalysis self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _analyses.MuscleAnalysis_setComputeMoments(self, aTrueFalse)


    def getComputeMoments(self):
        """
        getComputeMoments(MuscleAnalysis self) -> bool

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis const *

        """
        return _analyses.MuscleAnalysis_getComputeMoments(self)


    def begin(self, s):
        """
        begin(MuscleAnalysis self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.MuscleAnalysis_begin(self, s)


    def step(self, s, setNumber):
        """
        step(MuscleAnalysis self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.MuscleAnalysis_step(self, s, setNumber)


    def end(self, s):
        """
        end(MuscleAnalysis self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.MuscleAnalysis_end(self, s)


    def printResults(self, *args):
        """
        printResults(MuscleAnalysis self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(MuscleAnalysis self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(MuscleAnalysis self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(MuscleAnalysis self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.MuscleAnalysis_printResults(self, *args)


    def allocateStorageObjects(self):
        """
        allocateStorageObjects(MuscleAnalysis self)

        Parameters
        ----------
        self: OpenSim::MuscleAnalysis *

        """
        return _analyses.MuscleAnalysis_allocateStorageObjects(self)

MuscleAnalysis_swigregister = _analyses.MuscleAnalysis_swigregister
MuscleAnalysis_swigregister(MuscleAnalysis)

def MuscleAnalysis_safeDownCast(obj):
    """
    MuscleAnalysis_safeDownCast(OpenSimObject obj) -> MuscleAnalysis

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.MuscleAnalysis_safeDownCast(obj)

def MuscleAnalysis_getClassName():
    """MuscleAnalysis_getClassName() -> std::string const &"""
    return _analyses.MuscleAnalysis_getClassName()

class InverseDynamics(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::InverseDynamics class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseDynamics, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseDynamics, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InverseDynamics

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.InverseDynamics_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(InverseDynamics self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.InverseDynamics_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.InverseDynamics_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(InverseDynamics self) -> InverseDynamics

        Parameters
        ----------
        self: OpenSim::InverseDynamics const *

        """
        return _analyses.InverseDynamics_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InverseDynamics self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::InverseDynamics const *

        """
        return _analyses.InverseDynamics_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::InverseDynamics self, Model aModel=None) -> InverseDynamics

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::InverseDynamics self) -> InverseDynamics
        __init__(OpenSim::InverseDynamics self, InverseDynamics aObject) -> InverseDynamics

        Parameters
        ----------
        aObject: OpenSim::InverseDynamics const &

        """
        this = _analyses.new_InverseDynamics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_InverseDynamics
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(InverseDynamics self, int aIncrement)

        Parameters
        ----------
        aIncrement: int

        """
        return _analyses.InverseDynamics_setStorageCapacityIncrements(self, aIncrement)


    def getStorage(self):
        """
        getStorage(InverseDynamics self) -> Storage

        Parameters
        ----------
        self: OpenSim::InverseDynamics *

        """
        return _analyses.InverseDynamics_getStorage(self)


    def getUseModelForceSet(self):
        """
        getUseModelForceSet(InverseDynamics self) -> bool

        Parameters
        ----------
        self: OpenSim::InverseDynamics *

        """
        return _analyses.InverseDynamics_getUseModelForceSet(self)


    def setUseModelForceSet(self, aUseModelForceSet):
        """
        setUseModelForceSet(InverseDynamics self, bool aUseModelForceSet)

        Parameters
        ----------
        aUseModelForceSet: bool

        """
        return _analyses.InverseDynamics_setUseModelForceSet(self, aUseModelForceSet)


    def setModel(self, aModel):
        """
        setModel(InverseDynamics self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.InverseDynamics_setModel(self, aModel)


    def printResults(self, *args):
        """
        printResults(InverseDynamics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(InverseDynamics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(InverseDynamics self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(InverseDynamics self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.InverseDynamics_printResults(self, *args)

InverseDynamics_swigregister = _analyses.InverseDynamics_swigregister
InverseDynamics_swigregister(InverseDynamics)

def InverseDynamics_safeDownCast(obj):
    """
    InverseDynamics_safeDownCast(OpenSimObject obj) -> InverseDynamics

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.InverseDynamics_safeDownCast(obj)

def InverseDynamics_getClassName():
    """InverseDynamics_getClassName() -> std::string const &"""
    return _analyses.InverseDynamics_getClassName()

class StaticOptimization(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::StaticOptimization class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticOptimization, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StaticOptimization, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StaticOptimization

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.StaticOptimization_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(StaticOptimization self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.StaticOptimization_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.StaticOptimization_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(StaticOptimization self) -> StaticOptimization

        Parameters
        ----------
        self: OpenSim::StaticOptimization const *

        """
        return _analyses.StaticOptimization_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StaticOptimization self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::StaticOptimization const *

        """
        return _analyses.StaticOptimization_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::StaticOptimization self, Model aModel=None) -> StaticOptimization

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::StaticOptimization self) -> StaticOptimization
        __init__(OpenSim::StaticOptimization self, StaticOptimization aObject) -> StaticOptimization

        Parameters
        ----------
        aObject: OpenSim::StaticOptimization const &

        """
        this = _analyses.new_StaticOptimization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_StaticOptimization
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(StaticOptimization self, int aIncrement)

        Parameters
        ----------
        aIncrement: int

        """
        return _analyses.StaticOptimization_setStorageCapacityIncrements(self, aIncrement)


    def getActivationStorage(self):
        """
        getActivationStorage(StaticOptimization self) -> Storage

        Parameters
        ----------
        self: OpenSim::StaticOptimization *

        """
        return _analyses.StaticOptimization_getActivationStorage(self)


    def getForceStorage(self):
        """
        getForceStorage(StaticOptimization self) -> Storage

        Parameters
        ----------
        self: OpenSim::StaticOptimization *

        """
        return _analyses.StaticOptimization_getForceStorage(self)


    def getUseModelForceSet(self):
        """
        getUseModelForceSet(StaticOptimization self) -> bool

        Parameters
        ----------
        self: OpenSim::StaticOptimization *

        """
        return _analyses.StaticOptimization_getUseModelForceSet(self)


    def setUseModelForceSet(self, aUseModelActuatorSet):
        """
        setUseModelForceSet(StaticOptimization self, bool aUseModelActuatorSet)

        Parameters
        ----------
        aUseModelActuatorSet: bool

        """
        return _analyses.StaticOptimization_setUseModelForceSet(self, aUseModelActuatorSet)


    def setModel(self, aModel):
        """
        setModel(StaticOptimization self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.StaticOptimization_setModel(self, aModel)


    def setActivationExponent(self, aExponent):
        """
        setActivationExponent(StaticOptimization self, double const aExponent)

        Parameters
        ----------
        aExponent: double const

        """
        return _analyses.StaticOptimization_setActivationExponent(self, aExponent)


    def getActivationExponent(self):
        """
        getActivationExponent(StaticOptimization self) -> double

        Parameters
        ----------
        self: OpenSim::StaticOptimization const *

        """
        return _analyses.StaticOptimization_getActivationExponent(self)


    def setUseMusclePhysiology(self, useIt):
        """
        setUseMusclePhysiology(StaticOptimization self, bool const useIt)

        Parameters
        ----------
        useIt: bool const

        """
        return _analyses.StaticOptimization_setUseMusclePhysiology(self, useIt)


    def getUseMusclePhysiology(self):
        """
        getUseMusclePhysiology(StaticOptimization self) -> bool

        Parameters
        ----------
        self: OpenSim::StaticOptimization const *

        """
        return _analyses.StaticOptimization_getUseMusclePhysiology(self)


    def setConvergenceCriterion(self, tolerance):
        """
        setConvergenceCriterion(StaticOptimization self, double const tolerance)

        Parameters
        ----------
        tolerance: double const

        """
        return _analyses.StaticOptimization_setConvergenceCriterion(self, tolerance)


    def getConvergenceCriterion(self):
        """
        getConvergenceCriterion(StaticOptimization self) -> double

        Parameters
        ----------
        self: OpenSim::StaticOptimization *

        """
        return _analyses.StaticOptimization_getConvergenceCriterion(self)


    def setMaxIterations(self, maxIt):
        """
        setMaxIterations(StaticOptimization self, int const maxIt)

        Parameters
        ----------
        maxIt: int const

        """
        return _analyses.StaticOptimization_setMaxIterations(self, maxIt)


    def getMaxIterations(self):
        """
        getMaxIterations(StaticOptimization self) -> int

        Parameters
        ----------
        self: OpenSim::StaticOptimization *

        """
        return _analyses.StaticOptimization_getMaxIterations(self)


    def begin(self, s):
        """
        begin(StaticOptimization self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.StaticOptimization_begin(self, s)


    def step(self, s, setNumber):
        """
        step(StaticOptimization self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.StaticOptimization_step(self, s, setNumber)


    def end(self, s):
        """
        end(StaticOptimization self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.StaticOptimization_end(self, s)


    def printResults(self, *args):
        """
        printResults(StaticOptimization self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(StaticOptimization self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(StaticOptimization self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(StaticOptimization self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.StaticOptimization_printResults(self, *args)

StaticOptimization_swigregister = _analyses.StaticOptimization_swigregister
StaticOptimization_swigregister(StaticOptimization)

def StaticOptimization_safeDownCast(obj):
    """
    StaticOptimization_safeDownCast(OpenSimObject obj) -> StaticOptimization

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.StaticOptimization_safeDownCast(obj)

def StaticOptimization_getClassName():
    """StaticOptimization_getClassName() -> std::string const &"""
    return _analyses.StaticOptimization_getClassName()

class ForceReporter(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::ForceReporter class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForceReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.ForceReporter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ForceReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.ForceReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.ForceReporter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ForceReporter self) -> ForceReporter

        Parameters
        ----------
        self: OpenSim::ForceReporter const *

        """
        return _analyses.ForceReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForceReporter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ForceReporter const *

        """
        return _analyses.ForceReporter_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ForceReporter self, Model aModel=None) -> ForceReporter

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::ForceReporter self) -> ForceReporter
        __init__(OpenSim::ForceReporter self, std::string const & aFileName) -> ForceReporter

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::ForceReporter self, ForceReporter aObject) -> ForceReporter

        Parameters
        ----------
        aObject: OpenSim::ForceReporter const &

        """
        this = _analyses.new_ForceReporter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_ForceReporter
    __del__ = lambda self: None

    def getForceStorage(self):
        """
        getForceStorage(ForceReporter self) -> Storage

        Parameters
        ----------
        self: OpenSim::ForceReporter const *

        """
        return _analyses.ForceReporter_getForceStorage(self)


    def updForceStorage(self):
        """
        updForceStorage(ForceReporter self) -> Storage

        Parameters
        ----------
        self: OpenSim::ForceReporter *

        """
        return _analyses.ForceReporter_updForceStorage(self)


    def getForcesTable(self):
        """
        getForcesTable(ForceReporter self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::ForceReporter const *

        """
        return _analyses.ForceReporter_getForcesTable(self)


    def setModel(self, aModel):
        """
        setModel(ForceReporter self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.ForceReporter_setModel(self, aModel)


    def includeConstraintForces(self, flag):
        """
        includeConstraintForces(ForceReporter self, bool flag)

        Parameters
        ----------
        flag: bool

        """
        return _analyses.ForceReporter_includeConstraintForces(self, flag)


    def begin(self, s):
        """
        begin(ForceReporter self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.ForceReporter_begin(self, s)


    def step(self, s, setNumber):
        """
        step(ForceReporter self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.ForceReporter_step(self, s, setNumber)


    def end(self, s):
        """
        end(ForceReporter self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.ForceReporter_end(self, s)


    def printResults(self, *args):
        """
        printResults(ForceReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(ForceReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(ForceReporter self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(ForceReporter self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.ForceReporter_printResults(self, *args)

ForceReporter_swigregister = _analyses.ForceReporter_swigregister
ForceReporter_swigregister(ForceReporter)

def ForceReporter_safeDownCast(obj):
    """
    ForceReporter_safeDownCast(OpenSimObject obj) -> ForceReporter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.ForceReporter_safeDownCast(obj)

def ForceReporter_getClassName():
    """ForceReporter_getClassName() -> std::string const &"""
    return _analyses.ForceReporter_getClassName()

class PointKinematics(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::PointKinematics class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointKinematics, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointKinematics, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointKinematics

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.PointKinematics_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PointKinematics self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.PointKinematics_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.PointKinematics_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PointKinematics self) -> PointKinematics

        Parameters
        ----------
        self: OpenSim::PointKinematics const *

        """
        return _analyses.PointKinematics_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointKinematics self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointKinematics const *

        """
        return _analyses.PointKinematics_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointKinematics self, Model aModel=None) -> PointKinematics

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::PointKinematics self) -> PointKinematics
        __init__(OpenSim::PointKinematics self, std::string const & aFileName) -> PointKinematics

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::PointKinematics self, PointKinematics aObject) -> PointKinematics

        Parameters
        ----------
        aObject: OpenSim::PointKinematics const &

        """
        this = _analyses.new_PointKinematics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_PointKinematics
    __del__ = lambda self: None

    def setBodyPoint(self, aBody, aPoint):
        """
        setBodyPoint(PointKinematics self, std::string const & aBody, Vec3 aPoint)

        Parameters
        ----------
        aBody: std::string const &
        aPoint: SimTK::Vec3 const &

        """
        return _analyses.PointKinematics_setBodyPoint(self, aBody, aPoint)


    def setBody(self, aBody):
        """
        setBody(PointKinematics self, PhysicalFrame aBody)

        Parameters
        ----------
        aBody: OpenSim::PhysicalFrame const *

        """
        return _analyses.PointKinematics_setBody(self, aBody)


    def setRelativeToBody(self, aBody):
        """
        setRelativeToBody(PointKinematics self, PhysicalFrame aBody)

        Parameters
        ----------
        aBody: OpenSim::PhysicalFrame const *

        """
        return _analyses.PointKinematics_setRelativeToBody(self, aBody)


    def getBody(self):
        """
        getBody(PointKinematics self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::PointKinematics const *

        """
        return _analyses.PointKinematics_getBody(self)


    def getRelativeToBody(self):
        """
        getRelativeToBody(PointKinematics self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::PointKinematics const *

        """
        return _analyses.PointKinematics_getRelativeToBody(self)


    def setPoint(self, aPoint):
        """
        setPoint(PointKinematics self, Vec3 aPoint)

        Parameters
        ----------
        aPoint: SimTK::Vec3 const &

        """
        return _analyses.PointKinematics_setPoint(self, aPoint)


    def getPoint(self, rPoint):
        """
        getPoint(PointKinematics self, Vec3 rPoint)

        Parameters
        ----------
        rPoint: SimTK::Vec3 &

        """
        return _analyses.PointKinematics_getPoint(self, rPoint)


    def setPointName(self, aName):
        """
        setPointName(PointKinematics self, std::string const & aName)

        Parameters
        ----------
        aName: std::string const &

        """
        return _analyses.PointKinematics_setPointName(self, aName)


    def getPointName(self):
        """
        getPointName(PointKinematics self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointKinematics *

        """
        return _analyses.PointKinematics_getPointName(self)


    def setModel(self, aModel):
        """
        setModel(PointKinematics self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.PointKinematics_setModel(self, aModel)


    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(PointKinematics self, int aIncrement)

        Parameters
        ----------
        aIncrement: int

        """
        return _analyses.PointKinematics_setStorageCapacityIncrements(self, aIncrement)


    def getAccelerationStorage(self):
        """
        getAccelerationStorage(PointKinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::PointKinematics *

        """
        return _analyses.PointKinematics_getAccelerationStorage(self)


    def getVelocityStorage(self):
        """
        getVelocityStorage(PointKinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::PointKinematics *

        """
        return _analyses.PointKinematics_getVelocityStorage(self)


    def getPositionStorage(self):
        """
        getPositionStorage(PointKinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::PointKinematics *

        """
        return _analyses.PointKinematics_getPositionStorage(self)


    def begin(self, s):
        """
        begin(PointKinematics self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.PointKinematics_begin(self, s)


    def step(self, s, setNumber):
        """
        step(PointKinematics self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.PointKinematics_step(self, s, setNumber)


    def end(self, s):
        """
        end(PointKinematics self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.PointKinematics_end(self, s)


    def printResults(self, *args):
        """
        printResults(PointKinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(PointKinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(PointKinematics self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(PointKinematics self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.PointKinematics_printResults(self, *args)

PointKinematics_swigregister = _analyses.PointKinematics_swigregister
PointKinematics_swigregister(PointKinematics)
cvar = _analyses.cvar
PointKinematicsNAME_LENGTH = cvar.PointKinematicsNAME_LENGTH
PointKinematicsBUFFER_LENGTH = cvar.PointKinematicsBUFFER_LENGTH

def PointKinematics_safeDownCast(obj):
    """
    PointKinematics_safeDownCast(OpenSimObject obj) -> PointKinematics

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.PointKinematics_safeDownCast(obj)

def PointKinematics_getClassName():
    """PointKinematics_getClassName() -> std::string const &"""
    return _analyses.PointKinematics_getClassName()
PointKinematics.NAME_LENGTH = _analyses.cvar.PointKinematics_NAME_LENGTH
PointKinematics.BUFFER_LENGTH = _analyses.cvar.PointKinematics_BUFFER_LENGTH

class BodyKinematics(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::BodyKinematics class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyKinematics, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyKinematics, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodyKinematics

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.BodyKinematics_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(BodyKinematics self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.BodyKinematics_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.BodyKinematics_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(BodyKinematics self) -> BodyKinematics

        Parameters
        ----------
        self: OpenSim::BodyKinematics const *

        """
        return _analyses.BodyKinematics_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodyKinematics self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::BodyKinematics const *

        """
        return _analyses.BodyKinematics_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::BodyKinematics self, Model aModel=None, bool aInDegrees=True) -> BodyKinematics

        Parameters
        ----------
        aModel: OpenSim::Model *
        aInDegrees: bool

        __init__(OpenSim::BodyKinematics self, Model aModel=None) -> BodyKinematics

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::BodyKinematics self) -> BodyKinematics
        __init__(OpenSim::BodyKinematics self, std::string const & aFileName) -> BodyKinematics

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::BodyKinematics self, BodyKinematics aObject) -> BodyKinematics

        Parameters
        ----------
        aObject: OpenSim::BodyKinematics const &

        """
        this = _analyses.new_BodyKinematics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_BodyKinematics
    __del__ = lambda self: None

    def setStorageCapacityIncrements(self, aIncrement):
        """
        setStorageCapacityIncrements(BodyKinematics self, int aIncrement)

        Parameters
        ----------
        aIncrement: int

        """
        return _analyses.BodyKinematics_setStorageCapacityIncrements(self, aIncrement)


    def getAccelerationStorage(self):
        """
        getAccelerationStorage(BodyKinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::BodyKinematics *

        """
        return _analyses.BodyKinematics_getAccelerationStorage(self)


    def getVelocityStorage(self):
        """
        getVelocityStorage(BodyKinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::BodyKinematics *

        """
        return _analyses.BodyKinematics_getVelocityStorage(self)


    def getPositionStorage(self):
        """
        getPositionStorage(BodyKinematics self) -> Storage

        Parameters
        ----------
        self: OpenSim::BodyKinematics *

        """
        return _analyses.BodyKinematics_getPositionStorage(self)


    def setExpressResultsInLocalFrame(self, aTrueFalse):
        """
        setExpressResultsInLocalFrame(BodyKinematics self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _analyses.BodyKinematics_setExpressResultsInLocalFrame(self, aTrueFalse)


    def getExpressResultsInLocalFrame(self):
        """
        getExpressResultsInLocalFrame(BodyKinematics self) -> bool

        Parameters
        ----------
        self: OpenSim::BodyKinematics *

        """
        return _analyses.BodyKinematics_getExpressResultsInLocalFrame(self)


    def setRecordCenterOfMass(self, aTrueFalse):
        """
        setRecordCenterOfMass(BodyKinematics self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _analyses.BodyKinematics_setRecordCenterOfMass(self, aTrueFalse)


    def setBodiesToRecord(self, listOfBodies):
        """
        setBodiesToRecord(BodyKinematics self, ArrayStr listOfBodies)

        Parameters
        ----------
        listOfBodies: OpenSim::Array< std::string > &

        """
        return _analyses.BodyKinematics_setBodiesToRecord(self, listOfBodies)


    def setModel(self, aModel):
        """
        setModel(BodyKinematics self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.BodyKinematics_setModel(self, aModel)


    def begin(self, s):
        """
        begin(BodyKinematics self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.BodyKinematics_begin(self, s)


    def step(self, s, setNumber):
        """
        step(BodyKinematics self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.BodyKinematics_step(self, s, setNumber)


    def end(self, s):
        """
        end(BodyKinematics self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.BodyKinematics_end(self, s)


    def printResults(self, *args):
        """
        printResults(BodyKinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(BodyKinematics self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(BodyKinematics self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(BodyKinematics self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.BodyKinematics_printResults(self, *args)

BodyKinematics_swigregister = _analyses.BodyKinematics_swigregister
BodyKinematics_swigregister(BodyKinematics)

def BodyKinematics_safeDownCast(obj):
    """
    BodyKinematics_safeDownCast(OpenSimObject obj) -> BodyKinematics

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.BodyKinematics_safeDownCast(obj)

def BodyKinematics_getClassName():
    """BodyKinematics_getClassName() -> std::string const &"""
    return _analyses.BodyKinematics_getClassName()

class JointReaction(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::JointReaction class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointReaction, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointReaction, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> JointReaction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.JointReaction_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(JointReaction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.JointReaction_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.JointReaction_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(JointReaction self) -> JointReaction

        Parameters
        ----------
        self: OpenSim::JointReaction const *

        """
        return _analyses.JointReaction_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(JointReaction self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::JointReaction const *

        """
        return _analyses.JointReaction_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::JointReaction self, Model aModel=None) -> JointReaction

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::JointReaction self) -> JointReaction
        __init__(OpenSim::JointReaction self, std::string const & aFileName) -> JointReaction

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::JointReaction self, JointReaction aObject) -> JointReaction

        Parameters
        ----------
        aObject: OpenSim::JointReaction const &

        """
        this = _analyses.new_JointReaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_JointReaction
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(JointReaction self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.JointReaction_setModel(self, aModel)


    def getForcesFileName(self):
        """
        getForcesFileName(JointReaction self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::JointReaction *

        """
        return _analyses.JointReaction_getForcesFileName(self)


    def setForcesFileName(self, newForcesFile):
        """
        setForcesFileName(JointReaction self, std::string const newForcesFile)

        Parameters
        ----------
        newForcesFile: std::string const

        """
        return _analyses.JointReaction_setForcesFileName(self, newForcesFile)


    def getJointNames(self):
        """
        getJointNames(JointReaction self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::JointReaction const *

        """
        return _analyses.JointReaction_getJointNames(self)


    def setJointNames(self, jointNames):
        """
        setJointNames(JointReaction self, ArrayStr jointNames)

        Parameters
        ----------
        jointNames: OpenSim::Array< std::string > &

        """
        return _analyses.JointReaction_setJointNames(self, jointNames)


    def getOnBody(self):
        """
        getOnBody(JointReaction self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::JointReaction const *

        """
        return _analyses.JointReaction_getOnBody(self)


    def setOnBody(self, onBody):
        """
        setOnBody(JointReaction self, ArrayStr onBody)

        Parameters
        ----------
        onBody: OpenSim::Array< std::string > &

        """
        return _analyses.JointReaction_setOnBody(self, onBody)


    def getInFrame(self):
        """
        getInFrame(JointReaction self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::JointReaction const *

        """
        return _analyses.JointReaction_getInFrame(self)


    def setInFrame(self, inFrame):
        """
        setInFrame(JointReaction self, ArrayStr inFrame)

        Parameters
        ----------
        inFrame: OpenSim::Array< std::string > &

        """
        return _analyses.JointReaction_setInFrame(self, inFrame)


    def begin(self, s):
        """
        begin(JointReaction self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.JointReaction_begin(self, s)


    def step(self, s, setNumber):
        """
        step(JointReaction self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.JointReaction_step(self, s, setNumber)


    def end(self, s):
        """
        end(JointReaction self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.JointReaction_end(self, s)


    def printResults(self, *args):
        """
        printResults(JointReaction self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(JointReaction self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(JointReaction self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(JointReaction self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.JointReaction_printResults(self, *args)

JointReaction_swigregister = _analyses.JointReaction_swigregister
JointReaction_swigregister(JointReaction)

def JointReaction_safeDownCast(obj):
    """
    JointReaction_safeDownCast(OpenSimObject obj) -> JointReaction

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.JointReaction_safeDownCast(obj)

def JointReaction_getClassName():
    """JointReaction_getClassName() -> std::string const &"""
    return _analyses.JointReaction_getClassName()

class StatesReporter(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::StatesReporter class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatesReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatesReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StatesReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.StatesReporter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(StatesReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.StatesReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.StatesReporter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(StatesReporter self) -> StatesReporter

        Parameters
        ----------
        self: OpenSim::StatesReporter const *

        """
        return _analyses.StatesReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StatesReporter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::StatesReporter const *

        """
        return _analyses.StatesReporter_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::StatesReporter self, Model aModel=None) -> StatesReporter

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::StatesReporter self) -> StatesReporter
        __init__(OpenSim::StatesReporter self, std::string const & aFileName) -> StatesReporter

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::StatesReporter self, StatesReporter aObject) -> StatesReporter

        Parameters
        ----------
        aObject: OpenSim::StatesReporter const &

        """
        this = _analyses.new_StatesReporter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_StatesReporter
    __del__ = lambda self: None

    def getStatesStorage(self):
        """
        getStatesStorage(StatesReporter self) -> Storage

        Parameters
        ----------
        self: OpenSim::StatesReporter const *

        """
        return _analyses.StatesReporter_getStatesStorage(self)


    def updStatesStorage(self):
        """
        updStatesStorage(StatesReporter self) -> Storage

        Parameters
        ----------
        self: OpenSim::StatesReporter *

        """
        return _analyses.StatesReporter_updStatesStorage(self)


    def begin(self, s):
        """
        begin(StatesReporter self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.StatesReporter_begin(self, s)


    def step(self, s, setNumber):
        """
        step(StatesReporter self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.StatesReporter_step(self, s, setNumber)


    def end(self, s):
        """
        end(StatesReporter self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.StatesReporter_end(self, s)


    def printResults(self, *args):
        """
        printResults(StatesReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(StatesReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(StatesReporter self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(StatesReporter self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.StatesReporter_printResults(self, *args)

StatesReporter_swigregister = _analyses.StatesReporter_swigregister
StatesReporter_swigregister(StatesReporter)

def StatesReporter_safeDownCast(obj):
    """
    StatesReporter_safeDownCast(OpenSimObject obj) -> StatesReporter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.StatesReporter_safeDownCast(obj)

def StatesReporter_getClassName():
    """StatesReporter_getClassName() -> std::string const &"""
    return _analyses.StatesReporter_getClassName()

class InducedAccelerations(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::InducedAccelerations class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InducedAccelerations, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InducedAccelerations, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InducedAccelerations

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.InducedAccelerations_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(InducedAccelerations self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.InducedAccelerations_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.InducedAccelerations_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(InducedAccelerations self) -> InducedAccelerations

        Parameters
        ----------
        self: OpenSim::InducedAccelerations const *

        """
        return _analyses.InducedAccelerations_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InducedAccelerations self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::InducedAccelerations const *

        """
        return _analyses.InducedAccelerations_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::InducedAccelerations self, Model aModel=None) -> InducedAccelerations

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::InducedAccelerations self) -> InducedAccelerations
        __init__(OpenSim::InducedAccelerations self, std::string const & aFileName) -> InducedAccelerations

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::InducedAccelerations self, InducedAccelerations aObject) -> InducedAccelerations

        Parameters
        ----------
        aObject: OpenSim::InducedAccelerations const &

        """
        this = _analyses.new_InducedAccelerations(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_InducedAccelerations
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(InducedAccelerations self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.InducedAccelerations_setModel(self, aModel)


    def initialize(self, s):
        """
        initialize(InducedAccelerations self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.InducedAccelerations_initialize(self, s)


    def begin(self, s):
        """
        begin(InducedAccelerations self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.InducedAccelerations_begin(self, s)


    def step(self, s, stepNumber):
        """
        step(InducedAccelerations self, State s, int stepNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        stepNumber: int

        """
        return _analyses.InducedAccelerations_step(self, s, stepNumber)


    def end(self, s):
        """
        end(InducedAccelerations self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.InducedAccelerations_end(self, s)


    def printResults(self, *args):
        """
        printResults(InducedAccelerations self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(InducedAccelerations self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(InducedAccelerations self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(InducedAccelerations self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.InducedAccelerations_printResults(self, *args)


    def addContactConstraintFromExternalForce(self, externalForce):
        """
        addContactConstraintFromExternalForce(InducedAccelerations self, ExternalForce externalForce)

        Parameters
        ----------
        externalForce: OpenSim::ExternalForce *

        """
        return _analyses.InducedAccelerations_addContactConstraintFromExternalForce(self, externalForce)


    def applyContactConstraintAccordingToExternalForces(self, s):
        """
        applyContactConstraintAccordingToExternalForces(InducedAccelerations self, State s) -> ArrayBool

        Parameters
        ----------
        s: SimTK::State &

        """
        return _analyses.InducedAccelerations_applyContactConstraintAccordingToExternalForces(self, s)

InducedAccelerations_swigregister = _analyses.InducedAccelerations_swigregister
InducedAccelerations_swigregister(InducedAccelerations)

def InducedAccelerations_safeDownCast(obj):
    """
    InducedAccelerations_safeDownCast(OpenSimObject obj) -> InducedAccelerations

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.InducedAccelerations_safeDownCast(obj)

def InducedAccelerations_getClassName():
    """InducedAccelerations_getClassName() -> std::string const &"""
    return _analyses.InducedAccelerations_getClassName()

class ProbeReporter(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::ProbeReporter class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbeReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProbeReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ProbeReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.ProbeReporter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ProbeReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.ProbeReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.ProbeReporter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ProbeReporter self) -> ProbeReporter

        Parameters
        ----------
        self: OpenSim::ProbeReporter const *

        """
        return _analyses.ProbeReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ProbeReporter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ProbeReporter const *

        """
        return _analyses.ProbeReporter_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ProbeReporter self, Model aModel=None) -> ProbeReporter

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::ProbeReporter self) -> ProbeReporter
        __init__(OpenSim::ProbeReporter self, std::string const & aFileName) -> ProbeReporter

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::ProbeReporter self, ProbeReporter aObject) -> ProbeReporter

        Parameters
        ----------
        aObject: OpenSim::ProbeReporter const &

        """
        this = _analyses.new_ProbeReporter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_ProbeReporter
    __del__ = lambda self: None

    def getProbeStorage(self):
        """
        getProbeStorage(ProbeReporter self) -> Storage

        Parameters
        ----------
        self: OpenSim::ProbeReporter const *

        """
        return _analyses.ProbeReporter_getProbeStorage(self)


    def updProbeStorage(self):
        """
        updProbeStorage(ProbeReporter self) -> Storage

        Parameters
        ----------
        self: OpenSim::ProbeReporter *

        """
        return _analyses.ProbeReporter_updProbeStorage(self)


    def setModel(self, aModel):
        """
        setModel(ProbeReporter self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _analyses.ProbeReporter_setModel(self, aModel)


    def begin(self, s):
        """
        begin(ProbeReporter self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.ProbeReporter_begin(self, s)


    def step(self, s, setNumber):
        """
        step(ProbeReporter self, State s, int setNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        setNumber: int

        """
        return _analyses.ProbeReporter_step(self, s, setNumber)


    def end(self, s):
        """
        end(ProbeReporter self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _analyses.ProbeReporter_end(self, s)


    def disableIntegrationOnlyProbes(self):
        """
        disableIntegrationOnlyProbes(ProbeReporter self)

        Parameters
        ----------
        self: OpenSim::ProbeReporter *

        """
        return _analyses.ProbeReporter_disableIntegrationOnlyProbes(self)


    def printResults(self, *args):
        """
        printResults(ProbeReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(ProbeReporter self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(ProbeReporter self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(ProbeReporter self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _analyses.ProbeReporter_printResults(self, *args)

ProbeReporter_swigregister = _analyses.ProbeReporter_swigregister
ProbeReporter_swigregister(ProbeReporter)

def ProbeReporter_safeDownCast(obj):
    """
    ProbeReporter_safeDownCast(OpenSimObject obj) -> ProbeReporter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.ProbeReporter_safeDownCast(obj)

def ProbeReporter_getClassName():
    """ProbeReporter_getClassName() -> std::string const &"""
    return _analyses.ProbeReporter_getClassName()

class OutputReporter(opensim.simulation.Analysis):
    """Proxy of C++ OpenSim::OutputReporter class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Analysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> OutputReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _analyses.OutputReporter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(OutputReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _analyses.OutputReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _analyses.OutputReporter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(OutputReporter self) -> OutputReporter

        Parameters
        ----------
        self: OpenSim::OutputReporter const *

        """
        return _analyses.OutputReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(OutputReporter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::OutputReporter const *

        """
        return _analyses.OutputReporter_getConcreteClassName(self)


    def copyProperty_output_paths(self, source):
        """
        copyProperty_output_paths(OutputReporter self, OutputReporter source)

        Parameters
        ----------
        source: OpenSim::OutputReporter::Self const &

        """
        return _analyses.OutputReporter_copyProperty_output_paths(self, source)


    def get_output_paths(self, i):
        """
        get_output_paths(OutputReporter self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _analyses.OutputReporter_get_output_paths(self, i)


    def upd_output_paths(self, i):
        """
        upd_output_paths(OutputReporter self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _analyses.OutputReporter_upd_output_paths(self, i)


    def set_output_paths(self, i, value):
        """
        set_output_paths(OutputReporter self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _analyses.OutputReporter_set_output_paths(self, i, value)


    def append_output_paths(self, value):
        """
        append_output_paths(OutputReporter self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _analyses.OutputReporter_append_output_paths(self, value)


    def constructProperty_output_paths(self):
        """
        constructProperty_output_paths(OutputReporter self)

        Parameters
        ----------
        self: OpenSim::OutputReporter *

        """
        return _analyses.OutputReporter_constructProperty_output_paths(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::OutputReporter self, Model model=None) -> OutputReporter

        Parameters
        ----------
        model: OpenSim::Model *

        __init__(OpenSim::OutputReporter self) -> OutputReporter
        __init__(OpenSim::OutputReporter self, std::string const & fileName) -> OutputReporter

        Parameters
        ----------
        fileName: std::string const &

        """
        this = _analyses.new_OutputReporter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _analyses.delete_OutputReporter
    __del__ = lambda self: None
OutputReporter_swigregister = _analyses.OutputReporter_swigregister
OutputReporter_swigregister(OutputReporter)

def OutputReporter_safeDownCast(obj):
    """
    OutputReporter_safeDownCast(OpenSimObject obj) -> OutputReporter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _analyses.OutputReporter_safeDownCast(obj)

def OutputReporter_getClassName():
    """OutputReporter_getClassName() -> std::string const &"""
    return _analyses.OutputReporter_getClassName()

# This file is compatible with both classic and new-style classes.


