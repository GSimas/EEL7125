# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_actuators')).lstrip('.')
        return importlib.import_module(mname)
    _actuators = swig_import_helper()
    del swig_import_helper
elif version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_actuators', [dirname(__file__)])
        except ImportError:
            import _actuators
            return _actuators
        if fp is not None:
            try:
                _mod = imp.load_module('_actuators', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _actuators = swig_import_helper()
    del swig_import_helper
else:
    import _actuators
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _actuators.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _actuators.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _actuators.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _actuators.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _actuators.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _actuators.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _actuators.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _actuators.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _actuators.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _actuators.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _actuators.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _actuators.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _actuators.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import opensim.simulation
import opensim.common
import opensim.simbody
class CoordinateActuator(opensim.simulation.ScalarActuator):
    """Proxy of C++ OpenSim::CoordinateActuator class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.ScalarActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.ScalarActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.CoordinateActuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CoordinateActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.CoordinateActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.CoordinateActuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CoordinateActuator self) -> CoordinateActuator

        Parameters
        ----------
        self: OpenSim::CoordinateActuator const *

        """
        return _actuators.CoordinateActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CoordinateActuator const *

        """
        return _actuators.CoordinateActuator_getConcreteClassName(self)


    def copyProperty_coordinate(self, source):
        """
        copyProperty_coordinate(CoordinateActuator self, CoordinateActuator source)

        Parameters
        ----------
        source: OpenSim::CoordinateActuator::Self const &

        """
        return _actuators.CoordinateActuator_copyProperty_coordinate(self, source)


    def append_coordinate(self, value):
        """
        append_coordinate(CoordinateActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.CoordinateActuator_append_coordinate(self, value)


    def constructProperty_coordinate(self, *args):
        """
        constructProperty_coordinate(CoordinateActuator self)
        constructProperty_coordinate(CoordinateActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.CoordinateActuator_constructProperty_coordinate(self, *args)


    def get_coordinate(self, *args):
        """
        get_coordinate(CoordinateActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate(CoordinateActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CoordinateActuator const *

        """
        return _actuators.CoordinateActuator_get_coordinate(self, *args)


    def upd_coordinate(self, *args):
        """
        upd_coordinate(CoordinateActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate(CoordinateActuator self) -> std::string &

        Parameters
        ----------
        self: OpenSim::CoordinateActuator *

        """
        return _actuators.CoordinateActuator_upd_coordinate(self, *args)


    def set_coordinate(self, *args):
        """
        set_coordinate(CoordinateActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate(CoordinateActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.CoordinateActuator_set_coordinate(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(CoordinateActuator self, CoordinateActuator source)

        Parameters
        ----------
        source: OpenSim::CoordinateActuator::Self const &

        """
        return _actuators.CoordinateActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(CoordinateActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.CoordinateActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(CoordinateActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.CoordinateActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(CoordinateActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(CoordinateActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::CoordinateActuator const *

        """
        return _actuators.CoordinateActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(CoordinateActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(CoordinateActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::CoordinateActuator *

        """
        return _actuators.CoordinateActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(CoordinateActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(CoordinateActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.CoordinateActuator_set_optimal_force(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::CoordinateActuator self, std::string const & coordinateName) -> CoordinateActuator

        Parameters
        ----------
        coordinateName: std::string const &

        __init__(OpenSim::CoordinateActuator self) -> CoordinateActuator
        """
        this = _actuators.new_CoordinateActuator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setOptimalForce(self, optimalForce):
        """
        setOptimalForce(CoordinateActuator self, double optimalForce)

        Parameters
        ----------
        optimalForce: double

        """
        return _actuators.CoordinateActuator_setOptimalForce(self, optimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(CoordinateActuator self) -> double

        Parameters
        ----------
        self: OpenSim::CoordinateActuator const *

        """
        return _actuators.CoordinateActuator_getOptimalForce(self)


    def CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce=1, aIncludeLockedAndConstrainedCoordinates=True):
        """
        CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1, bool aIncludeLockedAndConstrainedCoordinates=True) -> ForceSet

        Parameters
        ----------
        s: SimTK::State const &
        aModel: OpenSim::Model &
        aOptimalForce: double
        aIncludeLockedAndConstrainedCoordinates: bool

        CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1) -> ForceSet

        Parameters
        ----------
        s: SimTK::State const &
        aModel: OpenSim::Model &
        aOptimalForce: double

        CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel) -> ForceSet

        Parameters
        ----------
        s: SimTK::State const &
        aModel: OpenSim::Model &

        """
        return _actuators.CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce, aIncludeLockedAndConstrainedCoordinates)

    CreateForceSetOfCoordinateActuatorsForModel = staticmethod(CreateForceSetOfCoordinateActuatorsForModel)

    def isCoordinateValid(self):
        """
        isCoordinateValid(CoordinateActuator self) -> bool

        Parameters
        ----------
        self: OpenSim::CoordinateActuator const *

        """
        return _actuators.CoordinateActuator_isCoordinateValid(self)


    def getSpeed(self, s):
        """
        getSpeed(CoordinateActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.CoordinateActuator_getSpeed(self, s)


    def setCoordinate(self, aCoordinate):
        """
        setCoordinate(CoordinateActuator self, Coordinate aCoordinate)

        Parameters
        ----------
        aCoordinate: OpenSim::Coordinate *

        """
        return _actuators.CoordinateActuator_setCoordinate(self, aCoordinate)


    def getCoordinate(self):
        """
        getCoordinate(CoordinateActuator self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::CoordinateActuator const *

        """
        return _actuators.CoordinateActuator_getCoordinate(self)

    __swig_destroy__ = _actuators.delete_CoordinateActuator
    __del__ = lambda self: None
CoordinateActuator_swigregister = _actuators.CoordinateActuator_swigregister
CoordinateActuator_swigregister(CoordinateActuator)

def CoordinateActuator_safeDownCast(obj):
    """
    CoordinateActuator_safeDownCast(OpenSimObject obj) -> CoordinateActuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.CoordinateActuator_safeDownCast(obj)

def CoordinateActuator_getClassName():
    """CoordinateActuator_getClassName() -> std::string const &"""
    return _actuators.CoordinateActuator_getClassName()

def CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce=1, aIncludeLockedAndConstrainedCoordinates=True):
    """
    CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1, bool aIncludeLockedAndConstrainedCoordinates=True) -> ForceSet

    Parameters
    ----------
    s: SimTK::State const &
    aModel: OpenSim::Model &
    aOptimalForce: double
    aIncludeLockedAndConstrainedCoordinates: bool

    CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1) -> ForceSet

    Parameters
    ----------
    s: SimTK::State const &
    aModel: OpenSim::Model &
    aOptimalForce: double

    CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel) -> ForceSet

    Parameters
    ----------
    s: SimTK::State const &
    aModel: OpenSim::Model &

    """
    return _actuators.CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce, aIncludeLockedAndConstrainedCoordinates)

class PointActuator(opensim.simulation.ScalarActuator):
    """Proxy of C++ OpenSim::PointActuator class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.ScalarActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.ScalarActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.PointActuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PointActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.PointActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.PointActuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PointActuator self) -> PointActuator

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_getConcreteClassName(self)


    def copyProperty_body(self, source):
        """
        copyProperty_body(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_body(self, source)


    def append_body(self, value):
        """
        append_body(PointActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointActuator_append_body(self, value)


    def constructProperty_body(self, *args):
        """
        constructProperty_body(PointActuator self)
        constructProperty_body(PointActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.PointActuator_constructProperty_body(self, *args)


    def get_body(self, *args):
        """
        get_body(PointActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_body(PointActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_get_body(self, *args)


    def upd_body(self, *args):
        """
        upd_body(PointActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_body(PointActuator self) -> std::string &

        Parameters
        ----------
        self: OpenSim::PointActuator *

        """
        return _actuators.PointActuator_upd_body(self, *args)


    def set_body(self, *args):
        """
        set_body(PointActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_body(PointActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointActuator_set_body(self, *args)


    def copyProperty_point(self, source):
        """
        copyProperty_point(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_point(self, source)


    def append_point(self, value):
        """
        append_point(PointActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_append_point(self, value)


    def constructProperty_point(self, initValue):
        """
        constructProperty_point(PointActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_constructProperty_point(self, initValue)


    def get_point(self, *args):
        """
        get_point(PointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point(PointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_get_point(self, *args)


    def upd_point(self, *args):
        """
        upd_point(PointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point(PointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointActuator *

        """
        return _actuators.PointActuator_upd_point(self, *args)


    def set_point(self, *args):
        """
        set_point(PointActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point(PointActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_set_point(self, *args)


    def copyProperty_point_is_global(self, source):
        """
        copyProperty_point_is_global(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_point_is_global(self, source)


    def append_point_is_global(self, value):
        """
        append_point_is_global(PointActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointActuator_append_point_is_global(self, value)


    def constructProperty_point_is_global(self, initValue):
        """
        constructProperty_point_is_global(PointActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.PointActuator_constructProperty_point_is_global(self, initValue)


    def get_point_is_global(self, *args):
        """
        get_point_is_global(PointActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_point_is_global(PointActuator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_get_point_is_global(self, *args)


    def upd_point_is_global(self, *args):
        """
        upd_point_is_global(PointActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_point_is_global(PointActuator self) -> bool &

        Parameters
        ----------
        self: OpenSim::PointActuator *

        """
        return _actuators.PointActuator_upd_point_is_global(self, *args)


    def set_point_is_global(self, *args):
        """
        set_point_is_global(PointActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_point_is_global(PointActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointActuator_set_point_is_global(self, *args)


    def copyProperty_direction(self, source):
        """
        copyProperty_direction(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_direction(self, source)


    def append_direction(self, value):
        """
        append_direction(PointActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_append_direction(self, value)


    def constructProperty_direction(self, initValue):
        """
        constructProperty_direction(PointActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_constructProperty_direction(self, initValue)


    def get_direction(self, *args):
        """
        get_direction(PointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_direction(PointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_get_direction(self, *args)


    def upd_direction(self, *args):
        """
        upd_direction(PointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_direction(PointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointActuator *

        """
        return _actuators.PointActuator_upd_direction(self, *args)


    def set_direction(self, *args):
        """
        set_direction(PointActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_direction(PointActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_set_direction(self, *args)


    def copyProperty_force_is_global(self, source):
        """
        copyProperty_force_is_global(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_force_is_global(self, source)


    def append_force_is_global(self, value):
        """
        append_force_is_global(PointActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointActuator_append_force_is_global(self, value)


    def constructProperty_force_is_global(self, initValue):
        """
        constructProperty_force_is_global(PointActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.PointActuator_constructProperty_force_is_global(self, initValue)


    def get_force_is_global(self, *args):
        """
        get_force_is_global(PointActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_force_is_global(PointActuator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_get_force_is_global(self, *args)


    def upd_force_is_global(self, *args):
        """
        upd_force_is_global(PointActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_force_is_global(PointActuator self) -> bool &

        Parameters
        ----------
        self: OpenSim::PointActuator *

        """
        return _actuators.PointActuator_upd_force_is_global(self, *args)


    def set_force_is_global(self, *args):
        """
        set_force_is_global(PointActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_force_is_global(PointActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointActuator_set_force_is_global(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(PointActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.PointActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(PointActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.PointActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(PointActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(PointActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(PointActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(PointActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::PointActuator *

        """
        return _actuators.PointActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(PointActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(PointActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.PointActuator_set_optimal_force(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointActuator self, std::string const & bodyName) -> PointActuator

        Parameters
        ----------
        bodyName: std::string const &

        __init__(OpenSim::PointActuator self) -> PointActuator
        """
        this = _actuators.new_PointActuator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setOptimalForce(self, aOptimalForce):
        """
        setOptimalForce(PointActuator self, double aOptimalForce)

        Parameters
        ----------
        aOptimalForce: double

        """
        return _actuators.PointActuator_setOptimalForce(self, aOptimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(PointActuator self) -> double

        Parameters
        ----------
        self: OpenSim::PointActuator const *

        """
        return _actuators.PointActuator_getOptimalForce(self)

    __swig_destroy__ = _actuators.delete_PointActuator
    __del__ = lambda self: None
PointActuator_swigregister = _actuators.PointActuator_swigregister
PointActuator_swigregister(PointActuator)

def PointActuator_safeDownCast(obj):
    """
    PointActuator_safeDownCast(OpenSimObject obj) -> PointActuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.PointActuator_safeDownCast(obj)

def PointActuator_getClassName():
    """PointActuator_getClassName() -> std::string const &"""
    return _actuators.PointActuator_getClassName()

class TorqueActuator(opensim.simulation.ScalarActuator):
    """Proxy of C++ OpenSim::TorqueActuator class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.ScalarActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TorqueActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.ScalarActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TorqueActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TorqueActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.TorqueActuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TorqueActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.TorqueActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.TorqueActuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TorqueActuator self) -> TorqueActuator

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TorqueActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_getConcreteClassName(self)


    def copyProperty_bodyA(self, source):
        """
        copyProperty_bodyA(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_bodyA(self, source)


    def append_bodyA(self, value):
        """
        append_bodyA(TorqueActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.TorqueActuator_append_bodyA(self, value)


    def constructProperty_bodyA(self, *args):
        """
        constructProperty_bodyA(TorqueActuator self)
        constructProperty_bodyA(TorqueActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.TorqueActuator_constructProperty_bodyA(self, *args)


    def get_bodyA(self, *args):
        """
        get_bodyA(TorqueActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_bodyA(TorqueActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_get_bodyA(self, *args)


    def upd_bodyA(self, *args):
        """
        upd_bodyA(TorqueActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_bodyA(TorqueActuator self) -> std::string &

        Parameters
        ----------
        self: OpenSim::TorqueActuator *

        """
        return _actuators.TorqueActuator_upd_bodyA(self, *args)


    def set_bodyA(self, *args):
        """
        set_bodyA(TorqueActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_bodyA(TorqueActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.TorqueActuator_set_bodyA(self, *args)


    def copyProperty_bodyB(self, source):
        """
        copyProperty_bodyB(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_bodyB(self, source)


    def append_bodyB(self, value):
        """
        append_bodyB(TorqueActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.TorqueActuator_append_bodyB(self, value)


    def constructProperty_bodyB(self, *args):
        """
        constructProperty_bodyB(TorqueActuator self)
        constructProperty_bodyB(TorqueActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.TorqueActuator_constructProperty_bodyB(self, *args)


    def get_bodyB(self, *args):
        """
        get_bodyB(TorqueActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_bodyB(TorqueActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_get_bodyB(self, *args)


    def upd_bodyB(self, *args):
        """
        upd_bodyB(TorqueActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_bodyB(TorqueActuator self) -> std::string &

        Parameters
        ----------
        self: OpenSim::TorqueActuator *

        """
        return _actuators.TorqueActuator_upd_bodyB(self, *args)


    def set_bodyB(self, *args):
        """
        set_bodyB(TorqueActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_bodyB(TorqueActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.TorqueActuator_set_bodyB(self, *args)


    def copyProperty_torque_is_global(self, source):
        """
        copyProperty_torque_is_global(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_torque_is_global(self, source)


    def append_torque_is_global(self, value):
        """
        append_torque_is_global(TorqueActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.TorqueActuator_append_torque_is_global(self, value)


    def constructProperty_torque_is_global(self, initValue):
        """
        constructProperty_torque_is_global(TorqueActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.TorqueActuator_constructProperty_torque_is_global(self, initValue)


    def get_torque_is_global(self, *args):
        """
        get_torque_is_global(TorqueActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_torque_is_global(TorqueActuator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_get_torque_is_global(self, *args)


    def upd_torque_is_global(self, *args):
        """
        upd_torque_is_global(TorqueActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_torque_is_global(TorqueActuator self) -> bool &

        Parameters
        ----------
        self: OpenSim::TorqueActuator *

        """
        return _actuators.TorqueActuator_upd_torque_is_global(self, *args)


    def set_torque_is_global(self, *args):
        """
        set_torque_is_global(TorqueActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_torque_is_global(TorqueActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.TorqueActuator_set_torque_is_global(self, *args)


    def copyProperty_axis(self, source):
        """
        copyProperty_axis(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_axis(self, source)


    def append_axis(self, value):
        """
        append_axis(TorqueActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.TorqueActuator_append_axis(self, value)


    def constructProperty_axis(self, initValue):
        """
        constructProperty_axis(TorqueActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.TorqueActuator_constructProperty_axis(self, initValue)


    def get_axis(self, *args):
        """
        get_axis(TorqueActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_axis(TorqueActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_get_axis(self, *args)


    def upd_axis(self, *args):
        """
        upd_axis(TorqueActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_axis(TorqueActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::TorqueActuator *

        """
        return _actuators.TorqueActuator_upd_axis(self, *args)


    def set_axis(self, *args):
        """
        set_axis(TorqueActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_axis(TorqueActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.TorqueActuator_set_axis(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(TorqueActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.TorqueActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(TorqueActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.TorqueActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(TorqueActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(TorqueActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(TorqueActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(TorqueActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::TorqueActuator *

        """
        return _actuators.TorqueActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(TorqueActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(TorqueActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.TorqueActuator_set_optimal_force(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::TorqueActuator self) -> TorqueActuator
        __init__(OpenSim::TorqueActuator self, PhysicalFrame bodyA, PhysicalFrame bodyB, Vec3 axis, bool axisInGround=True) -> TorqueActuator

        Parameters
        ----------
        bodyA: OpenSim::PhysicalFrame const &
        bodyB: OpenSim::PhysicalFrame const &
        axis: SimTK::Vec3 const &
        axisInGround: bool

        __init__(OpenSim::TorqueActuator self, PhysicalFrame bodyA, PhysicalFrame bodyB, Vec3 axis) -> TorqueActuator

        Parameters
        ----------
        bodyA: OpenSim::PhysicalFrame const &
        bodyB: OpenSim::PhysicalFrame const &
        axis: SimTK::Vec3 const &

        """
        this = _actuators.new_TorqueActuator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setAxis(self, axis):
        """
        setAxis(TorqueActuator self, Vec3 axis)

        Parameters
        ----------
        axis: SimTK::Vec3 const &

        """
        return _actuators.TorqueActuator_setAxis(self, axis)


    def getAxis(self):
        """
        getAxis(TorqueActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_getAxis(self)


    def setTorqueIsGlobal(self, isGlobal):
        """
        setTorqueIsGlobal(TorqueActuator self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _actuators.TorqueActuator_setTorqueIsGlobal(self, isGlobal)


    def getTorqueIsGlobal(self):
        """
        getTorqueIsGlobal(TorqueActuator self) -> bool

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_getTorqueIsGlobal(self)


    def setOptimalForce(self, optimalForce):
        """
        setOptimalForce(TorqueActuator self, double optimalForce)

        Parameters
        ----------
        optimalForce: double

        """
        return _actuators.TorqueActuator_setOptimalForce(self, optimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(TorqueActuator self) -> double

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_getOptimalForce(self)


    def setBodyA(self, body):
        """
        setBodyA(TorqueActuator self, PhysicalFrame body)

        Parameters
        ----------
        body: OpenSim::PhysicalFrame const &

        """
        return _actuators.TorqueActuator_setBodyA(self, body)


    def setBodyB(self, body):
        """
        setBodyB(TorqueActuator self, PhysicalFrame body)

        Parameters
        ----------
        body: OpenSim::PhysicalFrame const &

        """
        return _actuators.TorqueActuator_setBodyB(self, body)


    def getBodyA(self):
        """
        getBodyA(TorqueActuator self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_getBodyA(self)


    def getBodyB(self):
        """
        getBodyB(TorqueActuator self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::TorqueActuator const *

        """
        return _actuators.TorqueActuator_getBodyB(self)

    __swig_destroy__ = _actuators.delete_TorqueActuator
    __del__ = lambda self: None
TorqueActuator_swigregister = _actuators.TorqueActuator_swigregister
TorqueActuator_swigregister(TorqueActuator)

def TorqueActuator_safeDownCast(obj):
    """
    TorqueActuator_safeDownCast(OpenSimObject obj) -> TorqueActuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.TorqueActuator_safeDownCast(obj)

def TorqueActuator_getClassName():
    """TorqueActuator_getClassName() -> std::string const &"""
    return _actuators.TorqueActuator_getClassName()

class BodyActuator(opensim.simulation.Actuator):
    """Proxy of C++ OpenSim::BodyActuator class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Actuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Actuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodyActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.BodyActuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(BodyActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.BodyActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.BodyActuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(BodyActuator self) -> BodyActuator

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodyActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_getConcreteClassName(self)


    def copyProperty_point(self, source):
        """
        copyProperty_point(BodyActuator self, BodyActuator source)

        Parameters
        ----------
        source: OpenSim::BodyActuator::Self const &

        """
        return _actuators.BodyActuator_copyProperty_point(self, source)


    def append_point(self, value):
        """
        append_point(BodyActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.BodyActuator_append_point(self, value)


    def constructProperty_point(self, initValue):
        """
        constructProperty_point(BodyActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.BodyActuator_constructProperty_point(self, initValue)


    def get_point(self, *args):
        """
        get_point(BodyActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point(BodyActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_get_point(self, *args)


    def upd_point(self, *args):
        """
        upd_point(BodyActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point(BodyActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BodyActuator *

        """
        return _actuators.BodyActuator_upd_point(self, *args)


    def set_point(self, *args):
        """
        set_point(BodyActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point(BodyActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.BodyActuator_set_point(self, *args)


    def copyProperty_point_is_global(self, source):
        """
        copyProperty_point_is_global(BodyActuator self, BodyActuator source)

        Parameters
        ----------
        source: OpenSim::BodyActuator::Self const &

        """
        return _actuators.BodyActuator_copyProperty_point_is_global(self, source)


    def append_point_is_global(self, value):
        """
        append_point_is_global(BodyActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.BodyActuator_append_point_is_global(self, value)


    def constructProperty_point_is_global(self, initValue):
        """
        constructProperty_point_is_global(BodyActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.BodyActuator_constructProperty_point_is_global(self, initValue)


    def get_point_is_global(self, *args):
        """
        get_point_is_global(BodyActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_point_is_global(BodyActuator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_get_point_is_global(self, *args)


    def upd_point_is_global(self, *args):
        """
        upd_point_is_global(BodyActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_point_is_global(BodyActuator self) -> bool &

        Parameters
        ----------
        self: OpenSim::BodyActuator *

        """
        return _actuators.BodyActuator_upd_point_is_global(self, *args)


    def set_point_is_global(self, *args):
        """
        set_point_is_global(BodyActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_point_is_global(BodyActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.BodyActuator_set_point_is_global(self, *args)


    def copyProperty_spatial_force_is_global(self, source):
        """
        copyProperty_spatial_force_is_global(BodyActuator self, BodyActuator source)

        Parameters
        ----------
        source: OpenSim::BodyActuator::Self const &

        """
        return _actuators.BodyActuator_copyProperty_spatial_force_is_global(self, source)


    def append_spatial_force_is_global(self, value):
        """
        append_spatial_force_is_global(BodyActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.BodyActuator_append_spatial_force_is_global(self, value)


    def constructProperty_spatial_force_is_global(self, initValue):
        """
        constructProperty_spatial_force_is_global(BodyActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.BodyActuator_constructProperty_spatial_force_is_global(self, initValue)


    def get_spatial_force_is_global(self, *args):
        """
        get_spatial_force_is_global(BodyActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_spatial_force_is_global(BodyActuator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_get_spatial_force_is_global(self, *args)


    def upd_spatial_force_is_global(self, *args):
        """
        upd_spatial_force_is_global(BodyActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_spatial_force_is_global(BodyActuator self) -> bool &

        Parameters
        ----------
        self: OpenSim::BodyActuator *

        """
        return _actuators.BodyActuator_upd_spatial_force_is_global(self, *args)


    def set_spatial_force_is_global(self, *args):
        """
        set_spatial_force_is_global(BodyActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_spatial_force_is_global(BodyActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.BodyActuator_set_spatial_force_is_global(self, *args)

    __swig_setmethods__["PropertyIndex_socket_body"] = _actuators.BodyActuator_PropertyIndex_socket_body_set
    __swig_getmethods__["PropertyIndex_socket_body"] = _actuators.BodyActuator_PropertyIndex_socket_body_get
    if _newclass:
        PropertyIndex_socket_body = _swig_property(_actuators.BodyActuator_PropertyIndex_socket_body_get, _actuators.BodyActuator_PropertyIndex_socket_body_set)

    def connectSocket_body(self, object):
        """
        connectSocket_body(BodyActuator self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _actuators.BodyActuator_connectSocket_body(self, object)


    def __init__(self, *args):
        """
        __init__(OpenSim::BodyActuator self) -> BodyActuator
        __init__(OpenSim::BodyActuator self, Body body, Vec3 point, bool pointIsGlobal=False, bool spatialForceIsGlobal=True) -> BodyActuator

        Parameters
        ----------
        body: OpenSim::Body const &
        point: SimTK::Vec3 const &
        pointIsGlobal: bool
        spatialForceIsGlobal: bool

        __init__(OpenSim::BodyActuator self, Body body, Vec3 point, bool pointIsGlobal=False) -> BodyActuator

        Parameters
        ----------
        body: OpenSim::Body const &
        point: SimTK::Vec3 const &
        pointIsGlobal: bool

        __init__(OpenSim::BodyActuator self, Body body, Vec3 point) -> BodyActuator

        Parameters
        ----------
        body: OpenSim::Body const &
        point: SimTK::Vec3 const &

        __init__(OpenSim::BodyActuator self, Body body) -> BodyActuator

        Parameters
        ----------
        body: OpenSim::Body const &

        """
        this = _actuators.new_BodyActuator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setPoint(self, point):
        """
        setPoint(BodyActuator self, Vec3 point)

        Parameters
        ----------
        point: SimTK::Vec3 &

        """
        return _actuators.BodyActuator_setPoint(self, point)


    def getPoint(self):
        """
        getPoint(BodyActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_getPoint(self)


    def setPointForceIsGlobal(self, isGlobal):
        """
        setPointForceIsGlobal(BodyActuator self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _actuators.BodyActuator_setPointForceIsGlobal(self, isGlobal)


    def getPointIsGlobal(self):
        """
        getPointIsGlobal(BodyActuator self) -> bool

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_getPointIsGlobal(self)


    def setSpatialForceIsGlobal(self, isGlobal):
        """
        setSpatialForceIsGlobal(BodyActuator self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _actuators.BodyActuator_setSpatialForceIsGlobal(self, isGlobal)


    def getSpatialForceIsGlobal(self):
        """
        getSpatialForceIsGlobal(BodyActuator self) -> bool

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_getSpatialForceIsGlobal(self)


    def setBody(self, body):
        """
        setBody(BodyActuator self, Body body)

        Parameters
        ----------
        body: OpenSim::Body const &

        """
        return _actuators.BodyActuator_setBody(self, body)


    def getBody(self):
        """
        getBody(BodyActuator self) -> Body

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_getBody(self)


    def setBodyName(self, name):
        """
        setBodyName(BodyActuator self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _actuators.BodyActuator_setBodyName(self, name)


    def getBodyName(self):
        """
        getBodyName(BodyActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::BodyActuator const *

        """
        return _actuators.BodyActuator_getBodyName(self)

    __swig_destroy__ = _actuators.delete_BodyActuator
    __del__ = lambda self: None
BodyActuator_swigregister = _actuators.BodyActuator_swigregister
BodyActuator_swigregister(BodyActuator)

def BodyActuator_safeDownCast(obj):
    """
    BodyActuator_safeDownCast(OpenSimObject obj) -> BodyActuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.BodyActuator_safeDownCast(obj)

def BodyActuator_getClassName():
    """BodyActuator_getClassName() -> std::string const &"""
    return _actuators.BodyActuator_getClassName()

class PointToPointActuator(opensim.simulation.ScalarActuator):
    """Proxy of C++ OpenSim::PointToPointActuator class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.ScalarActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointToPointActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.ScalarActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointToPointActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointToPointActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.PointToPointActuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PointToPointActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.PointToPointActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.PointToPointActuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PointToPointActuator self) -> PointToPointActuator

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointToPointActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_getConcreteClassName(self)


    def copyProperty_bodyA(self, source):
        """
        copyProperty_bodyA(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_bodyA(self, source)


    def append_bodyA(self, value):
        """
        append_bodyA(PointToPointActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointToPointActuator_append_bodyA(self, value)


    def constructProperty_bodyA(self, *args):
        """
        constructProperty_bodyA(PointToPointActuator self)
        constructProperty_bodyA(PointToPointActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.PointToPointActuator_constructProperty_bodyA(self, *args)


    def get_bodyA(self, *args):
        """
        get_bodyA(PointToPointActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_bodyA(PointToPointActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_get_bodyA(self, *args)


    def upd_bodyA(self, *args):
        """
        upd_bodyA(PointToPointActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_bodyA(PointToPointActuator self) -> std::string &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator *

        """
        return _actuators.PointToPointActuator_upd_bodyA(self, *args)


    def set_bodyA(self, *args):
        """
        set_bodyA(PointToPointActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_bodyA(PointToPointActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointToPointActuator_set_bodyA(self, *args)


    def copyProperty_bodyB(self, source):
        """
        copyProperty_bodyB(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_bodyB(self, source)


    def append_bodyB(self, value):
        """
        append_bodyB(PointToPointActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointToPointActuator_append_bodyB(self, value)


    def constructProperty_bodyB(self, *args):
        """
        constructProperty_bodyB(PointToPointActuator self)
        constructProperty_bodyB(PointToPointActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.PointToPointActuator_constructProperty_bodyB(self, *args)


    def get_bodyB(self, *args):
        """
        get_bodyB(PointToPointActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_bodyB(PointToPointActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_get_bodyB(self, *args)


    def upd_bodyB(self, *args):
        """
        upd_bodyB(PointToPointActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_bodyB(PointToPointActuator self) -> std::string &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator *

        """
        return _actuators.PointToPointActuator_upd_bodyB(self, *args)


    def set_bodyB(self, *args):
        """
        set_bodyB(PointToPointActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_bodyB(PointToPointActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointToPointActuator_set_bodyB(self, *args)


    def copyProperty_points_are_global(self, source):
        """
        copyProperty_points_are_global(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_points_are_global(self, source)


    def append_points_are_global(self, value):
        """
        append_points_are_global(PointToPointActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointToPointActuator_append_points_are_global(self, value)


    def constructProperty_points_are_global(self, initValue):
        """
        constructProperty_points_are_global(PointToPointActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.PointToPointActuator_constructProperty_points_are_global(self, initValue)


    def get_points_are_global(self, *args):
        """
        get_points_are_global(PointToPointActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_points_are_global(PointToPointActuator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_get_points_are_global(self, *args)


    def upd_points_are_global(self, *args):
        """
        upd_points_are_global(PointToPointActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_points_are_global(PointToPointActuator self) -> bool &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator *

        """
        return _actuators.PointToPointActuator_upd_points_are_global(self, *args)


    def set_points_are_global(self, *args):
        """
        set_points_are_global(PointToPointActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_points_are_global(PointToPointActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointToPointActuator_set_points_are_global(self, *args)


    def copyProperty_pointA(self, source):
        """
        copyProperty_pointA(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_pointA(self, source)


    def append_pointA(self, value):
        """
        append_pointA(PointToPointActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_append_pointA(self, value)


    def constructProperty_pointA(self, initValue):
        """
        constructProperty_pointA(PointToPointActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_constructProperty_pointA(self, initValue)


    def get_pointA(self, *args):
        """
        get_pointA(PointToPointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_pointA(PointToPointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_get_pointA(self, *args)


    def upd_pointA(self, *args):
        """
        upd_pointA(PointToPointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_pointA(PointToPointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointActuator *

        """
        return _actuators.PointToPointActuator_upd_pointA(self, *args)


    def set_pointA(self, *args):
        """
        set_pointA(PointToPointActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_pointA(PointToPointActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_set_pointA(self, *args)


    def copyProperty_pointB(self, source):
        """
        copyProperty_pointB(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_pointB(self, source)


    def append_pointB(self, value):
        """
        append_pointB(PointToPointActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_append_pointB(self, value)


    def constructProperty_pointB(self, initValue):
        """
        constructProperty_pointB(PointToPointActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_constructProperty_pointB(self, initValue)


    def get_pointB(self, *args):
        """
        get_pointB(PointToPointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_pointB(PointToPointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_get_pointB(self, *args)


    def upd_pointB(self, *args):
        """
        upd_pointB(PointToPointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_pointB(PointToPointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointActuator *

        """
        return _actuators.PointToPointActuator_upd_pointB(self, *args)


    def set_pointB(self, *args):
        """
        set_pointB(PointToPointActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_pointB(PointToPointActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_set_pointB(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(PointToPointActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.PointToPointActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(PointToPointActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.PointToPointActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(PointToPointActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(PointToPointActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(PointToPointActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(PointToPointActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::PointToPointActuator *

        """
        return _actuators.PointToPointActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(PointToPointActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(PointToPointActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.PointToPointActuator_set_optimal_force(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointToPointActuator self) -> PointToPointActuator
        __init__(OpenSim::PointToPointActuator self, std::string const & bodyNameA, std::string const & bodyNameB) -> PointToPointActuator

        Parameters
        ----------
        bodyNameA: std::string const &
        bodyNameB: std::string const &

        """
        this = _actuators.new_PointToPointActuator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setPointA(self, pointAPos):
        """
        setPointA(PointToPointActuator self, Vec3 pointAPos)

        Parameters
        ----------
        pointAPos: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_setPointA(self, pointAPos)


    def getPointA(self):
        """
        getPointA(PointToPointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_getPointA(self)


    def setPointB(self, pointBPos):
        """
        setPointB(PointToPointActuator self, Vec3 pointBPos)

        Parameters
        ----------
        pointBPos: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_setPointB(self, pointBPos)


    def getPointB(self):
        """
        getPointB(PointToPointActuator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_getPointB(self)


    def setPointsAreGlobal(self, isGlobal):
        """
        setPointsAreGlobal(PointToPointActuator self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _actuators.PointToPointActuator_setPointsAreGlobal(self, isGlobal)


    def getPointsAreGlobal(self):
        """
        getPointsAreGlobal(PointToPointActuator self) -> bool

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_getPointsAreGlobal(self)


    def setOptimalForce(self, optimalForce):
        """
        setOptimalForce(PointToPointActuator self, double optimalForce)

        Parameters
        ----------
        optimalForce: double

        """
        return _actuators.PointToPointActuator_setOptimalForce(self, optimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(PointToPointActuator self) -> double

        Parameters
        ----------
        self: OpenSim::PointToPointActuator const *

        """
        return _actuators.PointToPointActuator_getOptimalForce(self)

    __swig_destroy__ = _actuators.delete_PointToPointActuator
    __del__ = lambda self: None
PointToPointActuator_swigregister = _actuators.PointToPointActuator_swigregister
PointToPointActuator_swigregister(PointToPointActuator)

def PointToPointActuator_safeDownCast(obj):
    """
    PointToPointActuator_safeDownCast(OpenSimObject obj) -> PointToPointActuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.PointToPointActuator_safeDownCast(obj)

def PointToPointActuator_getClassName():
    """PointToPointActuator_getClassName() -> std::string const &"""
    return _actuators.PointToPointActuator_getClassName()

class ClutchedPathSpring(opensim.simulation.PathActuator):
    """Proxy of C++ OpenSim::ClutchedPathSpring class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.PathActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClutchedPathSpring, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.PathActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClutchedPathSpring, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ClutchedPathSpring

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ClutchedPathSpring_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ClutchedPathSpring self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ClutchedPathSpring_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.ClutchedPathSpring_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ClutchedPathSpring self) -> ClutchedPathSpring

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring const *

        """
        return _actuators.ClutchedPathSpring_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ClutchedPathSpring self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring const *

        """
        return _actuators.ClutchedPathSpring_getConcreteClassName(self)


    def copyProperty_stiffness(self, source):
        """
        copyProperty_stiffness(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters
        ----------
        source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _actuators.ClutchedPathSpring_copyProperty_stiffness(self, source)


    def append_stiffness(self, value):
        """
        append_stiffness(ClutchedPathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_append_stiffness(self, value)


    def constructProperty_stiffness(self, initValue):
        """
        constructProperty_stiffness(ClutchedPathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ClutchedPathSpring_constructProperty_stiffness(self, initValue)


    def get_stiffness(self, *args):
        """
        get_stiffness(ClutchedPathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness(ClutchedPathSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring const *

        """
        return _actuators.ClutchedPathSpring_get_stiffness(self, *args)


    def upd_stiffness(self, *args):
        """
        upd_stiffness(ClutchedPathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness(ClutchedPathSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring *

        """
        return _actuators.ClutchedPathSpring_upd_stiffness(self, *args)


    def set_stiffness(self, *args):
        """
        set_stiffness(ClutchedPathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness(ClutchedPathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_set_stiffness(self, *args)


    def copyProperty_dissipation(self, source):
        """
        copyProperty_dissipation(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters
        ----------
        source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _actuators.ClutchedPathSpring_copyProperty_dissipation(self, source)


    def append_dissipation(self, value):
        """
        append_dissipation(ClutchedPathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_append_dissipation(self, value)


    def constructProperty_dissipation(self, initValue):
        """
        constructProperty_dissipation(ClutchedPathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ClutchedPathSpring_constructProperty_dissipation(self, initValue)


    def get_dissipation(self, *args):
        """
        get_dissipation(ClutchedPathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_dissipation(ClutchedPathSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring const *

        """
        return _actuators.ClutchedPathSpring_get_dissipation(self, *args)


    def upd_dissipation(self, *args):
        """
        upd_dissipation(ClutchedPathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_dissipation(ClutchedPathSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring *

        """
        return _actuators.ClutchedPathSpring_upd_dissipation(self, *args)


    def set_dissipation(self, *args):
        """
        set_dissipation(ClutchedPathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_dissipation(ClutchedPathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_set_dissipation(self, *args)


    def copyProperty_relaxation_time_constant(self, source):
        """
        copyProperty_relaxation_time_constant(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters
        ----------
        source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _actuators.ClutchedPathSpring_copyProperty_relaxation_time_constant(self, source)


    def append_relaxation_time_constant(self, value):
        """
        append_relaxation_time_constant(ClutchedPathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_append_relaxation_time_constant(self, value)


    def constructProperty_relaxation_time_constant(self, initValue):
        """
        constructProperty_relaxation_time_constant(ClutchedPathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ClutchedPathSpring_constructProperty_relaxation_time_constant(self, initValue)


    def get_relaxation_time_constant(self, *args):
        """
        get_relaxation_time_constant(ClutchedPathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_relaxation_time_constant(ClutchedPathSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring const *

        """
        return _actuators.ClutchedPathSpring_get_relaxation_time_constant(self, *args)


    def upd_relaxation_time_constant(self, *args):
        """
        upd_relaxation_time_constant(ClutchedPathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_relaxation_time_constant(ClutchedPathSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring *

        """
        return _actuators.ClutchedPathSpring_upd_relaxation_time_constant(self, *args)


    def set_relaxation_time_constant(self, *args):
        """
        set_relaxation_time_constant(ClutchedPathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_relaxation_time_constant(ClutchedPathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_set_relaxation_time_constant(self, *args)


    def copyProperty_initial_stretch(self, source):
        """
        copyProperty_initial_stretch(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters
        ----------
        source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _actuators.ClutchedPathSpring_copyProperty_initial_stretch(self, source)


    def append_initial_stretch(self, value):
        """
        append_initial_stretch(ClutchedPathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_append_initial_stretch(self, value)


    def constructProperty_initial_stretch(self, initValue):
        """
        constructProperty_initial_stretch(ClutchedPathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ClutchedPathSpring_constructProperty_initial_stretch(self, initValue)


    def get_initial_stretch(self, *args):
        """
        get_initial_stretch(ClutchedPathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_initial_stretch(ClutchedPathSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring const *

        """
        return _actuators.ClutchedPathSpring_get_initial_stretch(self, *args)


    def upd_initial_stretch(self, *args):
        """
        upd_initial_stretch(ClutchedPathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_initial_stretch(ClutchedPathSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring *

        """
        return _actuators.ClutchedPathSpring_upd_initial_stretch(self, *args)


    def set_initial_stretch(self, *args):
        """
        set_initial_stretch(ClutchedPathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_initial_stretch(ClutchedPathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_set_initial_stretch(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ClutchedPathSpring self) -> ClutchedPathSpring
        __init__(OpenSim::ClutchedPathSpring self, std::string const & name, double stiffness, double dissipation, double relaxationTau, double stretch0=0.0) -> ClutchedPathSpring

        Parameters
        ----------
        name: std::string const &
        stiffness: double
        dissipation: double
        relaxationTau: double
        stretch0: double

        __init__(OpenSim::ClutchedPathSpring self, std::string const & name, double stiffness, double dissipation, double relaxationTau) -> ClutchedPathSpring

        Parameters
        ----------
        name: std::string const &
        stiffness: double
        dissipation: double
        relaxationTau: double

        """
        this = _actuators.new_ClutchedPathSpring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getStiffness(self):
        """
        getStiffness(ClutchedPathSpring self) -> double

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring const *

        """
        return _actuators.ClutchedPathSpring_getStiffness(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(ClutchedPathSpring self, double stiffness)

        Parameters
        ----------
        stiffness: double

        """
        return _actuators.ClutchedPathSpring_setStiffness(self, stiffness)


    def getDissipation(self):
        """
        getDissipation(ClutchedPathSpring self) -> double

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring const *

        """
        return _actuators.ClutchedPathSpring_getDissipation(self)


    def setDissipation(self, dissipation):
        """
        setDissipation(ClutchedPathSpring self, double dissipation)

        Parameters
        ----------
        dissipation: double

        """
        return _actuators.ClutchedPathSpring_setDissipation(self, dissipation)


    def getInitialStretch(self):
        """
        getInitialStretch(ClutchedPathSpring self) -> double

        Parameters
        ----------
        self: OpenSim::ClutchedPathSpring *

        """
        return _actuators.ClutchedPathSpring_getInitialStretch(self)


    def setInitialStretch(self, stretch0):
        """
        setInitialStretch(ClutchedPathSpring self, double stretch0)

        Parameters
        ----------
        stretch0: double

        """
        return _actuators.ClutchedPathSpring_setInitialStretch(self, stretch0)


    def getStretch(self, s):
        """
        getStretch(ClutchedPathSpring self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.ClutchedPathSpring_getStretch(self, s)


    def getTension(self, s):
        """
        getTension(ClutchedPathSpring self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.ClutchedPathSpring_getTension(self, s)

    __swig_destroy__ = _actuators.delete_ClutchedPathSpring
    __del__ = lambda self: None
ClutchedPathSpring_swigregister = _actuators.ClutchedPathSpring_swigregister
ClutchedPathSpring_swigregister(ClutchedPathSpring)

def ClutchedPathSpring_safeDownCast(obj):
    """
    ClutchedPathSpring_safeDownCast(OpenSimObject obj) -> ClutchedPathSpring

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.ClutchedPathSpring_safeDownCast(obj)

def ClutchedPathSpring_getClassName():
    """ClutchedPathSpring_getClassName() -> std::string const &"""
    return _actuators.ClutchedPathSpring_getClassName()

class SpringGeneralizedForce(opensim.simulation.Force):
    """Proxy of C++ OpenSim::SpringGeneralizedForce class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpringGeneralizedForce, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpringGeneralizedForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SpringGeneralizedForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.SpringGeneralizedForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SpringGeneralizedForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.SpringGeneralizedForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.SpringGeneralizedForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SpringGeneralizedForce self) -> SpringGeneralizedForce

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SpringGeneralizedForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_getConcreteClassName(self)


    def copyProperty_coordinate(self, source):
        """
        copyProperty_coordinate(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters
        ----------
        source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _actuators.SpringGeneralizedForce_copyProperty_coordinate(self, source)


    def append_coordinate(self, value):
        """
        append_coordinate(SpringGeneralizedForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.SpringGeneralizedForce_append_coordinate(self, value)


    def constructProperty_coordinate(self, *args):
        """
        constructProperty_coordinate(SpringGeneralizedForce self)
        constructProperty_coordinate(SpringGeneralizedForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.SpringGeneralizedForce_constructProperty_coordinate(self, *args)


    def get_coordinate(self, *args):
        """
        get_coordinate(SpringGeneralizedForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate(SpringGeneralizedForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_get_coordinate(self, *args)


    def upd_coordinate(self, *args):
        """
        upd_coordinate(SpringGeneralizedForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate(SpringGeneralizedForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce *

        """
        return _actuators.SpringGeneralizedForce_upd_coordinate(self, *args)


    def set_coordinate(self, *args):
        """
        set_coordinate(SpringGeneralizedForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate(SpringGeneralizedForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.SpringGeneralizedForce_set_coordinate(self, *args)


    def copyProperty_stiffness(self, source):
        """
        copyProperty_stiffness(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters
        ----------
        source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _actuators.SpringGeneralizedForce_copyProperty_stiffness(self, source)


    def append_stiffness(self, value):
        """
        append_stiffness(SpringGeneralizedForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_append_stiffness(self, value)


    def constructProperty_stiffness(self, initValue):
        """
        constructProperty_stiffness(SpringGeneralizedForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.SpringGeneralizedForce_constructProperty_stiffness(self, initValue)


    def get_stiffness(self, *args):
        """
        get_stiffness(SpringGeneralizedForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness(SpringGeneralizedForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_get_stiffness(self, *args)


    def upd_stiffness(self, *args):
        """
        upd_stiffness(SpringGeneralizedForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness(SpringGeneralizedForce self) -> double &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce *

        """
        return _actuators.SpringGeneralizedForce_upd_stiffness(self, *args)


    def set_stiffness(self, *args):
        """
        set_stiffness(SpringGeneralizedForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness(SpringGeneralizedForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_set_stiffness(self, *args)


    def copyProperty_rest_length(self, source):
        """
        copyProperty_rest_length(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters
        ----------
        source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _actuators.SpringGeneralizedForce_copyProperty_rest_length(self, source)


    def append_rest_length(self, value):
        """
        append_rest_length(SpringGeneralizedForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_append_rest_length(self, value)


    def constructProperty_rest_length(self, initValue):
        """
        constructProperty_rest_length(SpringGeneralizedForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.SpringGeneralizedForce_constructProperty_rest_length(self, initValue)


    def get_rest_length(self, *args):
        """
        get_rest_length(SpringGeneralizedForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_rest_length(SpringGeneralizedForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_get_rest_length(self, *args)


    def upd_rest_length(self, *args):
        """
        upd_rest_length(SpringGeneralizedForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_rest_length(SpringGeneralizedForce self) -> double &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce *

        """
        return _actuators.SpringGeneralizedForce_upd_rest_length(self, *args)


    def set_rest_length(self, *args):
        """
        set_rest_length(SpringGeneralizedForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_rest_length(SpringGeneralizedForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_set_rest_length(self, *args)


    def copyProperty_viscosity(self, source):
        """
        copyProperty_viscosity(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters
        ----------
        source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _actuators.SpringGeneralizedForce_copyProperty_viscosity(self, source)


    def append_viscosity(self, value):
        """
        append_viscosity(SpringGeneralizedForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_append_viscosity(self, value)


    def constructProperty_viscosity(self, initValue):
        """
        constructProperty_viscosity(SpringGeneralizedForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.SpringGeneralizedForce_constructProperty_viscosity(self, initValue)


    def get_viscosity(self, *args):
        """
        get_viscosity(SpringGeneralizedForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_viscosity(SpringGeneralizedForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_get_viscosity(self, *args)


    def upd_viscosity(self, *args):
        """
        upd_viscosity(SpringGeneralizedForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_viscosity(SpringGeneralizedForce self) -> double &

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce *

        """
        return _actuators.SpringGeneralizedForce_upd_viscosity(self, *args)


    def set_viscosity(self, *args):
        """
        set_viscosity(SpringGeneralizedForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_viscosity(SpringGeneralizedForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_set_viscosity(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::SpringGeneralizedForce self, std::string const & coordinateName) -> SpringGeneralizedForce

        Parameters
        ----------
        coordinateName: std::string const &

        __init__(OpenSim::SpringGeneralizedForce self) -> SpringGeneralizedForce
        """
        this = _actuators.new_SpringGeneralizedForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setStiffness(self, aStiffness):
        """
        setStiffness(SpringGeneralizedForce self, double aStiffness)

        Parameters
        ----------
        aStiffness: double

        """
        return _actuators.SpringGeneralizedForce_setStiffness(self, aStiffness)


    def getStiffness(self):
        """
        getStiffness(SpringGeneralizedForce self) -> double

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_getStiffness(self)


    def setRestLength(self, aRestLength):
        """
        setRestLength(SpringGeneralizedForce self, double aRestLength)

        Parameters
        ----------
        aRestLength: double

        """
        return _actuators.SpringGeneralizedForce_setRestLength(self, aRestLength)


    def getRestLength(self):
        """
        getRestLength(SpringGeneralizedForce self) -> double

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_getRestLength(self)


    def setViscosity(self, aViscosity):
        """
        setViscosity(SpringGeneralizedForce self, double aViscosity)

        Parameters
        ----------
        aViscosity: double

        """
        return _actuators.SpringGeneralizedForce_setViscosity(self, aViscosity)


    def getViscosity(self):
        """
        getViscosity(SpringGeneralizedForce self) -> double

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_getViscosity(self)


    def getRecordLabels(self):
        """
        getRecordLabels(SpringGeneralizedForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::SpringGeneralizedForce const *

        """
        return _actuators.SpringGeneralizedForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(SpringGeneralizedForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _actuators.SpringGeneralizedForce_getRecordValues(self, state)

    __swig_destroy__ = _actuators.delete_SpringGeneralizedForce
    __del__ = lambda self: None
SpringGeneralizedForce_swigregister = _actuators.SpringGeneralizedForce_swigregister
SpringGeneralizedForce_swigregister(SpringGeneralizedForce)

def SpringGeneralizedForce_safeDownCast(obj):
    """
    SpringGeneralizedForce_safeDownCast(OpenSimObject obj) -> SpringGeneralizedForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.SpringGeneralizedForce_safeDownCast(obj)

def SpringGeneralizedForce_getClassName():
    """SpringGeneralizedForce_getClassName() -> std::string const &"""
    return _actuators.SpringGeneralizedForce_getClassName()

class RigidTendonMuscle(opensim.simulation.Muscle):
    """Proxy of C++ OpenSim::RigidTendonMuscle class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Muscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidTendonMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Muscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidTendonMuscle, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> RigidTendonMuscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.RigidTendonMuscle_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(RigidTendonMuscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.RigidTendonMuscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.RigidTendonMuscle_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(RigidTendonMuscle self) -> RigidTendonMuscle

        Parameters
        ----------
        self: OpenSim::RigidTendonMuscle const *

        """
        return _actuators.RigidTendonMuscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(RigidTendonMuscle self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RigidTendonMuscle const *

        """
        return _actuators.RigidTendonMuscle_getConcreteClassName(self)


    def copyProperty_active_force_length_curve(self, source):
        """
        copyProperty_active_force_length_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters
        ----------
        source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _actuators.RigidTendonMuscle_copyProperty_active_force_length_curve(self, source)


    def append_active_force_length_curve(self, value):
        """
        append_active_force_length_curve(RigidTendonMuscle self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_append_active_force_length_curve(self, value)


    def constructProperty_active_force_length_curve(self, initValue):
        """
        constructProperty_active_force_length_curve(RigidTendonMuscle self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_constructProperty_active_force_length_curve(self, initValue)


    def get_active_force_length_curve(self, *args):
        """
        get_active_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        get_active_force_length_curve(RigidTendonMuscle self) -> Function

        Parameters
        ----------
        self: OpenSim::RigidTendonMuscle const *

        """
        return _actuators.RigidTendonMuscle_get_active_force_length_curve(self, *args)


    def upd_active_force_length_curve(self, *args):
        """
        upd_active_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_active_force_length_curve(RigidTendonMuscle self) -> Function

        Parameters
        ----------
        self: OpenSim::RigidTendonMuscle *

        """
        return _actuators.RigidTendonMuscle_upd_active_force_length_curve(self, *args)


    def set_active_force_length_curve(self, *args):
        """
        set_active_force_length_curve(RigidTendonMuscle self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_active_force_length_curve(RigidTendonMuscle self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_set_active_force_length_curve(self, *args)


    def copyProperty_passive_force_length_curve(self, source):
        """
        copyProperty_passive_force_length_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters
        ----------
        source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _actuators.RigidTendonMuscle_copyProperty_passive_force_length_curve(self, source)


    def append_passive_force_length_curve(self, value):
        """
        append_passive_force_length_curve(RigidTendonMuscle self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_append_passive_force_length_curve(self, value)


    def constructProperty_passive_force_length_curve(self, initValue):
        """
        constructProperty_passive_force_length_curve(RigidTendonMuscle self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_constructProperty_passive_force_length_curve(self, initValue)


    def get_passive_force_length_curve(self, *args):
        """
        get_passive_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        get_passive_force_length_curve(RigidTendonMuscle self) -> Function

        Parameters
        ----------
        self: OpenSim::RigidTendonMuscle const *

        """
        return _actuators.RigidTendonMuscle_get_passive_force_length_curve(self, *args)


    def upd_passive_force_length_curve(self, *args):
        """
        upd_passive_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_passive_force_length_curve(RigidTendonMuscle self) -> Function

        Parameters
        ----------
        self: OpenSim::RigidTendonMuscle *

        """
        return _actuators.RigidTendonMuscle_upd_passive_force_length_curve(self, *args)


    def set_passive_force_length_curve(self, *args):
        """
        set_passive_force_length_curve(RigidTendonMuscle self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_passive_force_length_curve(RigidTendonMuscle self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_set_passive_force_length_curve(self, *args)


    def copyProperty_force_velocity_curve(self, source):
        """
        copyProperty_force_velocity_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters
        ----------
        source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _actuators.RigidTendonMuscle_copyProperty_force_velocity_curve(self, source)


    def append_force_velocity_curve(self, value):
        """
        append_force_velocity_curve(RigidTendonMuscle self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_append_force_velocity_curve(self, value)


    def constructProperty_force_velocity_curve(self, initValue):
        """
        constructProperty_force_velocity_curve(RigidTendonMuscle self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_constructProperty_force_velocity_curve(self, initValue)


    def get_force_velocity_curve(self, *args):
        """
        get_force_velocity_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        get_force_velocity_curve(RigidTendonMuscle self) -> Function

        Parameters
        ----------
        self: OpenSim::RigidTendonMuscle const *

        """
        return _actuators.RigidTendonMuscle_get_force_velocity_curve(self, *args)


    def upd_force_velocity_curve(self, *args):
        """
        upd_force_velocity_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_force_velocity_curve(RigidTendonMuscle self) -> Function

        Parameters
        ----------
        self: OpenSim::RigidTendonMuscle *

        """
        return _actuators.RigidTendonMuscle_upd_force_velocity_curve(self, *args)


    def set_force_velocity_curve(self, *args):
        """
        set_force_velocity_curve(RigidTendonMuscle self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_force_velocity_curve(RigidTendonMuscle self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_set_force_velocity_curve(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::RigidTendonMuscle self) -> RigidTendonMuscle
        __init__(OpenSim::RigidTendonMuscle self, std::string const & name, double maxIsometricForce, double optimalFiberLength, double tendonSlackLength, double pennationAngle) -> RigidTendonMuscle

        Parameters
        ----------
        name: std::string const &
        maxIsometricForce: double
        optimalFiberLength: double
        tendonSlackLength: double
        pennationAngle: double

        """
        this = _actuators.new_RigidTendonMuscle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setActivation(self, s, activation):
        """
        setActivation(RigidTendonMuscle self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _actuators.RigidTendonMuscle_setActivation(self, s, activation)

    __swig_destroy__ = _actuators.delete_RigidTendonMuscle
    __del__ = lambda self: None
RigidTendonMuscle_swigregister = _actuators.RigidTendonMuscle_swigregister
RigidTendonMuscle_swigregister(RigidTendonMuscle)

def RigidTendonMuscle_safeDownCast(obj):
    """
    RigidTendonMuscle_safeDownCast(OpenSimObject obj) -> RigidTendonMuscle

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.RigidTendonMuscle_safeDownCast(obj)

def RigidTendonMuscle_getClassName():
    """RigidTendonMuscle_getClassName() -> std::string const &"""
    return _actuators.RigidTendonMuscle_getClassName()

class Millard2012AccelerationMuscle(opensim.simulation.Muscle):
    """Proxy of C++ OpenSim::Millard2012AccelerationMuscle class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.Muscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Millard2012AccelerationMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.Muscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Millard2012AccelerationMuscle, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Millard2012AccelerationMuscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.Millard2012AccelerationMuscle_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Millard2012AccelerationMuscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.Millard2012AccelerationMuscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.Millard2012AccelerationMuscle_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Millard2012AccelerationMuscle self) -> Millard2012AccelerationMuscle

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Millard2012AccelerationMuscle self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getConcreteClassName(self)


    def copyProperty_default_activation(self, source):
        """
        copyProperty_default_activation(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_default_activation(self, source)


    def append_default_activation(self, value):
        """
        append_default_activation(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_default_activation(self, value)


    def constructProperty_default_activation(self, initValue):
        """
        constructProperty_default_activation(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_default_activation(self, initValue)


    def get_default_activation(self, *args):
        """
        get_default_activation(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_activation(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_default_activation(self, *args)


    def upd_default_activation(self, *args):
        """
        upd_default_activation(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_activation(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_default_activation(self, *args)


    def set_default_activation(self, *args):
        """
        set_default_activation(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_activation(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_default_activation(self, *args)


    def copyProperty_default_fiber_length(self, source):
        """
        copyProperty_default_fiber_length(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_default_fiber_length(self, source)


    def append_default_fiber_length(self, value):
        """
        append_default_fiber_length(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_default_fiber_length(self, value)


    def constructProperty_default_fiber_length(self, initValue):
        """
        constructProperty_default_fiber_length(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_default_fiber_length(self, initValue)


    def get_default_fiber_length(self, *args):
        """
        get_default_fiber_length(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_fiber_length(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_default_fiber_length(self, *args)


    def upd_default_fiber_length(self, *args):
        """
        upd_default_fiber_length(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_fiber_length(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_default_fiber_length(self, *args)


    def set_default_fiber_length(self, *args):
        """
        set_default_fiber_length(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_fiber_length(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_default_fiber_length(self, *args)


    def copyProperty_default_fiber_velocity(self, source):
        """
        copyProperty_default_fiber_velocity(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_default_fiber_velocity(self, source)


    def append_default_fiber_velocity(self, value):
        """
        append_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_default_fiber_velocity(self, value)


    def constructProperty_default_fiber_velocity(self, initValue):
        """
        constructProperty_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_default_fiber_velocity(self, initValue)


    def get_default_fiber_velocity(self, *args):
        """
        get_default_fiber_velocity(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_fiber_velocity(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_default_fiber_velocity(self, *args)


    def upd_default_fiber_velocity(self, *args):
        """
        upd_default_fiber_velocity(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_fiber_velocity(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_default_fiber_velocity(self, *args)


    def set_default_fiber_velocity(self, *args):
        """
        set_default_fiber_velocity(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_default_fiber_velocity(self, *args)


    def copyProperty_MuscleFirstOrderActivationDynamicModel(self, source):
        """
        copyProperty_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_MuscleFirstOrderActivationDynamicModel(self, source)


    def append_MuscleFirstOrderActivationDynamicModel(self, value):
        """
        append_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel value) -> int

        Parameters
        ----------
        value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_MuscleFirstOrderActivationDynamicModel(self, value)


    def constructProperty_MuscleFirstOrderActivationDynamicModel(self, initValue):
        """
        constructProperty_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel initValue)

        Parameters
        ----------
        initValue: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_MuscleFirstOrderActivationDynamicModel(self, initValue)


    def get_MuscleFirstOrderActivationDynamicModel(self, *args):
        """
        get_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        i: int

        get_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_MuscleFirstOrderActivationDynamicModel(self, *args)


    def upd_MuscleFirstOrderActivationDynamicModel(self, *args):
        """
        upd_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        i: int

        upd_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_MuscleFirstOrderActivationDynamicModel(self, *args)


    def set_MuscleFirstOrderActivationDynamicModel(self, *args):
        """
        set_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i, MuscleFirstOrderActivationDynamicModel value)

        Parameters
        ----------
        i: int
        value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        set_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel value)

        Parameters
        ----------
        value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_MuscleFirstOrderActivationDynamicModel(self, *args)


    def copyProperty_ActiveForceLengthCurve(self, source):
        """
        copyProperty_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_ActiveForceLengthCurve(self, source)


    def append_ActiveForceLengthCurve(self, value):
        """
        append_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::ActiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_ActiveForceLengthCurve(self, value)


    def constructProperty_ActiveForceLengthCurve(self, initValue):
        """
        constructProperty_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::ActiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_ActiveForceLengthCurve(self, initValue)


    def get_ActiveForceLengthCurve(self, *args):
        """
        get_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> ActiveForceLengthCurve

        Parameters
        ----------
        i: int

        get_ActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_ActiveForceLengthCurve(self, *args)


    def upd_ActiveForceLengthCurve(self, *args):
        """
        upd_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> ActiveForceLengthCurve

        Parameters
        ----------
        i: int

        upd_ActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_ActiveForceLengthCurve(self, *args)


    def set_ActiveForceLengthCurve(self, *args):
        """
        set_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i, ActiveForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::ActiveForceLengthCurve const &

        set_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::ActiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_ActiveForceLengthCurve(self, *args)


    def copyProperty_ForceVelocityCurve(self, source):
        """
        copyProperty_ForceVelocityCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_ForceVelocityCurve(self, source)


    def append_ForceVelocityCurve(self, value):
        """
        append_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve value) -> int

        Parameters
        ----------
        value: OpenSim::ForceVelocityCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_ForceVelocityCurve(self, value)


    def constructProperty_ForceVelocityCurve(self, initValue):
        """
        constructProperty_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::ForceVelocityCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_ForceVelocityCurve(self, initValue)


    def get_ForceVelocityCurve(self, *args):
        """
        get_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i) -> ForceVelocityCurve

        Parameters
        ----------
        i: int

        get_ForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_ForceVelocityCurve(self, *args)


    def upd_ForceVelocityCurve(self, *args):
        """
        upd_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i) -> ForceVelocityCurve

        Parameters
        ----------
        i: int

        upd_ForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_ForceVelocityCurve(self, *args)


    def set_ForceVelocityCurve(self, *args):
        """
        set_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i, ForceVelocityCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::ForceVelocityCurve const &

        set_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve value)

        Parameters
        ----------
        value: OpenSim::ForceVelocityCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_ForceVelocityCurve(self, *args)


    def copyProperty_FiberForceLengthCurve(self, source):
        """
        copyProperty_FiberForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_FiberForceLengthCurve(self, source)


    def append_FiberForceLengthCurve(self, value):
        """
        append_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::FiberForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_FiberForceLengthCurve(self, value)


    def constructProperty_FiberForceLengthCurve(self, initValue):
        """
        constructProperty_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::FiberForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_FiberForceLengthCurve(self, initValue)


    def get_FiberForceLengthCurve(self, *args):
        """
        get_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberForceLengthCurve

        Parameters
        ----------
        i: int

        get_FiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_FiberForceLengthCurve(self, *args)


    def upd_FiberForceLengthCurve(self, *args):
        """
        upd_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberForceLengthCurve

        Parameters
        ----------
        i: int

        upd_FiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_FiberForceLengthCurve(self, *args)


    def set_FiberForceLengthCurve(self, *args):
        """
        set_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i, FiberForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::FiberForceLengthCurve const &

        set_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::FiberForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_FiberForceLengthCurve(self, *args)


    def copyProperty_TendonForceLengthCurve(self, source):
        """
        copyProperty_TendonForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_TendonForceLengthCurve(self, source)


    def append_TendonForceLengthCurve(self, value):
        """
        append_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::TendonForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_TendonForceLengthCurve(self, value)


    def constructProperty_TendonForceLengthCurve(self, initValue):
        """
        constructProperty_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::TendonForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_TendonForceLengthCurve(self, initValue)


    def get_TendonForceLengthCurve(self, *args):
        """
        get_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> TendonForceLengthCurve

        Parameters
        ----------
        i: int

        get_TendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_TendonForceLengthCurve(self, *args)


    def upd_TendonForceLengthCurve(self, *args):
        """
        upd_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> TendonForceLengthCurve

        Parameters
        ----------
        i: int

        upd_TendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_TendonForceLengthCurve(self, *args)


    def set_TendonForceLengthCurve(self, *args):
        """
        set_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i, TendonForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::TendonForceLengthCurve const &

        set_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::TendonForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_TendonForceLengthCurve(self, *args)


    def copyProperty_FiberCompressiveForceLengthCurve(self, source):
        """
        copyProperty_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_FiberCompressiveForceLengthCurve(self, source)


    def append_FiberCompressiveForceLengthCurve(self, value):
        """
        append_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_FiberCompressiveForceLengthCurve(self, value)


    def constructProperty_FiberCompressiveForceLengthCurve(self, initValue):
        """
        constructProperty_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_FiberCompressiveForceLengthCurve(self, initValue)


    def get_FiberCompressiveForceLengthCurve(self, *args):
        """
        get_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        i: int

        get_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_FiberCompressiveForceLengthCurve(self, *args)


    def upd_FiberCompressiveForceLengthCurve(self, *args):
        """
        upd_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        i: int

        upd_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_FiberCompressiveForceLengthCurve(self, *args)


    def set_FiberCompressiveForceLengthCurve(self, *args):
        """
        set_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i, FiberCompressiveForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::FiberCompressiveForceLengthCurve const &

        set_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_FiberCompressiveForceLengthCurve(self, *args)


    def copyProperty_FiberCompressiveForceCosPennationCurve(self, source):
        """
        copyProperty_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_FiberCompressiveForceCosPennationCurve(self, source)


    def append_FiberCompressiveForceCosPennationCurve(self, value):
        """
        append_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve value) -> int

        Parameters
        ----------
        value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_FiberCompressiveForceCosPennationCurve(self, value)


    def constructProperty_FiberCompressiveForceCosPennationCurve(self, initValue):
        """
        constructProperty_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_FiberCompressiveForceCosPennationCurve(self, initValue)


    def get_FiberCompressiveForceCosPennationCurve(self, *args):
        """
        get_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        i: int

        get_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_FiberCompressiveForceCosPennationCurve(self, *args)


    def upd_FiberCompressiveForceCosPennationCurve(self, *args):
        """
        upd_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        i: int

        upd_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_FiberCompressiveForceCosPennationCurve(self, *args)


    def set_FiberCompressiveForceCosPennationCurve(self, *args):
        """
        set_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i, FiberCompressiveForceCosPennationCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        set_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve value)

        Parameters
        ----------
        value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_FiberCompressiveForceCosPennationCurve(self, *args)


    def copyProperty_fiber_damping(self, source):
        """
        copyProperty_fiber_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_fiber_damping(self, source)


    def append_fiber_damping(self, value):
        """
        append_fiber_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_fiber_damping(self, value)


    def constructProperty_fiber_damping(self, initValue):
        """
        constructProperty_fiber_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_fiber_damping(self, initValue)


    def get_fiber_damping(self, *args):
        """
        get_fiber_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_fiber_damping(self, *args)


    def upd_fiber_damping(self, *args):
        """
        upd_fiber_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_fiber_damping(self, *args)


    def set_fiber_damping(self, *args):
        """
        set_fiber_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_fiber_damping(self, *args)


    def copyProperty_fiber_force_length_damping(self, source):
        """
        copyProperty_fiber_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_fiber_force_length_damping(self, source)


    def append_fiber_force_length_damping(self, value):
        """
        append_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_fiber_force_length_damping(self, value)


    def constructProperty_fiber_force_length_damping(self, initValue):
        """
        constructProperty_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_fiber_force_length_damping(self, initValue)


    def get_fiber_force_length_damping(self, *args):
        """
        get_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_force_length_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_fiber_force_length_damping(self, *args)


    def upd_fiber_force_length_damping(self, *args):
        """
        upd_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_force_length_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_fiber_force_length_damping(self, *args)


    def set_fiber_force_length_damping(self, *args):
        """
        set_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_fiber_force_length_damping(self, *args)


    def copyProperty_fiber_compressive_force_length_damping(self, source):
        """
        copyProperty_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_fiber_compressive_force_length_damping(self, source)


    def append_fiber_compressive_force_length_damping(self, value):
        """
        append_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_fiber_compressive_force_length_damping(self, value)


    def constructProperty_fiber_compressive_force_length_damping(self, initValue):
        """
        constructProperty_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_fiber_compressive_force_length_damping(self, initValue)


    def get_fiber_compressive_force_length_damping(self, *args):
        """
        get_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_fiber_compressive_force_length_damping(self, *args)


    def upd_fiber_compressive_force_length_damping(self, *args):
        """
        upd_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_fiber_compressive_force_length_damping(self, *args)


    def set_fiber_compressive_force_length_damping(self, *args):
        """
        set_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_fiber_compressive_force_length_damping(self, *args)


    def copyProperty_fiber_compressive_force_cos_pennation_damping(self, source):
        """
        copyProperty_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_fiber_compressive_force_cos_pennation_damping(self, source)


    def append_fiber_compressive_force_cos_pennation_damping(self, value):
        """
        append_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_fiber_compressive_force_cos_pennation_damping(self, value)


    def constructProperty_fiber_compressive_force_cos_pennation_damping(self, initValue):
        """
        constructProperty_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_fiber_compressive_force_cos_pennation_damping(self, initValue)


    def get_fiber_compressive_force_cos_pennation_damping(self, *args):
        """
        get_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_fiber_compressive_force_cos_pennation_damping(self, *args)


    def upd_fiber_compressive_force_cos_pennation_damping(self, *args):
        """
        upd_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_fiber_compressive_force_cos_pennation_damping(self, *args)


    def set_fiber_compressive_force_cos_pennation_damping(self, *args):
        """
        set_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_fiber_compressive_force_cos_pennation_damping(self, *args)


    def copyProperty_tendon_force_length_damping(self, source):
        """
        copyProperty_tendon_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_tendon_force_length_damping(self, source)


    def append_tendon_force_length_damping(self, value):
        """
        append_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_tendon_force_length_damping(self, value)


    def constructProperty_tendon_force_length_damping(self, initValue):
        """
        constructProperty_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_tendon_force_length_damping(self, initValue)


    def get_tendon_force_length_damping(self, *args):
        """
        get_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_tendon_force_length_damping(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_tendon_force_length_damping(self, *args)


    def upd_tendon_force_length_damping(self, *args):
        """
        upd_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_tendon_force_length_damping(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_tendon_force_length_damping(self, *args)


    def set_tendon_force_length_damping(self, *args):
        """
        set_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_tendon_force_length_damping(self, *args)


    def copyProperty_mass(self, source):
        """
        copyProperty_mass(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_mass(self, source)


    def append_mass(self, value):
        """
        append_mass(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_mass(self, value)


    def constructProperty_mass(self, initValue):
        """
        constructProperty_mass(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_mass(self, initValue)


    def get_mass(self, *args):
        """
        get_mass(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_mass(Millard2012AccelerationMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_get_mass(self, *args)


    def upd_mass(self, *args):
        """
        upd_mass(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_mass(Millard2012AccelerationMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle *

        """
        return _actuators.Millard2012AccelerationMuscle_upd_mass(self, *args)


    def set_mass(self, *args):
        """
        set_mass(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_mass(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_mass(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Millard2012AccelerationMuscle self) -> Millard2012AccelerationMuscle
        __init__(OpenSim::Millard2012AccelerationMuscle self, std::string const & aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) -> Millard2012AccelerationMuscle

        Parameters
        ----------
        aName: std::string const &
        aMaxIsometricForce: double
        aOptimalFiberLength: double
        aTendonSlackLength: double
        aPennationAngle: double

        """
        this = _actuators.new_Millard2012AccelerationMuscle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getFiberCompressiveForceLengthMultiplier(self, s):
        """
        getFiberCompressiveForceLengthMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberCompressiveForceLengthMultiplier(self, s)


    def getFiberCompressiveForceCosPennationMultiplier(self, s):
        """
        getFiberCompressiveForceCosPennationMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberCompressiveForceCosPennationMultiplier(self, s)


    def getTendonForceMultiplier(self, s):
        """
        getTendonForceMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.Millard2012AccelerationMuscle_getTendonForceMultiplier(self, s)


    def getMass(self):
        """
        getMass(Millard2012AccelerationMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getMass(self)


    def getActivationModel(self):
        """
        getActivationModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getActivationModel(self)


    def getPennationModel(self):
        """
        getPennationModel(Millard2012AccelerationMuscle self) -> MuscleFixedWidthPennationModel

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getPennationModel(self)


    def getActiveForceLengthCurve(self):
        """
        getActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getActiveForceLengthCurve(self)


    def getForceVelocityCurve(self):
        """
        getForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getForceVelocityCurve(self)


    def getFiberForceLengthCurve(self):
        """
        getFiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberForceLengthCurve(self)


    def getTendonForceLengthCurve(self):
        """
        getTendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getTendonForceLengthCurve(self)


    def getFiberCompressiveForceLengthCurve(self):
        """
        getFiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberCompressiveForceLengthCurve(self)


    def getFiberCompressiveForceCosPennationCurve(self):
        """
        getFiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberCompressiveForceCosPennationCurve(self)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberStiffnessAlongTendon(self, s)


    def setActivationModel(self, aActivationMdl):
        """
        setActivationModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel aActivationMdl)

        Parameters
        ----------
        aActivationMdl: OpenSim::MuscleFirstOrderActivationDynamicModel &

        """
        return _actuators.Millard2012AccelerationMuscle_setActivationModel(self, aActivationMdl)


    def setActiveForceLengthCurve(self, aActiveForceLengthCurve):
        """
        setActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve aActiveForceLengthCurve)

        Parameters
        ----------
        aActiveForceLengthCurve: OpenSim::ActiveForceLengthCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setActiveForceLengthCurve(self, aActiveForceLengthCurve)


    def setForceVelocityCurve(self, aForceVelocityCurve):
        """
        setForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve aForceVelocityCurve)

        Parameters
        ----------
        aForceVelocityCurve: OpenSim::ForceVelocityCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setForceVelocityCurve(self, aForceVelocityCurve)


    def setFiberForceLengthCurve(self, aFiberForceLengthCurve):
        """
        setFiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve aFiberForceLengthCurve)

        Parameters
        ----------
        aFiberForceLengthCurve: OpenSim::FiberForceLengthCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberForceLengthCurve(self, aFiberForceLengthCurve)


    def setTendonForceLengthCurve(self, aTendonForceLengthCurve):
        """
        setTendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve aTendonForceLengthCurve)

        Parameters
        ----------
        aTendonForceLengthCurve: OpenSim::TendonForceLengthCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setTendonForceLengthCurve(self, aTendonForceLengthCurve)


    def setFiberCompressiveForceLengthCurve(self, aFiberCompressiveForceLengthCurve):
        """
        setFiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve aFiberCompressiveForceLengthCurve)

        Parameters
        ----------
        aFiberCompressiveForceLengthCurve: OpenSim::FiberCompressiveForceLengthCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberCompressiveForceLengthCurve(self, aFiberCompressiveForceLengthCurve)


    def setFiberCompressiveForceCosPennationCurve(self, aFiberCompressiveForceCosPennationCurve):
        """
        setFiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve aFiberCompressiveForceCosPennationCurve)

        Parameters
        ----------
        aFiberCompressiveForceCosPennationCurve: OpenSim::FiberCompressiveForceCosPennationCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberCompressiveForceCosPennationCurve(self, aFiberCompressiveForceCosPennationCurve)


    def setMass(self, mass):
        """
        setMass(Millard2012AccelerationMuscle self, double mass)

        Parameters
        ----------
        mass: double

        """
        return _actuators.Millard2012AccelerationMuscle_setMass(self, mass)


    def getDefaultActivation(self):
        """
        getDefaultActivation(Millard2012AccelerationMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getDefaultActivation(self)


    def getDefaultFiberLength(self):
        """
        getDefaultFiberLength(Millard2012AccelerationMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getDefaultFiberLength(self)


    def getDefaultFiberVelocity(self):
        """
        getDefaultFiberVelocity(Millard2012AccelerationMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012AccelerationMuscle const *

        """
        return _actuators.Millard2012AccelerationMuscle_getDefaultFiberVelocity(self)


    def getActivationRate(self, s):
        """
        getActivationRate(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_getActivationRate(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberVelocity(self, s)


    def getFiberAcceleration(self, s):
        """
        getFiberAcceleration(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberAcceleration(self, s)


    def setDefaultActivation(self, activation):
        """
        setDefaultActivation(Millard2012AccelerationMuscle self, double activation)

        Parameters
        ----------
        activation: double

        """
        return _actuators.Millard2012AccelerationMuscle_setDefaultActivation(self, activation)


    def setDefaultFiberLength(self, fiberLength):
        """
        setDefaultFiberLength(Millard2012AccelerationMuscle self, double fiberLength)

        Parameters
        ----------
        fiberLength: double

        """
        return _actuators.Millard2012AccelerationMuscle_setDefaultFiberLength(self, fiberLength)


    def setDefaultFiberVelocity(self, fiberVelocity):
        """
        setDefaultFiberVelocity(Millard2012AccelerationMuscle self, double fiberVelocity)

        Parameters
        ----------
        fiberVelocity: double

        """
        return _actuators.Millard2012AccelerationMuscle_setDefaultFiberVelocity(self, fiberVelocity)


    def setActivation(self, s, activation):
        """
        setActivation(Millard2012AccelerationMuscle self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _actuators.Millard2012AccelerationMuscle_setActivation(self, s, activation)


    def setFiberLength(self, s, fiberLength):
        """
        setFiberLength(Millard2012AccelerationMuscle self, State s, double fiberLength)

        Parameters
        ----------
        s: SimTK::State &
        fiberLength: double

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberLength(self, s, fiberLength)


    def setFiberVelocity(self, s, fiberVelocity):
        """
        setFiberVelocity(Millard2012AccelerationMuscle self, State s, double fiberVelocity)

        Parameters
        ----------
        s: SimTK::State &
        fiberVelocity: double

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberVelocity(self, s, fiberVelocity)


    def computeActuation(self, s):
        """
        computeActuation(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_computeActuation(self, s)


    def computeInitialFiberEquilibrium(self, s):
        """
        computeInitialFiberEquilibrium(Millard2012AccelerationMuscle self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.Millard2012AccelerationMuscle_computeInitialFiberEquilibrium(self, s)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Millard2012AccelerationMuscle self, State s, double aActivation) -> double

        Parameters
        ----------
        s: SimTK::State &
        aActivation: double

        """
        return _actuators.Millard2012AccelerationMuscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)


    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        """
        calcActiveFiberForceAlongTendon(Millard2012AccelerationMuscle self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters
        ----------
        activation: double
        fiberLength: double
        fiberVelocity: double

        """
        return _actuators.Millard2012AccelerationMuscle_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)


    def extendPostScale(self, s, scaleSet):
        """
        extendPostScale(Millard2012AccelerationMuscle self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _actuators.Millard2012AccelerationMuscle_extendPostScale(self, s, scaleSet)

    __swig_destroy__ = _actuators.delete_Millard2012AccelerationMuscle
    __del__ = lambda self: None
Millard2012AccelerationMuscle_swigregister = _actuators.Millard2012AccelerationMuscle_swigregister
Millard2012AccelerationMuscle_swigregister(Millard2012AccelerationMuscle)

def Millard2012AccelerationMuscle_safeDownCast(obj):
    """
    Millard2012AccelerationMuscle_safeDownCast(OpenSimObject obj) -> Millard2012AccelerationMuscle

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.Millard2012AccelerationMuscle_safeDownCast(obj)

def Millard2012AccelerationMuscle_getClassName():
    """Millard2012AccelerationMuscle_getClassName() -> std::string const &"""
    return _actuators.Millard2012AccelerationMuscle_getClassName()

class McKibbenActuator(opensim.simulation.PathActuator):
    """Proxy of C++ OpenSim::McKibbenActuator class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.PathActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, McKibbenActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.PathActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, McKibbenActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> McKibbenActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.McKibbenActuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(McKibbenActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.McKibbenActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _actuators.McKibbenActuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(McKibbenActuator self) -> McKibbenActuator

        Parameters
        ----------
        self: OpenSim::McKibbenActuator const *

        """
        return _actuators.McKibbenActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(McKibbenActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::McKibbenActuator const *

        """
        return _actuators.McKibbenActuator_getConcreteClassName(self)


    def copyProperty_thread_length(self, source):
        """
        copyProperty_thread_length(McKibbenActuator self, McKibbenActuator source)

        Parameters
        ----------
        source: OpenSim::McKibbenActuator::Self const &

        """
        return _actuators.McKibbenActuator_copyProperty_thread_length(self, source)


    def append_thread_length(self, value):
        """
        append_thread_length(McKibbenActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_append_thread_length(self, value)


    def constructProperty_thread_length(self, initValue):
        """
        constructProperty_thread_length(McKibbenActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.McKibbenActuator_constructProperty_thread_length(self, initValue)


    def get_thread_length(self, *args):
        """
        get_thread_length(McKibbenActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_thread_length(McKibbenActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::McKibbenActuator const *

        """
        return _actuators.McKibbenActuator_get_thread_length(self, *args)


    def upd_thread_length(self, *args):
        """
        upd_thread_length(McKibbenActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_thread_length(McKibbenActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::McKibbenActuator *

        """
        return _actuators.McKibbenActuator_upd_thread_length(self, *args)


    def set_thread_length(self, *args):
        """
        set_thread_length(McKibbenActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_thread_length(McKibbenActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_set_thread_length(self, *args)


    def copyProperty_number_of_turns(self, source):
        """
        copyProperty_number_of_turns(McKibbenActuator self, McKibbenActuator source)

        Parameters
        ----------
        source: OpenSim::McKibbenActuator::Self const &

        """
        return _actuators.McKibbenActuator_copyProperty_number_of_turns(self, source)


    def append_number_of_turns(self, value):
        """
        append_number_of_turns(McKibbenActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_append_number_of_turns(self, value)


    def constructProperty_number_of_turns(self, initValue):
        """
        constructProperty_number_of_turns(McKibbenActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.McKibbenActuator_constructProperty_number_of_turns(self, initValue)


    def get_number_of_turns(self, *args):
        """
        get_number_of_turns(McKibbenActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_number_of_turns(McKibbenActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::McKibbenActuator const *

        """
        return _actuators.McKibbenActuator_get_number_of_turns(self, *args)


    def upd_number_of_turns(self, *args):
        """
        upd_number_of_turns(McKibbenActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_number_of_turns(McKibbenActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::McKibbenActuator *

        """
        return _actuators.McKibbenActuator_upd_number_of_turns(self, *args)


    def set_number_of_turns(self, *args):
        """
        set_number_of_turns(McKibbenActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_number_of_turns(McKibbenActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_set_number_of_turns(self, *args)


    def copyProperty_cord_length(self, source):
        """
        copyProperty_cord_length(McKibbenActuator self, McKibbenActuator source)

        Parameters
        ----------
        source: OpenSim::McKibbenActuator::Self const &

        """
        return _actuators.McKibbenActuator_copyProperty_cord_length(self, source)


    def append_cord_length(self, value):
        """
        append_cord_length(McKibbenActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_append_cord_length(self, value)


    def constructProperty_cord_length(self, initValue):
        """
        constructProperty_cord_length(McKibbenActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.McKibbenActuator_constructProperty_cord_length(self, initValue)


    def get_cord_length(self, *args):
        """
        get_cord_length(McKibbenActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_cord_length(McKibbenActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::McKibbenActuator const *

        """
        return _actuators.McKibbenActuator_get_cord_length(self, *args)


    def upd_cord_length(self, *args):
        """
        upd_cord_length(McKibbenActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_cord_length(McKibbenActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::McKibbenActuator *

        """
        return _actuators.McKibbenActuator_upd_cord_length(self, *args)


    def set_cord_length(self, *args):
        """
        set_cord_length(McKibbenActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_cord_length(McKibbenActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_set_cord_length(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::McKibbenActuator self) -> McKibbenActuator
        __init__(OpenSim::McKibbenActuator self, std::string const & name, double num_turns, double thread_length) -> McKibbenActuator

        Parameters
        ----------
        name: std::string const &
        num_turns: double
        thread_length: double

        """
        this = _actuators.new_McKibbenActuator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setNumberOfTurns(self, val):
        """
        setNumberOfTurns(McKibbenActuator self, double val)

        Parameters
        ----------
        val: double

        """
        return _actuators.McKibbenActuator_setNumberOfTurns(self, val)


    def getNumberOfTurns(self):
        """
        getNumberOfTurns(McKibbenActuator self) -> double

        Parameters
        ----------
        self: OpenSim::McKibbenActuator const *

        """
        return _actuators.McKibbenActuator_getNumberOfTurns(self)


    def setThreadLength(self, val):
        """
        setThreadLength(McKibbenActuator self, double val)

        Parameters
        ----------
        val: double

        """
        return _actuators.McKibbenActuator_setThreadLength(self, val)


    def getThreadLength(self):
        """
        getThreadLength(McKibbenActuator self) -> double

        Parameters
        ----------
        self: OpenSim::McKibbenActuator const *

        """
        return _actuators.McKibbenActuator_getThreadLength(self)


    def setCordLength(self, val):
        """
        setCordLength(McKibbenActuator self, double val)

        Parameters
        ----------
        val: double

        """
        return _actuators.McKibbenActuator_setCordLength(self, val)


    def getCordLength(self):
        """
        getCordLength(McKibbenActuator self) -> double

        Parameters
        ----------
        self: OpenSim::McKibbenActuator const *

        """
        return _actuators.McKibbenActuator_getCordLength(self)


    def computeActuation(self, s):
        """
        computeActuation(McKibbenActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.McKibbenActuator_computeActuation(self, s)

    __swig_destroy__ = _actuators.delete_McKibbenActuator
    __del__ = lambda self: None
McKibbenActuator_swigregister = _actuators.McKibbenActuator_swigregister
McKibbenActuator_swigregister(McKibbenActuator)

def McKibbenActuator_safeDownCast(obj):
    """
    McKibbenActuator_safeDownCast(OpenSimObject obj) -> McKibbenActuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _actuators.McKibbenActuator_safeDownCast(obj)

def McKibbenActuator_getClassName():
    """McKibbenActuator_getClassName() -> std::string const &"""
    return _actuators.McKibbenActuator_getClassName()

# This file is compatible with both classic and new-style classes.


