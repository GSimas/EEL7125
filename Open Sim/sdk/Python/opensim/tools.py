# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tools')).lstrip('.')
        return importlib.import_module(mname)
    _tools = swig_import_helper()
    del swig_import_helper
elif version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tools', [dirname(__file__)])
        except ImportError:
            import _tools
            return _tools
        if fp is not None:
            try:
                _mod = imp.load_module('_tools', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tools = swig_import_helper()
    del swig_import_helper
else:
    import _tools
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tools.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _tools.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _tools.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _tools.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _tools.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _tools.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _tools.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _tools.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _tools.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _tools.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _tools.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _tools.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _tools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import opensim.analyses
import opensim.actuators
import opensim.simulation
import opensim.common
import opensim.simbody
class IKTask(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::IKTask class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKTask, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKTask, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IKTask

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IKTask_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(IKTask self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IKTask_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.IKTask_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(IKTask self) -> IKTask

        Parameters
        ----------
        self: OpenSim::IKTask const *

        """
        return _tools.IKTask_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IKTask self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IKTask const *

        """
        return _tools.IKTask_getConcreteClassName(self)


    def getApply(self):
        """
        getApply(IKTask self) -> bool

        Parameters
        ----------
        self: OpenSim::IKTask const *

        """
        return _tools.IKTask_getApply(self)


    def setApply(self, aApply):
        """
        setApply(IKTask self, bool aApply)

        Parameters
        ----------
        aApply: bool

        """
        return _tools.IKTask_setApply(self, aApply)


    def getWeight(self):
        """
        getWeight(IKTask self) -> double

        Parameters
        ----------
        self: OpenSim::IKTask *

        """
        return _tools.IKTask_getWeight(self)


    def setWeight(self, weight):
        """
        setWeight(IKTask self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _tools.IKTask_setWeight(self, weight)

    __swig_destroy__ = _tools.delete_IKTask
    __del__ = lambda self: None
IKTask_swigregister = _tools.IKTask_swigregister
IKTask_swigregister(IKTask)

def IKTask_safeDownCast(obj):
    """
    IKTask_safeDownCast(OpenSimObject obj) -> IKTask

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.IKTask_safeDownCast(obj)

def IKTask_getClassName():
    """IKTask_getClassName() -> std::string const &"""
    return _tools.IKTask_getClassName()

class SetIKTasks(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::IKTask,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetIKTasks, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetIKTasks, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetIKTasks

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.SetIKTasks_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetIKTasks self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.SetIKTasks_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.SetIKTasks_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetIKTasks self) -> SetIKTasks

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::IKTask,OpenSim::Object > const *

        """
        return _tools.SetIKTasks_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetIKTasks self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::IKTask,OpenSim::Object > const *

        """
        return _tools.SetIKTasks_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_SetIKTasks
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::IKTask,OpenSim::Object)> self) -> SetIKTasks
        __init__(OpenSim::Set<(OpenSim::IKTask,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetIKTasks

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::IKTask,OpenSim::Object)> self, std::string const & aFileName) -> SetIKTasks

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::IKTask,OpenSim::Object)> self, SetIKTasks aSet) -> SetIKTasks

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::IKTask,OpenSim::Object > const &

        """
        this = _tools.new_SetIKTasks(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetIKTasks self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::IKTask,OpenSim::Object > *

        """
        return _tools.SetIKTasks_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetIKTasks self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _tools.SetIKTasks_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetIKTasks self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _tools.SetIKTasks_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetIKTasks self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::IKTask,OpenSim::Object > const *

        """
        return _tools.SetIKTasks_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetIKTasks self, IKTask aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::IKTask const *
        aStartIndex: int

        getIndex(SetIKTasks self, IKTask aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::IKTask const *

        getIndex(SetIKTasks self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetIKTasks self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetIKTasks_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetIKTasks self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _tools.SetIKTasks_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetIKTasks self, IKTask aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::IKTask *

        """
        return _tools.SetIKTasks_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetIKTasks self, IKTask aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::IKTask const &

        """
        return _tools.SetIKTasks_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetIKTasks self, int aIndex, IKTask aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::IKTask *

        """
        return _tools.SetIKTasks_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetIKTasks self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetIKTasks self, IKTask aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::IKTask const *

        """
        return _tools.SetIKTasks_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetIKTasks self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::IKTask,OpenSim::Object > *

        """
        return _tools.SetIKTasks_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetIKTasks self, int aIndex, IKTask aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::IKTask *
        preserveGroups: bool

        set(SetIKTasks self, int aIndex, IKTask aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::IKTask *

        """
        return _tools.SetIKTasks_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetIKTasks self, int aIndex) -> IKTask

        Parameters
        ----------
        aIndex: int

        get(SetIKTasks self, std::string const & aName) -> IKTask

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetIKTasks_get(self, *args)


    def contains(self, aName):
        """
        contains(SetIKTasks self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetIKTasks_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetIKTasks self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _tools.SetIKTasks_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetIKTasks self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::IKTask,OpenSim::Object > const *

        """
        return _tools.SetIKTasks_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetIKTasks self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _tools.SetIKTasks_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetIKTasks self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _tools.SetIKTasks_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetIKTasks self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _tools.SetIKTasks_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetIKTasks self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _tools.SetIKTasks_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetIKTasks self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _tools.SetIKTasks_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetIKTasks self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetIKTasks self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _tools.SetIKTasks_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetIKTasks_swigregister = _tools.SetIKTasks_swigregister
SetIKTasks_swigregister(SetIKTasks)

def SetIKTasks_safeDownCast(obj):
    """
    SetIKTasks_safeDownCast(OpenSimObject obj) -> SetIKTasks

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.SetIKTasks_safeDownCast(obj)

def SetIKTasks_getClassName():
    """SetIKTasks_getClassName() -> std::string const &"""
    return _tools.SetIKTasks_getClassName()

class IKMarkerTask(IKTask):
    """Proxy of C++ OpenSim::IKMarkerTask class."""

    __swig_setmethods__ = {}
    for _s in [IKTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKMarkerTask, name, value)
    __swig_getmethods__ = {}
    for _s in [IKTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKMarkerTask, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IKMarkerTask

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IKMarkerTask_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(IKMarkerTask self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IKMarkerTask_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.IKMarkerTask_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(IKMarkerTask self) -> IKMarkerTask

        Parameters
        ----------
        self: OpenSim::IKMarkerTask const *

        """
        return _tools.IKMarkerTask_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IKMarkerTask self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IKMarkerTask const *

        """
        return _tools.IKMarkerTask_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::IKMarkerTask self) -> IKMarkerTask
        __init__(OpenSim::IKMarkerTask self, IKMarkerTask aIKMarkerTask) -> IKMarkerTask

        Parameters
        ----------
        aIKMarkerTask: OpenSim::IKMarkerTask const &

        """
        this = _tools.new_IKMarkerTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_IKMarkerTask
    __del__ = lambda self: None
IKMarkerTask_swigregister = _tools.IKMarkerTask_swigregister
IKMarkerTask_swigregister(IKMarkerTask)

def IKMarkerTask_safeDownCast(obj):
    """
    IKMarkerTask_safeDownCast(OpenSimObject obj) -> IKMarkerTask

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.IKMarkerTask_safeDownCast(obj)

def IKMarkerTask_getClassName():
    """IKMarkerTask_getClassName() -> std::string const &"""
    return _tools.IKMarkerTask_getClassName()

class IKCoordinateTask(IKTask):
    """Proxy of C++ OpenSim::IKCoordinateTask class."""

    __swig_setmethods__ = {}
    for _s in [IKTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKCoordinateTask, name, value)
    __swig_getmethods__ = {}
    for _s in [IKTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKCoordinateTask, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IKCoordinateTask

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IKCoordinateTask_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(IKCoordinateTask self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IKCoordinateTask_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.IKCoordinateTask_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(IKCoordinateTask self) -> IKCoordinateTask

        Parameters
        ----------
        self: OpenSim::IKCoordinateTask const *

        """
        return _tools.IKCoordinateTask_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IKCoordinateTask self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IKCoordinateTask const *

        """
        return _tools.IKCoordinateTask_getConcreteClassName(self)

    DefaultValue = _tools.IKCoordinateTask_DefaultValue
    ManualValue = _tools.IKCoordinateTask_ManualValue
    FromFile = _tools.IKCoordinateTask_FromFile

    def __init__(self, *args):
        """
        __init__(OpenSim::IKCoordinateTask self) -> IKCoordinateTask
        __init__(OpenSim::IKCoordinateTask self, IKCoordinateTask aIKCoordinateTask) -> IKCoordinateTask

        Parameters
        ----------
        aIKCoordinateTask: OpenSim::IKCoordinateTask const &

        """
        this = _tools.new_IKCoordinateTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValueType(self, type):
        """
        setValueType(IKCoordinateTask self, OpenSim::IKCoordinateTask::ValueType type)

        Parameters
        ----------
        type: enum OpenSim::IKCoordinateTask::ValueType

        """
        return _tools.IKCoordinateTask_setValueType(self, type)


    def getValueType(self):
        """
        getValueType(IKCoordinateTask self) -> OpenSim::IKCoordinateTask::ValueType

        Parameters
        ----------
        self: OpenSim::IKCoordinateTask const *

        """
        return _tools.IKCoordinateTask_getValueType(self)


    def getValue(self):
        """
        getValue(IKCoordinateTask self) -> double

        Parameters
        ----------
        self: OpenSim::IKCoordinateTask const *

        """
        return _tools.IKCoordinateTask_getValue(self)


    def setValue(self, value):
        """
        setValue(IKCoordinateTask self, double value)

        Parameters
        ----------
        value: double

        """
        return _tools.IKCoordinateTask_setValue(self, value)


    def ValueTypeToString(type):
        """
        ValueTypeToString(OpenSim::IKCoordinateTask::ValueType type) -> std::string

        Parameters
        ----------
        type: enum OpenSim::IKCoordinateTask::ValueType

        """
        return _tools.IKCoordinateTask_ValueTypeToString(type)

    ValueTypeToString = staticmethod(ValueTypeToString)

    def StringToValueType(str):
        """
        StringToValueType(std::string const & str) -> OpenSim::IKCoordinateTask::ValueType

        Parameters
        ----------
        str: std::string const &

        """
        return _tools.IKCoordinateTask_StringToValueType(str)

    StringToValueType = staticmethod(StringToValueType)
    __swig_destroy__ = _tools.delete_IKCoordinateTask
    __del__ = lambda self: None
IKCoordinateTask_swigregister = _tools.IKCoordinateTask_swigregister
IKCoordinateTask_swigregister(IKCoordinateTask)

def IKCoordinateTask_safeDownCast(obj):
    """
    IKCoordinateTask_safeDownCast(OpenSimObject obj) -> IKCoordinateTask

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.IKCoordinateTask_safeDownCast(obj)

def IKCoordinateTask_getClassName():
    """IKCoordinateTask_getClassName() -> std::string const &"""
    return _tools.IKCoordinateTask_getClassName()

def IKCoordinateTask_ValueTypeToString(type):
    """
    IKCoordinateTask_ValueTypeToString(OpenSim::IKCoordinateTask::ValueType type) -> std::string

    Parameters
    ----------
    type: enum OpenSim::IKCoordinateTask::ValueType

    """
    return _tools.IKCoordinateTask_ValueTypeToString(type)

def IKCoordinateTask_StringToValueType(str):
    """
    IKCoordinateTask_StringToValueType(std::string const & str) -> OpenSim::IKCoordinateTask::ValueType

    Parameters
    ----------
    str: std::string const &

    """
    return _tools.IKCoordinateTask_StringToValueType(str)

class IKTaskSet(SetIKTasks):
    """Proxy of C++ OpenSim::IKTaskSet class."""

    __swig_setmethods__ = {}
    for _s in [SetIKTasks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKTaskSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetIKTasks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKTaskSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IKTaskSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IKTaskSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(IKTaskSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IKTaskSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.IKTaskSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(IKTaskSet self) -> IKTaskSet

        Parameters
        ----------
        self: OpenSim::IKTaskSet const *

        """
        return _tools.IKTaskSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IKTaskSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IKTaskSet const *

        """
        return _tools.IKTaskSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::IKTaskSet self) -> IKTaskSet
        __init__(OpenSim::IKTaskSet self, IKTaskSet aIKTaskSet) -> IKTaskSet

        Parameters
        ----------
        aIKTaskSet: OpenSim::IKTaskSet const &

        __init__(OpenSim::IKTaskSet self, std::string const & aFileName) -> IKTaskSet

        Parameters
        ----------
        aFileName: std::string const &

        """
        this = _tools.new_IKTaskSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createMarkerWeightSet(self, aWeights):
        """
        createMarkerWeightSet(IKTaskSet self, SetMarkerWeights aWeights)

        Parameters
        ----------
        aWeights: OpenSim::Set< OpenSim::MarkerWeight > &

        """
        return _tools.IKTaskSet_createMarkerWeightSet(self, aWeights)


    def adoptAndAppend(self, aIKTask):
        aIKTask._markAdopted()
        return super(IKTaskSet, self).adoptAndAppend(aIKTask)

    __swig_destroy__ = _tools.delete_IKTaskSet
    __del__ = lambda self: None
IKTaskSet_swigregister = _tools.IKTaskSet_swigregister
IKTaskSet_swigregister(IKTaskSet)

def IKTaskSet_safeDownCast(obj):
    """
    IKTaskSet_safeDownCast(OpenSimObject obj) -> IKTaskSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.IKTaskSet_safeDownCast(obj)

def IKTaskSet_getClassName():
    """IKTaskSet_getClassName() -> std::string const &"""
    return _tools.IKTaskSet_getClassName()

class MarkerPair(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::MarkerPair class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerPair, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerPair, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerPair

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.MarkerPair_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MarkerPair self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.MarkerPair_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.MarkerPair_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MarkerPair self) -> MarkerPair

        Parameters
        ----------
        self: OpenSim::MarkerPair const *

        """
        return _tools.MarkerPair_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerPair self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPair const *

        """
        return _tools.MarkerPair_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerPair self) -> MarkerPair
        __init__(OpenSim::MarkerPair self, MarkerPair aMarkerPair) -> MarkerPair

        Parameters
        ----------
        aMarkerPair: OpenSim::MarkerPair const &

        __init__(OpenSim::MarkerPair self, std::string const & aName1, std::string const & aName2) -> MarkerPair

        Parameters
        ----------
        aName1: std::string const &
        aName2: std::string const &

        """
        this = _tools.new_MarkerPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_MarkerPair
    __del__ = lambda self: None

    def copyData(self, aMarkerPair):
        """
        copyData(MarkerPair self, MarkerPair aMarkerPair)

        Parameters
        ----------
        aMarkerPair: OpenSim::MarkerPair const &

        """
        return _tools.MarkerPair_copyData(self, aMarkerPair)


    def getMarkerNames(self, aName1, aName2):
        """
        getMarkerNames(MarkerPair self, std::string & aName1, std::string & aName2)

        Parameters
        ----------
        aName1: std::string &
        aName2: std::string &

        """
        return _tools.MarkerPair_getMarkerNames(self, aName1, aName2)


    def getMarkerName(self, i):
        """
        getMarkerName(MarkerPair self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _tools.MarkerPair_getMarkerName(self, i)


    def setMarkerName(self, i, aName):
        """
        setMarkerName(MarkerPair self, int i, std::string const & aName)

        Parameters
        ----------
        i: int
        aName: std::string const &

        """
        return _tools.MarkerPair_setMarkerName(self, i, aName)

MarkerPair_swigregister = _tools.MarkerPair_swigregister
MarkerPair_swigregister(MarkerPair)

def MarkerPair_safeDownCast(obj):
    """
    MarkerPair_safeDownCast(OpenSimObject obj) -> MarkerPair

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.MarkerPair_safeDownCast(obj)

def MarkerPair_getClassName():
    """MarkerPair_getClassName() -> std::string const &"""
    return _tools.MarkerPair_getClassName()

class SetMarkerPairs(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::MarkerPair,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMarkerPairs, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMarkerPairs, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMarkerPairs

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.SetMarkerPairs_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetMarkerPairs self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.SetMarkerPairs_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.SetMarkerPairs_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetMarkerPairs self) -> SetMarkerPairs

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::MarkerPair,OpenSim::Object > const *

        """
        return _tools.SetMarkerPairs_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMarkerPairs self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::MarkerPair,OpenSim::Object > const *

        """
        return _tools.SetMarkerPairs_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_SetMarkerPairs
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::MarkerPair,OpenSim::Object)> self) -> SetMarkerPairs
        __init__(OpenSim::Set<(OpenSim::MarkerPair,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMarkerPairs

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::MarkerPair,OpenSim::Object)> self, std::string const & aFileName) -> SetMarkerPairs

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::MarkerPair,OpenSim::Object)> self, SetMarkerPairs aSet) -> SetMarkerPairs

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::MarkerPair,OpenSim::Object > const &

        """
        this = _tools.new_SetMarkerPairs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMarkerPairs self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::MarkerPair,OpenSim::Object > *

        """
        return _tools.SetMarkerPairs_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMarkerPairs self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _tools.SetMarkerPairs_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMarkerPairs self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _tools.SetMarkerPairs_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMarkerPairs self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::MarkerPair,OpenSim::Object > const *

        """
        return _tools.SetMarkerPairs_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMarkerPairs self, MarkerPair aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::MarkerPair const *
        aStartIndex: int

        getIndex(SetMarkerPairs self, MarkerPair aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::MarkerPair const *

        getIndex(SetMarkerPairs self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetMarkerPairs self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetMarkerPairs_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMarkerPairs self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _tools.SetMarkerPairs_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMarkerPairs self, MarkerPair aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MarkerPair *

        """
        return _tools.SetMarkerPairs_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMarkerPairs self, MarkerPair aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MarkerPair const &

        """
        return _tools.SetMarkerPairs_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMarkerPairs self, int aIndex, MarkerPair aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::MarkerPair *

        """
        return _tools.SetMarkerPairs_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMarkerPairs self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetMarkerPairs self, MarkerPair aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MarkerPair const *

        """
        return _tools.SetMarkerPairs_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMarkerPairs self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::MarkerPair,OpenSim::Object > *

        """
        return _tools.SetMarkerPairs_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMarkerPairs self, int aIndex, MarkerPair aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::MarkerPair *
        preserveGroups: bool

        set(SetMarkerPairs self, int aIndex, MarkerPair aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::MarkerPair *

        """
        return _tools.SetMarkerPairs_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMarkerPairs self, int aIndex) -> MarkerPair

        Parameters
        ----------
        aIndex: int

        get(SetMarkerPairs self, std::string const & aName) -> MarkerPair

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetMarkerPairs_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMarkerPairs self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetMarkerPairs_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMarkerPairs self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _tools.SetMarkerPairs_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMarkerPairs self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::MarkerPair,OpenSim::Object > const *

        """
        return _tools.SetMarkerPairs_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMarkerPairs self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _tools.SetMarkerPairs_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMarkerPairs self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _tools.SetMarkerPairs_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMarkerPairs self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _tools.SetMarkerPairs_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMarkerPairs self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _tools.SetMarkerPairs_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMarkerPairs self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _tools.SetMarkerPairs_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMarkerPairs self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetMarkerPairs self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _tools.SetMarkerPairs_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetMarkerPairs_swigregister = _tools.SetMarkerPairs_swigregister
SetMarkerPairs_swigregister(SetMarkerPairs)

def SetMarkerPairs_safeDownCast(obj):
    """
    SetMarkerPairs_safeDownCast(OpenSimObject obj) -> SetMarkerPairs

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.SetMarkerPairs_safeDownCast(obj)

def SetMarkerPairs_getClassName():
    """SetMarkerPairs_getClassName() -> std::string const &"""
    return _tools.SetMarkerPairs_getClassName()

class MarkerPairSet(SetMarkerPairs):
    """Proxy of C++ OpenSim::MarkerPairSet class."""

    __swig_setmethods__ = {}
    for _s in [SetMarkerPairs]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerPairSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetMarkerPairs]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerPairSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerPairSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.MarkerPairSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MarkerPairSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.MarkerPairSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.MarkerPairSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MarkerPairSet self) -> MarkerPairSet

        Parameters
        ----------
        self: OpenSim::MarkerPairSet const *

        """
        return _tools.MarkerPairSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerPairSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPairSet const *

        """
        return _tools.MarkerPairSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerPairSet self) -> MarkerPairSet
        __init__(OpenSim::MarkerPairSet self, MarkerPairSet aSimmMarkerPairSet) -> MarkerPairSet

        Parameters
        ----------
        aSimmMarkerPairSet: OpenSim::MarkerPairSet const &

        """
        this = _tools.new_MarkerPairSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_MarkerPairSet
    __del__ = lambda self: None

    def adoptAndAppend(self, aMarkerPair):
        aMarkerPair._markAdopted()
        return super(MarkerPairSet, self).adoptAndAppend(aMarkerPair)

MarkerPairSet_swigregister = _tools.MarkerPairSet_swigregister
MarkerPairSet_swigregister(MarkerPairSet)

def MarkerPairSet_safeDownCast(obj):
    """
    MarkerPairSet_safeDownCast(OpenSimObject obj) -> MarkerPairSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.MarkerPairSet_safeDownCast(obj)

def MarkerPairSet_getClassName():
    """MarkerPairSet_getClassName() -> std::string const &"""
    return _tools.MarkerPairSet_getClassName()

class Measurement(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Measurement class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Measurement, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Measurement, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Measurement

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.Measurement_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Measurement self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.Measurement_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.Measurement_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Measurement self) -> Measurement

        Parameters
        ----------
        self: OpenSim::Measurement const *

        """
        return _tools.Measurement_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Measurement self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Measurement const *

        """
        return _tools.Measurement_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Measurement self) -> Measurement
        __init__(OpenSim::Measurement self, Measurement aMeasurement) -> Measurement

        Parameters
        ----------
        aMeasurement: OpenSim::Measurement const &

        """
        this = _tools.new_Measurement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_Measurement
    __del__ = lambda self: None

    def copyData(self, aMeasurement):
        """
        copyData(Measurement self, Measurement aMeasurement)

        Parameters
        ----------
        aMeasurement: OpenSim::Measurement const &

        """
        return _tools.Measurement_copyData(self, aMeasurement)


    def getBodyScaleSet(self):
        """
        getBodyScaleSet(Measurement self) -> BodyScaleSet

        Parameters
        ----------
        self: OpenSim::Measurement *

        """
        return _tools.Measurement_getBodyScaleSet(self)


    def getMarkerPairSet(self):
        """
        getMarkerPairSet(Measurement self) -> MarkerPairSet

        Parameters
        ----------
        self: OpenSim::Measurement *

        """
        return _tools.Measurement_getMarkerPairSet(self)


    def getNumMarkerPairs(self):
        """
        getNumMarkerPairs(Measurement self) -> int

        Parameters
        ----------
        self: OpenSim::Measurement const *

        """
        return _tools.Measurement_getNumMarkerPairs(self)


    def getMarkerPair(self, aIndex):
        """
        getMarkerPair(Measurement self, int aIndex) -> MarkerPair

        Parameters
        ----------
        aIndex: int

        """
        return _tools.Measurement_getMarkerPair(self, aIndex)


    def getApply(self):
        """
        getApply(Measurement self) -> bool

        Parameters
        ----------
        self: OpenSim::Measurement const *

        """
        return _tools.Measurement_getApply(self)


    def setApply(self, aApply):
        """
        setApply(Measurement self, bool aApply)

        Parameters
        ----------
        aApply: bool

        """
        return _tools.Measurement_setApply(self, aApply)


    def applyScaleFactor(self, aFactor, aScaleSet):
        """
        applyScaleFactor(Measurement self, double aFactor, ScaleSet aScaleSet)

        Parameters
        ----------
        aFactor: double
        aScaleSet: OpenSim::ScaleSet &

        """
        return _tools.Measurement_applyScaleFactor(self, aFactor, aScaleSet)


    def registerTypes():
        """registerTypes()"""
        return _tools.Measurement_registerTypes()

    registerTypes = staticmethod(registerTypes)
Measurement_swigregister = _tools.Measurement_swigregister
Measurement_swigregister(Measurement)

def Measurement_safeDownCast(obj):
    """
    Measurement_safeDownCast(OpenSimObject obj) -> Measurement

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.Measurement_safeDownCast(obj)

def Measurement_getClassName():
    """Measurement_getClassName() -> std::string const &"""
    return _tools.Measurement_getClassName()

def Measurement_registerTypes():
    """Measurement_registerTypes()"""
    return _tools.Measurement_registerTypes()

class SetMeasurements(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Measurement,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMeasurements, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMeasurements, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMeasurements

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.SetMeasurements_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetMeasurements self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.SetMeasurements_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.SetMeasurements_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetMeasurements self) -> SetMeasurements

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Measurement,OpenSim::Object > const *

        """
        return _tools.SetMeasurements_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMeasurements self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Measurement,OpenSim::Object > const *

        """
        return _tools.SetMeasurements_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_SetMeasurements
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Measurement,OpenSim::Object)> self) -> SetMeasurements
        __init__(OpenSim::Set<(OpenSim::Measurement,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMeasurements

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Measurement,OpenSim::Object)> self, std::string const & aFileName) -> SetMeasurements

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Measurement,OpenSim::Object)> self, SetMeasurements aSet) -> SetMeasurements

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Measurement,OpenSim::Object > const &

        """
        this = _tools.new_SetMeasurements(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMeasurements self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Measurement,OpenSim::Object > *

        """
        return _tools.SetMeasurements_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMeasurements self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _tools.SetMeasurements_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMeasurements self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _tools.SetMeasurements_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMeasurements self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Measurement,OpenSim::Object > const *

        """
        return _tools.SetMeasurements_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMeasurements self, Measurement aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Measurement const *
        aStartIndex: int

        getIndex(SetMeasurements self, Measurement aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Measurement const *

        getIndex(SetMeasurements self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetMeasurements self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetMeasurements_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMeasurements self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _tools.SetMeasurements_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMeasurements self, Measurement aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Measurement *

        """
        return _tools.SetMeasurements_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMeasurements self, Measurement aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Measurement const &

        """
        return _tools.SetMeasurements_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMeasurements self, int aIndex, Measurement aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Measurement *

        """
        return _tools.SetMeasurements_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMeasurements self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetMeasurements self, Measurement aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Measurement const *

        """
        return _tools.SetMeasurements_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMeasurements self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Measurement,OpenSim::Object > *

        """
        return _tools.SetMeasurements_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMeasurements self, int aIndex, Measurement aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Measurement *
        preserveGroups: bool

        set(SetMeasurements self, int aIndex, Measurement aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Measurement *

        """
        return _tools.SetMeasurements_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMeasurements self, int aIndex) -> Measurement

        Parameters
        ----------
        aIndex: int

        get(SetMeasurements self, std::string const & aName) -> Measurement

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetMeasurements_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMeasurements self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetMeasurements_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMeasurements self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _tools.SetMeasurements_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMeasurements self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Measurement,OpenSim::Object > const *

        """
        return _tools.SetMeasurements_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMeasurements self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _tools.SetMeasurements_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMeasurements self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _tools.SetMeasurements_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMeasurements self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _tools.SetMeasurements_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMeasurements self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _tools.SetMeasurements_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMeasurements self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _tools.SetMeasurements_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMeasurements self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetMeasurements self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _tools.SetMeasurements_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetMeasurements_swigregister = _tools.SetMeasurements_swigregister
SetMeasurements_swigregister(SetMeasurements)

def SetMeasurements_safeDownCast(obj):
    """
    SetMeasurements_safeDownCast(OpenSimObject obj) -> SetMeasurements

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.SetMeasurements_safeDownCast(obj)

def SetMeasurements_getClassName():
    """SetMeasurements_getClassName() -> std::string const &"""
    return _tools.SetMeasurements_getClassName()

class MeasurementSet(SetMeasurements):
    """Proxy of C++ OpenSim::MeasurementSet class."""

    __swig_setmethods__ = {}
    for _s in [SetMeasurements]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasurementSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetMeasurements]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeasurementSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MeasurementSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.MeasurementSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MeasurementSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.MeasurementSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.MeasurementSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MeasurementSet self) -> MeasurementSet

        Parameters
        ----------
        self: OpenSim::MeasurementSet const *

        """
        return _tools.MeasurementSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MeasurementSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MeasurementSet const *

        """
        return _tools.MeasurementSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MeasurementSet self) -> MeasurementSet
        __init__(OpenSim::MeasurementSet self, MeasurementSet aSimmMeasurementSet) -> MeasurementSet

        Parameters
        ----------
        aSimmMeasurementSet: OpenSim::MeasurementSet const &

        """
        this = _tools.new_MeasurementSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_MeasurementSet
    __del__ = lambda self: None

    def adoptAndAppend(self, aMeasurement):
        aMeasurement._markAdopted()
        return super(MeasurementSet, self).adoptAndAppend(aMeasurement)

MeasurementSet_swigregister = _tools.MeasurementSet_swigregister
MeasurementSet_swigregister(MeasurementSet)

def MeasurementSet_safeDownCast(obj):
    """
    MeasurementSet_safeDownCast(OpenSimObject obj) -> MeasurementSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.MeasurementSet_safeDownCast(obj)

def MeasurementSet_getClassName():
    """MeasurementSet_getClassName() -> std::string const &"""
    return _tools.MeasurementSet_getClassName()

class GenericModelMaker(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::GenericModelMaker class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericModelMaker, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericModelMaker, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GenericModelMaker

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.GenericModelMaker_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(GenericModelMaker self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.GenericModelMaker_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.GenericModelMaker_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(GenericModelMaker self) -> GenericModelMaker

        Parameters
        ----------
        self: OpenSim::GenericModelMaker const *

        """
        return _tools.GenericModelMaker_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GenericModelMaker self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::GenericModelMaker const *

        """
        return _tools.GenericModelMaker_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::GenericModelMaker self) -> GenericModelMaker
        __init__(OpenSim::GenericModelMaker self, GenericModelMaker aGenericModelMaker) -> GenericModelMaker

        Parameters
        ----------
        aGenericModelMaker: OpenSim::GenericModelMaker const &

        """
        this = _tools.new_GenericModelMaker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_GenericModelMaker
    __del__ = lambda self: None

    def copyData(self, aGenericModelMaker):
        """
        copyData(GenericModelMaker self, GenericModelMaker aGenericModelMaker)

        Parameters
        ----------
        aGenericModelMaker: OpenSim::GenericModelMaker const &

        """
        return _tools.GenericModelMaker_copyData(self, aGenericModelMaker)


    def processModel(self, *args):
        """
        processModel(GenericModelMaker self, std::string const & aPathToSubject) -> Model

        Parameters
        ----------
        aPathToSubject: std::string const &

        processModel(GenericModelMaker self) -> Model

        Parameters
        ----------
        self: OpenSim::GenericModelMaker const *

        """
        return _tools.GenericModelMaker_processModel(self, *args)


    def registerTypes():
        """registerTypes()"""
        return _tools.GenericModelMaker_registerTypes()

    registerTypes = staticmethod(registerTypes)

    def getModelFileName(self):
        """
        getModelFileName(GenericModelMaker self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::GenericModelMaker const *

        """
        return _tools.GenericModelMaker_getModelFileName(self)


    def setModelFileName(self, aFileName):
        """
        setModelFileName(GenericModelMaker self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.GenericModelMaker_setModelFileName(self, aFileName)


    def getMarkerSetFileName(self):
        """
        getMarkerSetFileName(GenericModelMaker self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::GenericModelMaker const *

        """
        return _tools.GenericModelMaker_getMarkerSetFileName(self)


    def setMarkerSetFileName(self, aFileName):
        """
        setMarkerSetFileName(GenericModelMaker self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.GenericModelMaker_setMarkerSetFileName(self, aFileName)

GenericModelMaker_swigregister = _tools.GenericModelMaker_swigregister
GenericModelMaker_swigregister(GenericModelMaker)

def GenericModelMaker_safeDownCast(obj):
    """
    GenericModelMaker_safeDownCast(OpenSimObject obj) -> GenericModelMaker

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.GenericModelMaker_safeDownCast(obj)

def GenericModelMaker_getClassName():
    """GenericModelMaker_getClassName() -> std::string const &"""
    return _tools.GenericModelMaker_getClassName()

def GenericModelMaker_registerTypes():
    """GenericModelMaker_registerTypes()"""
    return _tools.GenericModelMaker_registerTypes()

class ModelScaler(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::ModelScaler class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelScaler, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelScaler, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelScaler

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.ModelScaler_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelScaler self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.ModelScaler_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.ModelScaler_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelScaler self) -> ModelScaler

        Parameters
        ----------
        self: OpenSim::ModelScaler const *

        """
        return _tools.ModelScaler_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelScaler self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelScaler const *

        """
        return _tools.ModelScaler_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ModelScaler self) -> ModelScaler
        __init__(OpenSim::ModelScaler self, ModelScaler aModelScaler) -> ModelScaler

        Parameters
        ----------
        aModelScaler: OpenSim::ModelScaler const &

        """
        this = _tools.new_ModelScaler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_ModelScaler
    __del__ = lambda self: None

    def copyData(self, aModelScaler):
        """
        copyData(ModelScaler self, ModelScaler aModelScaler)

        Parameters
        ----------
        aModelScaler: OpenSim::ModelScaler const &

        """
        return _tools.ModelScaler_copyData(self, aModelScaler)


    def processModel(self, *args):
        """
        processModel(ModelScaler self, Model aModel, std::string const & aPathToSubject, double aFinalMass=-1.0) -> bool

        Parameters
        ----------
        aModel: OpenSim::Model *
        aPathToSubject: std::string const &
        aFinalMass: double

        processModel(ModelScaler self, Model aModel, std::string const & aPathToSubject) -> bool

        Parameters
        ----------
        aModel: OpenSim::Model *
        aPathToSubject: std::string const &

        processModel(ModelScaler self, Model aModel) -> bool

        Parameters
        ----------
        aModel: OpenSim::Model *

        """
        return _tools.ModelScaler_processModel(self, *args)


    def registerTypes():
        """registerTypes()"""
        return _tools.ModelScaler_registerTypes()

    registerTypes = staticmethod(registerTypes)

    def addMeasurement(self, aMeasurement):
        """
        addMeasurement(ModelScaler self, Measurement aMeasurement)

        Parameters
        ----------
        aMeasurement: OpenSim::Measurement *

        """
        val = _tools.ModelScaler_addMeasurement(self, aMeasurement)

        aMeasurement._markAdopted()


        return val


    def addScale(self, aScale):
        """
        addScale(ModelScaler self, Scale aScale)

        Parameters
        ----------
        aScale: OpenSim::Scale *

        """
        val = _tools.ModelScaler_addScale(self, aScale)

        aScale._markAdopted()


        return val


    def getApply(self):
        """
        getApply(ModelScaler self) -> bool

        Parameters
        ----------
        self: OpenSim::ModelScaler const *

        """
        return _tools.ModelScaler_getApply(self)


    def setApply(self, aApply):
        """
        setApply(ModelScaler self, bool aApply)

        Parameters
        ----------
        aApply: bool

        """
        return _tools.ModelScaler_setApply(self, aApply)


    def getMeasurementSet(self):
        """
        getMeasurementSet(ModelScaler self) -> MeasurementSet

        Parameters
        ----------
        self: OpenSim::ModelScaler *

        """
        return _tools.ModelScaler_getMeasurementSet(self)


    def setMeasurementSet(self, measurementSet):
        """
        setMeasurementSet(ModelScaler self, MeasurementSet measurementSet)

        Parameters
        ----------
        measurementSet: OpenSim::MeasurementSet &

        """
        return _tools.ModelScaler_setMeasurementSet(self, measurementSet)


    def getScaleSet(self):
        """
        getScaleSet(ModelScaler self) -> ScaleSet

        Parameters
        ----------
        self: OpenSim::ModelScaler *

        """
        return _tools.ModelScaler_getScaleSet(self)


    def setScaleSetFile(self, aScaleSetFilename):
        """
        setScaleSetFile(ModelScaler self, std::string const & aScaleSetFilename)

        Parameters
        ----------
        aScaleSetFilename: std::string const &

        """
        return _tools.ModelScaler_setScaleSetFile(self, aScaleSetFilename)


    def getTimeRange(self):
        """
        getTimeRange(ModelScaler self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::ModelScaler const *

        """
        return _tools.ModelScaler_getTimeRange(self)


    def setTimeRange(self, timeRange):
        """
        setTimeRange(ModelScaler self, ArrayDouble timeRange)

        Parameters
        ----------
        timeRange: OpenSim::Array< double >

        """
        return _tools.ModelScaler_setTimeRange(self, timeRange)


    def getPreserveMassDist(self):
        """
        getPreserveMassDist(ModelScaler self) -> bool

        Parameters
        ----------
        self: OpenSim::ModelScaler const *

        """
        return _tools.ModelScaler_getPreserveMassDist(self)


    def setPreserveMassDist(self, preserveMassDist):
        """
        setPreserveMassDist(ModelScaler self, bool preserveMassDist)

        Parameters
        ----------
        preserveMassDist: bool

        """
        return _tools.ModelScaler_setPreserveMassDist(self, preserveMassDist)


    def getScalingOrder(self):
        """
        getScalingOrder(ModelScaler self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ModelScaler *

        """
        return _tools.ModelScaler_getScalingOrder(self)


    def setScalingOrder(self, scalingOrder):
        """
        setScalingOrder(ModelScaler self, ArrayStr scalingOrder)

        Parameters
        ----------
        scalingOrder: OpenSim::Array< std::string > &

        """
        return _tools.ModelScaler_setScalingOrder(self, scalingOrder)


    def getMarkerFileName(self):
        """
        getMarkerFileName(ModelScaler self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelScaler const *

        """
        return _tools.ModelScaler_getMarkerFileName(self)


    def setMarkerFileName(self, aMarkerFileName):
        """
        setMarkerFileName(ModelScaler self, std::string const & aMarkerFileName)

        Parameters
        ----------
        aMarkerFileName: std::string const &

        """
        return _tools.ModelScaler_setMarkerFileName(self, aMarkerFileName)


    def getOutputModelFileName(self):
        """
        getOutputModelFileName(ModelScaler self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelScaler const *

        """
        return _tools.ModelScaler_getOutputModelFileName(self)


    def setOutputModelFileName(self, aOutputModelFileName):
        """
        setOutputModelFileName(ModelScaler self, std::string const & aOutputModelFileName)

        Parameters
        ----------
        aOutputModelFileName: std::string const &

        """
        return _tools.ModelScaler_setOutputModelFileName(self, aOutputModelFileName)


    def getOutputScaleFileName(self):
        """
        getOutputScaleFileName(ModelScaler self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelScaler const *

        """
        return _tools.ModelScaler_getOutputScaleFileName(self)


    def setOutputScaleFileName(self, aOutputScaleFileName):
        """
        setOutputScaleFileName(ModelScaler self, std::string const & aOutputScaleFileName)

        Parameters
        ----------
        aOutputScaleFileName: std::string const &

        """
        return _tools.ModelScaler_setOutputScaleFileName(self, aOutputScaleFileName)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(ModelScaler self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.ModelScaler_setPrintResultFiles(self, aToWrite)


    def computeMeasurementScaleFactor(self, s, aModel, aMarkerData, aMeasurement):
        """
        computeMeasurementScaleFactor(ModelScaler self, State s, Model aModel, MarkerData aMarkerData, Measurement aMeasurement) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aModel: OpenSim::Model const &
        aMarkerData: OpenSim::MarkerData const &
        aMeasurement: OpenSim::Measurement const &

        """
        return _tools.ModelScaler_computeMeasurementScaleFactor(self, s, aModel, aMarkerData, aMeasurement)

ModelScaler_swigregister = _tools.ModelScaler_swigregister
ModelScaler_swigregister(ModelScaler)

def ModelScaler_safeDownCast(obj):
    """
    ModelScaler_safeDownCast(OpenSimObject obj) -> ModelScaler

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.ModelScaler_safeDownCast(obj)

def ModelScaler_getClassName():
    """ModelScaler_getClassName() -> std::string const &"""
    return _tools.ModelScaler_getClassName()

def ModelScaler_registerTypes():
    """ModelScaler_registerTypes()"""
    return _tools.ModelScaler_registerTypes()

class MarkerPlacer(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::MarkerPlacer class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerPlacer, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerPlacer, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerPlacer

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.MarkerPlacer_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MarkerPlacer self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.MarkerPlacer_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.MarkerPlacer_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MarkerPlacer self) -> MarkerPlacer

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerPlacer self) -> MarkerPlacer
        __init__(OpenSim::MarkerPlacer self, MarkerPlacer aMarkerPlacementParams) -> MarkerPlacer

        Parameters
        ----------
        aMarkerPlacementParams: OpenSim::MarkerPlacer const &

        """
        this = _tools.new_MarkerPlacer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_MarkerPlacer
    __del__ = lambda self: None

    def copyData(self, aMarkerPlacementParams):
        """
        copyData(MarkerPlacer self, MarkerPlacer aMarkerPlacementParams)

        Parameters
        ----------
        aMarkerPlacementParams: OpenSim::MarkerPlacer const &

        """
        return _tools.MarkerPlacer_copyData(self, aMarkerPlacementParams)


    def processModel(self, *args):
        """
        processModel(MarkerPlacer self, Model aModel, std::string const & aPathToSubject) -> bool

        Parameters
        ----------
        aModel: OpenSim::Model *
        aPathToSubject: std::string const &

        processModel(MarkerPlacer self, Model aModel) -> bool

        Parameters
        ----------
        aModel: OpenSim::Model *

        """
        return _tools.MarkerPlacer_processModel(self, *args)


    def getApply(self):
        """
        getApply(MarkerPlacer self) -> bool

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getApply(self)


    def setApply(self, aApply):
        """
        setApply(MarkerPlacer self, bool aApply)

        Parameters
        ----------
        aApply: bool

        """
        return _tools.MarkerPlacer_setApply(self, aApply)


    def getStaticPoseFileName(self):
        """
        getStaticPoseFileName(MarkerPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getStaticPoseFileName(self)


    def setStaticPoseFileName(self, aFileName):
        """
        setStaticPoseFileName(MarkerPlacer self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.MarkerPlacer_setStaticPoseFileName(self, aFileName)


    def getTimeRange(self):
        """
        getTimeRange(MarkerPlacer self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getTimeRange(self)


    def setTimeRange(self, timeRange):
        """
        setTimeRange(MarkerPlacer self, ArrayDouble timeRange)

        Parameters
        ----------
        timeRange: OpenSim::Array< double > const &

        """
        return _tools.MarkerPlacer_setTimeRange(self, timeRange)


    def getIKTaskSet(self):
        """
        getIKTaskSet(MarkerPlacer self) -> IKTaskSet

        Parameters
        ----------
        self: OpenSim::MarkerPlacer *

        """
        return _tools.MarkerPlacer_getIKTaskSet(self)


    def getCoordinateFileName(self):
        """
        getCoordinateFileName(MarkerPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getCoordinateFileName(self)


    def setCoordinateFileName(self, aCoordinateFileName):
        """
        setCoordinateFileName(MarkerPlacer self, std::string const & aCoordinateFileName)

        Parameters
        ----------
        aCoordinateFileName: std::string const &

        """
        return _tools.MarkerPlacer_setCoordinateFileName(self, aCoordinateFileName)


    def getMarkerFileName(self):
        """
        getMarkerFileName(MarkerPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getMarkerFileName(self)


    def setMarkerFileName(self, aMarkerFileName):
        """
        setMarkerFileName(MarkerPlacer self, std::string const & aMarkerFileName)

        Parameters
        ----------
        aMarkerFileName: std::string const &

        """
        return _tools.MarkerPlacer_setMarkerFileName(self, aMarkerFileName)


    def getMaxMarkerMovement(self):
        """
        getMaxMarkerMovement(MarkerPlacer self) -> double

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getMaxMarkerMovement(self)


    def setMaxMarkerMovement(self, aMaxMarkerMovement):
        """
        setMaxMarkerMovement(MarkerPlacer self, double aMaxMarkerMovement)

        Parameters
        ----------
        aMaxMarkerMovement: double

        """
        return _tools.MarkerPlacer_setMaxMarkerMovement(self, aMaxMarkerMovement)


    def getOutputModelFileName(self):
        """
        getOutputModelFileName(MarkerPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getOutputModelFileName(self)


    def setOutputModelFileName(self, aOutputModelFileName):
        """
        setOutputModelFileName(MarkerPlacer self, std::string const & aOutputModelFileName)

        Parameters
        ----------
        aOutputModelFileName: std::string const &

        """
        return _tools.MarkerPlacer_setOutputModelFileName(self, aOutputModelFileName)


    def getOutputMarkerFileName(self):
        """
        getOutputMarkerFileName(MarkerPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getOutputMarkerFileName(self)


    def setOutputMarkerFileName(self, outputMarkerFileName):
        """
        setOutputMarkerFileName(MarkerPlacer self, std::string const & outputMarkerFileName)

        Parameters
        ----------
        outputMarkerFileName: std::string const &

        """
        return _tools.MarkerPlacer_setOutputMarkerFileName(self, outputMarkerFileName)


    def getOutputMotionFileName(self):
        """
        getOutputMotionFileName(MarkerPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerPlacer const *

        """
        return _tools.MarkerPlacer_getOutputMotionFileName(self)


    def setOutputMotionFileName(self, outputMotionFileName):
        """
        setOutputMotionFileName(MarkerPlacer self, std::string const & outputMotionFileName)

        Parameters
        ----------
        outputMotionFileName: std::string const &

        """
        return _tools.MarkerPlacer_setOutputMotionFileName(self, outputMotionFileName)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(MarkerPlacer self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.MarkerPlacer_setPrintResultFiles(self, aToWrite)


    def getMoveModelMarkers(self):
        """
        getMoveModelMarkers(MarkerPlacer self) -> bool

        Parameters
        ----------
        self: OpenSim::MarkerPlacer *

        """
        return _tools.MarkerPlacer_getMoveModelMarkers(self)


    def setMoveModelMarkers(self, aMove):
        """
        setMoveModelMarkers(MarkerPlacer self, bool aMove)

        Parameters
        ----------
        aMove: bool

        """
        return _tools.MarkerPlacer_setMoveModelMarkers(self, aMove)


    def getOutputStorage(self):
        """
        getOutputStorage(MarkerPlacer self) -> Storage

        Parameters
        ----------
        self: OpenSim::MarkerPlacer *

        """
        return _tools.MarkerPlacer_getOutputStorage(self)

MarkerPlacer_swigregister = _tools.MarkerPlacer_swigregister
MarkerPlacer_swigregister(MarkerPlacer)

def MarkerPlacer_safeDownCast(obj):
    """
    MarkerPlacer_safeDownCast(OpenSimObject obj) -> MarkerPlacer

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.MarkerPlacer_safeDownCast(obj)

def MarkerPlacer_getClassName():
    """MarkerPlacer_getClassName() -> std::string const &"""
    return _tools.MarkerPlacer_getClassName()

class ScaleTool(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::ScaleTool class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleTool, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ScaleTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.ScaleTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ScaleTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.ScaleTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.ScaleTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ScaleTool self) -> ScaleTool

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ScaleTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ScaleTool self) -> ScaleTool
        __init__(OpenSim::ScaleTool self, std::string const & aFileName) -> ScaleTool

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::ScaleTool self, ScaleTool aSubject) -> ScaleTool

        Parameters
        ----------
        aSubject: OpenSim::ScaleTool const &

        """
        this = _tools.new_ScaleTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_ScaleTool
    __del__ = lambda self: None

    def copyData(self, aSubject):
        """
        copyData(ScaleTool self, ScaleTool aSubject)

        Parameters
        ----------
        aSubject: OpenSim::ScaleTool const &

        """
        return _tools.ScaleTool_copyData(self, aSubject)


    def createModel(self):
        """
        createModel(ScaleTool self) -> Model

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_createModel(self)


    def getGenericModelMaker(self):
        """
        getGenericModelMaker(ScaleTool self) -> GenericModelMaker

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_getGenericModelMaker(self)


    def getModelScaler(self):
        """
        getModelScaler(ScaleTool self) -> ModelScaler

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_getModelScaler(self)


    def getMarkerPlacer(self):
        """
        getMarkerPlacer(ScaleTool self) -> MarkerPlacer

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_getMarkerPlacer(self)


    def run(self):
        """
        run(ScaleTool self) -> bool

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_run(self)


    def isDefaultGenericModelMaker(self):
        """
        isDefaultGenericModelMaker(ScaleTool self) -> bool

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_isDefaultGenericModelMaker(self)


    def isDefaultModelScaler(self):
        """
        isDefaultModelScaler(ScaleTool self) -> bool

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_isDefaultModelScaler(self)


    def isDefaultMarkerPlacer(self):
        """
        isDefaultMarkerPlacer(ScaleTool self) -> bool

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_isDefaultMarkerPlacer(self)


    def registerTypes():
        """registerTypes()"""
        return _tools.ScaleTool_registerTypes()

    registerTypes = staticmethod(registerTypes)

    def getSubjectMass(self):
        """
        getSubjectMass(ScaleTool self) -> double

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_getSubjectMass(self)


    def getSubjectAge(self):
        """
        getSubjectAge(ScaleTool self) -> double

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_getSubjectAge(self)


    def getSubjectHeight(self):
        """
        getSubjectHeight(ScaleTool self) -> double

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_getSubjectHeight(self)


    def setSubjectMass(self, mass):
        """
        setSubjectMass(ScaleTool self, double mass)

        Parameters
        ----------
        mass: double

        """
        return _tools.ScaleTool_setSubjectMass(self, mass)


    def setSubjectAge(self, age):
        """
        setSubjectAge(ScaleTool self, double age)

        Parameters
        ----------
        age: double

        """
        return _tools.ScaleTool_setSubjectAge(self, age)


    def setSubjectHeight(self, height):
        """
        setSubjectHeight(ScaleTool self, double height)

        Parameters
        ----------
        height: double

        """
        return _tools.ScaleTool_setSubjectHeight(self, height)


    def getPathToSubject(self):
        """
        getPathToSubject(ScaleTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ScaleTool const *

        """
        return _tools.ScaleTool_getPathToSubject(self)


    def setPathToSubject(self, aPath):
        """
        setPathToSubject(ScaleTool self, std::string const & aPath)

        Parameters
        ----------
        aPath: std::string const &

        """
        return _tools.ScaleTool_setPathToSubject(self, aPath)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(ScaleTool self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.ScaleTool_setPrintResultFiles(self, aToWrite)

ScaleTool_swigregister = _tools.ScaleTool_swigregister
ScaleTool_swigregister(ScaleTool)

def ScaleTool_safeDownCast(obj):
    """
    ScaleTool_safeDownCast(OpenSimObject obj) -> ScaleTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.ScaleTool_safeDownCast(obj)

def ScaleTool_getClassName():
    """ScaleTool_getClassName() -> std::string const &"""
    return _tools.ScaleTool_getClassName()

def ScaleTool_registerTypes():
    """ScaleTool_registerTypes()"""
    return _tools.ScaleTool_registerTypes()

class Tool(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Tool class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tool, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tool, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Tool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.Tool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Tool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.Tool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.Tool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Tool self) -> Tool

        Parameters
        ----------
        self: OpenSim::Tool const *

        """
        return _tools.Tool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Tool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Tool const *

        """
        return _tools.Tool_getConcreteClassName(self)

    Quiet = _tools.Tool_Quiet
    Progress = _tools.Tool_Progress
    DetailedProgress = _tools.Tool_DetailedProgress
    Debug = _tools.Tool_Debug
    __swig_destroy__ = _tools.delete_Tool
    __del__ = lambda self: None

    def run(self):
        """
        run(Tool self) -> bool

        Parameters
        ----------
        self: OpenSim::Tool *

        """
        return _tools.Tool_run(self)


    def getInputsDir(self):
        """
        getInputsDir(Tool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Tool const *

        """
        return _tools.Tool_getInputsDir(self)


    def setInputsDir(self, aString):
        """
        setInputsDir(Tool self, std::string const & aString)

        Parameters
        ----------
        aString: std::string const &

        """
        return _tools.Tool_setInputsDir(self, aString)


    def getResultsDir(self):
        """
        getResultsDir(Tool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Tool const *

        """
        return _tools.Tool_getResultsDir(self)


    def setResultsDir(self, aString):
        """
        setResultsDir(Tool self, std::string const & aString)

        Parameters
        ----------
        aString: std::string const &

        """
        return _tools.Tool_setResultsDir(self, aString)


    def getVerboseLevel(self):
        """
        getVerboseLevel(Tool self) -> OpenSim::Tool::VerboseLevel const

        Parameters
        ----------
        self: OpenSim::Tool const *

        """
        return _tools.Tool_getVerboseLevel(self)


    def setVerboseLevel(self, aVerboseLevel):
        """
        setVerboseLevel(Tool self, OpenSim::Tool::VerboseLevel const aVerboseLevel)

        Parameters
        ----------
        aVerboseLevel: enum OpenSim::Tool::VerboseLevel const

        """
        return _tools.Tool_setVerboseLevel(self, aVerboseLevel)

Tool_swigregister = _tools.Tool_swigregister
Tool_swigregister(Tool)

def Tool_safeDownCast(obj):
    """
    Tool_safeDownCast(OpenSimObject obj) -> Tool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.Tool_safeDownCast(obj)

def Tool_getClassName():
    """Tool_getClassName() -> std::string const &"""
    return _tools.Tool_getClassName()

class DynamicsTool(Tool):
    """Proxy of C++ OpenSim::DynamicsTool class."""

    __swig_setmethods__ = {}
    for _s in [Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicsTool, name, value)
    __swig_getmethods__ = {}
    for _s in [Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicsTool, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> DynamicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.DynamicsTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(DynamicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.DynamicsTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.DynamicsTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(DynamicsTool self) -> DynamicsTool

        Parameters
        ----------
        self: OpenSim::DynamicsTool const *

        """
        return _tools.DynamicsTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(DynamicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::DynamicsTool const *

        """
        return _tools.DynamicsTool_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_DynamicsTool
    __del__ = lambda self: None

    def disableModelForces(self, model, s, forcesByNameOrGroup):
        """
        disableModelForces(DynamicsTool self, Model model, State s, ArrayStr forcesByNameOrGroup)

        Parameters
        ----------
        model: OpenSim::Model &
        s: SimTK::State &
        forcesByNameOrGroup: OpenSim::Array< std::string > const &

        """
        return _tools.DynamicsTool_disableModelForces(self, model, s, forcesByNameOrGroup)


    def getExternalLoads(self):
        """
        getExternalLoads(DynamicsTool self) -> ExternalLoads

        Parameters
        ----------
        self: OpenSim::DynamicsTool const *

        """
        return _tools.DynamicsTool_getExternalLoads(self)


    def updExternalLoads(self):
        """
        updExternalLoads(DynamicsTool self) -> ExternalLoads

        Parameters
        ----------
        self: OpenSim::DynamicsTool *

        """
        return _tools.DynamicsTool_updExternalLoads(self)


    def getExternalLoadsFileName(self):
        """
        getExternalLoadsFileName(DynamicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::DynamicsTool const *

        """
        return _tools.DynamicsTool_getExternalLoadsFileName(self)


    def setExternalLoadsFileName(self, aFileName):
        """
        setExternalLoadsFileName(DynamicsTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.DynamicsTool_setExternalLoadsFileName(self, aFileName)


    def setModelFileName(self, aFileName):
        """
        setModelFileName(DynamicsTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.DynamicsTool_setModelFileName(self, aFileName)


    def getModelFileName(self):
        """
        getModelFileName(DynamicsTool self) -> std::string

        Parameters
        ----------
        self: OpenSim::DynamicsTool const *

        """
        return _tools.DynamicsTool_getModelFileName(self)


    def setStartTime(self, d):
        """
        setStartTime(DynamicsTool self, double d)

        Parameters
        ----------
        d: double

        """
        return _tools.DynamicsTool_setStartTime(self, d)


    def getStartTime(self):
        """
        getStartTime(DynamicsTool self) -> double

        Parameters
        ----------
        self: OpenSim::DynamicsTool const *

        """
        return _tools.DynamicsTool_getStartTime(self)


    def setEndTime(self, d):
        """
        setEndTime(DynamicsTool self, double d)

        Parameters
        ----------
        d: double

        """
        return _tools.DynamicsTool_setEndTime(self, d)


    def getEndTime(self):
        """
        getEndTime(DynamicsTool self) -> double

        Parameters
        ----------
        self: OpenSim::DynamicsTool const *

        """
        return _tools.DynamicsTool_getEndTime(self)


    def setModel(self, aModel):
        """
        setModel(DynamicsTool self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.DynamicsTool_setModel(self, aModel)


    def setExcludedForces(self, aExcluded):
        """
        setExcludedForces(DynamicsTool self, ArrayStr aExcluded)

        Parameters
        ----------
        aExcluded: OpenSim::Array< std::string > const &

        """
        return _tools.DynamicsTool_setExcludedForces(self, aExcluded)


    def createExternalLoads(self, externalLoadsFileName, model):
        """
        createExternalLoads(DynamicsTool self, std::string const & externalLoadsFileName, Model model) -> bool

        Parameters
        ----------
        externalLoadsFileName: std::string const &
        model: OpenSim::Model &

        """
        return _tools.DynamicsTool_createExternalLoads(self, externalLoadsFileName, model)


    def modelHasExternalLoads(self):
        """
        modelHasExternalLoads(DynamicsTool self) -> bool

        Parameters
        ----------
        self: OpenSim::DynamicsTool *

        """
        return _tools.DynamicsTool_modelHasExternalLoads(self)


    def removeExternalLoadsFromModel(self):
        """
        removeExternalLoadsFromModel(DynamicsTool self)

        Parameters
        ----------
        self: OpenSim::DynamicsTool *

        """
        return _tools.DynamicsTool_removeExternalLoadsFromModel(self)


    def run(self):
        """
        run(DynamicsTool self) -> bool

        Parameters
        ----------
        self: OpenSim::DynamicsTool *

        """
        return _tools.DynamicsTool_run(self)

DynamicsTool_swigregister = _tools.DynamicsTool_swigregister
DynamicsTool_swigregister(DynamicsTool)

def DynamicsTool_safeDownCast(obj):
    """
    DynamicsTool_safeDownCast(OpenSimObject obj) -> DynamicsTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.DynamicsTool_safeDownCast(obj)

def DynamicsTool_getClassName():
    """DynamicsTool_getClassName() -> std::string const &"""
    return _tools.DynamicsTool_getClassName()

class InverseDynamicsTool(DynamicsTool):
    """Proxy of C++ OpenSim::InverseDynamicsTool class."""

    __swig_setmethods__ = {}
    for _s in [DynamicsTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseDynamicsTool, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicsTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseDynamicsTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InverseDynamicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.InverseDynamicsTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(InverseDynamicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.InverseDynamicsTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.InverseDynamicsTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(InverseDynamicsTool self) -> InverseDynamicsTool

        Parameters
        ----------
        self: OpenSim::InverseDynamicsTool const *

        """
        return _tools.InverseDynamicsTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InverseDynamicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::InverseDynamicsTool const *

        """
        return _tools.InverseDynamicsTool_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_InverseDynamicsTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::InverseDynamicsTool self) -> InverseDynamicsTool
        __init__(OpenSim::InverseDynamicsTool self, std::string const & aFileName, bool aLoadModel=True) -> InverseDynamicsTool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModel: bool

        __init__(OpenSim::InverseDynamicsTool self, std::string const & aFileName) -> InverseDynamicsTool

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::InverseDynamicsTool self, InverseDynamicsTool aObject) -> InverseDynamicsTool

        Parameters
        ----------
        aObject: OpenSim::InverseDynamicsTool const &

        """
        this = _tools.new_InverseDynamicsTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def registerTypes():
        """registerTypes()"""
        return _tools.InverseDynamicsTool_registerTypes()

    registerTypes = staticmethod(registerTypes)

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(InverseDynamicsTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(InverseDynamicsTool self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _tools.InverseDynamicsTool_updateFromXMLNode(self, aNode, versionNumber)


    def setCoordinateValues(self, aStorage):
        """
        setCoordinateValues(InverseDynamicsTool self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage const &

        """
        return _tools.InverseDynamicsTool_setCoordinateValues(self, aStorage)


    def getOutputGenForceFileName(self):
        """
        getOutputGenForceFileName(InverseDynamicsTool self) -> std::string

        Parameters
        ----------
        self: OpenSim::InverseDynamicsTool const *

        """
        return _tools.InverseDynamicsTool_getOutputGenForceFileName(self)


    def setOutputGenForceFileName(self, desiredOutputFileName):
        """
        setOutputGenForceFileName(InverseDynamicsTool self, std::string const & desiredOutputFileName)

        Parameters
        ----------
        desiredOutputFileName: std::string const &

        """
        return _tools.InverseDynamicsTool_setOutputGenForceFileName(self, desiredOutputFileName)


    def getCoordinatesFileName(self):
        """
        getCoordinatesFileName(InverseDynamicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::InverseDynamicsTool const *

        """
        return _tools.InverseDynamicsTool_getCoordinatesFileName(self)


    def setCoordinatesFileName(self, aCoordinateFile):
        """
        setCoordinatesFileName(InverseDynamicsTool self, std::string const & aCoordinateFile)

        Parameters
        ----------
        aCoordinateFile: std::string const &

        """
        return _tools.InverseDynamicsTool_setCoordinatesFileName(self, aCoordinateFile)


    def getLowpassCutoffFrequency(self):
        """
        getLowpassCutoffFrequency(InverseDynamicsTool self) -> double const

        Parameters
        ----------
        self: OpenSim::InverseDynamicsTool const *

        """
        return _tools.InverseDynamicsTool_getLowpassCutoffFrequency(self)


    def setLowpassCutoffFrequency(self, aFrequency):
        """
        setLowpassCutoffFrequency(InverseDynamicsTool self, double aFrequency)

        Parameters
        ----------
        aFrequency: double

        """
        return _tools.InverseDynamicsTool_setLowpassCutoffFrequency(self, aFrequency)


    def run(self):
        """
        run(InverseDynamicsTool self) -> bool

        Parameters
        ----------
        self: OpenSim::InverseDynamicsTool *

        """
        return _tools.InverseDynamicsTool_run(self)

InverseDynamicsTool_swigregister = _tools.InverseDynamicsTool_swigregister
InverseDynamicsTool_swigregister(InverseDynamicsTool)

def InverseDynamicsTool_safeDownCast(obj):
    """
    InverseDynamicsTool_safeDownCast(OpenSimObject obj) -> InverseDynamicsTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.InverseDynamicsTool_safeDownCast(obj)

def InverseDynamicsTool_getClassName():
    """InverseDynamicsTool_getClassName() -> std::string const &"""
    return _tools.InverseDynamicsTool_getClassName()

def InverseDynamicsTool_registerTypes():
    """InverseDynamicsTool_registerTypes()"""
    return _tools.InverseDynamicsTool_registerTypes()

class ForwardTool(opensim.simulation.AbstractTool):
    """Proxy of C++ OpenSim::ForwardTool class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.AbstractTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardTool, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.AbstractTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForwardTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.ForwardTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ForwardTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.ForwardTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.ForwardTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ForwardTool self) -> ForwardTool

        Parameters
        ----------
        self: OpenSim::ForwardTool const *

        """
        return _tools.ForwardTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForwardTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ForwardTool const *

        """
        return _tools.ForwardTool_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_ForwardTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ForwardTool self) -> ForwardTool
        __init__(OpenSim::ForwardTool self, std::string const & aFileName, bool aUpdateFromXMLNode=True, bool aLoadModel=True) -> ForwardTool

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool
        aLoadModel: bool

        __init__(OpenSim::ForwardTool self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> ForwardTool

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::ForwardTool self, std::string const & aFileName) -> ForwardTool

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::ForwardTool self, ForwardTool aObject) -> ForwardTool

        Parameters
        ----------
        aObject: OpenSim::ForwardTool const &

        """
        this = _tools.new_ForwardTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(ForwardTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(ForwardTool self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _tools.ForwardTool_updateFromXMLNode(self, aNode, versionNumber)


    def setManager(self, m):
        """
        setManager(ForwardTool self, Manager m)

        Parameters
        ----------
        m: OpenSim::Manager &

        """
        return _tools.ForwardTool_setManager(self, m)


    def getManager(self):
        """
        getManager(ForwardTool self) -> Manager

        Parameters
        ----------
        self: OpenSim::ForwardTool const *

        """
        return _tools.ForwardTool_getManager(self)


    def getStatesFileName(self):
        """
        getStatesFileName(ForwardTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ForwardTool const *

        """
        return _tools.ForwardTool_getStatesFileName(self)


    def setStatesFileName(self, aFileName):
        """
        setStatesFileName(ForwardTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.ForwardTool_setStatesFileName(self, aFileName)


    def getUseSpecifiedDt(self):
        """
        getUseSpecifiedDt(ForwardTool self) -> bool

        Parameters
        ----------
        self: OpenSim::ForwardTool const *

        """
        return _tools.ForwardTool_getUseSpecifiedDt(self)


    def setUseSpecifiedDt(self, aUseSpecifiedDt):
        """
        setUseSpecifiedDt(ForwardTool self, bool aUseSpecifiedDt)

        Parameters
        ----------
        aUseSpecifiedDt: bool

        """
        return _tools.ForwardTool_setUseSpecifiedDt(self, aUseSpecifiedDt)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(ForwardTool self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.ForwardTool_setPrintResultFiles(self, aToWrite)


    def run(self):
        """
        run(ForwardTool self) -> bool

        Parameters
        ----------
        self: OpenSim::ForwardTool *

        """
        return _tools.ForwardTool_run(self)


    def printResults(self):
        """
        printResults(ForwardTool self)

        Parameters
        ----------
        self: OpenSim::ForwardTool *

        """
        return _tools.ForwardTool_printResults(self)


    def Step(t, t0, t1):
        """
        Step(double t, double t0, double t1) -> double

        Parameters
        ----------
        t: double
        t0: double
        t1: double

        """
        return _tools.ForwardTool_Step(t, t0, t1)

    Step = staticmethod(Step)

    def SigmaUp(tau, to, t):
        """
        SigmaUp(double tau, double to, double t) -> double

        Parameters
        ----------
        tau: double
        to: double
        t: double

        """
        return _tools.ForwardTool_SigmaUp(tau, to, t)

    SigmaUp = staticmethod(SigmaUp)

    def SigmaDn(tau, to, t):
        """
        SigmaDn(double tau, double to, double t) -> double

        Parameters
        ----------
        tau: double
        to: double
        t: double

        """
        return _tools.ForwardTool_SigmaDn(tau, to, t)

    SigmaDn = staticmethod(SigmaDn)

    def loadStatesStorage(self, statesFileName, rYStore):
        """
        loadStatesStorage(ForwardTool self, std::string & statesFileName, OpenSim::Storage *& rYStore)

        Parameters
        ----------
        statesFileName: std::string &
        rYStore: OpenSim::Storage *&

        """
        return _tools.ForwardTool_loadStatesStorage(self, statesFileName, rYStore)


    def getParsingLog(self):
        """
        getParsingLog(ForwardTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ForwardTool *

        """
        return _tools.ForwardTool_getParsingLog(self)

ForwardTool_swigregister = _tools.ForwardTool_swigregister
ForwardTool_swigregister(ForwardTool)

def ForwardTool_safeDownCast(obj):
    """
    ForwardTool_safeDownCast(OpenSimObject obj) -> ForwardTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.ForwardTool_safeDownCast(obj)

def ForwardTool_getClassName():
    """ForwardTool_getClassName() -> std::string const &"""
    return _tools.ForwardTool_getClassName()

def ForwardTool_Step(t, t0, t1):
    """
    ForwardTool_Step(double t, double t0, double t1) -> double

    Parameters
    ----------
    t: double
    t0: double
    t1: double

    """
    return _tools.ForwardTool_Step(t, t0, t1)

def ForwardTool_SigmaUp(tau, to, t):
    """
    ForwardTool_SigmaUp(double tau, double to, double t) -> double

    Parameters
    ----------
    tau: double
    to: double
    t: double

    """
    return _tools.ForwardTool_SigmaUp(tau, to, t)

def ForwardTool_SigmaDn(tau, to, t):
    """
    ForwardTool_SigmaDn(double tau, double to, double t) -> double

    Parameters
    ----------
    tau: double
    to: double
    t: double

    """
    return _tools.ForwardTool_SigmaDn(tau, to, t)

class TrackingTask(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::TrackingTask class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrackingTask, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrackingTask, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TrackingTask

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.TrackingTask_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TrackingTask self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.TrackingTask_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.TrackingTask_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TrackingTask self) -> TrackingTask

        Parameters
        ----------
        self: OpenSim::TrackingTask const *

        """
        return _tools.TrackingTask_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TrackingTask self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TrackingTask const *

        """
        return _tools.TrackingTask_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_TrackingTask
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(TrackingTask self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.TrackingTask_setModel(self, aModel)


    def getModel(self):
        """
        getModel(TrackingTask self) -> Model

        Parameters
        ----------
        self: OpenSim::TrackingTask const *

        """
        return _tools.TrackingTask_getModel(self)


    def setOn(self, aTrueFalse):
        """
        setOn(TrackingTask self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _tools.TrackingTask_setOn(self, aTrueFalse)


    def getOn(self):
        """
        getOn(TrackingTask self) -> bool

        Parameters
        ----------
        self: OpenSim::TrackingTask const *

        """
        return _tools.TrackingTask_getOn(self)


    def setWeight(self, aW0, aW1=0.0, aW2=0.0):
        """
        setWeight(TrackingTask self, double aW0, double aW1=0.0, double aW2=0.0)

        Parameters
        ----------
        aW0: double
        aW1: double
        aW2: double

        setWeight(TrackingTask self, double aW0, double aW1=0.0)

        Parameters
        ----------
        aW0: double
        aW1: double

        setWeight(TrackingTask self, double aW0)

        Parameters
        ----------
        aW0: double

        """
        return _tools.TrackingTask_setWeight(self, aW0, aW1, aW2)


    def setWeights(self, aWeights):
        """
        setWeights(TrackingTask self, ArrayDouble aWeights)

        Parameters
        ----------
        aWeights: OpenSim::Array< double > const &

        """
        return _tools.TrackingTask_setWeights(self, aWeights)


    def getWeight(self, aWhich):
        """
        getWeight(TrackingTask self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.TrackingTask_getWeight(self, aWhich)


    def getWeights(self):
        """
        getWeights(TrackingTask self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::TrackingTask const *

        """
        return _tools.TrackingTask_getWeights(self)


    def getNumTaskFunctions(self):
        """
        getNumTaskFunctions(TrackingTask self) -> int

        Parameters
        ----------
        self: OpenSim::TrackingTask const *

        """
        return _tools.TrackingTask_getNumTaskFunctions(self)


    def setTaskFunctions(self, aF0, aF1=None, aF2=None):
        """
        setTaskFunctions(TrackingTask self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *
        aF2: OpenSim::Function *

        setTaskFunctions(TrackingTask self, Function aF0, Function aF1=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *

        setTaskFunctions(TrackingTask self, Function aF0)

        Parameters
        ----------
        aF0: OpenSim::Function *

        """
        return _tools.TrackingTask_setTaskFunctions(self, aF0, aF1, aF2)

TrackingTask_swigregister = _tools.TrackingTask_swigregister
TrackingTask_swigregister(TrackingTask)

def TrackingTask_safeDownCast(obj):
    """
    TrackingTask_safeDownCast(OpenSimObject obj) -> TrackingTask

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.TrackingTask_safeDownCast(obj)

def TrackingTask_getClassName():
    """TrackingTask_getClassName() -> std::string const &"""
    return _tools.TrackingTask_getClassName()

class CMC_Task(TrackingTask):
    """Proxy of C++ OpenSim::CMC_Task class."""

    __swig_setmethods__ = {}
    for _s in [TrackingTask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMC_Task, name, value)
    __swig_getmethods__ = {}
    for _s in [TrackingTask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMC_Task, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMC_Task

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMC_Task_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CMC_Task self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMC_Task_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.CMC_Task_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CMC_Task self) -> CMC_Task

        Parameters
        ----------
        self: OpenSim::CMC_Task const *

        """
        return _tools.CMC_Task_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMC_Task self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMC_Task const *

        """
        return _tools.CMC_Task_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_CMC_Task
    __del__ = lambda self: None

    def setWRTBodyName(self, aBodyName):
        """
        setWRTBodyName(CMC_Task self, std::string aBodyName)

        Parameters
        ----------
        aBodyName: std::string

        """
        return _tools.CMC_Task_setWRTBodyName(self, aBodyName)


    def getWRTBodyName(self):
        """
        getWRTBodyName(CMC_Task self) -> std::string

        Parameters
        ----------
        self: OpenSim::CMC_Task const *

        """
        return _tools.CMC_Task_getWRTBodyName(self)


    def setExpressBodyName(self, aBodyName):
        """
        setExpressBodyName(CMC_Task self, std::string aBodyName)

        Parameters
        ----------
        aBodyName: std::string

        """
        return _tools.CMC_Task_setExpressBodyName(self, aBodyName)


    def getExpressBodyName(self):
        """
        getExpressBodyName(CMC_Task self) -> std::string

        Parameters
        ----------
        self: OpenSim::CMC_Task const *

        """
        return _tools.CMC_Task_getExpressBodyName(self)


    def setActive(self, a0, a1=False, a2=False):
        """
        setActive(CMC_Task self, bool a0, bool a1=False, bool a2=False)

        Parameters
        ----------
        a0: bool
        a1: bool
        a2: bool

        setActive(CMC_Task self, bool a0, bool a1=False)

        Parameters
        ----------
        a0: bool
        a1: bool

        setActive(CMC_Task self, bool a0)

        Parameters
        ----------
        a0: bool

        """
        return _tools.CMC_Task_setActive(self, a0, a1, a2)


    def getActive(self, aWhich):
        """
        getActive(CMC_Task self, int aWhich) -> bool

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getActive(self, aWhich)


    def setWeight(self, aW0, aW1=0.0, aW2=0.0):
        """
        setWeight(CMC_Task self, double aW0, double aW1=0.0, double aW2=0.0)

        Parameters
        ----------
        aW0: double
        aW1: double
        aW2: double

        setWeight(CMC_Task self, double aW0, double aW1=0.0)

        Parameters
        ----------
        aW0: double
        aW1: double

        setWeight(CMC_Task self, double aW0)

        Parameters
        ----------
        aW0: double

        """
        return _tools.CMC_Task_setWeight(self, aW0, aW1, aW2)


    def getWeight(self, aWhich):
        """
        getWeight(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getWeight(self, aWhich)


    def setKP(self, aK0, aK1=0.0, aK2=0.0):
        """
        setKP(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double
        aK2: double

        setKP(CMC_Task self, double aK0, double aK1=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double

        setKP(CMC_Task self, double aK0)

        Parameters
        ----------
        aK0: double

        """
        return _tools.CMC_Task_setKP(self, aK0, aK1, aK2)


    def getKP(self, aWhich):
        """
        getKP(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getKP(self, aWhich)


    def setKV(self, aK0, aK1=0.0, aK2=0.0):
        """
        setKV(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double
        aK2: double

        setKV(CMC_Task self, double aK0, double aK1=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double

        setKV(CMC_Task self, double aK0)

        Parameters
        ----------
        aK0: double

        """
        return _tools.CMC_Task_setKV(self, aK0, aK1, aK2)


    def getKV(self, aWhich):
        """
        getKV(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getKV(self, aWhich)


    def setKA(self, aK0, aK1=0.0, aK2=0.0):
        """
        setKA(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double
        aK2: double

        setKA(CMC_Task self, double aK0, double aK1=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double

        setKA(CMC_Task self, double aK0)

        Parameters
        ----------
        aK0: double

        """
        return _tools.CMC_Task_setKA(self, aK0, aK1, aK2)


    def getKA(self, aWhich):
        """
        getKA(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getKA(self, aWhich)


    def setDirection_0(self, aR):
        """
        setDirection_0(CMC_Task self, Vec3 aR)

        Parameters
        ----------
        aR: SimTK::Vec3 const &

        """
        return _tools.CMC_Task_setDirection_0(self, aR)


    def getDirection_0(self, rR):
        """
        getDirection_0(CMC_Task self, Vec3 rR)

        Parameters
        ----------
        rR: SimTK::Vec3 &

        """
        return _tools.CMC_Task_getDirection_0(self, rR)


    def setDirection_1(self, aR):
        """
        setDirection_1(CMC_Task self, Vec3 aR)

        Parameters
        ----------
        aR: SimTK::Vec3 const &

        """
        return _tools.CMC_Task_setDirection_1(self, aR)


    def getDirection_1(self, rR):
        """
        getDirection_1(CMC_Task self, Vec3 rR)

        Parameters
        ----------
        rR: SimTK::Vec3 &

        """
        return _tools.CMC_Task_getDirection_1(self, rR)


    def setDirection_2(self, aR):
        """
        setDirection_2(CMC_Task self, Vec3 aR)

        Parameters
        ----------
        aR: SimTK::Vec3 const &

        """
        return _tools.CMC_Task_setDirection_2(self, aR)


    def getDirection_2(self, rR):
        """
        getDirection_2(CMC_Task self, Vec3 rR)

        Parameters
        ----------
        rR: SimTK::Vec3 &

        """
        return _tools.CMC_Task_getDirection_2(self, rR)


    def getTaskFunction(self, aWhich):
        """
        getTaskFunction(CMC_Task self, int aWhich) -> Function

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getTaskFunction(self, aWhich)


    def setTaskFunctionsForVelocity(self, aF0, aF1=None, aF2=None):
        """
        setTaskFunctionsForVelocity(CMC_Task self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *
        aF2: OpenSim::Function *

        setTaskFunctionsForVelocity(CMC_Task self, Function aF0, Function aF1=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *

        setTaskFunctionsForVelocity(CMC_Task self, Function aF0)

        Parameters
        ----------
        aF0: OpenSim::Function *

        """
        return _tools.CMC_Task_setTaskFunctionsForVelocity(self, aF0, aF1, aF2)


    def getTaskFunctionForVelocity(self, aWhich):
        """
        getTaskFunctionForVelocity(CMC_Task self, int aWhich) -> Function

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getTaskFunctionForVelocity(self, aWhich)


    def setTaskFunctionsForAcceleration(self, aF0, aF1=None, aF2=None):
        """
        setTaskFunctionsForAcceleration(CMC_Task self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *
        aF2: OpenSim::Function *

        setTaskFunctionsForAcceleration(CMC_Task self, Function aF0, Function aF1=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *

        setTaskFunctionsForAcceleration(CMC_Task self, Function aF0)

        Parameters
        ----------
        aF0: OpenSim::Function *

        """
        return _tools.CMC_Task_setTaskFunctionsForAcceleration(self, aF0, aF1, aF2)


    def getTaskFunctionForAcceleration(self, aWhich):
        """
        getTaskFunctionForAcceleration(CMC_Task self, int aWhich) -> Function

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getTaskFunctionForAcceleration(self, aWhich)


    def getTaskPosition(self, aWhich, aT):
        """
        getTaskPosition(CMC_Task self, int aWhich, double aT) -> double

        Parameters
        ----------
        aWhich: int
        aT: double

        """
        return _tools.CMC_Task_getTaskPosition(self, aWhich, aT)


    def getTaskVelocity(self, aWhich, aT):
        """
        getTaskVelocity(CMC_Task self, int aWhich, double aT) -> double

        Parameters
        ----------
        aWhich: int
        aT: double

        """
        return _tools.CMC_Task_getTaskVelocity(self, aWhich, aT)


    def getTaskAcceleration(self, aWhich, aT):
        """
        getTaskAcceleration(CMC_Task self, int aWhich, double aT) -> double

        Parameters
        ----------
        aWhich: int
        aT: double

        """
        return _tools.CMC_Task_getTaskAcceleration(self, aWhich, aT)


    def setPositionErrorLast(self, aE0, aE1=0.0, aE2=0.0):
        """
        setPositionErrorLast(CMC_Task self, double aE0, double aE1=0.0, double aE2=0.0)

        Parameters
        ----------
        aE0: double
        aE1: double
        aE2: double

        setPositionErrorLast(CMC_Task self, double aE0, double aE1=0.0)

        Parameters
        ----------
        aE0: double
        aE1: double

        setPositionErrorLast(CMC_Task self, double aE0)

        Parameters
        ----------
        aE0: double

        """
        return _tools.CMC_Task_setPositionErrorLast(self, aE0, aE1, aE2)


    def getPositionErrorLast(self, aWhich):
        """
        getPositionErrorLast(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getPositionErrorLast(self, aWhich)


    def setVelocityErrorLast(self, aE0, aE1=0.0, aE2=0.0):
        """
        setVelocityErrorLast(CMC_Task self, double aE0, double aE1=0.0, double aE2=0.0)

        Parameters
        ----------
        aE0: double
        aE1: double
        aE2: double

        setVelocityErrorLast(CMC_Task self, double aE0, double aE1=0.0)

        Parameters
        ----------
        aE0: double
        aE1: double

        setVelocityErrorLast(CMC_Task self, double aE0)

        Parameters
        ----------
        aE0: double

        """
        return _tools.CMC_Task_setVelocityErrorLast(self, aE0, aE1, aE2)


    def getVelocityErrorLast(self, aWhich):
        """
        getVelocityErrorLast(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getVelocityErrorLast(self, aWhich)


    def getPositionError(self, aWhich):
        """
        getPositionError(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getPositionError(self, aWhich)


    def getVelocityError(self, aWhich):
        """
        getVelocityError(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getVelocityError(self, aWhich)


    def getDesiredAcceleration(self, aWhich):
        """
        getDesiredAcceleration(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getDesiredAcceleration(self, aWhich)


    def getAcceleration(self, aWhich):
        """
        getAcceleration(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getAcceleration(self, aWhich)


    def computeErrors(self, s, aT):
        """
        computeErrors(CMC_Task self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        """
        return _tools.CMC_Task_computeErrors(self, s, aT)


    def computeDesiredAccelerations(self, *args):
        """
        computeDesiredAccelerations(CMC_Task self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        computeDesiredAccelerations(CMC_Task self, State s, double aTI, double aTF)

        Parameters
        ----------
        s: SimTK::State const &
        aTI: double
        aTF: double

        """
        return _tools.CMC_Task_computeDesiredAccelerations(self, *args)


    def computeAccelerations(self, s):
        """
        computeAccelerations(CMC_Task self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _tools.CMC_Task_computeAccelerations(self, s)


    def computeJacobian(self):
        """
        computeJacobian(CMC_Task self)

        Parameters
        ----------
        self: OpenSim::CMC_Task *

        """
        return _tools.CMC_Task_computeJacobian(self)


    def computeEffectiveMassMatrix(self):
        """
        computeEffectiveMassMatrix(CMC_Task self)

        Parameters
        ----------
        self: OpenSim::CMC_Task *

        """
        return _tools.CMC_Task_computeEffectiveMassMatrix(self)

CMC_Task_swigregister = _tools.CMC_Task_swigregister
CMC_Task_swigregister(CMC_Task)

def CMC_Task_safeDownCast(obj):
    """
    CMC_Task_safeDownCast(OpenSimObject obj) -> CMC_Task

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.CMC_Task_safeDownCast(obj)

def CMC_Task_getClassName():
    """CMC_Task_getClassName() -> std::string const &"""
    return _tools.CMC_Task_getClassName()

class CMC_Joint(CMC_Task):
    """Proxy of C++ OpenSim::CMC_Joint class."""

    __swig_setmethods__ = {}
    for _s in [CMC_Task]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMC_Joint, name, value)
    __swig_getmethods__ = {}
    for _s in [CMC_Task]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMC_Joint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMC_Joint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMC_Joint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CMC_Joint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMC_Joint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.CMC_Joint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CMC_Joint self) -> CMC_Joint

        Parameters
        ----------
        self: OpenSim::CMC_Joint const *

        """
        return _tools.CMC_Joint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMC_Joint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMC_Joint const *

        """
        return _tools.CMC_Joint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::CMC_Joint self, std::string const & aCoordinateName) -> CMC_Joint

        Parameters
        ----------
        aCoordinateName: std::string const &

        __init__(OpenSim::CMC_Joint self) -> CMC_Joint
        __init__(OpenSim::CMC_Joint self, CMC_Joint aTask) -> CMC_Joint

        Parameters
        ----------
        aTask: OpenSim::CMC_Joint const &

        """
        this = _tools.new_CMC_Joint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_CMC_Joint
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(CMC_Joint self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.CMC_Joint_setModel(self, aModel)


    def setCoordinateName(self, aName):
        """
        setCoordinateName(CMC_Joint self, std::string const & aName)

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.CMC_Joint_setCoordinateName(self, aName)


    def getCoordinateName(self):
        """
        getCoordinateName(CMC_Joint self) -> std::string

        Parameters
        ----------
        self: OpenSim::CMC_Joint const *

        """
        return _tools.CMC_Joint_getCoordinateName(self)


    def getLimit(self):
        """
        getLimit(CMC_Joint self) -> double

        Parameters
        ----------
        self: OpenSim::CMC_Joint const *

        """
        return _tools.CMC_Joint_getLimit(self)


    def computeErrors(self, s, aT):
        """
        computeErrors(CMC_Joint self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        """
        return _tools.CMC_Joint_computeErrors(self, s, aT)


    def computeDesiredAccelerations(self, *args):
        """
        computeDesiredAccelerations(CMC_Joint self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        computeDesiredAccelerations(CMC_Joint self, State s, double aTI, double aTF)

        Parameters
        ----------
        s: SimTK::State const &
        aTI: double
        aTF: double

        """
        return _tools.CMC_Joint_computeDesiredAccelerations(self, *args)


    def computeAccelerations(self, s):
        """
        computeAccelerations(CMC_Joint self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _tools.CMC_Joint_computeAccelerations(self, s)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(CMC_Joint self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(CMC_Joint self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _tools.CMC_Joint_updateFromXMLNode(self, aNode, versionNumber)

CMC_Joint_swigregister = _tools.CMC_Joint_swigregister
CMC_Joint_swigregister(CMC_Joint)

def CMC_Joint_safeDownCast(obj):
    """
    CMC_Joint_safeDownCast(OpenSimObject obj) -> CMC_Joint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.CMC_Joint_safeDownCast(obj)

def CMC_Joint_getClassName():
    """CMC_Joint_getClassName() -> std::string const &"""
    return _tools.CMC_Joint_getClassName()

class CMC_Point(CMC_Task):
    """Proxy of C++ OpenSim::CMC_Point class."""

    __swig_setmethods__ = {}
    for _s in [CMC_Task]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMC_Point, name, value)
    __swig_getmethods__ = {}
    for _s in [CMC_Task]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMC_Point, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMC_Point

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMC_Point_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CMC_Point self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMC_Point_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.CMC_Point_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CMC_Point self) -> CMC_Point

        Parameters
        ----------
        self: OpenSim::CMC_Point const *

        """
        return _tools.CMC_Point_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMC_Point self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMC_Point const *

        """
        return _tools.CMC_Point_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::CMC_Point self, Vec3 aPoint) -> CMC_Point

        Parameters
        ----------
        aPoint: SimTK::Vec3 const &

        __init__(OpenSim::CMC_Point self) -> CMC_Point
        __init__(OpenSim::CMC_Point self, CMC_Point aTask) -> CMC_Point

        Parameters
        ----------
        aTask: OpenSim::CMC_Point const &

        """
        this = _tools.new_CMC_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tools.delete_CMC_Point
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(CMC_Point self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.CMC_Point_setModel(self, aModel)


    def setPoint(self, aPoint):
        """
        setPoint(CMC_Point self, Vec3 aPoint)

        Parameters
        ----------
        aPoint: SimTK::Vec3 const &

        """
        return _tools.CMC_Point_setPoint(self, aPoint)


    def getPoint(self):
        """
        getPoint(CMC_Point self) -> Vec3

        Parameters
        ----------
        self: OpenSim::CMC_Point const *

        """
        return _tools.CMC_Point_getPoint(self)


    def computeErrors(self, s, aT):
        """
        computeErrors(CMC_Point self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        """
        return _tools.CMC_Point_computeErrors(self, s, aT)


    def computeDesiredAccelerations(self, *args):
        """
        computeDesiredAccelerations(CMC_Point self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        computeDesiredAccelerations(CMC_Point self, State s, double aTI, double aTF)

        Parameters
        ----------
        s: SimTK::State const &
        aTI: double
        aTF: double

        """
        return _tools.CMC_Point_computeDesiredAccelerations(self, *args)


    def computeAccelerations(self, s):
        """
        computeAccelerations(CMC_Point self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _tools.CMC_Point_computeAccelerations(self, s)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(CMC_Point self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(CMC_Point self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _tools.CMC_Point_updateFromXMLNode(self, aNode, versionNumber)

CMC_Point_swigregister = _tools.CMC_Point_swigregister
CMC_Point_swigregister(CMC_Point)

def CMC_Point_safeDownCast(obj):
    """
    CMC_Point_safeDownCast(OpenSimObject obj) -> CMC_Point

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.CMC_Point_safeDownCast(obj)

def CMC_Point_getClassName():
    """CMC_Point_getClassName() -> std::string const &"""
    return _tools.CMC_Point_getClassName()

class SetTrackingTasks(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::TrackingTask,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetTrackingTasks, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetTrackingTasks, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetTrackingTasks

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.SetTrackingTasks_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetTrackingTasks self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.SetTrackingTasks_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.SetTrackingTasks_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetTrackingTasks self) -> SetTrackingTasks

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::TrackingTask,OpenSim::Object > const *

        """
        return _tools.SetTrackingTasks_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetTrackingTasks self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::TrackingTask,OpenSim::Object > const *

        """
        return _tools.SetTrackingTasks_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_SetTrackingTasks
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::TrackingTask,OpenSim::Object)> self) -> SetTrackingTasks
        __init__(OpenSim::Set<(OpenSim::TrackingTask,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetTrackingTasks

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::TrackingTask,OpenSim::Object)> self, std::string const & aFileName) -> SetTrackingTasks

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::TrackingTask,OpenSim::Object)> self, SetTrackingTasks aSet) -> SetTrackingTasks

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::TrackingTask,OpenSim::Object > const &

        """
        this = _tools.new_SetTrackingTasks(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetTrackingTasks self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::TrackingTask,OpenSim::Object > *

        """
        return _tools.SetTrackingTasks_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetTrackingTasks self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _tools.SetTrackingTasks_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetTrackingTasks self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _tools.SetTrackingTasks_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetTrackingTasks self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::TrackingTask,OpenSim::Object > const *

        """
        return _tools.SetTrackingTasks_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetTrackingTasks self, TrackingTask aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::TrackingTask const *
        aStartIndex: int

        getIndex(SetTrackingTasks self, TrackingTask aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::TrackingTask const *

        getIndex(SetTrackingTasks self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetTrackingTasks self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetTrackingTasks_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetTrackingTasks self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _tools.SetTrackingTasks_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetTrackingTasks self, TrackingTask aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::TrackingTask *

        """
        return _tools.SetTrackingTasks_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetTrackingTasks self, TrackingTask aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::TrackingTask const &

        """
        return _tools.SetTrackingTasks_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetTrackingTasks self, int aIndex, TrackingTask aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::TrackingTask *

        """
        return _tools.SetTrackingTasks_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetTrackingTasks self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetTrackingTasks self, TrackingTask aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::TrackingTask const *

        """
        return _tools.SetTrackingTasks_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetTrackingTasks self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::TrackingTask,OpenSim::Object > *

        """
        return _tools.SetTrackingTasks_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetTrackingTasks self, int aIndex, TrackingTask aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::TrackingTask *
        preserveGroups: bool

        set(SetTrackingTasks self, int aIndex, TrackingTask aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::TrackingTask *

        """
        return _tools.SetTrackingTasks_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetTrackingTasks self, int aIndex) -> TrackingTask

        Parameters
        ----------
        aIndex: int

        get(SetTrackingTasks self, std::string const & aName) -> TrackingTask

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetTrackingTasks_get(self, *args)


    def contains(self, aName):
        """
        contains(SetTrackingTasks self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.SetTrackingTasks_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetTrackingTasks self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _tools.SetTrackingTasks_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetTrackingTasks self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::TrackingTask,OpenSim::Object > const *

        """
        return _tools.SetTrackingTasks_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetTrackingTasks self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _tools.SetTrackingTasks_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetTrackingTasks self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _tools.SetTrackingTasks_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetTrackingTasks self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _tools.SetTrackingTasks_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetTrackingTasks self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _tools.SetTrackingTasks_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetTrackingTasks self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _tools.SetTrackingTasks_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetTrackingTasks self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetTrackingTasks self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _tools.SetTrackingTasks_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetTrackingTasks_swigregister = _tools.SetTrackingTasks_swigregister
SetTrackingTasks_swigregister(SetTrackingTasks)

def SetTrackingTasks_safeDownCast(obj):
    """
    SetTrackingTasks_safeDownCast(OpenSimObject obj) -> SetTrackingTasks

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.SetTrackingTasks_safeDownCast(obj)

def SetTrackingTasks_getClassName():
    """SetTrackingTasks_getClassName() -> std::string const &"""
    return _tools.SetTrackingTasks_getClassName()

class CMC_TaskSet(SetTrackingTasks):
    """Proxy of C++ OpenSim::CMC_TaskSet class."""

    __swig_setmethods__ = {}
    for _s in [SetTrackingTasks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMC_TaskSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetTrackingTasks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMC_TaskSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMC_TaskSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMC_TaskSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CMC_TaskSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMC_TaskSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.CMC_TaskSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CMC_TaskSet self) -> CMC_TaskSet

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet const *

        """
        return _tools.CMC_TaskSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMC_TaskSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet const *

        """
        return _tools.CMC_TaskSet_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_CMC_TaskSet
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::CMC_TaskSet self) -> CMC_TaskSet
        __init__(OpenSim::CMC_TaskSet self, std::string const & aFileName) -> CMC_TaskSet

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::CMC_TaskSet self, CMC_TaskSet aCMCTaskSet) -> CMC_TaskSet

        Parameters
        ----------
        aCMCTaskSet: OpenSim::CMC_TaskSet const &

        """
        this = _tools.new_CMC_TaskSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setModel(self, aModel):
        """
        setModel(CMC_TaskSet self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.CMC_TaskSet_setModel(self, aModel)


    def getModel(self):
        """
        getModel(CMC_TaskSet self) -> Model

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet const *

        """
        return _tools.CMC_TaskSet_getModel(self)


    def getDataFileName(self):
        """
        getDataFileName(CMC_TaskSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet const *

        """
        return _tools.CMC_TaskSet_getDataFileName(self)


    def setFunctions(self, aFuncSet):
        """
        setFunctions(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters
        ----------
        aFuncSet: OpenSim::FunctionSet &

        """
        return _tools.CMC_TaskSet_setFunctions(self, aFuncSet)


    def setFunctionsForVelocity(self, aFuncSet):
        """
        setFunctionsForVelocity(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters
        ----------
        aFuncSet: OpenSim::FunctionSet &

        """
        return _tools.CMC_TaskSet_setFunctionsForVelocity(self, aFuncSet)


    def setFunctionsForAcceleration(self, aFuncSet):
        """
        setFunctionsForAcceleration(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters
        ----------
        aFuncSet: OpenSim::FunctionSet &

        """
        return _tools.CMC_TaskSet_setFunctionsForAcceleration(self, aFuncSet)


    def getNumActiveTaskFunctions(self):
        """
        getNumActiveTaskFunctions(CMC_TaskSet self) -> int

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet const *

        """
        return _tools.CMC_TaskSet_getNumActiveTaskFunctions(self)


    def getTaskPositions(self, aT):
        """
        getTaskPositions(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters
        ----------
        aT: double

        """
        return _tools.CMC_TaskSet_getTaskPositions(self, aT)


    def getTaskVelocities(self, aT):
        """
        getTaskVelocities(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters
        ----------
        aT: double

        """
        return _tools.CMC_TaskSet_getTaskVelocities(self, aT)


    def getTaskAccelerations(self, aT):
        """
        getTaskAccelerations(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters
        ----------
        aT: double

        """
        return _tools.CMC_TaskSet_getTaskAccelerations(self, aT)


    def getPositionGains(self):
        """
        getPositionGains(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getPositionGains(self)


    def getVelocityGains(self):
        """
        getVelocityGains(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getVelocityGains(self)


    def getAccelerationGains(self):
        """
        getAccelerationGains(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getAccelerationGains(self)


    def getPositionErrorsLast(self):
        """
        getPositionErrorsLast(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getPositionErrorsLast(self)


    def getPositionErrors(self):
        """
        getPositionErrors(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getPositionErrors(self)


    def getVelocityErrorsLast(self):
        """
        getVelocityErrorsLast(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getVelocityErrorsLast(self)


    def getVelocityErrors(self):
        """
        getVelocityErrors(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getVelocityErrors(self)


    def getWeights(self):
        """
        getWeights(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getWeights(self)


    def getDesiredAccelerations(self):
        """
        getDesiredAccelerations(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getDesiredAccelerations(self)


    def getAccelerations(self):
        """
        getAccelerations(CMC_TaskSet self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_getAccelerations(self)


    def recordErrorsAsLastErrors(self):
        """
        recordErrorsAsLastErrors(CMC_TaskSet self)

        Parameters
        ----------
        self: OpenSim::CMC_TaskSet *

        """
        return _tools.CMC_TaskSet_recordErrorsAsLastErrors(self)


    def computeErrors(self, s, aT):
        """
        computeErrors(CMC_TaskSet self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        """
        return _tools.CMC_TaskSet_computeErrors(self, s, aT)


    def computeDesiredAccelerations(self, *args):
        """
        computeDesiredAccelerations(CMC_TaskSet self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        computeDesiredAccelerations(CMC_TaskSet self, State s, double aTCurrent, double aTFuture)

        Parameters
        ----------
        s: SimTK::State const &
        aTCurrent: double
        aTFuture: double

        """
        return _tools.CMC_TaskSet_computeDesiredAccelerations(self, *args)


    def computeAccelerations(self, s):
        """
        computeAccelerations(CMC_TaskSet self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _tools.CMC_TaskSet_computeAccelerations(self, s)

CMC_TaskSet_swigregister = _tools.CMC_TaskSet_swigregister
CMC_TaskSet_swigregister(CMC_TaskSet)

def CMC_TaskSet_safeDownCast(obj):
    """
    CMC_TaskSet_safeDownCast(OpenSimObject obj) -> CMC_TaskSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.CMC_TaskSet_safeDownCast(obj)

def CMC_TaskSet_getClassName():
    """CMC_TaskSet_getClassName() -> std::string const &"""
    return _tools.CMC_TaskSet_getClassName()

class CMCTool(opensim.simulation.AbstractTool):
    """Proxy of C++ OpenSim::CMCTool class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.AbstractTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMCTool, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.AbstractTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMCTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CMCTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMCTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CMCTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMCTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.CMCTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CMCTool self) -> CMCTool

        Parameters
        ----------
        self: OpenSim::CMCTool const *

        """
        return _tools.CMCTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CMCTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMCTool const *

        """
        return _tools.CMCTool_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_CMCTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::CMCTool self) -> CMCTool
        __init__(OpenSim::CMCTool self, std::string const & aFileName, bool aLoadModel=True) -> CMCTool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModel: bool

        __init__(OpenSim::CMCTool self, std::string const & aFileName) -> CMCTool

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::CMCTool self, CMCTool aObject) -> CMCTool

        Parameters
        ----------
        aObject: OpenSim::CMCTool const &

        """
        this = _tools.new_CMCTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getExcludedActuators(self):
        """
        getExcludedActuators(CMCTool self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::CMCTool const *

        """
        return _tools.CMCTool_getExcludedActuators(self)


    def setExcludedActuators(self, excludedActs):
        """
        setExcludedActuators(CMCTool self, ArrayStr excludedActs)

        Parameters
        ----------
        excludedActs: OpenSim::Array< std::string > const &

        """
        return _tools.CMCTool_setExcludedActuators(self, excludedActs)


    def getDesiredPointsFileName(self):
        """
        getDesiredPointsFileName(CMCTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMCTool *

        """
        return _tools.CMCTool_getDesiredPointsFileName(self)


    def setDesiredPointsFileName(self, aFileName):
        """
        setDesiredPointsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setDesiredPointsFileName(self, aFileName)


    def getDesiredKinematicsFileName(self):
        """
        getDesiredKinematicsFileName(CMCTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMCTool *

        """
        return _tools.CMCTool_getDesiredKinematicsFileName(self)


    def setDesiredKinematicsFileName(self, aFileName):
        """
        setDesiredKinematicsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setDesiredKinematicsFileName(self, aFileName)


    def getConstraintsFileName(self):
        """
        getConstraintsFileName(CMCTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMCTool *

        """
        return _tools.CMCTool_getConstraintsFileName(self)


    def setConstraintsFileName(self, aFileName):
        """
        setConstraintsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setConstraintsFileName(self, aFileName)


    def getTaskSetFileName(self):
        """
        getTaskSetFileName(CMCTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMCTool *

        """
        return _tools.CMCTool_getTaskSetFileName(self)


    def setTaskSetFileName(self, aFileName):
        """
        setTaskSetFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setTaskSetFileName(self, aFileName)


    def getRRAControlsFileName(self):
        """
        getRRAControlsFileName(CMCTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMCTool *

        """
        return _tools.CMCTool_getRRAControlsFileName(self)


    def setRRAControlsFileName(self, aFileName):
        """
        setRRAControlsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setRRAControlsFileName(self, aFileName)


    def getLowpassCutoffFrequency(self):
        """
        getLowpassCutoffFrequency(CMCTool self) -> double

        Parameters
        ----------
        self: OpenSim::CMCTool const *

        """
        return _tools.CMCTool_getLowpassCutoffFrequency(self)


    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        """
        setLowpassCutoffFrequency(CMCTool self, double aLowpassCutoffFrequency)

        Parameters
        ----------
        aLowpassCutoffFrequency: double

        """
        return _tools.CMCTool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)


    def getTimeWindow(self):
        """
        getTimeWindow(CMCTool self) -> double

        Parameters
        ----------
        self: OpenSim::CMCTool const *

        """
        return _tools.CMCTool_getTimeWindow(self)


    def setTimeWindow(self, aTargetDT):
        """
        setTimeWindow(CMCTool self, double aTargetDT)

        Parameters
        ----------
        aTargetDT: double

        """
        return _tools.CMCTool_setTimeWindow(self, aTargetDT)


    def getExternalLoadsFileName(self):
        """
        getExternalLoadsFileName(CMCTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CMCTool const *

        """
        return _tools.CMCTool_getExternalLoadsFileName(self)


    def setExternalLoadsFileName(self, aFileName):
        """
        setExternalLoadsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setExternalLoadsFileName(self, aFileName)


    def getUseFastTarget(self):
        """
        getUseFastTarget(CMCTool self) -> bool

        Parameters
        ----------
        self: OpenSim::CMCTool const *

        """
        return _tools.CMCTool_getUseFastTarget(self)


    def setUseFastTarget(self, useFastTarget):
        """
        setUseFastTarget(CMCTool self, bool useFastTarget)

        Parameters
        ----------
        useFastTarget: bool

        """
        return _tools.CMCTool_setUseFastTarget(self, useFastTarget)


    def run(self):
        """
        run(CMCTool self) -> bool

        Parameters
        ----------
        self: OpenSim::CMCTool *

        """
        return _tools.CMCTool_run(self)


    def getForceStorage(self):
        """
        getForceStorage(CMCTool self) -> Storage

        Parameters
        ----------
        self: OpenSim::CMCTool *

        """
        return _tools.CMCTool_getForceStorage(self)


    def setOriginalForceSet(self, aForceSet):
        """
        setOriginalForceSet(CMCTool self, ForceSet aForceSet)

        Parameters
        ----------
        aForceSet: OpenSim::ForceSet const &

        """
        return _tools.CMCTool_setOriginalForceSet(self, aForceSet)

CMCTool_swigregister = _tools.CMCTool_swigregister
CMCTool_swigregister(CMCTool)

def CMCTool_safeDownCast(obj):
    """
    CMCTool_safeDownCast(OpenSimObject obj) -> CMCTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.CMCTool_safeDownCast(obj)

def CMCTool_getClassName():
    """CMCTool_getClassName() -> std::string const &"""
    return _tools.CMCTool_getClassName()

class RRATool(opensim.simulation.AbstractTool):
    """Proxy of C++ OpenSim::RRATool class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.AbstractTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RRATool, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.AbstractTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RRATool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> RRATool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.RRATool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(RRATool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.RRATool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.RRATool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(RRATool self) -> RRATool

        Parameters
        ----------
        self: OpenSim::RRATool const *

        """
        return _tools.RRATool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(RRATool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RRATool const *

        """
        return _tools.RRATool_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_RRATool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::RRATool self) -> RRATool
        __init__(OpenSim::RRATool self, std::string const & aFileName, bool aLoadModel=True) -> RRATool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModel: bool

        __init__(OpenSim::RRATool self, std::string const & aFileName) -> RRATool

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::RRATool self, RRATool aObject) -> RRATool

        Parameters
        ----------
        aObject: OpenSim::RRATool const &

        """
        this = _tools.new_RRATool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDesiredPointsFileName(self):
        """
        getDesiredPointsFileName(RRATool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_getDesiredPointsFileName(self)


    def setDesiredPointsFileName(self, aFileName):
        """
        setDesiredPointsFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setDesiredPointsFileName(self, aFileName)


    def getDesiredKinematicsFileName(self):
        """
        getDesiredKinematicsFileName(RRATool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_getDesiredKinematicsFileName(self)


    def setDesiredKinematicsFileName(self, aFileName):
        """
        setDesiredKinematicsFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setDesiredKinematicsFileName(self, aFileName)


    def getConstraintsFileName(self):
        """
        getConstraintsFileName(RRATool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_getConstraintsFileName(self)


    def setConstraintsFileName(self, aFileName):
        """
        setConstraintsFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setConstraintsFileName(self, aFileName)


    def getTaskSetFileName(self):
        """
        getTaskSetFileName(RRATool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_getTaskSetFileName(self)


    def setTaskSetFileName(self, aFileName):
        """
        setTaskSetFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setTaskSetFileName(self, aFileName)


    def getOutputModelFileName(self):
        """
        getOutputModelFileName(RRATool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_getOutputModelFileName(self)


    def setOutputModelFileName(self, aFileName):
        """
        setOutputModelFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setOutputModelFileName(self, aFileName)


    def getAdjustCOMToReduceResiduals(self):
        """
        getAdjustCOMToReduceResiduals(RRATool self) -> bool

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_getAdjustCOMToReduceResiduals(self)


    def setAdjustCOMToReduceResiduals(self, aAdjust):
        """
        setAdjustCOMToReduceResiduals(RRATool self, bool aAdjust)

        Parameters
        ----------
        aAdjust: bool

        """
        return _tools.RRATool_setAdjustCOMToReduceResiduals(self, aAdjust)


    def getAdjustedCOMBody(self):
        """
        getAdjustedCOMBody(RRATool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_getAdjustedCOMBody(self)


    def setAdjustedCOMBody(self, aBody):
        """
        setAdjustedCOMBody(RRATool self, std::string const & aBody)

        Parameters
        ----------
        aBody: std::string const &

        """
        return _tools.RRATool_setAdjustedCOMBody(self, aBody)


    def getLowpassCutoffFrequency(self):
        """
        getLowpassCutoffFrequency(RRATool self) -> double

        Parameters
        ----------
        self: OpenSim::RRATool const *

        """
        return _tools.RRATool_getLowpassCutoffFrequency(self)


    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        """
        setLowpassCutoffFrequency(RRATool self, double aLowpassCutoffFrequency)

        Parameters
        ----------
        aLowpassCutoffFrequency: double

        """
        return _tools.RRATool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)


    def getExternalLoadsFileName(self):
        """
        getExternalLoadsFileName(RRATool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::RRATool const *

        """
        return _tools.RRATool_getExternalLoadsFileName(self)


    def setExternalLoadsFileName(self, aFileName):
        """
        setExternalLoadsFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setExternalLoadsFileName(self, aFileName)


    def run(self):
        """
        run(RRATool self) -> bool

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_run(self)


    def getForceStorage(self):
        """
        getForceStorage(RRATool self) -> Storage

        Parameters
        ----------
        self: OpenSim::RRATool *

        """
        return _tools.RRATool_getForceStorage(self)


    def setOriginalForceSet(self, aForceSet):
        """
        setOriginalForceSet(RRATool self, ForceSet aForceSet)

        Parameters
        ----------
        aForceSet: OpenSim::ForceSet const &

        """
        return _tools.RRATool_setOriginalForceSet(self, aForceSet)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(RRATool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(RRATool self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _tools.RRATool_updateFromXMLNode(self, aNode, versionNumber)

RRATool_swigregister = _tools.RRATool_swigregister
RRATool_swigregister(RRATool)

def RRATool_safeDownCast(obj):
    """
    RRATool_safeDownCast(OpenSimObject obj) -> RRATool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.RRATool_safeDownCast(obj)

def RRATool_getClassName():
    """RRATool_getClassName() -> std::string const &"""
    return _tools.RRATool_getClassName()

class AnalyzeTool(opensim.simulation.AbstractTool):
    """Proxy of C++ OpenSim::AnalyzeTool class."""

    __swig_setmethods__ = {}
    for _s in [opensim.simulation.AbstractTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyzeTool, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.simulation.AbstractTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyzeTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AnalyzeTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.AnalyzeTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(AnalyzeTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.AnalyzeTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.AnalyzeTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(AnalyzeTool self) -> AnalyzeTool

        Parameters
        ----------
        self: OpenSim::AnalyzeTool const *

        """
        return _tools.AnalyzeTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AnalyzeTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AnalyzeTool const *

        """
        return _tools.AnalyzeTool_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_AnalyzeTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::AnalyzeTool self) -> AnalyzeTool
        __init__(OpenSim::AnalyzeTool self, std::string const & aFileName, bool aLoadModelAndInput=True) -> AnalyzeTool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModelAndInput: bool

        __init__(OpenSim::AnalyzeTool self, std::string const & aFileName) -> AnalyzeTool

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::AnalyzeTool self, AnalyzeTool aObject) -> AnalyzeTool

        Parameters
        ----------
        aObject: OpenSim::AnalyzeTool const &

        __init__(OpenSim::AnalyzeTool self, Model aModel) -> AnalyzeTool

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        this = _tools.new_AnalyzeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setStatesStorage(self, aStore):
        """
        setStatesStorage(AnalyzeTool self, Storage aStore)

        Parameters
        ----------
        aStore: OpenSim::Storage &

        """
        return _tools.AnalyzeTool_setStatesStorage(self, aStore)


    def createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore):
        """
        createStatesStorageFromCoordinatesAndSpeeds(Model aModel, Storage aQStore, Storage aUStore) -> Storage

        Parameters
        ----------
        aModel: OpenSim::Model const &
        aQStore: OpenSim::Storage const &
        aUStore: OpenSim::Storage const &

        """
        return _tools.AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore)

    createStatesStorageFromCoordinatesAndSpeeds = staticmethod(createStatesStorageFromCoordinatesAndSpeeds)

    def getStatesStorage(self):
        """
        getStatesStorage(AnalyzeTool self) -> Storage

        Parameters
        ----------
        self: OpenSim::AnalyzeTool *

        """
        return _tools.AnalyzeTool_getStatesStorage(self)


    def getStatesFileName(self):
        """
        getStatesFileName(AnalyzeTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AnalyzeTool const *

        """
        return _tools.AnalyzeTool_getStatesFileName(self)


    def setStatesFileName(self, aFileName):
        """
        setStatesFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.AnalyzeTool_setStatesFileName(self, aFileName)


    def getCoordinatesFileName(self):
        """
        getCoordinatesFileName(AnalyzeTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AnalyzeTool const *

        """
        return _tools.AnalyzeTool_getCoordinatesFileName(self)


    def setCoordinatesFileName(self, aFileName):
        """
        setCoordinatesFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.AnalyzeTool_setCoordinatesFileName(self, aFileName)


    def getSpeedsFileName(self):
        """
        getSpeedsFileName(AnalyzeTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AnalyzeTool const *

        """
        return _tools.AnalyzeTool_getSpeedsFileName(self)


    def setSpeedsFileName(self, aFileName):
        """
        setSpeedsFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.AnalyzeTool_setSpeedsFileName(self, aFileName)


    def getLowpassCutoffFrequency(self):
        """
        getLowpassCutoffFrequency(AnalyzeTool self) -> double

        Parameters
        ----------
        self: OpenSim::AnalyzeTool const *

        """
        return _tools.AnalyzeTool_getLowpassCutoffFrequency(self)


    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        """
        setLowpassCutoffFrequency(AnalyzeTool self, double aLowpassCutoffFrequency)

        Parameters
        ----------
        aLowpassCutoffFrequency: double

        """
        return _tools.AnalyzeTool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)


    def getLoadModelAndInput(self):
        """
        getLoadModelAndInput(AnalyzeTool self) -> bool const

        Parameters
        ----------
        self: OpenSim::AnalyzeTool const *

        """
        return _tools.AnalyzeTool_getLoadModelAndInput(self)


    def setLoadModelAndInput(self, b):
        """
        setLoadModelAndInput(AnalyzeTool self, bool b)

        Parameters
        ----------
        b: bool

        """
        return _tools.AnalyzeTool_setLoadModelAndInput(self, b)


    def setStatesFromMotion(self, s, aMotion, aInDegrees):
        """
        setStatesFromMotion(AnalyzeTool self, State s, Storage aMotion, bool aInDegrees)

        Parameters
        ----------
        s: SimTK::State const &
        aMotion: OpenSim::Storage const &
        aInDegrees: bool

        """
        return _tools.AnalyzeTool_setStatesFromMotion(self, s, aMotion, aInDegrees)


    def loadStatesFromFile(self, s):
        """
        loadStatesFromFile(AnalyzeTool self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _tools.AnalyzeTool_loadStatesFromFile(self, s)


    def verifyControlsStates(self):
        """
        verifyControlsStates(AnalyzeTool self)

        Parameters
        ----------
        self: OpenSim::AnalyzeTool *

        """
        return _tools.AnalyzeTool_verifyControlsStates(self)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(AnalyzeTool self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.AnalyzeTool_setPrintResultFiles(self, aToWrite)


    def disableIntegrationOnlyProbes(self):
        """
        disableIntegrationOnlyProbes(AnalyzeTool self)

        Parameters
        ----------
        self: OpenSim::AnalyzeTool *

        """
        return _tools.AnalyzeTool_disableIntegrationOnlyProbes(self)


    def run(self, *args):
        """
        run(AnalyzeTool self) -> bool
        run(AnalyzeTool self, bool plotting) -> bool

        Parameters
        ----------
        plotting: bool

        """
        return _tools.AnalyzeTool_run(self, *args)

AnalyzeTool_swigregister = _tools.AnalyzeTool_swigregister
AnalyzeTool_swigregister(AnalyzeTool)

def AnalyzeTool_safeDownCast(obj):
    """
    AnalyzeTool_safeDownCast(OpenSimObject obj) -> AnalyzeTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.AnalyzeTool_safeDownCast(obj)

def AnalyzeTool_getClassName():
    """AnalyzeTool_getClassName() -> std::string const &"""
    return _tools.AnalyzeTool_getClassName()

def AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore):
    """
    AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(Model aModel, Storage aQStore, Storage aUStore) -> Storage

    Parameters
    ----------
    aModel: OpenSim::Model const &
    aQStore: OpenSim::Storage const &
    aUStore: OpenSim::Storage const &

    """
    return _tools.AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore)

class InverseKinematicsTool(Tool):
    """Proxy of C++ OpenSim::InverseKinematicsTool class."""

    __swig_setmethods__ = {}
    for _s in [Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseKinematicsTool, name, value)
    __swig_getmethods__ = {}
    for _s in [Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseKinematicsTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InverseKinematicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.InverseKinematicsTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(InverseKinematicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.InverseKinematicsTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _tools.InverseKinematicsTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(InverseKinematicsTool self) -> InverseKinematicsTool

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool const *

        """
        return _tools.InverseKinematicsTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InverseKinematicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool const *

        """
        return _tools.InverseKinematicsTool_getConcreteClassName(self)

    __swig_destroy__ = _tools.delete_InverseKinematicsTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::InverseKinematicsTool self) -> InverseKinematicsTool
        __init__(OpenSim::InverseKinematicsTool self, std::string const & aFileName, bool aLoadModel=True) -> InverseKinematicsTool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModel: bool

        __init__(OpenSim::InverseKinematicsTool self, std::string const & aFileName) -> InverseKinematicsTool

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::InverseKinematicsTool self, InverseKinematicsTool aObject) -> InverseKinematicsTool

        Parameters
        ----------
        aObject: OpenSim::InverseKinematicsTool const &

        """
        this = _tools.new_InverseKinematicsTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def registerTypes():
        """registerTypes()"""
        return _tools.InverseKinematicsTool_registerTypes()

    registerTypes = staticmethod(registerTypes)

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(InverseKinematicsTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(InverseKinematicsTool self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _tools.InverseKinematicsTool_updateFromXMLNode(self, aNode, versionNumber)


    def setModel(self, aModel):
        """
        setModel(InverseKinematicsTool self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.InverseKinematicsTool_setModel(self, aModel)


    def setStartTime(self, d):
        """
        setStartTime(InverseKinematicsTool self, double d)

        Parameters
        ----------
        d: double

        """
        return _tools.InverseKinematicsTool_setStartTime(self, d)


    def getStartTime(self):
        """
        getStartTime(InverseKinematicsTool self) -> double

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool const *

        """
        return _tools.InverseKinematicsTool_getStartTime(self)


    def setEndTime(self, d):
        """
        setEndTime(InverseKinematicsTool self, double d)

        Parameters
        ----------
        d: double

        """
        return _tools.InverseKinematicsTool_setEndTime(self, d)


    def getEndTime(self):
        """
        getEndTime(InverseKinematicsTool self) -> double

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool const *

        """
        return _tools.InverseKinematicsTool_getEndTime(self)


    def setMarkerDataFileName(self, markerDataFileName):
        """
        setMarkerDataFileName(InverseKinematicsTool self, std::string const & markerDataFileName)

        Parameters
        ----------
        markerDataFileName: std::string const &

        """
        return _tools.InverseKinematicsTool_setMarkerDataFileName(self, markerDataFileName)


    def getMarkerDataFileName(self):
        """
        getMarkerDataFileName(InverseKinematicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool const *

        """
        return _tools.InverseKinematicsTool_getMarkerDataFileName(self)


    def setCoordinateFileName(self, coordDataFileName):
        """
        setCoordinateFileName(InverseKinematicsTool self, std::string const & coordDataFileName)

        Parameters
        ----------
        coordDataFileName: std::string const &

        """
        return _tools.InverseKinematicsTool_setCoordinateFileName(self, coordDataFileName)


    def getCoordinateFileName(self):
        """
        getCoordinateFileName(InverseKinematicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool const *

        """
        return _tools.InverseKinematicsTool_getCoordinateFileName(self)


    def setOutputMotionFileName(self, aOutputMotionFileName):
        """
        setOutputMotionFileName(InverseKinematicsTool self, std::string const aOutputMotionFileName)

        Parameters
        ----------
        aOutputMotionFileName: std::string const

        """
        return _tools.InverseKinematicsTool_setOutputMotionFileName(self, aOutputMotionFileName)


    def getOutputMotionFileName(self):
        """
        getOutputMotionFileName(InverseKinematicsTool self) -> std::string

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool *

        """
        return _tools.InverseKinematicsTool_getOutputMotionFileName(self)


    def getIKTaskSet(self):
        """
        getIKTaskSet(InverseKinematicsTool self) -> IKTaskSet

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool *

        """
        return _tools.InverseKinematicsTool_getIKTaskSet(self)


    def run(self):
        """
        run(InverseKinematicsTool self) -> bool

        Parameters
        ----------
        self: OpenSim::InverseKinematicsTool *

        """
        return _tools.InverseKinematicsTool_run(self)


    def populateReferences(self, markersReference, coordinateReferences):
        """
        populateReferences(InverseKinematicsTool self, MarkersReference markersReference, SimTKArrayCoordinateReference coordinateReferences)

        Parameters
        ----------
        markersReference: OpenSim::MarkersReference &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &

        """
        return _tools.InverseKinematicsTool_populateReferences(self, markersReference, coordinateReferences)

InverseKinematicsTool_swigregister = _tools.InverseKinematicsTool_swigregister
InverseKinematicsTool_swigregister(InverseKinematicsTool)

def InverseKinematicsTool_safeDownCast(obj):
    """
    InverseKinematicsTool_safeDownCast(OpenSimObject obj) -> InverseKinematicsTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _tools.InverseKinematicsTool_safeDownCast(obj)

def InverseKinematicsTool_getClassName():
    """InverseKinematicsTool_getClassName() -> std::string const &"""
    return _tools.InverseKinematicsTool_getClassName()

def InverseKinematicsTool_registerTypes():
    """InverseKinematicsTool_registerTypes()"""
    return _tools.InverseKinematicsTool_registerTypes()

# This file is compatible with both classic and new-style classes.


