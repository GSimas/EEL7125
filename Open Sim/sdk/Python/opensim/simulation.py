# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_simulation')).lstrip('.')
        return importlib.import_module(mname)
    _simulation = swig_import_helper()
    del swig_import_helper
elif version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simulation', [dirname(__file__)])
        except ImportError:
            import _simulation
            return _simulation
        if fp is not None:
            try:
                _mod = imp.load_module('_simulation', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _simulation = swig_import_helper()
    del swig_import_helper
else:
    import _simulation
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simulation.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _simulation.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _simulation.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _simulation.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simulation.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simulation.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _simulation.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _simulation.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _simulation.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _simulation.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _simulation.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simulation.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simulation.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _simulation.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _simulation.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _simulation.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simulation.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _simulation.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import opensim.common
import opensim.simbody
class _StdVectorState(_object):
    """Proxy of C++ std::vector<(SimTK::State)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _StdVectorState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _StdVectorState, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(_StdVectorState self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< SimTK::State > *

        """
        return _simulation._StdVectorState_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(_StdVectorState self) -> bool

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState___nonzero__(self)


    def __bool__(self):
        """
        __bool__(_StdVectorState self) -> bool

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState___bool__(self)


    def __len__(self):
        """
        __len__(_StdVectorState self) -> std::vector< SimTK::State >::size_type

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(_StdVectorState self, std::vector< SimTK::State >::difference_type i, std::vector< SimTK::State >::difference_type j) -> StdVectorState

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        j: std::vector< SimTK::State >::difference_type

        """
        return _simulation._StdVectorState___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(_StdVectorState self, std::vector< SimTK::State >::difference_type i, std::vector< SimTK::State >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        j: std::vector< SimTK::State >::difference_type

        __setslice__(_StdVectorState self, std::vector< SimTK::State >::difference_type i, std::vector< SimTK::State >::difference_type j, StdVectorState v)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        j: std::vector< SimTK::State >::difference_type
        v: std::vector< SimTK::State,std::allocator< SimTK::State > > const &

        """
        return _simulation._StdVectorState___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(_StdVectorState self, std::vector< SimTK::State >::difference_type i, std::vector< SimTK::State >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        j: std::vector< SimTK::State >::difference_type

        """
        return _simulation._StdVectorState___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(_StdVectorState self, std::vector< SimTK::State >::difference_type i)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type

        __delitem__(_StdVectorState self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _simulation._StdVectorState___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(_StdVectorState self, PySliceObject * slice) -> StdVectorState

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(_StdVectorState self, std::vector< SimTK::State >::difference_type i) -> State

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type

        """
        return _simulation._StdVectorState___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(_StdVectorState self, PySliceObject * slice, StdVectorState v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< SimTK::State,std::allocator< SimTK::State > > const &

        __setitem__(_StdVectorState self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(_StdVectorState self, std::vector< SimTK::State >::difference_type i, State x)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simulation._StdVectorState___setitem__(self, *args)


    def pop(self):
        """
        pop(_StdVectorState self) -> State

        Parameters
        ----------
        self: std::vector< SimTK::State > *

        """
        return _simulation._StdVectorState_pop(self)


    def append(self, x):
        """
        append(_StdVectorState self, State x)

        Parameters
        ----------
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simulation._StdVectorState_append(self, x)


    def empty(self):
        """
        empty(_StdVectorState self) -> bool

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState_empty(self)


    def size(self):
        """
        size(_StdVectorState self) -> std::vector< SimTK::State >::size_type

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState_size(self)


    def swap(self, v):
        """
        swap(_StdVectorState self, StdVectorState v)

        Parameters
        ----------
        v: std::vector< SimTK::State > &

        """
        return _simulation._StdVectorState_swap(self, v)


    def begin(self):
        """
        begin(_StdVectorState self) -> std::vector< SimTK::State >::iterator

        Parameters
        ----------
        self: std::vector< SimTK::State > *

        """
        return _simulation._StdVectorState_begin(self)


    def end(self):
        """
        end(_StdVectorState self) -> std::vector< SimTK::State >::iterator

        Parameters
        ----------
        self: std::vector< SimTK::State > *

        """
        return _simulation._StdVectorState_end(self)


    def rbegin(self):
        """
        rbegin(_StdVectorState self) -> std::vector< SimTK::State >::reverse_iterator

        Parameters
        ----------
        self: std::vector< SimTK::State > *

        """
        return _simulation._StdVectorState_rbegin(self)


    def rend(self):
        """
        rend(_StdVectorState self) -> std::vector< SimTK::State >::reverse_iterator

        Parameters
        ----------
        self: std::vector< SimTK::State > *

        """
        return _simulation._StdVectorState_rend(self)


    def clear(self):
        """
        clear(_StdVectorState self)

        Parameters
        ----------
        self: std::vector< SimTK::State > *

        """
        return _simulation._StdVectorState_clear(self)


    def get_allocator(self):
        """
        get_allocator(_StdVectorState self) -> std::vector< SimTK::State >::allocator_type

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState_get_allocator(self)


    def pop_back(self):
        """
        pop_back(_StdVectorState self)

        Parameters
        ----------
        self: std::vector< SimTK::State > *

        """
        return _simulation._StdVectorState_pop_back(self)


    def erase(self, *args):
        """
        erase(_StdVectorState self, std::vector< SimTK::State >::iterator pos) -> std::vector< SimTK::State >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::State >::iterator

        erase(_StdVectorState self, std::vector< SimTK::State >::iterator first, std::vector< SimTK::State >::iterator last) -> std::vector< SimTK::State >::iterator

        Parameters
        ----------
        first: std::vector< SimTK::State >::iterator
        last: std::vector< SimTK::State >::iterator

        """
        return _simulation._StdVectorState_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(SimTK::State)> self) -> _StdVectorState
        __init__(std::vector<(SimTK::State)> self, StdVectorState arg2) -> _StdVectorState

        Parameters
        ----------
        arg2: std::vector< SimTK::State > const &

        __init__(std::vector<(SimTK::State)> self, std::vector< SimTK::State >::size_type size) -> _StdVectorState

        Parameters
        ----------
        size: std::vector< SimTK::State >::size_type

        __init__(std::vector<(SimTK::State)> self, std::vector< SimTK::State >::size_type size, State value) -> _StdVectorState

        Parameters
        ----------
        size: std::vector< SimTK::State >::size_type
        value: std::vector< SimTK::State >::value_type const &

        """
        this = _simulation.new__StdVectorState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(_StdVectorState self, State x)

        Parameters
        ----------
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simulation._StdVectorState_push_back(self, x)


    def front(self):
        """
        front(_StdVectorState self) -> State

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState_front(self)


    def back(self):
        """
        back(_StdVectorState self) -> State

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState_back(self)


    def assign(self, n, x):
        """
        assign(_StdVectorState self, std::vector< SimTK::State >::size_type n, State x)

        Parameters
        ----------
        n: std::vector< SimTK::State >::size_type
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simulation._StdVectorState_assign(self, n, x)


    def resize(self, *args):
        """
        resize(_StdVectorState self, std::vector< SimTK::State >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< SimTK::State >::size_type

        resize(_StdVectorState self, std::vector< SimTK::State >::size_type new_size, State x)

        Parameters
        ----------
        new_size: std::vector< SimTK::State >::size_type
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simulation._StdVectorState_resize(self, *args)


    def insert(self, *args):
        """
        insert(_StdVectorState self, std::vector< SimTK::State >::iterator pos, State x) -> std::vector< SimTK::State >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::State >::iterator
        x: std::vector< SimTK::State >::value_type const &

        insert(_StdVectorState self, std::vector< SimTK::State >::iterator pos, std::vector< SimTK::State >::size_type n, State x)

        Parameters
        ----------
        pos: std::vector< SimTK::State >::iterator
        n: std::vector< SimTK::State >::size_type
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simulation._StdVectorState_insert(self, *args)


    def reserve(self, n):
        """
        reserve(_StdVectorState self, std::vector< SimTK::State >::size_type n)

        Parameters
        ----------
        n: std::vector< SimTK::State >::size_type

        """
        return _simulation._StdVectorState_reserve(self, n)


    def capacity(self):
        """
        capacity(_StdVectorState self) -> std::vector< SimTK::State >::size_type

        Parameters
        ----------
        self: std::vector< SimTK::State > const *

        """
        return _simulation._StdVectorState_capacity(self)

    __swig_destroy__ = _simulation.delete__StdVectorState
    __del__ = lambda self: None
_StdVectorState_swigregister = _simulation._StdVectorState_swigregister
_StdVectorState_swigregister(_StdVectorState)

class SurfaceProperties(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::SurfaceProperties class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfaceProperties, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurfaceProperties, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SurfaceProperties

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SurfaceProperties_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SurfaceProperties self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SurfaceProperties_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SurfaceProperties_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SurfaceProperties self) -> SurfaceProperties

        Parameters
        ----------
        self: OpenSim::SurfaceProperties const *

        """
        return _simulation.SurfaceProperties_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SurfaceProperties self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SurfaceProperties const *

        """
        return _simulation.SurfaceProperties_getConcreteClassName(self)


    def copyProperty_representation(self, source):
        """
        copyProperty_representation(SurfaceProperties self, SurfaceProperties source)

        Parameters
        ----------
        source: OpenSim::SurfaceProperties::Self const &

        """
        return _simulation.SurfaceProperties_copyProperty_representation(self, source)


    def append_representation(self, value):
        """
        append_representation(SurfaceProperties self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _simulation.SurfaceProperties_append_representation(self, value)


    def constructProperty_representation(self, initValue):
        """
        constructProperty_representation(SurfaceProperties self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _simulation.SurfaceProperties_constructProperty_representation(self, initValue)


    def get_representation(self, *args):
        """
        get_representation(SurfaceProperties self, int i) -> int const

        Parameters
        ----------
        i: int

        get_representation(SurfaceProperties self) -> int const &

        Parameters
        ----------
        self: OpenSim::SurfaceProperties const *

        """
        return _simulation.SurfaceProperties_get_representation(self, *args)


    def upd_representation(self, *args):
        """
        upd_representation(SurfaceProperties self, int i) -> int

        Parameters
        ----------
        i: int

        upd_representation(SurfaceProperties self) -> int &

        Parameters
        ----------
        self: OpenSim::SurfaceProperties *

        """
        return _simulation.SurfaceProperties_upd_representation(self, *args)


    def set_representation(self, *args):
        """
        set_representation(SurfaceProperties self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_representation(SurfaceProperties self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _simulation.SurfaceProperties_set_representation(self, *args)


    def copyProperty_texture(self, source):
        """
        copyProperty_texture(SurfaceProperties self, SurfaceProperties source)

        Parameters
        ----------
        source: OpenSim::SurfaceProperties::Self const &

        """
        return _simulation.SurfaceProperties_copyProperty_texture(self, source)


    def append_texture(self, value):
        """
        append_texture(SurfaceProperties self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.SurfaceProperties_append_texture(self, value)


    def constructProperty_texture(self, *args):
        """
        constructProperty_texture(SurfaceProperties self)
        constructProperty_texture(SurfaceProperties self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.SurfaceProperties_constructProperty_texture(self, *args)


    def get_texture(self, *args):
        """
        get_texture(SurfaceProperties self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_texture(SurfaceProperties self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SurfaceProperties const *

        """
        return _simulation.SurfaceProperties_get_texture(self, *args)


    def upd_texture(self, *args):
        """
        upd_texture(SurfaceProperties self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_texture(SurfaceProperties self) -> std::string &

        Parameters
        ----------
        self: OpenSim::SurfaceProperties *

        """
        return _simulation.SurfaceProperties_upd_texture(self, *args)


    def set_texture(self, *args):
        """
        set_texture(SurfaceProperties self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_texture(SurfaceProperties self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.SurfaceProperties_set_texture(self, *args)


    def __init__(self):
        """__init__(OpenSim::SurfaceProperties self) -> SurfaceProperties"""
        this = _simulation.new_SurfaceProperties()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_SurfaceProperties
    __del__ = lambda self: None

    def hasTexture(self):
        """
        hasTexture(SurfaceProperties self) -> bool

        Parameters
        ----------
        self: OpenSim::SurfaceProperties *

        """
        return _simulation.SurfaceProperties_hasTexture(self)

SurfaceProperties_swigregister = _simulation.SurfaceProperties_swigregister
SurfaceProperties_swigregister(SurfaceProperties)

def SurfaceProperties_safeDownCast(obj):
    """
    SurfaceProperties_safeDownCast(OpenSimObject obj) -> SurfaceProperties

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SurfaceProperties_safeDownCast(obj)

def SurfaceProperties_getClassName():
    """SurfaceProperties_getClassName() -> std::string const &"""
    return _simulation.SurfaceProperties_getClassName()

class Appearance(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Appearance class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Appearance, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Appearance, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Appearance

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Appearance_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Appearance self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Appearance_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Appearance_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Appearance self) -> Appearance

        Parameters
        ----------
        self: OpenSim::Appearance const *

        """
        return _simulation.Appearance_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Appearance self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Appearance const *

        """
        return _simulation.Appearance_getConcreteClassName(self)


    def copyProperty_visible(self, source):
        """
        copyProperty_visible(Appearance self, Appearance source)

        Parameters
        ----------
        source: OpenSim::Appearance::Self const &

        """
        return _simulation.Appearance_copyProperty_visible(self, source)


    def append_visible(self, value):
        """
        append_visible(Appearance self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Appearance_append_visible(self, value)


    def constructProperty_visible(self, initValue):
        """
        constructProperty_visible(Appearance self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Appearance_constructProperty_visible(self, initValue)


    def get_visible(self, *args):
        """
        get_visible(Appearance self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_visible(Appearance self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Appearance const *

        """
        return _simulation.Appearance_get_visible(self, *args)


    def upd_visible(self, *args):
        """
        upd_visible(Appearance self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_visible(Appearance self) -> bool &

        Parameters
        ----------
        self: OpenSim::Appearance *

        """
        return _simulation.Appearance_upd_visible(self, *args)


    def set_visible(self, *args):
        """
        set_visible(Appearance self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_visible(Appearance self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Appearance_set_visible(self, *args)


    def copyProperty_opacity(self, source):
        """
        copyProperty_opacity(Appearance self, Appearance source)

        Parameters
        ----------
        source: OpenSim::Appearance::Self const &

        """
        return _simulation.Appearance_copyProperty_opacity(self, source)


    def append_opacity(self, value):
        """
        append_opacity(Appearance self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Appearance_append_opacity(self, value)


    def constructProperty_opacity(self, initValue):
        """
        constructProperty_opacity(Appearance self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Appearance_constructProperty_opacity(self, initValue)


    def get_opacity(self, *args):
        """
        get_opacity(Appearance self, int i) -> double const

        Parameters
        ----------
        i: int

        get_opacity(Appearance self) -> double const &

        Parameters
        ----------
        self: OpenSim::Appearance const *

        """
        return _simulation.Appearance_get_opacity(self, *args)


    def upd_opacity(self, *args):
        """
        upd_opacity(Appearance self, int i) -> double

        Parameters
        ----------
        i: int

        upd_opacity(Appearance self) -> double &

        Parameters
        ----------
        self: OpenSim::Appearance *

        """
        return _simulation.Appearance_upd_opacity(self, *args)


    def set_opacity(self, *args):
        """
        set_opacity(Appearance self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_opacity(Appearance self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Appearance_set_opacity(self, *args)


    def copyProperty_color(self, source):
        """
        copyProperty_color(Appearance self, Appearance source)

        Parameters
        ----------
        source: OpenSim::Appearance::Self const &

        """
        return _simulation.Appearance_copyProperty_color(self, source)


    def append_color(self, value):
        """
        append_color(Appearance self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Appearance_append_color(self, value)


    def constructProperty_color(self, initValue):
        """
        constructProperty_color(Appearance self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Appearance_constructProperty_color(self, initValue)


    def get_color(self, *args):
        """
        get_color(Appearance self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_color(Appearance self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Appearance const *

        """
        return _simulation.Appearance_get_color(self, *args)


    def upd_color(self, *args):
        """
        upd_color(Appearance self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_color(Appearance self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Appearance *

        """
        return _simulation.Appearance_upd_color(self, *args)


    def set_color(self, *args):
        """
        set_color(Appearance self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_color(Appearance self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Appearance_set_color(self, *args)


    def copyProperty_SurfaceProperties(self, source):
        """
        copyProperty_SurfaceProperties(Appearance self, Appearance source)

        Parameters
        ----------
        source: OpenSim::Appearance::Self const &

        """
        return _simulation.Appearance_copyProperty_SurfaceProperties(self, source)


    def append_SurfaceProperties(self, value):
        """
        append_SurfaceProperties(Appearance self, SurfaceProperties value) -> int

        Parameters
        ----------
        value: OpenSim::SurfaceProperties const &

        """
        return _simulation.Appearance_append_SurfaceProperties(self, value)


    def constructProperty_SurfaceProperties(self, initValue):
        """
        constructProperty_SurfaceProperties(Appearance self, SurfaceProperties initValue)

        Parameters
        ----------
        initValue: OpenSim::SurfaceProperties const &

        """
        return _simulation.Appearance_constructProperty_SurfaceProperties(self, initValue)


    def get_SurfaceProperties(self, *args):
        """
        get_SurfaceProperties(Appearance self, int i) -> SurfaceProperties

        Parameters
        ----------
        i: int

        get_SurfaceProperties(Appearance self) -> SurfaceProperties

        Parameters
        ----------
        self: OpenSim::Appearance const *

        """
        return _simulation.Appearance_get_SurfaceProperties(self, *args)


    def upd_SurfaceProperties(self, *args):
        """
        upd_SurfaceProperties(Appearance self, int i) -> SurfaceProperties

        Parameters
        ----------
        i: int

        upd_SurfaceProperties(Appearance self) -> SurfaceProperties

        Parameters
        ----------
        self: OpenSim::Appearance *

        """
        return _simulation.Appearance_upd_SurfaceProperties(self, *args)


    def set_SurfaceProperties(self, *args):
        """
        set_SurfaceProperties(Appearance self, int i, SurfaceProperties value)

        Parameters
        ----------
        i: int
        value: OpenSim::SurfaceProperties const &

        set_SurfaceProperties(Appearance self, SurfaceProperties value)

        Parameters
        ----------
        value: OpenSim::SurfaceProperties const &

        """
        return _simulation.Appearance_set_SurfaceProperties(self, *args)


    def __init__(self):
        """__init__(OpenSim::Appearance self) -> Appearance"""
        this = _simulation.new_Appearance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Appearance
    __del__ = lambda self: None

    def get_representation(self):
        """
        get_representation(Appearance self) -> OpenSim::VisualRepresentation

        Parameters
        ----------
        self: OpenSim::Appearance const *

        """
        return _simulation.Appearance_get_representation(self)


    def set_representation(self, rep):
        """
        set_representation(Appearance self, OpenSim::VisualRepresentation const & rep)

        Parameters
        ----------
        rep: OpenSim::VisualRepresentation const &

        """
        return _simulation.Appearance_set_representation(self, rep)

Appearance_swigregister = _simulation.Appearance_swigregister
Appearance_swigregister(Appearance)

def Appearance_safeDownCast(obj):
    """
    Appearance_safeDownCast(OpenSimObject obj) -> Appearance

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Appearance_safeDownCast(obj)

def Appearance_getClassName():
    """Appearance_getClassName() -> std::string const &"""
    return _simulation.Appearance_getClassName()

class Geometry(opensim.common.Component):
    """Proxy of C++ OpenSim::Geometry class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Geometry

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Geometry_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Geometry self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Geometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Geometry_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Geometry self) -> Geometry

        Parameters
        ----------
        self: OpenSim::Geometry const *

        """
        return _simulation.Geometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Geometry self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Geometry const *

        """
        return _simulation.Geometry_getConcreteClassName(self)


    def copyProperty_scale_factors(self, source):
        """
        copyProperty_scale_factors(Geometry self, Geometry source)

        Parameters
        ----------
        source: OpenSim::Geometry::Self const &

        """
        return _simulation.Geometry_copyProperty_scale_factors(self, source)


    def append_scale_factors(self, value):
        """
        append_scale_factors(Geometry self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Geometry_append_scale_factors(self, value)


    def constructProperty_scale_factors(self, initValue):
        """
        constructProperty_scale_factors(Geometry self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Geometry_constructProperty_scale_factors(self, initValue)


    def get_scale_factors(self, *args):
        """
        get_scale_factors(Geometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_scale_factors(Geometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Geometry const *

        """
        return _simulation.Geometry_get_scale_factors(self, *args)


    def upd_scale_factors(self, *args):
        """
        upd_scale_factors(Geometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_scale_factors(Geometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Geometry *

        """
        return _simulation.Geometry_upd_scale_factors(self, *args)


    def set_scale_factors(self, *args):
        """
        set_scale_factors(Geometry self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_scale_factors(Geometry self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Geometry_set_scale_factors(self, *args)


    def copyProperty_Appearance(self, source):
        """
        copyProperty_Appearance(Geometry self, Geometry source)

        Parameters
        ----------
        source: OpenSim::Geometry::Self const &

        """
        return _simulation.Geometry_copyProperty_Appearance(self, source)


    def append_Appearance(self, value):
        """
        append_Appearance(Geometry self, Appearance value) -> int

        Parameters
        ----------
        value: OpenSim::Appearance const &

        """
        return _simulation.Geometry_append_Appearance(self, value)


    def constructProperty_Appearance(self, initValue):
        """
        constructProperty_Appearance(Geometry self, Appearance initValue)

        Parameters
        ----------
        initValue: OpenSim::Appearance const &

        """
        return _simulation.Geometry_constructProperty_Appearance(self, initValue)


    def get_Appearance(self, *args):
        """
        get_Appearance(Geometry self, int i) -> Appearance

        Parameters
        ----------
        i: int

        get_Appearance(Geometry self) -> Appearance

        Parameters
        ----------
        self: OpenSim::Geometry const *

        """
        return _simulation.Geometry_get_Appearance(self, *args)


    def upd_Appearance(self, *args):
        """
        upd_Appearance(Geometry self, int i) -> Appearance

        Parameters
        ----------
        i: int

        upd_Appearance(Geometry self) -> Appearance

        Parameters
        ----------
        self: OpenSim::Geometry *

        """
        return _simulation.Geometry_upd_Appearance(self, *args)


    def set_Appearance(self, *args):
        """
        set_Appearance(Geometry self, int i, Appearance value)

        Parameters
        ----------
        i: int
        value: OpenSim::Appearance const &

        set_Appearance(Geometry self, Appearance value)

        Parameters
        ----------
        value: OpenSim::Appearance const &

        """
        return _simulation.Geometry_set_Appearance(self, *args)

    __swig_setmethods__["PropertyIndex_socket_frame"] = _simulation.Geometry_PropertyIndex_socket_frame_set
    __swig_getmethods__["PropertyIndex_socket_frame"] = _simulation.Geometry_PropertyIndex_socket_frame_get
    if _newclass:
        PropertyIndex_socket_frame = _swig_property(_simulation.Geometry_PropertyIndex_socket_frame_get, _simulation.Geometry_PropertyIndex_socket_frame_set)

    def constructSocket_frame(self):
        """
        constructSocket_frame(Geometry self) -> PropertyIndex

        Parameters
        ----------
        self: OpenSim::Geometry *

        """
        return _simulation.Geometry_constructSocket_frame(self)


    def connectSocket_frame(self, object):
        """
        connectSocket_frame(Geometry self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.Geometry_connectSocket_frame(self, object)

    __swig_setmethods__["PropertyIndex_input_transform"] = _simulation.Geometry_PropertyIndex_input_transform_set
    __swig_getmethods__["PropertyIndex_input_transform"] = _simulation.Geometry_PropertyIndex_input_transform_get
    if _newclass:
        PropertyIndex_input_transform = _swig_property(_simulation.Geometry_PropertyIndex_input_transform_get, _simulation.Geometry_PropertyIndex_input_transform_set)

    def connectInput_transform(self, *args):
        """
        connectInput_transform(Geometry self, AbstractOutput output, std::string const & alias)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connectInput_transform(Geometry self, AbstractOutput output)

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &

        connectInput_transform(Geometry self, AbstractChannel channel, std::string const & alias)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        connectInput_transform(Geometry self, AbstractChannel channel)

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &

        """
        return _simulation.Geometry_connectInput_transform(self, *args)

    __swig_destroy__ = _simulation.delete_Geometry
    __del__ = lambda self: None

    def setFrame(self, frame):
        """
        setFrame(Geometry self, Frame frame)

        Parameters
        ----------
        frame: OpenSim::Frame const &

        """
        return _simulation.Geometry_setFrame(self, frame)


    def getFrame(self):
        """
        getFrame(Geometry self) -> Frame

        Parameters
        ----------
        self: OpenSim::Geometry const *

        """
        return _simulation.Geometry_getFrame(self)


    def setColor(self, color):
        """
        setColor(Geometry self, Vec3 color)

        Parameters
        ----------
        color: SimTK::Vec3 const &

        """
        return _simulation.Geometry_setColor(self, color)


    def getColor(self):
        """
        getColor(Geometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Geometry const *

        """
        return _simulation.Geometry_getColor(self)


    def setOpacity(self, opacity):
        """
        setOpacity(Geometry self, double const opacity)

        Parameters
        ----------
        opacity: double const

        """
        return _simulation.Geometry_setOpacity(self, opacity)


    def getOpacity(self):
        """
        getOpacity(Geometry self) -> double const

        Parameters
        ----------
        self: OpenSim::Geometry *

        """
        return _simulation.Geometry_getOpacity(self)


    def setRepresentation(self, rep):
        """
        setRepresentation(Geometry self, OpenSim::VisualRepresentation rep)

        Parameters
        ----------
        rep: enum OpenSim::VisualRepresentation

        """
        return _simulation.Geometry_setRepresentation(self, rep)


    def getRepresentation(self):
        """
        getRepresentation(Geometry self) -> OpenSim::VisualRepresentation

        Parameters
        ----------
        self: OpenSim::Geometry *

        """
        return _simulation.Geometry_getRepresentation(self)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(Geometry self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.Geometry_generateDecorations(self, fixed, hints, state, appendToThis)

Geometry_swigregister = _simulation.Geometry_swigregister
Geometry_swigregister(Geometry)

def Geometry_safeDownCast(obj):
    """
    Geometry_safeDownCast(OpenSimObject obj) -> Geometry

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Geometry_safeDownCast(obj)

def Geometry_getClassName():
    """Geometry_getClassName() -> std::string const &"""
    return _simulation.Geometry_getClassName()

class LineGeometry(Geometry):
    """Proxy of C++ OpenSim::LineGeometry class."""

    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineGeometry, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> LineGeometry

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.LineGeometry_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(LineGeometry self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.LineGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.LineGeometry_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(LineGeometry self) -> LineGeometry

        Parameters
        ----------
        self: OpenSim::LineGeometry const *

        """
        return _simulation.LineGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(LineGeometry self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::LineGeometry const *

        """
        return _simulation.LineGeometry_getConcreteClassName(self)


    def copyProperty_start_point(self, source):
        """
        copyProperty_start_point(LineGeometry self, LineGeometry source)

        Parameters
        ----------
        source: OpenSim::LineGeometry::Self const &

        """
        return _simulation.LineGeometry_copyProperty_start_point(self, source)


    def append_start_point(self, value):
        """
        append_start_point(LineGeometry self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.LineGeometry_append_start_point(self, value)


    def constructProperty_start_point(self, initValue):
        """
        constructProperty_start_point(LineGeometry self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.LineGeometry_constructProperty_start_point(self, initValue)


    def get_start_point(self, *args):
        """
        get_start_point(LineGeometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_start_point(LineGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::LineGeometry const *

        """
        return _simulation.LineGeometry_get_start_point(self, *args)


    def upd_start_point(self, *args):
        """
        upd_start_point(LineGeometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_start_point(LineGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::LineGeometry *

        """
        return _simulation.LineGeometry_upd_start_point(self, *args)


    def set_start_point(self, *args):
        """
        set_start_point(LineGeometry self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_start_point(LineGeometry self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.LineGeometry_set_start_point(self, *args)


    def copyProperty_end_point(self, source):
        """
        copyProperty_end_point(LineGeometry self, LineGeometry source)

        Parameters
        ----------
        source: OpenSim::LineGeometry::Self const &

        """
        return _simulation.LineGeometry_copyProperty_end_point(self, source)


    def append_end_point(self, value):
        """
        append_end_point(LineGeometry self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.LineGeometry_append_end_point(self, value)


    def constructProperty_end_point(self, initValue):
        """
        constructProperty_end_point(LineGeometry self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.LineGeometry_constructProperty_end_point(self, initValue)


    def get_end_point(self, *args):
        """
        get_end_point(LineGeometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_end_point(LineGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::LineGeometry const *

        """
        return _simulation.LineGeometry_get_end_point(self, *args)


    def upd_end_point(self, *args):
        """
        upd_end_point(LineGeometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_end_point(LineGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::LineGeometry *

        """
        return _simulation.LineGeometry_upd_end_point(self, *args)


    def set_end_point(self, *args):
        """
        set_end_point(LineGeometry self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_end_point(LineGeometry self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.LineGeometry_set_end_point(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::LineGeometry self, Vec3 aPoint1, Vec3 aPoint2) -> LineGeometry

        Parameters
        ----------
        aPoint1: SimTK::Vec3 &
        aPoint2: SimTK::Vec3 &

        __init__(OpenSim::LineGeometry self) -> LineGeometry
        """
        this = _simulation.new_LineGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_LineGeometry
    __del__ = lambda self: None

    def getPoints(self, rPoint1, rPoint2):
        """
        getPoints(LineGeometry self, Vec3 rPoint1, Vec3 rPoint2)

        Parameters
        ----------
        rPoint1: SimTK::Vec3 &
        rPoint2: SimTK::Vec3 &

        """
        return _simulation.LineGeometry_getPoints(self, rPoint1, rPoint2)


    def setPoints(self, aPoint1, aPoint2):
        """
        setPoints(LineGeometry self, Vec3 aPoint1, Vec3 aPoint2)

        Parameters
        ----------
        aPoint1: SimTK::Vec3 &
        aPoint2: SimTK::Vec3 &

        """
        return _simulation.LineGeometry_setPoints(self, aPoint1, aPoint2)

LineGeometry_swigregister = _simulation.LineGeometry_swigregister
LineGeometry_swigregister(LineGeometry)

def LineGeometry_safeDownCast(obj):
    """
    LineGeometry_safeDownCast(OpenSimObject obj) -> LineGeometry

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.LineGeometry_safeDownCast(obj)

def LineGeometry_getClassName():
    """LineGeometry_getClassName() -> std::string const &"""
    return _simulation.LineGeometry_getClassName()

class Arrow(Geometry):
    """Proxy of C++ OpenSim::Arrow class."""

    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arrow, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Arrow, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Arrow

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Arrow_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Arrow self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Arrow_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Arrow_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Arrow self) -> Arrow

        Parameters
        ----------
        self: OpenSim::Arrow const *

        """
        return _simulation.Arrow_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Arrow self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Arrow const *

        """
        return _simulation.Arrow_getConcreteClassName(self)


    def copyProperty_start_point(self, source):
        """
        copyProperty_start_point(Arrow self, Arrow source)

        Parameters
        ----------
        source: OpenSim::Arrow::Self const &

        """
        return _simulation.Arrow_copyProperty_start_point(self, source)


    def append_start_point(self, value):
        """
        append_start_point(Arrow self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Arrow_append_start_point(self, value)


    def constructProperty_start_point(self, initValue):
        """
        constructProperty_start_point(Arrow self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Arrow_constructProperty_start_point(self, initValue)


    def get_start_point(self, *args):
        """
        get_start_point(Arrow self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_start_point(Arrow self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Arrow const *

        """
        return _simulation.Arrow_get_start_point(self, *args)


    def upd_start_point(self, *args):
        """
        upd_start_point(Arrow self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_start_point(Arrow self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Arrow *

        """
        return _simulation.Arrow_upd_start_point(self, *args)


    def set_start_point(self, *args):
        """
        set_start_point(Arrow self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_start_point(Arrow self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Arrow_set_start_point(self, *args)


    def copyProperty_direction(self, source):
        """
        copyProperty_direction(Arrow self, Arrow source)

        Parameters
        ----------
        source: OpenSim::Arrow::Self const &

        """
        return _simulation.Arrow_copyProperty_direction(self, source)


    def append_direction(self, value):
        """
        append_direction(Arrow self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Arrow_append_direction(self, value)


    def constructProperty_direction(self, initValue):
        """
        constructProperty_direction(Arrow self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Arrow_constructProperty_direction(self, initValue)


    def get_direction(self, *args):
        """
        get_direction(Arrow self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_direction(Arrow self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Arrow const *

        """
        return _simulation.Arrow_get_direction(self, *args)


    def upd_direction(self, *args):
        """
        upd_direction(Arrow self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_direction(Arrow self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Arrow *

        """
        return _simulation.Arrow_upd_direction(self, *args)


    def set_direction(self, *args):
        """
        set_direction(Arrow self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_direction(Arrow self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Arrow_set_direction(self, *args)


    def copyProperty_length(self, source):
        """
        copyProperty_length(Arrow self, Arrow source)

        Parameters
        ----------
        source: OpenSim::Arrow::Self const &

        """
        return _simulation.Arrow_copyProperty_length(self, source)


    def append_length(self, value):
        """
        append_length(Arrow self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Arrow_append_length(self, value)


    def constructProperty_length(self, initValue):
        """
        constructProperty_length(Arrow self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Arrow_constructProperty_length(self, initValue)


    def get_length(self, *args):
        """
        get_length(Arrow self, int i) -> double const

        Parameters
        ----------
        i: int

        get_length(Arrow self) -> double const &

        Parameters
        ----------
        self: OpenSim::Arrow const *

        """
        return _simulation.Arrow_get_length(self, *args)


    def upd_length(self, *args):
        """
        upd_length(Arrow self, int i) -> double

        Parameters
        ----------
        i: int

        upd_length(Arrow self) -> double &

        Parameters
        ----------
        self: OpenSim::Arrow *

        """
        return _simulation.Arrow_upd_length(self, *args)


    def set_length(self, *args):
        """
        set_length(Arrow self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_length(Arrow self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Arrow_set_length(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Arrow self, Vec3 aPoint1, UnitVec3 aUnitDir, double aLength) -> Arrow

        Parameters
        ----------
        aPoint1: SimTK::Vec3 &
        aUnitDir: SimTK::UnitVec3 &
        aLength: double

        __init__(OpenSim::Arrow self) -> Arrow
        """
        this = _simulation.new_Arrow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Arrow
    __del__ = lambda self: None
Arrow_swigregister = _simulation.Arrow_swigregister
Arrow_swigregister(Arrow)

def Arrow_safeDownCast(obj):
    """
    Arrow_safeDownCast(OpenSimObject obj) -> Arrow

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Arrow_safeDownCast(obj)

def Arrow_getClassName():
    """Arrow_getClassName() -> std::string const &"""
    return _simulation.Arrow_getClassName()

class AnalyticGeometry(Geometry):
    """Proxy of C++ OpenSim::AnalyticGeometry class."""

    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticGeometry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AnalyticGeometry

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.AnalyticGeometry_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(AnalyticGeometry self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.AnalyticGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.AnalyticGeometry_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(AnalyticGeometry self) -> AnalyticGeometry

        Parameters
        ----------
        self: OpenSim::AnalyticGeometry const *

        """
        return _simulation.AnalyticGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AnalyticGeometry self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AnalyticGeometry const *

        """
        return _simulation.AnalyticGeometry_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_AnalyticGeometry
    __del__ = lambda self: None
AnalyticGeometry_swigregister = _simulation.AnalyticGeometry_swigregister
AnalyticGeometry_swigregister(AnalyticGeometry)

def AnalyticGeometry_safeDownCast(obj):
    """
    AnalyticGeometry_safeDownCast(OpenSimObject obj) -> AnalyticGeometry

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.AnalyticGeometry_safeDownCast(obj)

def AnalyticGeometry_getClassName():
    """AnalyticGeometry_getClassName() -> std::string const &"""
    return _simulation.AnalyticGeometry_getClassName()

class Sphere(AnalyticGeometry):
    """Proxy of C++ OpenSim::Sphere class."""

    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sphere, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sphere, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Sphere

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Sphere_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Sphere self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Sphere_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Sphere_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Sphere self) -> Sphere

        Parameters
        ----------
        self: OpenSim::Sphere const *

        """
        return _simulation.Sphere_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Sphere self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Sphere const *

        """
        return _simulation.Sphere_getConcreteClassName(self)


    def copyProperty_radius(self, source):
        """
        copyProperty_radius(Sphere self, Sphere source)

        Parameters
        ----------
        source: OpenSim::Sphere::Self const &

        """
        return _simulation.Sphere_copyProperty_radius(self, source)


    def append_radius(self, value):
        """
        append_radius(Sphere self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Sphere_append_radius(self, value)


    def constructProperty_radius(self, initValue):
        """
        constructProperty_radius(Sphere self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Sphere_constructProperty_radius(self, initValue)


    def get_radius(self, *args):
        """
        get_radius(Sphere self, int i) -> double const

        Parameters
        ----------
        i: int

        get_radius(Sphere self) -> double const &

        Parameters
        ----------
        self: OpenSim::Sphere const *

        """
        return _simulation.Sphere_get_radius(self, *args)


    def upd_radius(self, *args):
        """
        upd_radius(Sphere self, int i) -> double

        Parameters
        ----------
        i: int

        upd_radius(Sphere self) -> double &

        Parameters
        ----------
        self: OpenSim::Sphere *

        """
        return _simulation.Sphere_upd_radius(self, *args)


    def set_radius(self, *args):
        """
        set_radius(Sphere self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_radius(Sphere self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Sphere_set_radius(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Sphere self) -> Sphere
        __init__(OpenSim::Sphere self, double radius) -> Sphere

        Parameters
        ----------
        radius: double

        """
        this = _simulation.new_Sphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Sphere
    __del__ = lambda self: None
Sphere_swigregister = _simulation.Sphere_swigregister
Sphere_swigregister(Sphere)

def Sphere_safeDownCast(obj):
    """
    Sphere_safeDownCast(OpenSimObject obj) -> Sphere

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Sphere_safeDownCast(obj)

def Sphere_getClassName():
    """Sphere_getClassName() -> std::string const &"""
    return _simulation.Sphere_getClassName()

class Ellipsoid(AnalyticGeometry):
    """Proxy of C++ OpenSim::Ellipsoid class."""

    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ellipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ellipsoid, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Ellipsoid

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Ellipsoid_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Ellipsoid self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Ellipsoid_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Ellipsoid_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Ellipsoid self) -> Ellipsoid

        Parameters
        ----------
        self: OpenSim::Ellipsoid const *

        """
        return _simulation.Ellipsoid_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Ellipsoid self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Ellipsoid const *

        """
        return _simulation.Ellipsoid_getConcreteClassName(self)


    def copyProperty_radii(self, source):
        """
        copyProperty_radii(Ellipsoid self, Ellipsoid source)

        Parameters
        ----------
        source: OpenSim::Ellipsoid::Self const &

        """
        return _simulation.Ellipsoid_copyProperty_radii(self, source)


    def append_radii(self, value):
        """
        append_radii(Ellipsoid self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Ellipsoid_append_radii(self, value)


    def constructProperty_radii(self, initValue):
        """
        constructProperty_radii(Ellipsoid self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Ellipsoid_constructProperty_radii(self, initValue)


    def get_radii(self, *args):
        """
        get_radii(Ellipsoid self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_radii(Ellipsoid self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Ellipsoid const *

        """
        return _simulation.Ellipsoid_get_radii(self, *args)


    def upd_radii(self, *args):
        """
        upd_radii(Ellipsoid self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_radii(Ellipsoid self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Ellipsoid *

        """
        return _simulation.Ellipsoid_upd_radii(self, *args)


    def set_radii(self, *args):
        """
        set_radii(Ellipsoid self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_radii(Ellipsoid self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Ellipsoid_set_radii(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Ellipsoid self) -> Ellipsoid
        __init__(OpenSim::Ellipsoid self, double radius1, double radius2, double radius3) -> Ellipsoid

        Parameters
        ----------
        radius1: double
        radius2: double
        radius3: double

        """
        this = _simulation.new_Ellipsoid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Ellipsoid
    __del__ = lambda self: None

    def setEllipsoidParams(self, radius1, radius2, radius3):
        """
        setEllipsoidParams(Ellipsoid self, double radius1, double radius2, double radius3)

        Parameters
        ----------
        radius1: double
        radius2: double
        radius3: double

        """
        return _simulation.Ellipsoid_setEllipsoidParams(self, radius1, radius2, radius3)

Ellipsoid_swigregister = _simulation.Ellipsoid_swigregister
Ellipsoid_swigregister(Ellipsoid)

def Ellipsoid_safeDownCast(obj):
    """
    Ellipsoid_safeDownCast(OpenSimObject obj) -> Ellipsoid

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Ellipsoid_safeDownCast(obj)

def Ellipsoid_getClassName():
    """Ellipsoid_getClassName() -> std::string const &"""
    return _simulation.Ellipsoid_getClassName()

class Cylinder(AnalyticGeometry):
    """Proxy of C++ OpenSim::Cylinder class."""

    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cylinder, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Cylinder

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Cylinder_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Cylinder self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Cylinder_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Cylinder_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Cylinder self) -> Cylinder

        Parameters
        ----------
        self: OpenSim::Cylinder const *

        """
        return _simulation.Cylinder_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Cylinder self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Cylinder const *

        """
        return _simulation.Cylinder_getConcreteClassName(self)


    def copyProperty_radius(self, source):
        """
        copyProperty_radius(Cylinder self, Cylinder source)

        Parameters
        ----------
        source: OpenSim::Cylinder::Self const &

        """
        return _simulation.Cylinder_copyProperty_radius(self, source)


    def append_radius(self, value):
        """
        append_radius(Cylinder self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Cylinder_append_radius(self, value)


    def constructProperty_radius(self, initValue):
        """
        constructProperty_radius(Cylinder self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Cylinder_constructProperty_radius(self, initValue)


    def get_radius(self, *args):
        """
        get_radius(Cylinder self, int i) -> double const

        Parameters
        ----------
        i: int

        get_radius(Cylinder self) -> double const &

        Parameters
        ----------
        self: OpenSim::Cylinder const *

        """
        return _simulation.Cylinder_get_radius(self, *args)


    def upd_radius(self, *args):
        """
        upd_radius(Cylinder self, int i) -> double

        Parameters
        ----------
        i: int

        upd_radius(Cylinder self) -> double &

        Parameters
        ----------
        self: OpenSim::Cylinder *

        """
        return _simulation.Cylinder_upd_radius(self, *args)


    def set_radius(self, *args):
        """
        set_radius(Cylinder self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_radius(Cylinder self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Cylinder_set_radius(self, *args)


    def copyProperty_half_height(self, source):
        """
        copyProperty_half_height(Cylinder self, Cylinder source)

        Parameters
        ----------
        source: OpenSim::Cylinder::Self const &

        """
        return _simulation.Cylinder_copyProperty_half_height(self, source)


    def append_half_height(self, value):
        """
        append_half_height(Cylinder self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Cylinder_append_half_height(self, value)


    def constructProperty_half_height(self, initValue):
        """
        constructProperty_half_height(Cylinder self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Cylinder_constructProperty_half_height(self, initValue)


    def get_half_height(self, *args):
        """
        get_half_height(Cylinder self, int i) -> double const

        Parameters
        ----------
        i: int

        get_half_height(Cylinder self) -> double const &

        Parameters
        ----------
        self: OpenSim::Cylinder const *

        """
        return _simulation.Cylinder_get_half_height(self, *args)


    def upd_half_height(self, *args):
        """
        upd_half_height(Cylinder self, int i) -> double

        Parameters
        ----------
        i: int

        upd_half_height(Cylinder self) -> double &

        Parameters
        ----------
        self: OpenSim::Cylinder *

        """
        return _simulation.Cylinder_upd_half_height(self, *args)


    def set_half_height(self, *args):
        """
        set_half_height(Cylinder self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_half_height(Cylinder self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Cylinder_set_half_height(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Cylinder self) -> Cylinder
        __init__(OpenSim::Cylinder self, double const radius, double const hheight) -> Cylinder

        Parameters
        ----------
        radius: double const
        hheight: double const

        """
        this = _simulation.new_Cylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Cylinder
    __del__ = lambda self: None

    def getCylinderParams(self, params):
        """
        getCylinderParams(Cylinder self, Vec2 params)

        Parameters
        ----------
        params: SimTK::Vec2 &

        """
        return _simulation.Cylinder_getCylinderParams(self, params)

Cylinder_swigregister = _simulation.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

def Cylinder_safeDownCast(obj):
    """
    Cylinder_safeDownCast(OpenSimObject obj) -> Cylinder

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Cylinder_safeDownCast(obj)

def Cylinder_getClassName():
    """Cylinder_getClassName() -> std::string const &"""
    return _simulation.Cylinder_getClassName()

class Cone(AnalyticGeometry):
    """Proxy of C++ OpenSim::Cone class."""

    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cone, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cone, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Cone

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Cone_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Cone self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Cone_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Cone_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Cone self) -> Cone

        Parameters
        ----------
        self: OpenSim::Cone const *

        """
        return _simulation.Cone_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Cone self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Cone const *

        """
        return _simulation.Cone_getConcreteClassName(self)


    def copyProperty_origin(self, source):
        """
        copyProperty_origin(Cone self, Cone source)

        Parameters
        ----------
        source: OpenSim::Cone::Self const &

        """
        return _simulation.Cone_copyProperty_origin(self, source)


    def append_origin(self, value):
        """
        append_origin(Cone self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Cone_append_origin(self, value)


    def constructProperty_origin(self, initValue):
        """
        constructProperty_origin(Cone self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Cone_constructProperty_origin(self, initValue)


    def get_origin(self, *args):
        """
        get_origin(Cone self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_origin(Cone self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Cone const *

        """
        return _simulation.Cone_get_origin(self, *args)


    def upd_origin(self, *args):
        """
        upd_origin(Cone self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_origin(Cone self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Cone *

        """
        return _simulation.Cone_upd_origin(self, *args)


    def set_origin(self, *args):
        """
        set_origin(Cone self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_origin(Cone self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Cone_set_origin(self, *args)


    def copyProperty_direction(self, source):
        """
        copyProperty_direction(Cone self, Cone source)

        Parameters
        ----------
        source: OpenSim::Cone::Self const &

        """
        return _simulation.Cone_copyProperty_direction(self, source)


    def append_direction(self, value):
        """
        append_direction(Cone self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Cone_append_direction(self, value)


    def constructProperty_direction(self, initValue):
        """
        constructProperty_direction(Cone self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Cone_constructProperty_direction(self, initValue)


    def get_direction(self, *args):
        """
        get_direction(Cone self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_direction(Cone self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Cone const *

        """
        return _simulation.Cone_get_direction(self, *args)


    def upd_direction(self, *args):
        """
        upd_direction(Cone self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_direction(Cone self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Cone *

        """
        return _simulation.Cone_upd_direction(self, *args)


    def set_direction(self, *args):
        """
        set_direction(Cone self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_direction(Cone self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Cone_set_direction(self, *args)


    def copyProperty_base_radius(self, source):
        """
        copyProperty_base_radius(Cone self, Cone source)

        Parameters
        ----------
        source: OpenSim::Cone::Self const &

        """
        return _simulation.Cone_copyProperty_base_radius(self, source)


    def append_base_radius(self, value):
        """
        append_base_radius(Cone self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Cone_append_base_radius(self, value)


    def constructProperty_base_radius(self, initValue):
        """
        constructProperty_base_radius(Cone self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Cone_constructProperty_base_radius(self, initValue)


    def get_base_radius(self, *args):
        """
        get_base_radius(Cone self, int i) -> double const

        Parameters
        ----------
        i: int

        get_base_radius(Cone self) -> double const &

        Parameters
        ----------
        self: OpenSim::Cone const *

        """
        return _simulation.Cone_get_base_radius(self, *args)


    def upd_base_radius(self, *args):
        """
        upd_base_radius(Cone self, int i) -> double

        Parameters
        ----------
        i: int

        upd_base_radius(Cone self) -> double &

        Parameters
        ----------
        self: OpenSim::Cone *

        """
        return _simulation.Cone_upd_base_radius(self, *args)


    def set_base_radius(self, *args):
        """
        set_base_radius(Cone self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_base_radius(Cone self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Cone_set_base_radius(self, *args)


    def copyProperty_height(self, source):
        """
        copyProperty_height(Cone self, Cone source)

        Parameters
        ----------
        source: OpenSim::Cone::Self const &

        """
        return _simulation.Cone_copyProperty_height(self, source)


    def append_height(self, value):
        """
        append_height(Cone self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Cone_append_height(self, value)


    def constructProperty_height(self, initValue):
        """
        constructProperty_height(Cone self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Cone_constructProperty_height(self, initValue)


    def get_height(self, *args):
        """
        get_height(Cone self, int i) -> double const

        Parameters
        ----------
        i: int

        get_height(Cone self) -> double const &

        Parameters
        ----------
        self: OpenSim::Cone const *

        """
        return _simulation.Cone_get_height(self, *args)


    def upd_height(self, *args):
        """
        upd_height(Cone self, int i) -> double

        Parameters
        ----------
        i: int

        upd_height(Cone self) -> double &

        Parameters
        ----------
        self: OpenSim::Cone *

        """
        return _simulation.Cone_upd_height(self, *args)


    def set_height(self, *args):
        """
        set_height(Cone self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_height(Cone self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Cone_set_height(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Cone self) -> Cone
        __init__(OpenSim::Cone self, Vec3 o, UnitVec3 dir, double height, double base) -> Cone

        Parameters
        ----------
        o: SimTK::Vec3 const &
        dir: SimTK::UnitVec3 const &
        height: double
        base: double

        """
        this = _simulation.new_Cone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Cone
    __del__ = lambda self: None
Cone_swigregister = _simulation.Cone_swigregister
Cone_swigregister(Cone)

def Cone_safeDownCast(obj):
    """
    Cone_safeDownCast(OpenSimObject obj) -> Cone

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Cone_safeDownCast(obj)

def Cone_getClassName():
    """Cone_getClassName() -> std::string const &"""
    return _simulation.Cone_getClassName()

class Torus(AnalyticGeometry):
    """Proxy of C++ OpenSim::Torus class."""

    __swig_setmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Torus, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalyticGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Torus, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Torus

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Torus_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Torus self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Torus_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Torus_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Torus self) -> Torus

        Parameters
        ----------
        self: OpenSim::Torus const *

        """
        return _simulation.Torus_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Torus self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Torus const *

        """
        return _simulation.Torus_getConcreteClassName(self)


    def copyProperty_cross_section(self, source):
        """
        copyProperty_cross_section(Torus self, Torus source)

        Parameters
        ----------
        source: OpenSim::Torus::Self const &

        """
        return _simulation.Torus_copyProperty_cross_section(self, source)


    def append_cross_section(self, value):
        """
        append_cross_section(Torus self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Torus_append_cross_section(self, value)


    def constructProperty_cross_section(self, initValue):
        """
        constructProperty_cross_section(Torus self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Torus_constructProperty_cross_section(self, initValue)


    def get_cross_section(self, *args):
        """
        get_cross_section(Torus self, int i) -> double const

        Parameters
        ----------
        i: int

        get_cross_section(Torus self) -> double const &

        Parameters
        ----------
        self: OpenSim::Torus const *

        """
        return _simulation.Torus_get_cross_section(self, *args)


    def upd_cross_section(self, *args):
        """
        upd_cross_section(Torus self, int i) -> double

        Parameters
        ----------
        i: int

        upd_cross_section(Torus self) -> double &

        Parameters
        ----------
        self: OpenSim::Torus *

        """
        return _simulation.Torus_upd_cross_section(self, *args)


    def set_cross_section(self, *args):
        """
        set_cross_section(Torus self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_cross_section(Torus self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Torus_set_cross_section(self, *args)


    def copyProperty_ring_radius(self, source):
        """
        copyProperty_ring_radius(Torus self, Torus source)

        Parameters
        ----------
        source: OpenSim::Torus::Self const &

        """
        return _simulation.Torus_copyProperty_ring_radius(self, source)


    def append_ring_radius(self, value):
        """
        append_ring_radius(Torus self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Torus_append_ring_radius(self, value)


    def constructProperty_ring_radius(self, initValue):
        """
        constructProperty_ring_radius(Torus self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Torus_constructProperty_ring_radius(self, initValue)


    def get_ring_radius(self, *args):
        """
        get_ring_radius(Torus self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ring_radius(Torus self) -> double const &

        Parameters
        ----------
        self: OpenSim::Torus const *

        """
        return _simulation.Torus_get_ring_radius(self, *args)


    def upd_ring_radius(self, *args):
        """
        upd_ring_radius(Torus self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ring_radius(Torus self) -> double &

        Parameters
        ----------
        self: OpenSim::Torus *

        """
        return _simulation.Torus_upd_ring_radius(self, *args)


    def set_ring_radius(self, *args):
        """
        set_ring_radius(Torus self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ring_radius(Torus self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Torus_set_ring_radius(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Torus self) -> Torus
        __init__(OpenSim::Torus self, double const ringRadius, double const crossSectionRadius) -> Torus

        Parameters
        ----------
        ringRadius: double const
        crossSectionRadius: double const

        """
        this = _simulation.new_Torus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Torus
    __del__ = lambda self: None
Torus_swigregister = _simulation.Torus_swigregister
Torus_swigregister(Torus)

def Torus_safeDownCast(obj):
    """
    Torus_safeDownCast(OpenSimObject obj) -> Torus

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Torus_safeDownCast(obj)

def Torus_getClassName():
    """Torus_getClassName() -> std::string const &"""
    return _simulation.Torus_getClassName()

class Brick(Geometry):
    """Proxy of C++ OpenSim::Brick class."""

    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Brick, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Brick, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Brick

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Brick_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Brick self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Brick_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Brick_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Brick self) -> Brick

        Parameters
        ----------
        self: OpenSim::Brick const *

        """
        return _simulation.Brick_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Brick self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Brick const *

        """
        return _simulation.Brick_getConcreteClassName(self)


    def copyProperty_half_lengths(self, source):
        """
        copyProperty_half_lengths(Brick self, Brick source)

        Parameters
        ----------
        source: OpenSim::Brick::Self const &

        """
        return _simulation.Brick_copyProperty_half_lengths(self, source)


    def append_half_lengths(self, value):
        """
        append_half_lengths(Brick self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Brick_append_half_lengths(self, value)


    def constructProperty_half_lengths(self, initValue):
        """
        constructProperty_half_lengths(Brick self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Brick_constructProperty_half_lengths(self, initValue)


    def get_half_lengths(self, *args):
        """
        get_half_lengths(Brick self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_half_lengths(Brick self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Brick const *

        """
        return _simulation.Brick_get_half_lengths(self, *args)


    def upd_half_lengths(self, *args):
        """
        upd_half_lengths(Brick self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_half_lengths(Brick self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Brick *

        """
        return _simulation.Brick_upd_half_lengths(self, *args)


    def set_half_lengths(self, *args):
        """
        set_half_lengths(Brick self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_half_lengths(Brick self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Brick_set_half_lengths(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Brick self) -> Brick
        __init__(OpenSim::Brick self, Vec3 halfLengths) -> Brick

        Parameters
        ----------
        halfLengths: SimTK::Vec3 const &

        """
        this = _simulation.new_Brick(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Brick
    __del__ = lambda self: None
Brick_swigregister = _simulation.Brick_swigregister
Brick_swigregister(Brick)

def Brick_safeDownCast(obj):
    """
    Brick_safeDownCast(OpenSimObject obj) -> Brick

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Brick_safeDownCast(obj)

def Brick_getClassName():
    """Brick_getClassName() -> std::string const &"""
    return _simulation.Brick_getClassName()

class Mesh(Geometry):
    """Proxy of C++ OpenSim::Mesh class."""

    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Mesh

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Mesh_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Mesh self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Mesh_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Mesh_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Mesh self) -> Mesh

        Parameters
        ----------
        self: OpenSim::Mesh const *

        """
        return _simulation.Mesh_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Mesh self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Mesh const *

        """
        return _simulation.Mesh_getConcreteClassName(self)


    def copyProperty_mesh_file(self, source):
        """
        copyProperty_mesh_file(Mesh self, Mesh source)

        Parameters
        ----------
        source: OpenSim::Mesh::Self const &

        """
        return _simulation.Mesh_copyProperty_mesh_file(self, source)


    def append_mesh_file(self, value):
        """
        append_mesh_file(Mesh self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Mesh_append_mesh_file(self, value)


    def constructProperty_mesh_file(self, initValue):
        """
        constructProperty_mesh_file(Mesh self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.Mesh_constructProperty_mesh_file(self, initValue)


    def get_mesh_file(self, *args):
        """
        get_mesh_file(Mesh self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_mesh_file(Mesh self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Mesh const *

        """
        return _simulation.Mesh_get_mesh_file(self, *args)


    def upd_mesh_file(self, *args):
        """
        upd_mesh_file(Mesh self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_mesh_file(Mesh self) -> std::string &

        Parameters
        ----------
        self: OpenSim::Mesh *

        """
        return _simulation.Mesh_upd_mesh_file(self, *args)


    def set_mesh_file(self, *args):
        """
        set_mesh_file(Mesh self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_mesh_file(Mesh self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Mesh_set_mesh_file(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Mesh self) -> Mesh
        __init__(OpenSim::Mesh self, std::string const & geomFile) -> Mesh

        Parameters
        ----------
        geomFile: std::string const &

        """
        this = _simulation.new_Mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Mesh
    __del__ = lambda self: None

    def getGeometryFilename(self):
        """
        getGeometryFilename(Mesh self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Mesh const *

        """
        return _simulation.Mesh_getGeometryFilename(self)

Mesh_swigregister = _simulation.Mesh_swigregister
Mesh_swigregister(Mesh)

def Mesh_safeDownCast(obj):
    """
    Mesh_safeDownCast(OpenSimObject obj) -> Mesh

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Mesh_safeDownCast(obj)

def Mesh_getClassName():
    """Mesh_getClassName() -> std::string const &"""
    return _simulation.Mesh_getClassName()

class FrameGeometry(Geometry):
    """Proxy of C++ OpenSim::FrameGeometry class."""

    __swig_setmethods__ = {}
    for _s in [Geometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Geometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameGeometry, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FrameGeometry

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.FrameGeometry_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(FrameGeometry self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.FrameGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.FrameGeometry_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(FrameGeometry self) -> FrameGeometry

        Parameters
        ----------
        self: OpenSim::FrameGeometry const *

        """
        return _simulation.FrameGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FrameGeometry self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::FrameGeometry const *

        """
        return _simulation.FrameGeometry_getConcreteClassName(self)


    def copyProperty_display_radius(self, source):
        """
        copyProperty_display_radius(FrameGeometry self, FrameGeometry source)

        Parameters
        ----------
        source: OpenSim::FrameGeometry::Self const &

        """
        return _simulation.FrameGeometry_copyProperty_display_radius(self, source)


    def append_display_radius(self, value):
        """
        append_display_radius(FrameGeometry self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FrameGeometry_append_display_radius(self, value)


    def constructProperty_display_radius(self, initValue):
        """
        constructProperty_display_radius(FrameGeometry self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FrameGeometry_constructProperty_display_radius(self, initValue)


    def get_display_radius(self, *args):
        """
        get_display_radius(FrameGeometry self, int i) -> double const

        Parameters
        ----------
        i: int

        get_display_radius(FrameGeometry self) -> double const &

        Parameters
        ----------
        self: OpenSim::FrameGeometry const *

        """
        return _simulation.FrameGeometry_get_display_radius(self, *args)


    def upd_display_radius(self, *args):
        """
        upd_display_radius(FrameGeometry self, int i) -> double

        Parameters
        ----------
        i: int

        upd_display_radius(FrameGeometry self) -> double &

        Parameters
        ----------
        self: OpenSim::FrameGeometry *

        """
        return _simulation.FrameGeometry_upd_display_radius(self, *args)


    def set_display_radius(self, *args):
        """
        set_display_radius(FrameGeometry self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_display_radius(FrameGeometry self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FrameGeometry_set_display_radius(self, *args)


    def __init__(self, scale=0.2):
        """
        __init__(OpenSim::FrameGeometry self, double scale=0.2) -> FrameGeometry

        Parameters
        ----------
        scale: double

        __init__(OpenSim::FrameGeometry self) -> FrameGeometry
        """
        this = _simulation.new_FrameGeometry(scale)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_FrameGeometry
    __del__ = lambda self: None

    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(FrameGeometry self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.FrameGeometry_generateDecorations(self, fixed, hints, state, appendToThis)

FrameGeometry_swigregister = _simulation.FrameGeometry_swigregister
FrameGeometry_swigregister(FrameGeometry)

def FrameGeometry_safeDownCast(obj):
    """
    FrameGeometry_safeDownCast(OpenSimObject obj) -> FrameGeometry

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.FrameGeometry_safeDownCast(obj)

def FrameGeometry_getClassName():
    """FrameGeometry_getClassName() -> std::string const &"""
    return _simulation.FrameGeometry_getClassName()

class ModelComponent(opensim.common.Component):
    """Proxy of C++ OpenSim::ModelComponent class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponent

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponent_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponent self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponent_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponent_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponent self) -> ModelComponent

        Parameters
        ----------
        self: OpenSim::ModelComponent const *

        """
        return _simulation.ModelComponent_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponent self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponent const *

        """
        return _simulation.ModelComponent_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_ModelComponent
    __del__ = lambda self: None

    def connectToModel(self, model):
        """
        connectToModel(ModelComponent self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _simulation.ModelComponent_connectToModel(self, model)


    def getModel(self):
        """
        getModel(ModelComponent self) -> Model

        Parameters
        ----------
        self: OpenSim::ModelComponent const *

        """
        return _simulation.ModelComponent_getModel(self)


    def updModel(self):
        """
        updModel(ModelComponent self) -> Model

        Parameters
        ----------
        self: OpenSim::ModelComponent *

        """
        return _simulation.ModelComponent_updModel(self)


    def hasModel(self):
        """
        hasModel(ModelComponent self) -> bool

        Parameters
        ----------
        self: OpenSim::ModelComponent const *

        """
        return _simulation.ModelComponent_hasModel(self)


    def preScale(self, s, scaleSet):
        """
        preScale(ModelComponent self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.ModelComponent_preScale(self, s, scaleSet)


    def scale(self, s, scaleSet):
        """
        scale(ModelComponent self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.ModelComponent_scale(self, s, scaleSet)


    def postScale(self, s, scaleSet):
        """
        postScale(ModelComponent self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.ModelComponent_postScale(self, s, scaleSet)

ModelComponent_swigregister = _simulation.ModelComponent_swigregister
ModelComponent_swigregister(ModelComponent)

def ModelComponent_safeDownCast(obj):
    """
    ModelComponent_safeDownCast(OpenSimObject obj) -> ModelComponent

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponent_safeDownCast(obj)

def ModelComponent_getClassName():
    """ModelComponent_getClassName() -> std::string const &"""
    return _simulation.ModelComponent_getClassName()

class SetModelComponents(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::ModelComponent,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetModelComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetModelComponents, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetModelComponents

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetModelComponents_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetModelComponents self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetModelComponents_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetModelComponents_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetModelComponents self) -> SetModelComponents

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ModelComponent,OpenSim::ModelComponent > const *

        """
        return _simulation.SetModelComponents_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetModelComponents self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ModelComponent,OpenSim::ModelComponent > const *

        """
        return _simulation.SetModelComponents_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetModelComponents
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::ModelComponent,OpenSim::ModelComponent)> self) -> SetModelComponents
        __init__(OpenSim::Set<(OpenSim::ModelComponent,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetModelComponents

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::ModelComponent,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetModelComponents

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::ModelComponent,OpenSim::ModelComponent)> self, SetModelComponents aSet) -> SetModelComponents

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::ModelComponent,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetModelComponents(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetModelComponents self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ModelComponent,OpenSim::ModelComponent > *

        """
        return _simulation.SetModelComponents_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetModelComponents self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetModelComponents_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetModelComponents self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetModelComponents_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetModelComponents self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ModelComponent,OpenSim::ModelComponent > const *

        """
        return _simulation.SetModelComponents_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetModelComponents self, ModelComponent aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ModelComponent const *
        aStartIndex: int

        getIndex(SetModelComponents self, ModelComponent aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ModelComponent const *

        getIndex(SetModelComponents self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetModelComponents self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetModelComponents_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetModelComponents self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetModelComponents_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetModelComponents self, ModelComponent aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ModelComponent *

        """
        return _simulation.SetModelComponents_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetModelComponents self, ModelComponent aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ModelComponent const &

        """
        return _simulation.SetModelComponents_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetModelComponents self, int aIndex, ModelComponent aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ModelComponent *

        """
        return _simulation.SetModelComponents_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetModelComponents self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetModelComponents self, ModelComponent aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ModelComponent const *

        """
        return _simulation.SetModelComponents_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetModelComponents self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ModelComponent,OpenSim::ModelComponent > *

        """
        return _simulation.SetModelComponents_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetModelComponents self, int aIndex, ModelComponent aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ModelComponent *
        preserveGroups: bool

        set(SetModelComponents self, int aIndex, ModelComponent aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ModelComponent *

        """
        return _simulation.SetModelComponents_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetModelComponents self, int aIndex) -> ModelComponent

        Parameters
        ----------
        aIndex: int

        get(SetModelComponents self, std::string const & aName) -> ModelComponent

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetModelComponents_get(self, *args)


    def contains(self, aName):
        """
        contains(SetModelComponents self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetModelComponents_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetModelComponents self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetModelComponents_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetModelComponents self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ModelComponent,OpenSim::ModelComponent > const *

        """
        return _simulation.SetModelComponents_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetModelComponents self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetModelComponents_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetModelComponents self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetModelComponents_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetModelComponents self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetModelComponents_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetModelComponents self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetModelComponents_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetModelComponents self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetModelComponents_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetModelComponents self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetModelComponents self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetModelComponents_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetModelComponents_swigregister = _simulation.SetModelComponents_swigregister
SetModelComponents_swigregister(SetModelComponents)

def SetModelComponents_safeDownCast(obj):
    """
    SetModelComponents_safeDownCast(OpenSimObject obj) -> SetModelComponents

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetModelComponents_safeDownCast(obj)

def SetModelComponents_getClassName():
    """SetModelComponents_getClassName() -> std::string const &"""
    return _simulation.SetModelComponents_getClassName()

class ModelComponentSetModelComponent(SetModelComponents):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [SetModelComponents]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetModelComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [SetModelComponents]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetModelComponent, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetModelComponent

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetModelComponent_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetModelComponent self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetModelComponent_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetModelComponent_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetModelComponent self) -> ModelComponentSetModelComponent

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ModelComponent > const *

        """
        return _simulation.ModelComponentSetModelComponent_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetModelComponent self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ModelComponent > const *

        """
        return _simulation.ModelComponentSetModelComponent_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetModelComponent self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ModelComponent > *

        """
        return _simulation.ModelComponentSetModelComponent_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::ModelComponent)> self) -> ModelComponentSetModelComponent"""
        this = _simulation.new_ModelComponentSetModelComponent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetModelComponent
    __del__ = lambda self: None
ModelComponentSetModelComponent_swigregister = _simulation.ModelComponentSetModelComponent_swigregister
ModelComponentSetModelComponent_swigregister(ModelComponentSetModelComponent)

def ModelComponentSetModelComponent_safeDownCast(obj):
    """
    ModelComponentSetModelComponent_safeDownCast(OpenSimObject obj) -> ModelComponentSetModelComponent

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetModelComponent_safeDownCast(obj)

def ModelComponentSetModelComponent_getClassName():
    """ModelComponentSetModelComponent_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetModelComponent_getClassName()

class ComponentSet(ModelComponentSetModelComponent):
    """Proxy of C++ OpenSim::ComponentSet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ComponentSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ComponentSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ComponentSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ComponentSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ComponentSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ComponentSet self) -> ComponentSet

        Parameters
        ----------
        self: OpenSim::ComponentSet const *

        """
        return _simulation.ComponentSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ComponentSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentSet const *

        """
        return _simulation.ComponentSet_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::ComponentSet self) -> ComponentSet"""
        this = _simulation.new_ComponentSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ComponentSet
    __del__ = lambda self: None
ComponentSet_swigregister = _simulation.ComponentSet_swigregister
ComponentSet_swigregister(ComponentSet)

def ComponentSet_safeDownCast(obj):
    """
    ComponentSet_safeDownCast(OpenSimObject obj) -> ComponentSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ComponentSet_safeDownCast(obj)

def ComponentSet_getClassName():
    """ComponentSet_getClassName() -> std::string const &"""
    return _simulation.ComponentSet_getClassName()

class SetMuscles(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Muscle,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMuscles, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMuscles, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMuscles

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetMuscles_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetMuscles self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetMuscles_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetMuscles_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetMuscles self) -> SetMuscles

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Muscle,OpenSim::Object > const *

        """
        return _simulation.SetMuscles_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMuscles self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Muscle,OpenSim::Object > const *

        """
        return _simulation.SetMuscles_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetMuscles
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Muscle,OpenSim::Object)> self) -> SetMuscles
        __init__(OpenSim::Set<(OpenSim::Muscle,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMuscles

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Muscle,OpenSim::Object)> self, std::string const & aFileName) -> SetMuscles

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Muscle,OpenSim::Object)> self, SetMuscles aSet) -> SetMuscles

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Muscle,OpenSim::Object > const &

        """
        this = _simulation.new_SetMuscles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMuscles self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Muscle,OpenSim::Object > *

        """
        return _simulation.SetMuscles_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMuscles self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetMuscles_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMuscles self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetMuscles_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMuscles self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Muscle,OpenSim::Object > const *

        """
        return _simulation.SetMuscles_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMuscles self, Muscle aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Muscle const *
        aStartIndex: int

        getIndex(SetMuscles self, Muscle aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Muscle const *

        getIndex(SetMuscles self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetMuscles self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMuscles_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMuscles self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMuscles_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMuscles self, Muscle aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Muscle *

        """
        return _simulation.SetMuscles_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMuscles self, Muscle aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Muscle const &

        """
        return _simulation.SetMuscles_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMuscles self, int aIndex, Muscle aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Muscle *

        """
        return _simulation.SetMuscles_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMuscles self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetMuscles self, Muscle aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Muscle const *

        """
        return _simulation.SetMuscles_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMuscles self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Muscle,OpenSim::Object > *

        """
        return _simulation.SetMuscles_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMuscles self, int aIndex, Muscle aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Muscle *
        preserveGroups: bool

        set(SetMuscles self, int aIndex, Muscle aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Muscle *

        """
        return _simulation.SetMuscles_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMuscles self, int aIndex) -> Muscle

        Parameters
        ----------
        aIndex: int

        get(SetMuscles self, std::string const & aName) -> Muscle

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMuscles_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMuscles self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMuscles_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMuscles self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMuscles_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMuscles self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Muscle,OpenSim::Object > const *

        """
        return _simulation.SetMuscles_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMuscles self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetMuscles_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMuscles self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetMuscles_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMuscles self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetMuscles_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMuscles self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetMuscles_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMuscles self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMuscles_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMuscles self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetMuscles self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetMuscles_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetMuscles_swigregister = _simulation.SetMuscles_swigregister
SetMuscles_swigregister(SetMuscles)

def SetMuscles_safeDownCast(obj):
    """
    SetMuscles_safeDownCast(OpenSimObject obj) -> SetMuscles

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetMuscles_safeDownCast(obj)

def SetMuscles_getClassName():
    """SetMuscles_getClassName() -> std::string const &"""
    return _simulation.SetMuscles_getClassName()

class Solver(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Solver class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Solver

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Solver_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Solver self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Solver_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Solver_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Solver self) -> Solver

        Parameters
        ----------
        self: OpenSim::Solver const *

        """
        return _simulation.Solver_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Solver self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Solver const *

        """
        return _simulation.Solver_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_Solver
    __del__ = lambda self: None

    def getModel(self):
        """
        getModel(Solver self) -> Model

        Parameters
        ----------
        self: OpenSim::Solver const *

        """
        return _simulation.Solver_getModel(self)

Solver_swigregister = _simulation.Solver_swigregister
Solver_swigregister(Solver)

def Solver_safeDownCast(obj):
    """
    Solver_safeDownCast(OpenSimObject obj) -> Solver

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Solver_safeDownCast(obj)

def Solver_getClassName():
    """Solver_getClassName() -> std::string const &"""
    return _simulation.Solver_getClassName()

class InverseDynamicsSolver(Solver):
    """Proxy of C++ OpenSim::InverseDynamicsSolver class."""

    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseDynamicsSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseDynamicsSolver, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> InverseDynamicsSolver

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.InverseDynamicsSolver_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(InverseDynamicsSolver self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.InverseDynamicsSolver_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.InverseDynamicsSolver_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(InverseDynamicsSolver self) -> InverseDynamicsSolver

        Parameters
        ----------
        self: OpenSim::InverseDynamicsSolver const *

        """
        return _simulation.InverseDynamicsSolver_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(InverseDynamicsSolver self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::InverseDynamicsSolver const *

        """
        return _simulation.InverseDynamicsSolver_getConcreteClassName(self)


    def __init__(self, model):
        """
        __init__(OpenSim::InverseDynamicsSolver self, Model model) -> InverseDynamicsSolver

        Parameters
        ----------
        model: OpenSim::Model const &

        """
        this = _simulation.new_InverseDynamicsSolver(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self, *args):
        """
        solve(InverseDynamicsSolver self, State s, Vector udot) -> Vector

        Parameters
        ----------
        s: SimTK::State const &
        udot: SimTK::Vector const &

        solve(InverseDynamicsSolver self, State s) -> Vector

        Parameters
        ----------
        s: SimTK::State const &

        solve(InverseDynamicsSolver self, State s, Vector udot, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces) -> Vector

        Parameters
        ----------
        s: SimTK::State const &
        udot: SimTK::Vector const &
        appliedMobilityForces: SimTK::Vector const &
        appliedBodyForces: SimTK::Vector_< SimTK::SpatialVec > const &

        solve(InverseDynamicsSolver self, State s, FunctionSet Qs, double time) -> Vector

        Parameters
        ----------
        s: SimTK::State &
        Qs: OpenSim::FunctionSet const &
        time: double

        """
        return _simulation.InverseDynamicsSolver_solve(self, *args)

    __swig_destroy__ = _simulation.delete_InverseDynamicsSolver
    __del__ = lambda self: None
InverseDynamicsSolver_swigregister = _simulation.InverseDynamicsSolver_swigregister
InverseDynamicsSolver_swigregister(InverseDynamicsSolver)

def InverseDynamicsSolver_safeDownCast(obj):
    """
    InverseDynamicsSolver_safeDownCast(OpenSimObject obj) -> InverseDynamicsSolver

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.InverseDynamicsSolver_safeDownCast(obj)

def InverseDynamicsSolver_getClassName():
    """InverseDynamicsSolver_getClassName() -> std::string const &"""
    return _simulation.InverseDynamicsSolver_getClassName()

class MomentArmSolver(Solver):
    """Proxy of C++ OpenSim::MomentArmSolver class."""

    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentArmSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentArmSolver, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MomentArmSolver

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.MomentArmSolver_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MomentArmSolver self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.MomentArmSolver_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.MomentArmSolver_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MomentArmSolver self) -> MomentArmSolver

        Parameters
        ----------
        self: OpenSim::MomentArmSolver const *

        """
        return _simulation.MomentArmSolver_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MomentArmSolver self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MomentArmSolver const *

        """
        return _simulation.MomentArmSolver_getConcreteClassName(self)


    def __init__(self, model):
        """
        __init__(OpenSim::MomentArmSolver self, Model model) -> MomentArmSolver

        Parameters
        ----------
        model: OpenSim::Model const &

        """
        this = _simulation.new_MomentArmSolver(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_MomentArmSolver
    __del__ = lambda self: None

    def solve(self, *args):
        """
        solve(MomentArmSolver self, State state, Coordinate coordinate, GeometryPath path) -> double

        Parameters
        ----------
        state: SimTK::State const &
        coordinate: OpenSim::Coordinate const &
        path: OpenSim::GeometryPath const &

        solve(MomentArmSolver self, State state, Coordinate coordinate, ArrayPointForceDirection pfds) -> double

        Parameters
        ----------
        state: SimTK::State const &
        coordinate: OpenSim::Coordinate const &
        pfds: OpenSim::Array< OpenSim::PointForceDirection * > const &

        """
        return _simulation.MomentArmSolver_solve(self, *args)

MomentArmSolver_swigregister = _simulation.MomentArmSolver_swigregister
MomentArmSolver_swigregister(MomentArmSolver)

def MomentArmSolver_safeDownCast(obj):
    """
    MomentArmSolver_safeDownCast(OpenSimObject obj) -> MomentArmSolver

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.MomentArmSolver_safeDownCast(obj)

def MomentArmSolver_getClassName():
    """MomentArmSolver_getClassName() -> std::string const &"""
    return _simulation.MomentArmSolver_getClassName()

class Frame(ModelComponent):
    """Proxy of C++ OpenSim::Frame class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frame, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Frame, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Frame

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Frame_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Frame self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Frame_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Frame_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Frame self) -> Frame

        Parameters
        ----------
        self: OpenSim::Frame const *

        """
        return _simulation.Frame_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Frame self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Frame const *

        """
        return _simulation.Frame_getConcreteClassName(self)


    def copyProperty_frame_geometry(self, source):
        """
        copyProperty_frame_geometry(Frame self, Frame source)

        Parameters
        ----------
        source: OpenSim::Frame::Self const &

        """
        return _simulation.Frame_copyProperty_frame_geometry(self, source)


    def append_frame_geometry(self, value):
        """
        append_frame_geometry(Frame self, FrameGeometry value) -> int

        Parameters
        ----------
        value: OpenSim::FrameGeometry const &

        """
        return _simulation.Frame_append_frame_geometry(self, value)


    def constructProperty_frame_geometry(self, initValue):
        """
        constructProperty_frame_geometry(Frame self, FrameGeometry initValue)

        Parameters
        ----------
        initValue: OpenSim::FrameGeometry const &

        """
        return _simulation.Frame_constructProperty_frame_geometry(self, initValue)


    def get_frame_geometry(self, *args):
        """
        get_frame_geometry(Frame self, int i) -> FrameGeometry

        Parameters
        ----------
        i: int

        get_frame_geometry(Frame self) -> FrameGeometry

        Parameters
        ----------
        self: OpenSim::Frame const *

        """
        return _simulation.Frame_get_frame_geometry(self, *args)


    def upd_frame_geometry(self, *args):
        """
        upd_frame_geometry(Frame self, int i) -> FrameGeometry

        Parameters
        ----------
        i: int

        upd_frame_geometry(Frame self) -> FrameGeometry

        Parameters
        ----------
        self: OpenSim::Frame *

        """
        return _simulation.Frame_upd_frame_geometry(self, *args)


    def set_frame_geometry(self, *args):
        """
        set_frame_geometry(Frame self, int i, FrameGeometry value)

        Parameters
        ----------
        i: int
        value: OpenSim::FrameGeometry const &

        set_frame_geometry(Frame self, FrameGeometry value)

        Parameters
        ----------
        value: OpenSim::FrameGeometry const &

        """
        return _simulation.Frame_set_frame_geometry(self, *args)


    def copyProperty_attached_geometry(self, source):
        """
        copyProperty_attached_geometry(Frame self, Frame source)

        Parameters
        ----------
        source: OpenSim::Frame::Self const &

        """
        return _simulation.Frame_copyProperty_attached_geometry(self, source)


    def get_attached_geometry(self, i):
        """
        get_attached_geometry(Frame self, int i) -> Geometry

        Parameters
        ----------
        i: int

        """
        return _simulation.Frame_get_attached_geometry(self, i)


    def upd_attached_geometry(self, i):
        """
        upd_attached_geometry(Frame self, int i) -> Geometry

        Parameters
        ----------
        i: int

        """
        return _simulation.Frame_upd_attached_geometry(self, i)


    def set_attached_geometry(self, i, value):
        """
        set_attached_geometry(Frame self, int i, Geometry value)

        Parameters
        ----------
        i: int
        value: OpenSim::Geometry const &

        """
        return _simulation.Frame_set_attached_geometry(self, i, value)


    def append_attached_geometry(self, value):
        """
        append_attached_geometry(Frame self, Geometry value) -> int

        Parameters
        ----------
        value: OpenSim::Geometry const &

        """
        return _simulation.Frame_append_attached_geometry(self, value)


    def constructProperty_attached_geometry(self):
        """
        constructProperty_attached_geometry(Frame self)

        Parameters
        ----------
        self: OpenSim::Frame *

        """
        return _simulation.Frame_constructProperty_attached_geometry(self)

    __swig_setmethods__["_has_output_position"] = _simulation.Frame__has_output_position_set
    __swig_getmethods__["_has_output_position"] = _simulation.Frame__has_output_position_get
    if _newclass:
        _has_output_position = _swig_property(_simulation.Frame__has_output_position_get, _simulation.Frame__has_output_position_set)
    __swig_setmethods__["_has_output_rotation"] = _simulation.Frame__has_output_rotation_set
    __swig_getmethods__["_has_output_rotation"] = _simulation.Frame__has_output_rotation_get
    if _newclass:
        _has_output_rotation = _swig_property(_simulation.Frame__has_output_rotation_get, _simulation.Frame__has_output_rotation_set)
    __swig_setmethods__["_has_output_transform"] = _simulation.Frame__has_output_transform_set
    __swig_getmethods__["_has_output_transform"] = _simulation.Frame__has_output_transform_get
    if _newclass:
        _has_output_transform = _swig_property(_simulation.Frame__has_output_transform_get, _simulation.Frame__has_output_transform_set)
    __swig_setmethods__["_has_output_velocity"] = _simulation.Frame__has_output_velocity_set
    __swig_getmethods__["_has_output_velocity"] = _simulation.Frame__has_output_velocity_get
    if _newclass:
        _has_output_velocity = _swig_property(_simulation.Frame__has_output_velocity_get, _simulation.Frame__has_output_velocity_set)
    __swig_setmethods__["_has_output_angular_velocity"] = _simulation.Frame__has_output_angular_velocity_set
    __swig_getmethods__["_has_output_angular_velocity"] = _simulation.Frame__has_output_angular_velocity_get
    if _newclass:
        _has_output_angular_velocity = _swig_property(_simulation.Frame__has_output_angular_velocity_get, _simulation.Frame__has_output_angular_velocity_set)
    __swig_setmethods__["_has_output_linear_velocity"] = _simulation.Frame__has_output_linear_velocity_set
    __swig_getmethods__["_has_output_linear_velocity"] = _simulation.Frame__has_output_linear_velocity_get
    if _newclass:
        _has_output_linear_velocity = _swig_property(_simulation.Frame__has_output_linear_velocity_get, _simulation.Frame__has_output_linear_velocity_set)
    __swig_setmethods__["_has_output_acceleration"] = _simulation.Frame__has_output_acceleration_set
    __swig_getmethods__["_has_output_acceleration"] = _simulation.Frame__has_output_acceleration_get
    if _newclass:
        _has_output_acceleration = _swig_property(_simulation.Frame__has_output_acceleration_get, _simulation.Frame__has_output_acceleration_set)
    __swig_setmethods__["_has_output_angular_acceleration"] = _simulation.Frame__has_output_angular_acceleration_set
    __swig_getmethods__["_has_output_angular_acceleration"] = _simulation.Frame__has_output_angular_acceleration_get
    if _newclass:
        _has_output_angular_acceleration = _swig_property(_simulation.Frame__has_output_angular_acceleration_get, _simulation.Frame__has_output_angular_acceleration_set)
    __swig_setmethods__["_has_output_linear_acceleration"] = _simulation.Frame__has_output_linear_acceleration_set
    __swig_getmethods__["_has_output_linear_acceleration"] = _simulation.Frame__has_output_linear_acceleration_get
    if _newclass:
        _has_output_linear_acceleration = _swig_property(_simulation.Frame__has_output_linear_acceleration_get, _simulation.Frame__has_output_linear_acceleration_set)
    __swig_destroy__ = _simulation.delete_Frame
    __del__ = lambda self: None

    def getTransformInGround(self, state):
        """
        getTransformInGround(Frame self, State state) -> Transform

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getTransformInGround(self, state)


    def getVelocityInGround(self, state):
        """
        getVelocityInGround(Frame self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getVelocityInGround(self, state)


    def getAngularVelocityInGround(self, state):
        """
        getAngularVelocityInGround(Frame self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getAngularVelocityInGround(self, state)


    def getLinearVelocityInGround(self, state):
        """
        getLinearVelocityInGround(Frame self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getLinearVelocityInGround(self, state)


    def getAccelerationInGround(self, state):
        """
        getAccelerationInGround(Frame self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getAccelerationInGround(self, state)


    def getAngularAccelerationInGround(self, state):
        """
        getAngularAccelerationInGround(Frame self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getAngularAccelerationInGround(self, state)


    def getLinearAccelerationInGround(self, state):
        """
        getLinearAccelerationInGround(Frame self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getLinearAccelerationInGround(self, state)


    def findTransformBetween(self, state, otherFrame):
        """
        findTransformBetween(Frame self, State state, Frame otherFrame) -> Transform

        Parameters
        ----------
        state: SimTK::State const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.Frame_findTransformBetween(self, state, otherFrame)


    def expressVectorInAnotherFrame(self, state, vec_F, otherFrame):
        """
        expressVectorInAnotherFrame(Frame self, State state, Vec3 vec_F, Frame otherFrame) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        vec_F: SimTK::Vec3 const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.Frame_expressVectorInAnotherFrame(self, state, vec_F, otherFrame)


    def expressVectorInGround(self, state, vec_F):
        """
        expressVectorInGround(Frame self, State state, Vec3 vec_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        vec_F: SimTK::Vec3 const &

        """
        return _simulation.Frame_expressVectorInGround(self, state, vec_F)


    def findStationLocationInAnotherFrame(self, state, station_F, otherFrame):
        """
        findStationLocationInAnotherFrame(Frame self, State state, Vec3 station_F, Frame otherFrame) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.Frame_findStationLocationInAnotherFrame(self, state, station_F, otherFrame)


    def findStationLocationInGround(self, state, station_F):
        """
        findStationLocationInGround(Frame self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.Frame_findStationLocationInGround(self, state, station_F)


    def findStationVelocityInGround(self, state, station_F):
        """
        findStationVelocityInGround(Frame self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.Frame_findStationVelocityInGround(self, state, station_F)


    def findStationAccelerationInGround(self, state, station_F):
        """
        findStationAccelerationInGround(Frame self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.Frame_findStationAccelerationInGround(self, state, station_F)


    def findBaseFrame(self):
        """
        findBaseFrame(Frame self) -> Frame

        Parameters
        ----------
        self: OpenSim::Frame const *

        """
        return _simulation.Frame_findBaseFrame(self)


    def findTransformInBaseFrame(self):
        """
        findTransformInBaseFrame(Frame self) -> Transform

        Parameters
        ----------
        self: OpenSim::Frame const *

        """
        return _simulation.Frame_findTransformInBaseFrame(self)


    def getPositionInGround(self, state):
        """
        getPositionInGround(Frame self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getPositionInGround(self, state)


    def getRotationInGround(self, state):
        """
        getRotationInGround(Frame self, State state) -> SimTK::Rotation

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Frame_getRotationInGround(self, state)


    def attachGeometry(self, geom):
        """
        attachGeometry(Frame self, Geometry geom)

        Parameters
        ----------
        geom: OpenSim::Geometry *

        """
        val = _simulation.Frame_attachGeometry(self, geom)

        geom._markAdopted()


        return val


    def scaleAttachedGeometry(self, scaleFactors):
        """
        scaleAttachedGeometry(Frame self, Vec3 scaleFactors)

        Parameters
        ----------
        scaleFactors: SimTK::Vec3 const &

        """
        return _simulation.Frame_scaleAttachedGeometry(self, scaleFactors)


    def extendScale(self, s, scaleSet):
        """
        extendScale(Frame self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.Frame_extendScale(self, s, scaleSet)

Frame_swigregister = _simulation.Frame_swigregister
Frame_swigregister(Frame)

def Frame_safeDownCast(obj):
    """
    Frame_safeDownCast(OpenSimObject obj) -> Frame

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Frame_safeDownCast(obj)

def Frame_getClassName():
    """Frame_getClassName() -> std::string const &"""
    return _simulation.Frame_getClassName()

class WrapObject(ModelComponent):
    """Proxy of C++ OpenSim::WrapObject class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapObject

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapObject_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapObject self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapObject_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapObject_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapObject self) -> WrapObject

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_getConcreteClassName(self)


    def copyProperty_active(self, source):
        """
        copyProperty_active(WrapObject self, WrapObject source)

        Parameters
        ----------
        source: OpenSim::WrapObject::Self const &

        """
        return _simulation.WrapObject_copyProperty_active(self, source)


    def append_active(self, value):
        """
        append_active(WrapObject self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.WrapObject_append_active(self, value)


    def constructProperty_active(self, initValue):
        """
        constructProperty_active(WrapObject self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.WrapObject_constructProperty_active(self, initValue)


    def get_active(self, *args):
        """
        get_active(WrapObject self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_active(WrapObject self) -> bool const &

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_get_active(self, *args)


    def upd_active(self, *args):
        """
        upd_active(WrapObject self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_active(WrapObject self) -> bool &

        Parameters
        ----------
        self: OpenSim::WrapObject *

        """
        return _simulation.WrapObject_upd_active(self, *args)


    def set_active(self, *args):
        """
        set_active(WrapObject self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_active(WrapObject self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.WrapObject_set_active(self, *args)


    def copyProperty_xyz_body_rotation(self, source):
        """
        copyProperty_xyz_body_rotation(WrapObject self, WrapObject source)

        Parameters
        ----------
        source: OpenSim::WrapObject::Self const &

        """
        return _simulation.WrapObject_copyProperty_xyz_body_rotation(self, source)


    def append_xyz_body_rotation(self, value):
        """
        append_xyz_body_rotation(WrapObject self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapObject_append_xyz_body_rotation(self, value)


    def constructProperty_xyz_body_rotation(self, initValue):
        """
        constructProperty_xyz_body_rotation(WrapObject self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.WrapObject_constructProperty_xyz_body_rotation(self, initValue)


    def get_xyz_body_rotation(self, *args):
        """
        get_xyz_body_rotation(WrapObject self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_xyz_body_rotation(WrapObject self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_get_xyz_body_rotation(self, *args)


    def upd_xyz_body_rotation(self, *args):
        """
        upd_xyz_body_rotation(WrapObject self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_xyz_body_rotation(WrapObject self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapObject *

        """
        return _simulation.WrapObject_upd_xyz_body_rotation(self, *args)


    def set_xyz_body_rotation(self, *args):
        """
        set_xyz_body_rotation(WrapObject self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_xyz_body_rotation(WrapObject self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapObject_set_xyz_body_rotation(self, *args)


    def copyProperty_translation(self, source):
        """
        copyProperty_translation(WrapObject self, WrapObject source)

        Parameters
        ----------
        source: OpenSim::WrapObject::Self const &

        """
        return _simulation.WrapObject_copyProperty_translation(self, source)


    def append_translation(self, value):
        """
        append_translation(WrapObject self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapObject_append_translation(self, value)


    def constructProperty_translation(self, initValue):
        """
        constructProperty_translation(WrapObject self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.WrapObject_constructProperty_translation(self, initValue)


    def get_translation(self, *args):
        """
        get_translation(WrapObject self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_translation(WrapObject self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_get_translation(self, *args)


    def upd_translation(self, *args):
        """
        upd_translation(WrapObject self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_translation(WrapObject self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapObject *

        """
        return _simulation.WrapObject_upd_translation(self, *args)


    def set_translation(self, *args):
        """
        set_translation(WrapObject self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_translation(WrapObject self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapObject_set_translation(self, *args)


    def copyProperty_Appearance(self, source):
        """
        copyProperty_Appearance(WrapObject self, WrapObject source)

        Parameters
        ----------
        source: OpenSim::WrapObject::Self const &

        """
        return _simulation.WrapObject_copyProperty_Appearance(self, source)


    def append_Appearance(self, value):
        """
        append_Appearance(WrapObject self, Appearance value) -> int

        Parameters
        ----------
        value: OpenSim::Appearance const &

        """
        return _simulation.WrapObject_append_Appearance(self, value)


    def constructProperty_Appearance(self, initValue):
        """
        constructProperty_Appearance(WrapObject self, Appearance initValue)

        Parameters
        ----------
        initValue: OpenSim::Appearance const &

        """
        return _simulation.WrapObject_constructProperty_Appearance(self, initValue)


    def get_Appearance(self, *args):
        """
        get_Appearance(WrapObject self, int i) -> Appearance

        Parameters
        ----------
        i: int

        get_Appearance(WrapObject self) -> Appearance

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_get_Appearance(self, *args)


    def upd_Appearance(self, *args):
        """
        upd_Appearance(WrapObject self, int i) -> Appearance

        Parameters
        ----------
        i: int

        upd_Appearance(WrapObject self) -> Appearance

        Parameters
        ----------
        self: OpenSim::WrapObject *

        """
        return _simulation.WrapObject_upd_Appearance(self, *args)


    def set_Appearance(self, *args):
        """
        set_Appearance(WrapObject self, int i, Appearance value)

        Parameters
        ----------
        i: int
        value: OpenSim::Appearance const &

        set_Appearance(WrapObject self, Appearance value)

        Parameters
        ----------
        value: OpenSim::Appearance const &

        """
        return _simulation.WrapObject_set_Appearance(self, *args)


    def copyProperty_quadrant(self, source):
        """
        copyProperty_quadrant(WrapObject self, WrapObject source)

        Parameters
        ----------
        source: OpenSim::WrapObject::Self const &

        """
        return _simulation.WrapObject_copyProperty_quadrant(self, source)


    def append_quadrant(self, value):
        """
        append_quadrant(WrapObject self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapObject_append_quadrant(self, value)


    def constructProperty_quadrant(self, initValue):
        """
        constructProperty_quadrant(WrapObject self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.WrapObject_constructProperty_quadrant(self, initValue)


    def get_quadrant(self, *args):
        """
        get_quadrant(WrapObject self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_quadrant(WrapObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_get_quadrant(self, *args)


    def upd_quadrant(self, *args):
        """
        upd_quadrant(WrapObject self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_quadrant(WrapObject self) -> std::string &

        Parameters
        ----------
        self: OpenSim::WrapObject *

        """
        return _simulation.WrapObject_upd_quadrant(self, *args)


    def set_quadrant(self, *args):
        """
        set_quadrant(WrapObject self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_quadrant(WrapObject self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapObject_set_quadrant(self, *args)

    allQuadrants = _simulation.WrapObject_allQuadrants
    negativeX = _simulation.WrapObject_negativeX
    positiveX = _simulation.WrapObject_positiveX
    negativeY = _simulation.WrapObject_negativeY
    positiveY = _simulation.WrapObject_positiveY
    negativeZ = _simulation.WrapObject_negativeZ
    positiveZ = _simulation.WrapObject_positiveZ
    noWrap = _simulation.WrapObject_noWrap
    insideRadius = _simulation.WrapObject_insideRadius
    wrapped = _simulation.WrapObject_wrapped
    mandatoryWrap = _simulation.WrapObject_mandatoryWrap
    __swig_destroy__ = _simulation.delete_WrapObject
    __del__ = lambda self: None

    def extendScale(self, s, scaleSet):
        """
        extendScale(WrapObject self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.WrapObject_extendScale(self, s, scaleSet)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapObject self, Model aModel, PhysicalFrame aBody)

        Parameters
        ----------
        aModel: OpenSim::Model &
        aBody: OpenSim::PhysicalFrame &

        """
        return _simulation.WrapObject_connectToModelAndBody(self, aModel, aBody)


    def getFrame(self):
        """
        getFrame(WrapObject self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_getFrame(self)


    def setFrame(self, frame):
        """
        setFrame(WrapObject self, PhysicalFrame frame)

        Parameters
        ----------
        frame: OpenSim::PhysicalFrame const &

        """
        return _simulation.WrapObject_setFrame(self, frame)


    def getActiveUseDefault(self):
        """
        getActiveUseDefault(WrapObject self) -> bool

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_getActiveUseDefault(self)


    def getQuadrantNameUseDefault(self):
        """
        getQuadrantNameUseDefault(WrapObject self) -> bool

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_getQuadrantNameUseDefault(self)


    def getTransform(self):
        """
        getTransform(WrapObject self) -> Transform

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_getTransform(self)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapObject self) -> char const *

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapObject self) -> std::string

        Parameters
        ----------
        self: OpenSim::WrapObject const *

        """
        return _simulation.WrapObject_getDimensionsString(self)


    def wrapPathSegment(self, state, aPoint1, aPoint2, aPathWrap, aWrapResult):
        """
        wrapPathSegment(WrapObject self, State state, AbstractPathPoint aPoint1, AbstractPathPoint aPoint2, PathWrap aPathWrap, OpenSim::WrapResult & aWrapResult) -> int

        Parameters
        ----------
        state: SimTK::State const &
        aPoint1: OpenSim::AbstractPathPoint &
        aPoint2: OpenSim::AbstractPathPoint &
        aPathWrap: OpenSim::PathWrap const &
        aWrapResult: OpenSim::WrapResult &

        """
        return _simulation.WrapObject_wrapPathSegment(self, state, aPoint1, aPoint2, aPathWrap, aWrapResult)

WrapObject_swigregister = _simulation.WrapObject_swigregister
WrapObject_swigregister(WrapObject)

def WrapObject_safeDownCast(obj):
    """
    WrapObject_safeDownCast(OpenSimObject obj) -> WrapObject

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapObject_safeDownCast(obj)

def WrapObject_getClassName():
    """WrapObject_getClassName() -> std::string const &"""
    return _simulation.WrapObject_getClassName()

class SetWrapObject(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::WrapObject,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetWrapObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetWrapObject, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetWrapObject

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetWrapObject_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetWrapObject self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetWrapObject_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetWrapObject_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetWrapObject self) -> SetWrapObject

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::WrapObject,OpenSim::ModelComponent > const *

        """
        return _simulation.SetWrapObject_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetWrapObject self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::WrapObject,OpenSim::ModelComponent > const *

        """
        return _simulation.SetWrapObject_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetWrapObject
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::WrapObject,OpenSim::ModelComponent)> self) -> SetWrapObject
        __init__(OpenSim::Set<(OpenSim::WrapObject,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetWrapObject

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::WrapObject,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetWrapObject

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::WrapObject,OpenSim::ModelComponent)> self, SetWrapObject aSet) -> SetWrapObject

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::WrapObject,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetWrapObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetWrapObject self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::WrapObject,OpenSim::ModelComponent > *

        """
        return _simulation.SetWrapObject_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetWrapObject self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetWrapObject_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetWrapObject self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetWrapObject_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetWrapObject self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::WrapObject,OpenSim::ModelComponent > const *

        """
        return _simulation.SetWrapObject_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetWrapObject self, WrapObject aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::WrapObject const *
        aStartIndex: int

        getIndex(SetWrapObject self, WrapObject aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::WrapObject const *

        getIndex(SetWrapObject self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetWrapObject self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetWrapObject_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetWrapObject self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetWrapObject_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetWrapObject self, WrapObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::WrapObject *

        """
        return _simulation.SetWrapObject_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetWrapObject self, WrapObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::WrapObject const &

        """
        return _simulation.SetWrapObject_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetWrapObject self, int aIndex, WrapObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::WrapObject *

        """
        return _simulation.SetWrapObject_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetWrapObject self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetWrapObject self, WrapObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::WrapObject const *

        """
        return _simulation.SetWrapObject_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetWrapObject self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::WrapObject,OpenSim::ModelComponent > *

        """
        return _simulation.SetWrapObject_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetWrapObject self, int aIndex, WrapObject aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::WrapObject *
        preserveGroups: bool

        set(SetWrapObject self, int aIndex, WrapObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::WrapObject *

        """
        return _simulation.SetWrapObject_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetWrapObject self, int aIndex) -> WrapObject

        Parameters
        ----------
        aIndex: int

        get(SetWrapObject self, std::string const & aName) -> WrapObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetWrapObject_get(self, *args)


    def contains(self, aName):
        """
        contains(SetWrapObject self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetWrapObject_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetWrapObject self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetWrapObject_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetWrapObject self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::WrapObject,OpenSim::ModelComponent > const *

        """
        return _simulation.SetWrapObject_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetWrapObject self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetWrapObject_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetWrapObject self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetWrapObject_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetWrapObject self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetWrapObject_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetWrapObject self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetWrapObject_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetWrapObject self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetWrapObject_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetWrapObject self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetWrapObject self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetWrapObject_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetWrapObject_swigregister = _simulation.SetWrapObject_swigregister
SetWrapObject_swigregister(SetWrapObject)

def SetWrapObject_safeDownCast(obj):
    """
    SetWrapObject_safeDownCast(OpenSimObject obj) -> SetWrapObject

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetWrapObject_safeDownCast(obj)

def SetWrapObject_getClassName():
    """SetWrapObject_getClassName() -> std::string const &"""
    return _simulation.SetWrapObject_getClassName()

class ModelComponentSetWrapObjects(SetWrapObject):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::WrapObject)> class."""

    __swig_setmethods__ = {}
    for _s in [SetWrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetWrapObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [SetWrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetWrapObjects, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetWrapObjects

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetWrapObjects_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetWrapObjects self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetWrapObjects_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetWrapObjects_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetWrapObjects self) -> ModelComponentSetWrapObjects

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::WrapObject > const *

        """
        return _simulation.ModelComponentSetWrapObjects_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetWrapObjects self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::WrapObject > const *

        """
        return _simulation.ModelComponentSetWrapObjects_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetWrapObjects self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::WrapObject > *

        """
        return _simulation.ModelComponentSetWrapObjects_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::WrapObject)> self) -> ModelComponentSetWrapObjects"""
        this = _simulation.new_ModelComponentSetWrapObjects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetWrapObjects
    __del__ = lambda self: None
ModelComponentSetWrapObjects_swigregister = _simulation.ModelComponentSetWrapObjects_swigregister
ModelComponentSetWrapObjects_swigregister(ModelComponentSetWrapObjects)

def ModelComponentSetWrapObjects_safeDownCast(obj):
    """
    ModelComponentSetWrapObjects_safeDownCast(OpenSimObject obj) -> ModelComponentSetWrapObjects

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetWrapObjects_safeDownCast(obj)

def ModelComponentSetWrapObjects_getClassName():
    """ModelComponentSetWrapObjects_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetWrapObjects_getClassName()

class WrapObjectSet(ModelComponentSetWrapObjects):
    """Proxy of C++ OpenSim::WrapObjectSet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetWrapObjects]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapObjectSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetWrapObjects]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapObjectSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapObjectSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapObjectSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapObjectSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapObjectSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapObjectSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapObjectSet self) -> WrapObjectSet

        Parameters
        ----------
        self: OpenSim::WrapObjectSet const *

        """
        return _simulation.WrapObjectSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapObjectSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapObjectSet const *

        """
        return _simulation.WrapObjectSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WrapObjectSet self) -> WrapObjectSet
        __init__(OpenSim::WrapObjectSet self, std::string const & file, bool updateFromXML=True) -> WrapObjectSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::WrapObjectSet self, std::string const & file) -> WrapObjectSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_WrapObjectSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WrapObjectSet
    __del__ = lambda self: None
WrapObjectSet_swigregister = _simulation.WrapObjectSet_swigregister
WrapObjectSet_swigregister(WrapObjectSet)

def WrapObjectSet_safeDownCast(obj):
    """
    WrapObjectSet_safeDownCast(OpenSimObject obj) -> WrapObjectSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapObjectSet_safeDownCast(obj)

def WrapObjectSet_getClassName():
    """WrapObjectSet_getClassName() -> std::string const &"""
    return _simulation.WrapObjectSet_getClassName()

class PhysicalFrame(Frame):
    """Proxy of C++ OpenSim::PhysicalFrame class."""

    __swig_setmethods__ = {}
    for _s in [Frame]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicalFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [Frame]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicalFrame, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PhysicalFrame

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PhysicalFrame_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PhysicalFrame self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PhysicalFrame_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PhysicalFrame_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PhysicalFrame self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::PhysicalFrame const *

        """
        return _simulation.PhysicalFrame_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PhysicalFrame self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PhysicalFrame const *

        """
        return _simulation.PhysicalFrame_getConcreteClassName(self)


    def copyProperty_WrapObjectSet(self, source):
        """
        copyProperty_WrapObjectSet(PhysicalFrame self, PhysicalFrame source)

        Parameters
        ----------
        source: OpenSim::PhysicalFrame::Self const &

        """
        return _simulation.PhysicalFrame_copyProperty_WrapObjectSet(self, source)


    def append_WrapObjectSet(self, value):
        """
        append_WrapObjectSet(PhysicalFrame self, WrapObjectSet value) -> int

        Parameters
        ----------
        value: OpenSim::WrapObjectSet const &

        """
        return _simulation.PhysicalFrame_append_WrapObjectSet(self, value)


    def constructProperty_WrapObjectSet(self, initValue):
        """
        constructProperty_WrapObjectSet(PhysicalFrame self, WrapObjectSet initValue)

        Parameters
        ----------
        initValue: OpenSim::WrapObjectSet const &

        """
        return _simulation.PhysicalFrame_constructProperty_WrapObjectSet(self, initValue)


    def get_WrapObjectSet(self, *args):
        """
        get_WrapObjectSet(PhysicalFrame self, int i) -> WrapObjectSet

        Parameters
        ----------
        i: int

        get_WrapObjectSet(PhysicalFrame self) -> WrapObjectSet

        Parameters
        ----------
        self: OpenSim::PhysicalFrame const *

        """
        return _simulation.PhysicalFrame_get_WrapObjectSet(self, *args)


    def upd_WrapObjectSet(self, *args):
        """
        upd_WrapObjectSet(PhysicalFrame self, int i) -> WrapObjectSet

        Parameters
        ----------
        i: int

        upd_WrapObjectSet(PhysicalFrame self) -> WrapObjectSet

        Parameters
        ----------
        self: OpenSim::PhysicalFrame *

        """
        return _simulation.PhysicalFrame_upd_WrapObjectSet(self, *args)


    def set_WrapObjectSet(self, *args):
        """
        set_WrapObjectSet(PhysicalFrame self, int i, WrapObjectSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::WrapObjectSet const &

        set_WrapObjectSet(PhysicalFrame self, WrapObjectSet value)

        Parameters
        ----------
        value: OpenSim::WrapObjectSet const &

        """
        return _simulation.PhysicalFrame_set_WrapObjectSet(self, *args)

    __swig_destroy__ = _simulation.delete_PhysicalFrame
    __del__ = lambda self: None

    def getMobilizedBodyIndex(self):
        """
        getMobilizedBodyIndex(PhysicalFrame self) -> SimTK::MobilizedBodyIndex const &

        Parameters
        ----------
        self: OpenSim::PhysicalFrame const *

        """
        return _simulation.PhysicalFrame_getMobilizedBodyIndex(self)


    def getMobilizedBody(self):
        """
        getMobilizedBody(PhysicalFrame self) -> SimTK::MobilizedBody const &

        Parameters
        ----------
        self: OpenSim::PhysicalFrame const *

        """
        return _simulation.PhysicalFrame_getMobilizedBody(self)


    def updMobilizedBody(self):
        """
        updMobilizedBody(PhysicalFrame self) -> SimTK::MobilizedBody &

        Parameters
        ----------
        self: OpenSim::PhysicalFrame *

        """
        return _simulation.PhysicalFrame_updMobilizedBody(self)


    def getWrapObject(self, aName):
        """
        getWrapObject(PhysicalFrame self, std::string const & aName) -> WrapObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.PhysicalFrame_getWrapObject(self, aName)


    def getWrapObjectSet(self):
        """
        getWrapObjectSet(PhysicalFrame self) -> WrapObjectSet

        Parameters
        ----------
        self: OpenSim::PhysicalFrame const *

        """
        return _simulation.PhysicalFrame_getWrapObjectSet(self)


    def addWrapObject(self, wrapObject):
        """
        addWrapObject(PhysicalFrame self, WrapObject wrapObject)

        Parameters
        ----------
        wrapObject: OpenSim::WrapObject *

        """
        val = _simulation.PhysicalFrame_addWrapObject(self, wrapObject)

        wrapObject._markAdopted()


        return val

PhysicalFrame_swigregister = _simulation.PhysicalFrame_swigregister
PhysicalFrame_swigregister(PhysicalFrame)

def PhysicalFrame_safeDownCast(obj):
    """
    PhysicalFrame_safeDownCast(OpenSimObject obj) -> PhysicalFrame

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PhysicalFrame_safeDownCast(obj)

def PhysicalFrame_getClassName():
    """PhysicalFrame_getClassName() -> std::string const &"""
    return _simulation.PhysicalFrame_getClassName()

class Ground(PhysicalFrame):
    """Proxy of C++ OpenSim::Ground class."""

    __swig_setmethods__ = {}
    for _s in [PhysicalFrame]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ground, name, value)
    __swig_getmethods__ = {}
    for _s in [PhysicalFrame]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ground, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Ground

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Ground_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Ground self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Ground_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Ground_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Ground self) -> Ground

        Parameters
        ----------
        self: OpenSim::Ground const *

        """
        return _simulation.Ground_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Ground self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Ground const *

        """
        return _simulation.Ground_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::Ground self) -> Ground"""
        this = _simulation.new_Ground()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Ground
    __del__ = lambda self: None
Ground_swigregister = _simulation.Ground_swigregister
Ground_swigregister(Ground)

def Ground_safeDownCast(obj):
    """
    Ground_safeDownCast(OpenSimObject obj) -> Ground

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Ground_safeDownCast(obj)

def Ground_getClassName():
    """Ground_getClassName() -> std::string const &"""
    return _simulation.Ground_getClassName()

class PhysicalFrameWithOffset(PhysicalFrame):
    """Proxy of C++ OpenSim::OffsetFrame<(OpenSim::PhysicalFrame)> class."""

    __swig_setmethods__ = {}
    for _s in [PhysicalFrame]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicalFrameWithOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [PhysicalFrame]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicalFrameWithOffset, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PhysicalFrameWithOffset

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PhysicalFrameWithOffset_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PhysicalFrameWithOffset self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PhysicalFrameWithOffset_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PhysicalFrameWithOffset_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PhysicalFrameWithOffset self) -> PhysicalFrameWithOffset

        Parameters
        ----------
        self: OpenSim::OffsetFrame< OpenSim::PhysicalFrame > const *

        """
        return _simulation.PhysicalFrameWithOffset_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PhysicalFrameWithOffset self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::OffsetFrame< OpenSim::PhysicalFrame > const *

        """
        return _simulation.PhysicalFrameWithOffset_getConcreteClassName(self)


    def copyProperty_translation(self, source):
        """
        copyProperty_translation(PhysicalFrameWithOffset self, PhysicalFrameWithOffset source)

        Parameters
        ----------
        source: OpenSim::OffsetFrame< OpenSim::PhysicalFrame >::Self const &

        """
        return _simulation.PhysicalFrameWithOffset_copyProperty_translation(self, source)


    def append_translation(self, value):
        """
        append_translation(PhysicalFrameWithOffset self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PhysicalFrameWithOffset_append_translation(self, value)


    def constructProperty_translation(self, initValue):
        """
        constructProperty_translation(PhysicalFrameWithOffset self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PhysicalFrameWithOffset_constructProperty_translation(self, initValue)


    def get_translation(self, *args):
        """
        get_translation(PhysicalFrameWithOffset self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_translation(PhysicalFrameWithOffset self) -> Vec3

        Parameters
        ----------
        self: OpenSim::OffsetFrame< OpenSim::PhysicalFrame > const *

        """
        return _simulation.PhysicalFrameWithOffset_get_translation(self, *args)


    def upd_translation(self, *args):
        """
        upd_translation(PhysicalFrameWithOffset self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_translation(PhysicalFrameWithOffset self) -> Vec3

        Parameters
        ----------
        self: OpenSim::OffsetFrame< OpenSim::PhysicalFrame > *

        """
        return _simulation.PhysicalFrameWithOffset_upd_translation(self, *args)


    def set_translation(self, *args):
        """
        set_translation(PhysicalFrameWithOffset self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_translation(PhysicalFrameWithOffset self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PhysicalFrameWithOffset_set_translation(self, *args)


    def copyProperty_orientation(self, source):
        """
        copyProperty_orientation(PhysicalFrameWithOffset self, PhysicalFrameWithOffset source)

        Parameters
        ----------
        source: OpenSim::OffsetFrame< OpenSim::PhysicalFrame >::Self const &

        """
        return _simulation.PhysicalFrameWithOffset_copyProperty_orientation(self, source)


    def append_orientation(self, value):
        """
        append_orientation(PhysicalFrameWithOffset self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PhysicalFrameWithOffset_append_orientation(self, value)


    def constructProperty_orientation(self, initValue):
        """
        constructProperty_orientation(PhysicalFrameWithOffset self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PhysicalFrameWithOffset_constructProperty_orientation(self, initValue)


    def get_orientation(self, *args):
        """
        get_orientation(PhysicalFrameWithOffset self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_orientation(PhysicalFrameWithOffset self) -> Vec3

        Parameters
        ----------
        self: OpenSim::OffsetFrame< OpenSim::PhysicalFrame > const *

        """
        return _simulation.PhysicalFrameWithOffset_get_orientation(self, *args)


    def upd_orientation(self, *args):
        """
        upd_orientation(PhysicalFrameWithOffset self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_orientation(PhysicalFrameWithOffset self) -> Vec3

        Parameters
        ----------
        self: OpenSim::OffsetFrame< OpenSim::PhysicalFrame > *

        """
        return _simulation.PhysicalFrameWithOffset_upd_orientation(self, *args)


    def set_orientation(self, *args):
        """
        set_orientation(PhysicalFrameWithOffset self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_orientation(PhysicalFrameWithOffset self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PhysicalFrameWithOffset_set_orientation(self, *args)

    __swig_setmethods__["PropertyIndex_socket_parent"] = _simulation.PhysicalFrameWithOffset_PropertyIndex_socket_parent_set
    __swig_getmethods__["PropertyIndex_socket_parent"] = _simulation.PhysicalFrameWithOffset_PropertyIndex_socket_parent_get
    if _newclass:
        PropertyIndex_socket_parent = _swig_property(_simulation.PhysicalFrameWithOffset_PropertyIndex_socket_parent_get, _simulation.PhysicalFrameWithOffset_PropertyIndex_socket_parent_set)

    def connectSocket_parent(self, object):
        """
        connectSocket_parent(PhysicalFrameWithOffset self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.PhysicalFrameWithOffset_connectSocket_parent(self, object)


    def setParentFrame(self, parent):
        """
        setParentFrame(PhysicalFrameWithOffset self, PhysicalFrame parent)

        Parameters
        ----------
        parent: OpenSim::PhysicalFrame const &

        """
        return _simulation.PhysicalFrameWithOffset_setParentFrame(self, parent)


    def getParentFrame(self):
        """
        getParentFrame(PhysicalFrameWithOffset self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::OffsetFrame< OpenSim::PhysicalFrame > const *

        """
        return _simulation.PhysicalFrameWithOffset_getParentFrame(self)


    def getOffsetTransform(self):
        """
        getOffsetTransform(PhysicalFrameWithOffset self) -> Transform

        Parameters
        ----------
        self: OpenSim::OffsetFrame< OpenSim::PhysicalFrame > const *

        """
        return _simulation.PhysicalFrameWithOffset_getOffsetTransform(self)


    def setOffsetTransform(self, offset):
        """
        setOffsetTransform(PhysicalFrameWithOffset self, Transform offset)

        Parameters
        ----------
        offset: SimTK::Transform const &

        """
        return _simulation.PhysicalFrameWithOffset_setOffsetTransform(self, offset)


    def extendScale(self, s, scaleSet):
        """
        extendScale(PhysicalFrameWithOffset self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.PhysicalFrameWithOffset_extendScale(self, s, scaleSet)

    __swig_destroy__ = _simulation.delete_PhysicalFrameWithOffset
    __del__ = lambda self: None
PhysicalFrameWithOffset_swigregister = _simulation.PhysicalFrameWithOffset_swigregister
PhysicalFrameWithOffset_swigregister(PhysicalFrameWithOffset)

def PhysicalFrameWithOffset_safeDownCast(obj):
    """
    PhysicalFrameWithOffset_safeDownCast(OpenSimObject obj) -> PhysicalFrameWithOffset

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PhysicalFrameWithOffset_safeDownCast(obj)

def PhysicalFrameWithOffset_getClassName():
    """PhysicalFrameWithOffset_getClassName() -> std::string const &"""
    return _simulation.PhysicalFrameWithOffset_getClassName()

class PhysicalOffsetFrame(PhysicalFrameWithOffset):
    """Proxy of C++ OpenSim::PhysicalOffsetFrame class."""

    __swig_setmethods__ = {}
    for _s in [PhysicalFrameWithOffset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicalOffsetFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [PhysicalFrameWithOffset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicalOffsetFrame, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PhysicalOffsetFrame

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PhysicalOffsetFrame_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PhysicalOffsetFrame self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PhysicalOffsetFrame_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PhysicalOffsetFrame_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PhysicalOffsetFrame self) -> PhysicalOffsetFrame

        Parameters
        ----------
        self: OpenSim::PhysicalOffsetFrame const *

        """
        return _simulation.PhysicalOffsetFrame_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PhysicalOffsetFrame self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PhysicalOffsetFrame const *

        """
        return _simulation.PhysicalOffsetFrame_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_PhysicalOffsetFrame
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::PhysicalOffsetFrame self) -> PhysicalOffsetFrame
        __init__(OpenSim::PhysicalOffsetFrame self, PhysicalFrame parent, Transform offset) -> PhysicalOffsetFrame

        Parameters
        ----------
        parent: OpenSim::PhysicalFrame const &
        offset: SimTK::Transform const &

        __init__(OpenSim::PhysicalOffsetFrame self, std::string const & name, PhysicalFrame parent, Transform offset) -> PhysicalOffsetFrame

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        offset: SimTK::Transform const &

        __init__(OpenSim::PhysicalOffsetFrame self, std::string const & name, std::string const & parentName, Transform offset) -> PhysicalOffsetFrame

        Parameters
        ----------
        name: std::string const &
        parentName: std::string const &
        offset: SimTK::Transform const &

        """
        this = _simulation.new_PhysicalOffsetFrame(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
PhysicalOffsetFrame_swigregister = _simulation.PhysicalOffsetFrame_swigregister
PhysicalOffsetFrame_swigregister(PhysicalOffsetFrame)

def PhysicalOffsetFrame_safeDownCast(obj):
    """
    PhysicalOffsetFrame_safeDownCast(OpenSimObject obj) -> PhysicalOffsetFrame

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PhysicalOffsetFrame_safeDownCast(obj)

def PhysicalOffsetFrame_getClassName():
    """PhysicalOffsetFrame_getClassName() -> std::string const &"""
    return _simulation.PhysicalOffsetFrame_getClassName()

class SetFrames(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::Frame,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetFrames, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetFrames, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetFrames

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetFrames_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetFrames self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetFrames_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetFrames_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetFrames self) -> SetFrames

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Frame,OpenSim::ModelComponent > const *

        """
        return _simulation.SetFrames_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetFrames self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Frame,OpenSim::ModelComponent > const *

        """
        return _simulation.SetFrames_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetFrames
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Frame,OpenSim::ModelComponent)> self) -> SetFrames
        __init__(OpenSim::Set<(OpenSim::Frame,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetFrames

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Frame,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetFrames

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Frame,OpenSim::ModelComponent)> self, SetFrames aSet) -> SetFrames

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Frame,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetFrames(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetFrames self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Frame,OpenSim::ModelComponent > *

        """
        return _simulation.SetFrames_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetFrames self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetFrames_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetFrames self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetFrames_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetFrames self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Frame,OpenSim::ModelComponent > const *

        """
        return _simulation.SetFrames_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetFrames self, Frame aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Frame const *
        aStartIndex: int

        getIndex(SetFrames self, Frame aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Frame const *

        getIndex(SetFrames self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetFrames self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetFrames_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetFrames self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetFrames_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetFrames self, Frame aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Frame *

        """
        return _simulation.SetFrames_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetFrames self, Frame aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Frame const &

        """
        return _simulation.SetFrames_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetFrames self, int aIndex, Frame aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Frame *

        """
        return _simulation.SetFrames_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetFrames self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetFrames self, Frame aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Frame const *

        """
        return _simulation.SetFrames_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetFrames self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Frame,OpenSim::ModelComponent > *

        """
        return _simulation.SetFrames_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetFrames self, int aIndex, Frame aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Frame *
        preserveGroups: bool

        set(SetFrames self, int aIndex, Frame aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Frame *

        """
        return _simulation.SetFrames_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetFrames self, int aIndex) -> Frame

        Parameters
        ----------
        aIndex: int

        get(SetFrames self, std::string const & aName) -> Frame

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetFrames_get(self, *args)


    def contains(self, aName):
        """
        contains(SetFrames self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetFrames_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetFrames self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetFrames_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetFrames self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Frame,OpenSim::ModelComponent > const *

        """
        return _simulation.SetFrames_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetFrames self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetFrames_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetFrames self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetFrames_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetFrames self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetFrames_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetFrames self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetFrames_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetFrames self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetFrames_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetFrames self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetFrames self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetFrames_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetFrames_swigregister = _simulation.SetFrames_swigregister
SetFrames_swigregister(SetFrames)

def SetFrames_safeDownCast(obj):
    """
    SetFrames_safeDownCast(OpenSimObject obj) -> SetFrames

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetFrames_safeDownCast(obj)

def SetFrames_getClassName():
    """SetFrames_getClassName() -> std::string const &"""
    return _simulation.SetFrames_getClassName()

class ModelComponentSetFrames(SetFrames):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Frame)> class."""

    __swig_setmethods__ = {}
    for _s in [SetFrames]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetFrames, name, value)
    __swig_getmethods__ = {}
    for _s in [SetFrames]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetFrames, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetFrames

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetFrames_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetFrames self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetFrames_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetFrames_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetFrames self) -> ModelComponentSetFrames

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Frame > const *

        """
        return _simulation.ModelComponentSetFrames_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetFrames self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Frame > const *

        """
        return _simulation.ModelComponentSetFrames_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetFrames self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Frame > *

        """
        return _simulation.ModelComponentSetFrames_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::Frame)> self) -> ModelComponentSetFrames"""
        this = _simulation.new_ModelComponentSetFrames()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetFrames
    __del__ = lambda self: None
ModelComponentSetFrames_swigregister = _simulation.ModelComponentSetFrames_swigregister
ModelComponentSetFrames_swigregister(ModelComponentSetFrames)

def ModelComponentSetFrames_safeDownCast(obj):
    """
    ModelComponentSetFrames_safeDownCast(OpenSimObject obj) -> ModelComponentSetFrames

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetFrames_safeDownCast(obj)

def ModelComponentSetFrames_getClassName():
    """ModelComponentSetFrames_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetFrames_getClassName()

class Body(PhysicalFrame):
    """Proxy of C++ OpenSim::Body class."""

    __swig_setmethods__ = {}
    for _s in [PhysicalFrame]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Body, name, value)
    __swig_getmethods__ = {}
    for _s in [PhysicalFrame]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Body, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Body

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Body_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Body self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Body_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Body_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Body self) -> Body

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Body self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_getConcreteClassName(self)


    def copyProperty_mass(self, source):
        """
        copyProperty_mass(Body self, Body source)

        Parameters
        ----------
        source: OpenSim::Body::Self const &

        """
        return _simulation.Body_copyProperty_mass(self, source)


    def append_mass(self, value):
        """
        append_mass(Body self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Body_append_mass(self, value)


    def constructProperty_mass(self, initValue):
        """
        constructProperty_mass(Body self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Body_constructProperty_mass(self, initValue)


    def get_mass(self, *args):
        """
        get_mass(Body self, int i) -> double const

        Parameters
        ----------
        i: int

        get_mass(Body self) -> double const &

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_get_mass(self, *args)


    def upd_mass(self, *args):
        """
        upd_mass(Body self, int i) -> double

        Parameters
        ----------
        i: int

        upd_mass(Body self) -> double &

        Parameters
        ----------
        self: OpenSim::Body *

        """
        return _simulation.Body_upd_mass(self, *args)


    def set_mass(self, *args):
        """
        set_mass(Body self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_mass(Body self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Body_set_mass(self, *args)


    def copyProperty_mass_center(self, source):
        """
        copyProperty_mass_center(Body self, Body source)

        Parameters
        ----------
        source: OpenSim::Body::Self const &

        """
        return _simulation.Body_copyProperty_mass_center(self, source)


    def append_mass_center(self, value):
        """
        append_mass_center(Body self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Body_append_mass_center(self, value)


    def constructProperty_mass_center(self, initValue):
        """
        constructProperty_mass_center(Body self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Body_constructProperty_mass_center(self, initValue)


    def get_mass_center(self, *args):
        """
        get_mass_center(Body self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_mass_center(Body self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_get_mass_center(self, *args)


    def upd_mass_center(self, *args):
        """
        upd_mass_center(Body self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_mass_center(Body self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Body *

        """
        return _simulation.Body_upd_mass_center(self, *args)


    def set_mass_center(self, *args):
        """
        set_mass_center(Body self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_mass_center(Body self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Body_set_mass_center(self, *args)


    def copyProperty_inertia(self, source):
        """
        copyProperty_inertia(Body self, Body source)

        Parameters
        ----------
        source: OpenSim::Body::Self const &

        """
        return _simulation.Body_copyProperty_inertia(self, source)


    def append_inertia(self, value):
        """
        append_inertia(Body self, Vec6 value) -> int

        Parameters
        ----------
        value: SimTK::Vec6 const &

        """
        return _simulation.Body_append_inertia(self, value)


    def constructProperty_inertia(self, initValue):
        """
        constructProperty_inertia(Body self, Vec6 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec6 const &

        """
        return _simulation.Body_constructProperty_inertia(self, initValue)


    def get_inertia(self, *args):
        """
        get_inertia(Body self, int i) -> Vec6

        Parameters
        ----------
        i: int

        get_inertia(Body self) -> Vec6

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_get_inertia(self, *args)


    def upd_inertia(self, *args):
        """
        upd_inertia(Body self, int i) -> Vec6

        Parameters
        ----------
        i: int

        upd_inertia(Body self) -> Vec6

        Parameters
        ----------
        self: OpenSim::Body *

        """
        return _simulation.Body_upd_inertia(self, *args)


    def set_inertia(self, *args):
        """
        set_inertia(Body self, int i, Vec6 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec6 const &

        set_inertia(Body self, Vec6 value)

        Parameters
        ----------
        value: SimTK::Vec6 const &

        """
        return _simulation.Body_set_inertia(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Body self) -> Body
        __init__(OpenSim::Body self, std::string const & aName, double aMass, Vec3 aMassCenter, Inertia aInertia) -> Body

        Parameters
        ----------
        aName: std::string const &
        aMass: double
        aMassCenter: SimTK::Vec3 const &
        aInertia: SimTK::Inertia const &

        """
        this = _simulation.new_Body(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMass(self):
        """
        getMass(Body self) -> double const &

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_getMass(self)


    def setMass(self, mass):
        """
        setMass(Body self, double const & mass)

        Parameters
        ----------
        mass: double const &

        """
        return _simulation.Body_setMass(self, mass)


    def getMassCenter(self):
        """
        getMassCenter(Body self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_getMassCenter(self)


    def setMassCenter(self, com):
        """
        setMassCenter(Body self, Vec3 com)

        Parameters
        ----------
        com: SimTK::Vec3 const &

        """
        return _simulation.Body_setMassCenter(self, com)


    def getInertia(self):
        """
        getInertia(Body self) -> Inertia

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_getInertia(self)


    def setInertia(self, aInertia):
        """
        setInertia(Body self, Inertia aInertia)

        Parameters
        ----------
        aInertia: SimTK::Inertia const &

        """
        return _simulation.Body_setInertia(self, aInertia)


    def getMassProperties(self):
        """
        getMassProperties(Body self) -> MassProperties

        Parameters
        ----------
        self: OpenSim::Body const *

        """
        return _simulation.Body_getMassProperties(self)


    def scale(self, scaleFactors, scaleMass=False):
        """
        scale(Body self, Vec3 scaleFactors, bool scaleMass=False)

        Parameters
        ----------
        scaleFactors: SimTK::Vec3 const &
        scaleMass: bool

        scale(Body self, Vec3 scaleFactors)

        Parameters
        ----------
        scaleFactors: SimTK::Vec3 const &

        """
        return _simulation.Body_scale(self, scaleFactors, scaleMass)


    def extendScale(self, s, scaleSet):
        """
        extendScale(Body self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.Body_extendScale(self, s, scaleSet)


    def scaleInertialProperties(self, *args):
        """
        scaleInertialProperties(Body self, ScaleSet scaleSet, bool scaleMass=True)

        Parameters
        ----------
        scaleSet: OpenSim::ScaleSet const &
        scaleMass: bool

        scaleInertialProperties(Body self, ScaleSet scaleSet)

        Parameters
        ----------
        scaleSet: OpenSim::ScaleSet const &

        scaleInertialProperties(Body self, Vec3 scaleFactors, bool scaleMass=True)

        Parameters
        ----------
        scaleFactors: SimTK::Vec3 const &
        scaleMass: bool

        scaleInertialProperties(Body self, Vec3 scaleFactors)

        Parameters
        ----------
        scaleFactors: SimTK::Vec3 const &

        """
        return _simulation.Body_scaleInertialProperties(self, *args)


    def scaleMass(self, aScaleFactor):
        """
        scaleMass(Body self, double aScaleFactor)

        Parameters
        ----------
        aScaleFactor: double

        """
        return _simulation.Body_scaleMass(self, aScaleFactor)

    __swig_destroy__ = _simulation.delete_Body
    __del__ = lambda self: None
Body_swigregister = _simulation.Body_swigregister
Body_swigregister(Body)

def Body_safeDownCast(obj):
    """
    Body_safeDownCast(OpenSimObject obj) -> Body

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Body_safeDownCast(obj)

def Body_getClassName():
    """Body_getClassName() -> std::string const &"""
    return _simulation.Body_getClassName()

class SetBodies(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::Body,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetBodies, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetBodies, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetBodies

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetBodies_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetBodies self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetBodies_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetBodies_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetBodies self) -> SetBodies

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Body,OpenSim::ModelComponent > const *

        """
        return _simulation.SetBodies_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetBodies self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Body,OpenSim::ModelComponent > const *

        """
        return _simulation.SetBodies_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetBodies
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Body,OpenSim::ModelComponent)> self) -> SetBodies
        __init__(OpenSim::Set<(OpenSim::Body,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetBodies

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Body,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetBodies

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Body,OpenSim::ModelComponent)> self, SetBodies aSet) -> SetBodies

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Body,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetBodies(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetBodies self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Body,OpenSim::ModelComponent > *

        """
        return _simulation.SetBodies_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetBodies self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetBodies_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetBodies self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetBodies_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetBodies self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Body,OpenSim::ModelComponent > const *

        """
        return _simulation.SetBodies_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetBodies self, Body aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Body const *
        aStartIndex: int

        getIndex(SetBodies self, Body aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Body const *

        getIndex(SetBodies self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetBodies self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetBodies_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetBodies self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetBodies_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetBodies self, Body aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Body *

        """
        return _simulation.SetBodies_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetBodies self, Body aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Body const &

        """
        return _simulation.SetBodies_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetBodies self, int aIndex, Body aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Body *

        """
        return _simulation.SetBodies_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetBodies self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetBodies self, Body aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Body const *

        """
        return _simulation.SetBodies_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetBodies self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Body,OpenSim::ModelComponent > *

        """
        return _simulation.SetBodies_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetBodies self, int aIndex, Body aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Body *
        preserveGroups: bool

        set(SetBodies self, int aIndex, Body aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Body *

        """
        return _simulation.SetBodies_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetBodies self, int aIndex) -> Body

        Parameters
        ----------
        aIndex: int

        get(SetBodies self, std::string const & aName) -> Body

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetBodies_get(self, *args)


    def contains(self, aName):
        """
        contains(SetBodies self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetBodies_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetBodies self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetBodies_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetBodies self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Body,OpenSim::ModelComponent > const *

        """
        return _simulation.SetBodies_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetBodies self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetBodies_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetBodies self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetBodies_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetBodies self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetBodies_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetBodies self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetBodies_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetBodies self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetBodies_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetBodies self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetBodies self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetBodies_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetBodies_swigregister = _simulation.SetBodies_swigregister
SetBodies_swigregister(SetBodies)

def SetBodies_safeDownCast(obj):
    """
    SetBodies_safeDownCast(OpenSimObject obj) -> SetBodies

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetBodies_safeDownCast(obj)

def SetBodies_getClassName():
    """SetBodies_getClassName() -> std::string const &"""
    return _simulation.SetBodies_getClassName()

class ModelComponentSetBodies(SetBodies):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Body)> class."""

    __swig_setmethods__ = {}
    for _s in [SetBodies]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetBodies, name, value)
    __swig_getmethods__ = {}
    for _s in [SetBodies]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetBodies, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetBodies

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetBodies_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetBodies self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetBodies_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetBodies_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetBodies self) -> ModelComponentSetBodies

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Body > const *

        """
        return _simulation.ModelComponentSetBodies_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetBodies self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Body > const *

        """
        return _simulation.ModelComponentSetBodies_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetBodies self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Body > *

        """
        return _simulation.ModelComponentSetBodies_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::Body)> self) -> ModelComponentSetBodies"""
        this = _simulation.new_ModelComponentSetBodies()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetBodies
    __del__ = lambda self: None
ModelComponentSetBodies_swigregister = _simulation.ModelComponentSetBodies_swigregister
ModelComponentSetBodies_swigregister(ModelComponentSetBodies)

def ModelComponentSetBodies_safeDownCast(obj):
    """
    ModelComponentSetBodies_safeDownCast(OpenSimObject obj) -> ModelComponentSetBodies

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetBodies_safeDownCast(obj)

def ModelComponentSetBodies_getClassName():
    """ModelComponentSetBodies_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetBodies_getClassName()

class BodySet(ModelComponentSetBodies):
    """Proxy of C++ OpenSim::BodySet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetBodies]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodySet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetBodies]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodySet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodySet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.BodySet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(BodySet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.BodySet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.BodySet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(BodySet self) -> BodySet

        Parameters
        ----------
        self: OpenSim::BodySet const *

        """
        return _simulation.BodySet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodySet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::BodySet const *

        """
        return _simulation.BodySet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::BodySet self) -> BodySet
        __init__(OpenSim::BodySet self, std::string const & file, bool updateFromXML=True) -> BodySet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::BodySet self, std::string const & file) -> BodySet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_BodySet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_BodySet
    __del__ = lambda self: None
BodySet_swigregister = _simulation.BodySet_swigregister
BodySet_swigregister(BodySet)

def BodySet_safeDownCast(obj):
    """
    BodySet_safeDownCast(OpenSimObject obj) -> BodySet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.BodySet_safeDownCast(obj)

def BodySet_getClassName():
    """BodySet_getClassName() -> std::string const &"""
    return _simulation.BodySet_getClassName()

class BodyScale(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::BodyScale class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyScale, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyScale, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodyScale

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.BodyScale_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(BodyScale self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.BodyScale_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.BodyScale_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(BodyScale self) -> BodyScale

        Parameters
        ----------
        self: OpenSim::BodyScale const *

        """
        return _simulation.BodyScale_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodyScale self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::BodyScale const *

        """
        return _simulation.BodyScale_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::BodyScale self) -> BodyScale
        __init__(OpenSim::BodyScale self, BodyScale aBodyScale) -> BodyScale

        Parameters
        ----------
        aBodyScale: OpenSim::BodyScale const &

        """
        this = _simulation.new_BodyScale(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_BodyScale
    __del__ = lambda self: None

    def copyData(self, aBodyScale):
        """
        copyData(BodyScale self, BodyScale aBodyScale)

        Parameters
        ----------
        aBodyScale: OpenSim::BodyScale const &

        """
        return _simulation.BodyScale_copyData(self, aBodyScale)


    def getAxisNames(self):
        """
        getAxisNames(BodyScale self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::BodyScale *

        """
        return _simulation.BodyScale_getAxisNames(self)


    def setAxisNames(self, aAxisNames):
        """
        setAxisNames(BodyScale self, ArrayStr aAxisNames)

        Parameters
        ----------
        aAxisNames: OpenSim::Array< std::string > const &

        """
        return _simulation.BodyScale_setAxisNames(self, aAxisNames)

BodyScale_swigregister = _simulation.BodyScale_swigregister
BodyScale_swigregister(BodyScale)

def BodyScale_safeDownCast(obj):
    """
    BodyScale_safeDownCast(OpenSimObject obj) -> BodyScale

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.BodyScale_safeDownCast(obj)

def BodyScale_getClassName():
    """BodyScale_getClassName() -> std::string const &"""
    return _simulation.BodyScale_getClassName()

class SetBodyScales(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::BodyScale,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetBodyScales, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetBodyScales, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetBodyScales

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetBodyScales_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetBodyScales self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetBodyScales_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetBodyScales_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetBodyScales self) -> SetBodyScales

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::BodyScale,OpenSim::Object > const *

        """
        return _simulation.SetBodyScales_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetBodyScales self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::BodyScale,OpenSim::Object > const *

        """
        return _simulation.SetBodyScales_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetBodyScales
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::BodyScale,OpenSim::Object)> self) -> SetBodyScales
        __init__(OpenSim::Set<(OpenSim::BodyScale,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetBodyScales

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::BodyScale,OpenSim::Object)> self, std::string const & aFileName) -> SetBodyScales

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::BodyScale,OpenSim::Object)> self, SetBodyScales aSet) -> SetBodyScales

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::BodyScale,OpenSim::Object > const &

        """
        this = _simulation.new_SetBodyScales(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetBodyScales self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::BodyScale,OpenSim::Object > *

        """
        return _simulation.SetBodyScales_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetBodyScales self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetBodyScales_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetBodyScales self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetBodyScales_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetBodyScales self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::BodyScale,OpenSim::Object > const *

        """
        return _simulation.SetBodyScales_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetBodyScales self, BodyScale aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::BodyScale const *
        aStartIndex: int

        getIndex(SetBodyScales self, BodyScale aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::BodyScale const *

        getIndex(SetBodyScales self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetBodyScales self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetBodyScales_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetBodyScales self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetBodyScales_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetBodyScales self, BodyScale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::BodyScale *

        """
        return _simulation.SetBodyScales_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetBodyScales self, BodyScale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::BodyScale const &

        """
        return _simulation.SetBodyScales_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetBodyScales self, int aIndex, BodyScale aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::BodyScale *

        """
        return _simulation.SetBodyScales_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetBodyScales self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetBodyScales self, BodyScale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::BodyScale const *

        """
        return _simulation.SetBodyScales_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetBodyScales self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::BodyScale,OpenSim::Object > *

        """
        return _simulation.SetBodyScales_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetBodyScales self, int aIndex, BodyScale aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::BodyScale *
        preserveGroups: bool

        set(SetBodyScales self, int aIndex, BodyScale aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::BodyScale *

        """
        return _simulation.SetBodyScales_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetBodyScales self, int aIndex) -> BodyScale

        Parameters
        ----------
        aIndex: int

        get(SetBodyScales self, std::string const & aName) -> BodyScale

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetBodyScales_get(self, *args)


    def contains(self, aName):
        """
        contains(SetBodyScales self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetBodyScales_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetBodyScales self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetBodyScales_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetBodyScales self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::BodyScale,OpenSim::Object > const *

        """
        return _simulation.SetBodyScales_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetBodyScales self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetBodyScales_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetBodyScales self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetBodyScales_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetBodyScales self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetBodyScales_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetBodyScales self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetBodyScales_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetBodyScales self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetBodyScales_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetBodyScales self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetBodyScales self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetBodyScales_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetBodyScales_swigregister = _simulation.SetBodyScales_swigregister
SetBodyScales_swigregister(SetBodyScales)

def SetBodyScales_safeDownCast(obj):
    """
    SetBodyScales_safeDownCast(OpenSimObject obj) -> SetBodyScales

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetBodyScales_safeDownCast(obj)

def SetBodyScales_getClassName():
    """SetBodyScales_getClassName() -> std::string const &"""
    return _simulation.SetBodyScales_getClassName()

class BodyScaleSet(SetBodyScales):
    """Proxy of C++ OpenSim::BodyScaleSet class."""

    __swig_setmethods__ = {}
    for _s in [SetBodyScales]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyScaleSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetBodyScales]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyScaleSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BodyScaleSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.BodyScaleSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(BodyScaleSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.BodyScaleSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.BodyScaleSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(BodyScaleSet self) -> BodyScaleSet

        Parameters
        ----------
        self: OpenSim::BodyScaleSet const *

        """
        return _simulation.BodyScaleSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodyScaleSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::BodyScaleSet const *

        """
        return _simulation.BodyScaleSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::BodyScaleSet self) -> BodyScaleSet
        __init__(OpenSim::BodyScaleSet self, BodyScaleSet aBodyScaleSet) -> BodyScaleSet

        Parameters
        ----------
        aBodyScaleSet: OpenSim::BodyScaleSet const &

        """
        this = _simulation.new_BodyScaleSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_BodyScaleSet
    __del__ = lambda self: None

    def adoptAndAppend(self, aBodyScale):
        aBodyScale._markAdopted()
        return super(BodyScaleSet, self).adoptAndAppend(aBodyScale)

BodyScaleSet_swigregister = _simulation.BodyScaleSet_swigregister
BodyScaleSet_swigregister(BodyScaleSet)

def BodyScaleSet_safeDownCast(obj):
    """
    BodyScaleSet_safeDownCast(OpenSimObject obj) -> BodyScaleSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.BodyScaleSet_safeDownCast(obj)

def BodyScaleSet_getClassName():
    """BodyScaleSet_getClassName() -> std::string const &"""
    return _simulation.BodyScaleSet_getClassName()

class SimbodyEngine(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::SimbodyEngine class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimbodyEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimbodyEngine, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SimbodyEngine

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SimbodyEngine_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SimbodyEngine self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SimbodyEngine_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SimbodyEngine_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SimbodyEngine self) -> SimbodyEngine

        Parameters
        ----------
        self: OpenSim::SimbodyEngine const *

        """
        return _simulation.SimbodyEngine_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SimbodyEngine self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SimbodyEngine const *

        """
        return _simulation.SimbodyEngine_getConcreteClassName(self)

    __swig_setmethods__["_model"] = _simulation.SimbodyEngine__model_set
    __swig_getmethods__["_model"] = _simulation.SimbodyEngine__model_get
    if _newclass:
        _model = _swig_property(_simulation.SimbodyEngine__model_get, _simulation.SimbodyEngine__model_set)
    __swig_destroy__ = _simulation.delete_SimbodyEngine
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::SimbodyEngine self) -> SimbodyEngine
        __init__(OpenSim::SimbodyEngine self, std::string const & aFileName) -> SimbodyEngine

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::SimbodyEngine self, SimbodyEngine aEngine) -> SimbodyEngine

        Parameters
        ----------
        aEngine: OpenSim::SimbodyEngine const &

        """
        this = _simulation.new_SimbodyEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getModel(self):
        """
        getModel(SimbodyEngine self) -> Model

        Parameters
        ----------
        self: OpenSim::SimbodyEngine *

        """
        return _simulation.SimbodyEngine_getModel(self)


    def setModel(self, aModel):
        """
        setModel(SimbodyEngine self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.SimbodyEngine_setModel(self, aModel)


    def connectSimbodyEngineToModel(self, aModel):
        """
        connectSimbodyEngineToModel(SimbodyEngine self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.SimbodyEngine_connectSimbodyEngineToModel(self, aModel)


    def computeReactions(self, s, rForces, rTorques):
        """
        computeReactions(SimbodyEngine self, State s, VectorVec3 rForces, VectorVec3 rTorques)

        Parameters
        ----------
        s: SimTK::State const &
        rForces: SimTK::Vector_< SimTK::Vec3 > &
        rTorques: SimTK::Vector_< SimTK::Vec3 > &

        """
        return _simulation.SimbodyEngine_computeReactions(self, s, rForces, rTorques)


    def formCompleteStorages(self, s, aQIn, rQComplete, rUComplete):
        """
        formCompleteStorages(SimbodyEngine self, State s, Storage aQIn, OpenSim::Storage *& rQComplete, OpenSim::Storage *& rUComplete)

        Parameters
        ----------
        s: SimTK::State const &
        aQIn: OpenSim::Storage const &
        rQComplete: OpenSim::Storage *&
        rUComplete: OpenSim::Storage *&

        """
        return _simulation.SimbodyEngine_formCompleteStorages(self, s, aQIn, rQComplete, rUComplete)


    def convertDegreesToRadians(self, *args):
        """
        convertDegreesToRadians(SimbodyEngine self, Storage rStorage)

        Parameters
        ----------
        rStorage: OpenSim::Storage &

        convertDegreesToRadians(SimbodyEngine self, TimeSeriesTable table)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable &

        convertDegreesToRadians(SimbodyEngine self, double * aQDeg, double * rQRad)

        Parameters
        ----------
        aQDeg: double *
        rQRad: double *

        """
        return _simulation.SimbodyEngine_convertDegreesToRadians(self, *args)


    def convertRadiansToDegrees(self, *args):
        """
        convertRadiansToDegrees(SimbodyEngine self, Storage rStorage)

        Parameters
        ----------
        rStorage: OpenSim::Storage &

        convertRadiansToDegrees(SimbodyEngine self, TimeSeriesTable table)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable &

        convertRadiansToDegrees(SimbodyEngine self, double * aQRad, double * rQDeg)

        Parameters
        ----------
        aQRad: double *
        rQDeg: double *

        """
        return _simulation.SimbodyEngine_convertRadiansToDegrees(self, *args)


    def convertAnglesToDirectionCosines(self, *args):
        """
        convertAnglesToDirectionCosines(SimbodyEngine self, double aE1, double aE2, double aE3, double [3][3] rDirCos)

        Parameters
        ----------
        aE1: double
        aE2: double
        aE3: double
        rDirCos: double [3][3]

        convertAnglesToDirectionCosines(SimbodyEngine self, double aE1, double aE2, double aE3, double * rDirCos)

        Parameters
        ----------
        aE1: double
        aE2: double
        aE3: double
        rDirCos: double *

        """
        return _simulation.SimbodyEngine_convertAnglesToDirectionCosines(self, *args)


    def convertDirectionCosinesToAngles(self, *args):
        """
        convertDirectionCosinesToAngles(SimbodyEngine self, double [3][3] aDirCos, double * rE1, double * rE2, double * rE3)

        Parameters
        ----------
        aDirCos: double [3][3]
        rE1: double *
        rE2: double *
        rE3: double *

        convertDirectionCosinesToAngles(SimbodyEngine self, double * aDirCos, double * rE1, double * rE2, double * rE3)

        Parameters
        ----------
        aDirCos: double *
        rE1: double *
        rE2: double *
        rE3: double *

        """
        return _simulation.SimbodyEngine_convertDirectionCosinesToAngles(self, *args)


    def convertDirectionCosinesToQuaternions(self, *args):
        """
        convertDirectionCosinesToQuaternions(SimbodyEngine self, double [3][3] aDirCos, double * rQ1, double * rQ2, double * rQ3, double * rQ4)

        Parameters
        ----------
        aDirCos: double [3][3]
        rQ1: double *
        rQ2: double *
        rQ3: double *
        rQ4: double *

        convertDirectionCosinesToQuaternions(SimbodyEngine self, double * aDirCos, double * rQ1, double * rQ2, double * rQ3, double * rQ4)

        Parameters
        ----------
        aDirCos: double *
        rQ1: double *
        rQ2: double *
        rQ3: double *
        rQ4: double *

        """
        return _simulation.SimbodyEngine_convertDirectionCosinesToQuaternions(self, *args)


    def convertQuaternionsToDirectionCosines(self, *args):
        """
        convertQuaternionsToDirectionCosines(SimbodyEngine self, double aQ1, double aQ2, double aQ3, double aQ4, double [3][3] rDirCos)

        Parameters
        ----------
        aQ1: double
        aQ2: double
        aQ3: double
        aQ4: double
        rDirCos: double [3][3]

        convertQuaternionsToDirectionCosines(SimbodyEngine self, double aQ1, double aQ2, double aQ3, double aQ4, double * rDirCos)

        Parameters
        ----------
        aQ1: double
        aQ2: double
        aQ3: double
        aQ4: double
        rDirCos: double *

        """
        return _simulation.SimbodyEngine_convertQuaternionsToDirectionCosines(self, *args)


    def getPosition(self, s, aBody, aPoint, rPos):
        """
        getPosition(SimbodyEngine self, State s, PhysicalFrame aBody, Vec3 aPoint, Vec3 rPos)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        aPoint: SimTK::Vec3 const &
        rPos: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_getPosition(self, s, aBody, aPoint, rPos)


    def getVelocity(self, s, aBody, aPoint, rVel):
        """
        getVelocity(SimbodyEngine self, State s, PhysicalFrame aBody, Vec3 aPoint, Vec3 rVel)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        aPoint: SimTK::Vec3 const &
        rVel: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_getVelocity(self, s, aBody, aPoint, rVel)


    def getAcceleration(self, s, aBody, aPoint, rAcc):
        """
        getAcceleration(SimbodyEngine self, State s, PhysicalFrame aBody, Vec3 aPoint, Vec3 rAcc)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        aPoint: SimTK::Vec3 const &
        rAcc: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_getAcceleration(self, s, aBody, aPoint, rAcc)


    def getDirectionCosines(self, *args):
        """
        getDirectionCosines(SimbodyEngine self, State s, PhysicalFrame aBody, double [3][3] rDirCos)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        rDirCos: double [3][3]

        getDirectionCosines(SimbodyEngine self, State s, PhysicalFrame aBody, double * rDirCos)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        rDirCos: double *

        """
        return _simulation.SimbodyEngine_getDirectionCosines(self, *args)


    def getAngularVelocity(self, s, aBody, rAngVel):
        """
        getAngularVelocity(SimbodyEngine self, State s, PhysicalFrame aBody, Vec3 rAngVel)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        rAngVel: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_getAngularVelocity(self, s, aBody, rAngVel)


    def getAngularVelocityBodyLocal(self, s, aBody, rAngVel):
        """
        getAngularVelocityBodyLocal(SimbodyEngine self, State s, PhysicalFrame aBody, Vec3 rAngVel)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        rAngVel: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_getAngularVelocityBodyLocal(self, s, aBody, rAngVel)


    def getAngularAcceleration(self, s, aBody, rAngAcc):
        """
        getAngularAcceleration(SimbodyEngine self, State s, PhysicalFrame aBody, Vec3 rAngAcc)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        rAngAcc: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_getAngularAcceleration(self, s, aBody, rAngAcc)


    def getAngularAccelerationBodyLocal(self, s, aBody, rAngAcc):
        """
        getAngularAccelerationBodyLocal(SimbodyEngine self, State s, PhysicalFrame aBody, Vec3 rAngAcc)

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &
        rAngAcc: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_getAngularAccelerationBodyLocal(self, s, aBody, rAngAcc)


    def getTransform(self, s, aBody):
        """
        getTransform(SimbodyEngine self, State s, PhysicalFrame aBody) -> Transform

        Parameters
        ----------
        s: SimTK::State const &
        aBody: OpenSim::PhysicalFrame const &

        """
        return _simulation.SimbodyEngine_getTransform(self, s, aBody)


    def transform(self, *args):
        """
        transform(SimbodyEngine self, State s, PhysicalFrame aBodyFrom, double const [3] aVec, PhysicalFrame aBodyTo, double [3] rVec)

        Parameters
        ----------
        s: SimTK::State const &
        aBodyFrom: OpenSim::PhysicalFrame const &
        aVec: double const [3]
        aBodyTo: OpenSim::PhysicalFrame const &
        rVec: double [3]

        transform(SimbodyEngine self, State s, PhysicalFrame aBodyFrom, Vec3 aVec, PhysicalFrame aBodyTo, Vec3 rVec)

        Parameters
        ----------
        s: SimTK::State const &
        aBodyFrom: OpenSim::PhysicalFrame const &
        aVec: SimTK::Vec3 const &
        aBodyTo: OpenSim::PhysicalFrame const &
        rVec: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_transform(self, *args)


    def transformPosition(self, *args):
        """
        transformPosition(SimbodyEngine self, State s, PhysicalFrame aBodyFrom, double const [3] aPos, PhysicalFrame aBodyTo, double [3] rPos)

        Parameters
        ----------
        s: SimTK::State const &
        aBodyFrom: OpenSim::PhysicalFrame const &
        aPos: double const [3]
        aBodyTo: OpenSim::PhysicalFrame const &
        rPos: double [3]

        transformPosition(SimbodyEngine self, State s, PhysicalFrame aBodyFrom, Vec3 aPos, PhysicalFrame aBodyTo, Vec3 rPos)

        Parameters
        ----------
        s: SimTK::State const &
        aBodyFrom: OpenSim::PhysicalFrame const &
        aPos: SimTK::Vec3 const &
        aBodyTo: OpenSim::PhysicalFrame const &
        rPos: SimTK::Vec3 &

        transformPosition(SimbodyEngine self, State s, PhysicalFrame aBodyFrom, double const [3] aPos, double [3] rPos)

        Parameters
        ----------
        s: SimTK::State const &
        aBodyFrom: OpenSim::PhysicalFrame const &
        aPos: double const [3]
        rPos: double [3]

        transformPosition(SimbodyEngine self, State s, PhysicalFrame aBodyFrom, Vec3 aPos, Vec3 rPos)

        Parameters
        ----------
        s: SimTK::State const &
        aBodyFrom: OpenSim::PhysicalFrame const &
        aPos: SimTK::Vec3 const &
        rPos: SimTK::Vec3 &

        """
        return _simulation.SimbodyEngine_transformPosition(self, *args)


    def calcDistance(self, *args):
        """
        calcDistance(SimbodyEngine self, State s, PhysicalFrame aBody1, Vec3 aPoint1, PhysicalFrame aBody2, Vec3 aPoint2) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aBody1: OpenSim::PhysicalFrame const &
        aPoint1: SimTK::Vec3 const &
        aBody2: OpenSim::PhysicalFrame const &
        aPoint2: SimTK::Vec3 const &

        calcDistance(SimbodyEngine self, State s, PhysicalFrame aBody1, double const [3] aPoint1, PhysicalFrame aBody2, double const [3] aPoint2) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aBody1: OpenSim::PhysicalFrame const &
        aPoint1: double const [3]
        aBody2: OpenSim::PhysicalFrame const &
        aPoint2: double const [3]

        """
        return _simulation.SimbodyEngine_calcDistance(self, *args)

SimbodyEngine_swigregister = _simulation.SimbodyEngine_swigregister
SimbodyEngine_swigregister(SimbodyEngine)

def SimbodyEngine_safeDownCast(obj):
    """
    SimbodyEngine_safeDownCast(OpenSimObject obj) -> SimbodyEngine

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SimbodyEngine_safeDownCast(obj)

def SimbodyEngine_getClassName():
    """SimbodyEngine_getClassName() -> std::string const &"""
    return _simulation.SimbodyEngine_getClassName()

class TransformAxis(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::TransformAxis class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransformAxis, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TransformAxis

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.TransformAxis_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TransformAxis self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.TransformAxis_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.TransformAxis_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TransformAxis self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TransformAxis self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_getConcreteClassName(self)


    def copyProperty_coordinates(self, source):
        """
        copyProperty_coordinates(TransformAxis self, TransformAxis source)

        Parameters
        ----------
        source: OpenSim::TransformAxis::Self const &

        """
        return _simulation.TransformAxis_copyProperty_coordinates(self, source)


    def get_coordinates(self, i):
        """
        get_coordinates(TransformAxis self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _simulation.TransformAxis_get_coordinates(self, i)


    def upd_coordinates(self, i):
        """
        upd_coordinates(TransformAxis self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _simulation.TransformAxis_upd_coordinates(self, i)


    def set_coordinates(self, i, value):
        """
        set_coordinates(TransformAxis self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _simulation.TransformAxis_set_coordinates(self, i, value)


    def append_coordinates(self, value):
        """
        append_coordinates(TransformAxis self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.TransformAxis_append_coordinates(self, value)


    def constructProperty_coordinates(self):
        """
        constructProperty_coordinates(TransformAxis self)

        Parameters
        ----------
        self: OpenSim::TransformAxis *

        """
        return _simulation.TransformAxis_constructProperty_coordinates(self)


    def copyProperty_axis(self, source):
        """
        copyProperty_axis(TransformAxis self, TransformAxis source)

        Parameters
        ----------
        source: OpenSim::TransformAxis::Self const &

        """
        return _simulation.TransformAxis_copyProperty_axis(self, source)


    def append_axis(self, value):
        """
        append_axis(TransformAxis self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.TransformAxis_append_axis(self, value)


    def constructProperty_axis(self, initValue):
        """
        constructProperty_axis(TransformAxis self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.TransformAxis_constructProperty_axis(self, initValue)


    def get_axis(self, *args):
        """
        get_axis(TransformAxis self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_axis(TransformAxis self) -> Vec3

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_get_axis(self, *args)


    def upd_axis(self, *args):
        """
        upd_axis(TransformAxis self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_axis(TransformAxis self) -> Vec3

        Parameters
        ----------
        self: OpenSim::TransformAxis *

        """
        return _simulation.TransformAxis_upd_axis(self, *args)


    def set_axis(self, *args):
        """
        set_axis(TransformAxis self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_axis(TransformAxis self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.TransformAxis_set_axis(self, *args)


    def copyProperty_function(self, source):
        """
        copyProperty_function(TransformAxis self, TransformAxis source)

        Parameters
        ----------
        source: OpenSim::TransformAxis::Self const &

        """
        return _simulation.TransformAxis_copyProperty_function(self, source)


    def append_function(self, value):
        """
        append_function(TransformAxis self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.TransformAxis_append_function(self, value)


    def constructProperty_function(self, initValue):
        """
        constructProperty_function(TransformAxis self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.TransformAxis_constructProperty_function(self, initValue)


    def get_function(self, *args):
        """
        get_function(TransformAxis self, int i) -> Function

        Parameters
        ----------
        i: int

        get_function(TransformAxis self) -> Function

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_get_function(self, *args)


    def upd_function(self, *args):
        """
        upd_function(TransformAxis self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_function(TransformAxis self) -> Function

        Parameters
        ----------
        self: OpenSim::TransformAxis *

        """
        return _simulation.TransformAxis_upd_function(self, *args)


    def set_function(self, *args):
        """
        set_function(TransformAxis self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_function(TransformAxis self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.TransformAxis_set_function(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::TransformAxis self) -> TransformAxis
        __init__(OpenSim::TransformAxis self, ArrayStr coordNames, Vec3 axis) -> TransformAxis

        Parameters
        ----------
        coordNames: OpenSim::Array< std::string > const &
        axis: SimTK::Vec3 const &

        __init__(OpenSim::TransformAxis self, SimTK::Xml::Element & node) -> TransformAxis

        Parameters
        ----------
        node: SimTK::Xml::Element &

        """
        this = _simulation.new_TransformAxis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setCoordinateNames(self, coordNames):
        """
        setCoordinateNames(TransformAxis self, ArrayStr coordNames)

        Parameters
        ----------
        coordNames: OpenSim::Array< std::string > const &

        """
        return _simulation.TransformAxis_setCoordinateNames(self, coordNames)


    def getCoordinateNames(self):
        """
        getCoordinateNames(TransformAxis self) -> PropertyString

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_getCoordinateNames(self)


    def getCoordinateNamesInArray(self):
        """
        getCoordinateNamesInArray(TransformAxis self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_getCoordinateNamesInArray(self)


    def setAxis(self, axis):
        """
        setAxis(TransformAxis self, Vec3 axis)

        Parameters
        ----------
        axis: SimTK::Vec3 const &

        """
        return _simulation.TransformAxis_setAxis(self, axis)


    def getAxis(self, *args):
        """
        getAxis(TransformAxis self) -> Vec3
        getAxis(TransformAxis self, Vec3 axis)

        Parameters
        ----------
        axis: SimTK::Vec3 &

        getAxis(TransformAxis self, int which) -> double

        Parameters
        ----------
        which: int

        """
        return _simulation.TransformAxis_getAxis(self, *args)


    def hasFunction(self):
        """
        hasFunction(TransformAxis self) -> bool

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_hasFunction(self)


    def getFunction(self):
        """
        getFunction(TransformAxis self) -> Function

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_getFunction(self)


    def updFunction(self):
        """
        updFunction(TransformAxis self) -> Function

        Parameters
        ----------
        self: OpenSim::TransformAxis *

        """
        return _simulation.TransformAxis_updFunction(self)


    def setFunction(self, *args):
        """
        setFunction(TransformAxis self, Function function)

        Parameters
        ----------
        function: OpenSim::Function *

        setFunction(TransformAxis self, Function function)

        Parameters
        ----------
        function: OpenSim::Function const &

        """
        return _simulation.TransformAxis_setFunction(self, *args)


    def getJoint(self):
        """
        getJoint(TransformAxis self) -> Joint

        Parameters
        ----------
        self: OpenSim::TransformAxis const *

        """
        return _simulation.TransformAxis_getJoint(self)


    def getValue(self, s):
        """
        getValue(TransformAxis self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TransformAxis_getValue(self, s)


    def connectToJoint(self, owningJoint):
        """
        connectToJoint(TransformAxis self, Joint owningJoint)

        Parameters
        ----------
        owningJoint: OpenSim::Joint const &

        """
        return _simulation.TransformAxis_connectToJoint(self, owningJoint)

    __swig_destroy__ = _simulation.delete_TransformAxis
    __del__ = lambda self: None
TransformAxis_swigregister = _simulation.TransformAxis_swigregister
TransformAxis_swigregister(TransformAxis)

def TransformAxis_safeDownCast(obj):
    """
    TransformAxis_safeDownCast(OpenSimObject obj) -> TransformAxis

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.TransformAxis_safeDownCast(obj)

def TransformAxis_getClassName():
    """TransformAxis_getClassName() -> std::string const &"""
    return _simulation.TransformAxis_getClassName()

class SpatialTransform(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::SpatialTransform class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpatialTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpatialTransform, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SpatialTransform

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SpatialTransform_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SpatialTransform self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SpatialTransform_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SpatialTransform_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SpatialTransform self) -> SpatialTransform

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SpatialTransform self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_getConcreteClassName(self)


    def copyProperty_rotation1(self, source):
        """
        copyProperty_rotation1(SpatialTransform self, SpatialTransform source)

        Parameters
        ----------
        source: OpenSim::SpatialTransform::Self const &

        """
        return _simulation.SpatialTransform_copyProperty_rotation1(self, source)


    def append_rotation1(self, value):
        """
        append_rotation1(SpatialTransform self, TransformAxis value) -> int

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_append_rotation1(self, value)


    def constructProperty_rotation1(self, initValue):
        """
        constructProperty_rotation1(SpatialTransform self, TransformAxis initValue)

        Parameters
        ----------
        initValue: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_constructProperty_rotation1(self, initValue)


    def get_rotation1(self, *args):
        """
        get_rotation1(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        get_rotation1(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_get_rotation1(self, *args)


    def upd_rotation1(self, *args):
        """
        upd_rotation1(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        upd_rotation1(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform *

        """
        return _simulation.SpatialTransform_upd_rotation1(self, *args)


    def set_rotation1(self, *args):
        """
        set_rotation1(SpatialTransform self, int i, TransformAxis value)

        Parameters
        ----------
        i: int
        value: OpenSim::TransformAxis const &

        set_rotation1(SpatialTransform self, TransformAxis value)

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_set_rotation1(self, *args)


    def copyProperty_rotation2(self, source):
        """
        copyProperty_rotation2(SpatialTransform self, SpatialTransform source)

        Parameters
        ----------
        source: OpenSim::SpatialTransform::Self const &

        """
        return _simulation.SpatialTransform_copyProperty_rotation2(self, source)


    def append_rotation2(self, value):
        """
        append_rotation2(SpatialTransform self, TransformAxis value) -> int

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_append_rotation2(self, value)


    def constructProperty_rotation2(self, initValue):
        """
        constructProperty_rotation2(SpatialTransform self, TransformAxis initValue)

        Parameters
        ----------
        initValue: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_constructProperty_rotation2(self, initValue)


    def get_rotation2(self, *args):
        """
        get_rotation2(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        get_rotation2(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_get_rotation2(self, *args)


    def upd_rotation2(self, *args):
        """
        upd_rotation2(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        upd_rotation2(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform *

        """
        return _simulation.SpatialTransform_upd_rotation2(self, *args)


    def set_rotation2(self, *args):
        """
        set_rotation2(SpatialTransform self, int i, TransformAxis value)

        Parameters
        ----------
        i: int
        value: OpenSim::TransformAxis const &

        set_rotation2(SpatialTransform self, TransformAxis value)

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_set_rotation2(self, *args)


    def copyProperty_rotation3(self, source):
        """
        copyProperty_rotation3(SpatialTransform self, SpatialTransform source)

        Parameters
        ----------
        source: OpenSim::SpatialTransform::Self const &

        """
        return _simulation.SpatialTransform_copyProperty_rotation3(self, source)


    def append_rotation3(self, value):
        """
        append_rotation3(SpatialTransform self, TransformAxis value) -> int

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_append_rotation3(self, value)


    def constructProperty_rotation3(self, initValue):
        """
        constructProperty_rotation3(SpatialTransform self, TransformAxis initValue)

        Parameters
        ----------
        initValue: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_constructProperty_rotation3(self, initValue)


    def get_rotation3(self, *args):
        """
        get_rotation3(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        get_rotation3(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_get_rotation3(self, *args)


    def upd_rotation3(self, *args):
        """
        upd_rotation3(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        upd_rotation3(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform *

        """
        return _simulation.SpatialTransform_upd_rotation3(self, *args)


    def set_rotation3(self, *args):
        """
        set_rotation3(SpatialTransform self, int i, TransformAxis value)

        Parameters
        ----------
        i: int
        value: OpenSim::TransformAxis const &

        set_rotation3(SpatialTransform self, TransformAxis value)

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_set_rotation3(self, *args)


    def copyProperty_translation1(self, source):
        """
        copyProperty_translation1(SpatialTransform self, SpatialTransform source)

        Parameters
        ----------
        source: OpenSim::SpatialTransform::Self const &

        """
        return _simulation.SpatialTransform_copyProperty_translation1(self, source)


    def append_translation1(self, value):
        """
        append_translation1(SpatialTransform self, TransformAxis value) -> int

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_append_translation1(self, value)


    def constructProperty_translation1(self, initValue):
        """
        constructProperty_translation1(SpatialTransform self, TransformAxis initValue)

        Parameters
        ----------
        initValue: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_constructProperty_translation1(self, initValue)


    def get_translation1(self, *args):
        """
        get_translation1(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        get_translation1(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_get_translation1(self, *args)


    def upd_translation1(self, *args):
        """
        upd_translation1(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        upd_translation1(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform *

        """
        return _simulation.SpatialTransform_upd_translation1(self, *args)


    def set_translation1(self, *args):
        """
        set_translation1(SpatialTransform self, int i, TransformAxis value)

        Parameters
        ----------
        i: int
        value: OpenSim::TransformAxis const &

        set_translation1(SpatialTransform self, TransformAxis value)

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_set_translation1(self, *args)


    def copyProperty_translation2(self, source):
        """
        copyProperty_translation2(SpatialTransform self, SpatialTransform source)

        Parameters
        ----------
        source: OpenSim::SpatialTransform::Self const &

        """
        return _simulation.SpatialTransform_copyProperty_translation2(self, source)


    def append_translation2(self, value):
        """
        append_translation2(SpatialTransform self, TransformAxis value) -> int

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_append_translation2(self, value)


    def constructProperty_translation2(self, initValue):
        """
        constructProperty_translation2(SpatialTransform self, TransformAxis initValue)

        Parameters
        ----------
        initValue: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_constructProperty_translation2(self, initValue)


    def get_translation2(self, *args):
        """
        get_translation2(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        get_translation2(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_get_translation2(self, *args)


    def upd_translation2(self, *args):
        """
        upd_translation2(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        upd_translation2(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform *

        """
        return _simulation.SpatialTransform_upd_translation2(self, *args)


    def set_translation2(self, *args):
        """
        set_translation2(SpatialTransform self, int i, TransformAxis value)

        Parameters
        ----------
        i: int
        value: OpenSim::TransformAxis const &

        set_translation2(SpatialTransform self, TransformAxis value)

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_set_translation2(self, *args)


    def copyProperty_translation3(self, source):
        """
        copyProperty_translation3(SpatialTransform self, SpatialTransform source)

        Parameters
        ----------
        source: OpenSim::SpatialTransform::Self const &

        """
        return _simulation.SpatialTransform_copyProperty_translation3(self, source)


    def append_translation3(self, value):
        """
        append_translation3(SpatialTransform self, TransformAxis value) -> int

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_append_translation3(self, value)


    def constructProperty_translation3(self, initValue):
        """
        constructProperty_translation3(SpatialTransform self, TransformAxis initValue)

        Parameters
        ----------
        initValue: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_constructProperty_translation3(self, initValue)


    def get_translation3(self, *args):
        """
        get_translation3(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        get_translation3(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_get_translation3(self, *args)


    def upd_translation3(self, *args):
        """
        upd_translation3(SpatialTransform self, int i) -> TransformAxis

        Parameters
        ----------
        i: int

        upd_translation3(SpatialTransform self) -> TransformAxis

        Parameters
        ----------
        self: OpenSim::SpatialTransform *

        """
        return _simulation.SpatialTransform_upd_translation3(self, *args)


    def set_translation3(self, *args):
        """
        set_translation3(SpatialTransform self, int i, TransformAxis value)

        Parameters
        ----------
        i: int
        value: OpenSim::TransformAxis const &

        set_translation3(SpatialTransform self, TransformAxis value)

        Parameters
        ----------
        value: OpenSim::TransformAxis const &

        """
        return _simulation.SpatialTransform_set_translation3(self, *args)


    def __init__(self):
        """__init__(OpenSim::SpatialTransform self) -> SpatialTransform"""
        this = _simulation.new_SpatialTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def connectToJoint(self, owningJoint):
        """
        connectToJoint(SpatialTransform self, CustomJoint owningJoint)

        Parameters
        ----------
        owningJoint: OpenSim::CustomJoint &

        """
        return _simulation.SpatialTransform_connectToJoint(self, owningJoint)


    def constructIndependentAxes(self, nAxes, startIndex):
        """
        constructIndependentAxes(SpatialTransform self, int nAxes, int startIndex)

        Parameters
        ----------
        nAxes: int
        startIndex: int

        """
        return _simulation.SpatialTransform_constructIndependentAxes(self, nAxes, startIndex)


    def getCoordinateNames(self):
        """
        getCoordinateNames(SpatialTransform self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_getCoordinateNames(self)


    def getFunctions(self):
        """
        getFunctions(SpatialTransform self) -> std::vector< SimTK::Function const *,std::allocator< SimTK::Function const * > >

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_getFunctions(self)


    def getAxes(self):
        """
        getAxes(SpatialTransform self) -> StdVectorVec3

        Parameters
        ----------
        self: OpenSim::SpatialTransform const *

        """
        return _simulation.SpatialTransform_getAxes(self)


    def scale(self, scaleFactors):
        """
        scale(SpatialTransform self, Vec3 scaleFactors)

        Parameters
        ----------
        scaleFactors: SimTK::Vec3 const

        """
        return _simulation.SpatialTransform_scale(self, scaleFactors)


    def getTransformAxis(self, whichAxis):
        """
        getTransformAxis(SpatialTransform self, int whichAxis) -> TransformAxis

        Parameters
        ----------
        whichAxis: int

        """
        return _simulation.SpatialTransform_getTransformAxis(self, whichAxis)


    def updTransformAxis(self, whichAxis):
        """
        updTransformAxis(SpatialTransform self, int whichAxis) -> TransformAxis

        Parameters
        ----------
        whichAxis: int

        """
        return _simulation.SpatialTransform_updTransformAxis(self, whichAxis)

    __swig_destroy__ = _simulation.delete_SpatialTransform
    __del__ = lambda self: None
SpatialTransform_swigregister = _simulation.SpatialTransform_swigregister
SpatialTransform_swigregister(SpatialTransform)

def SpatialTransform_safeDownCast(obj):
    """
    SpatialTransform_safeDownCast(OpenSimObject obj) -> SpatialTransform

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SpatialTransform_safeDownCast(obj)

def SpatialTransform_getClassName():
    """SpatialTransform_getClassName() -> std::string const &"""
    return _simulation.SpatialTransform_getClassName()

class Coordinate(ModelComponent):
    """Proxy of C++ OpenSim::Coordinate class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coordinate, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Coordinate, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Coordinate

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Coordinate_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Coordinate self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Coordinate_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Coordinate_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Coordinate self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Coordinate self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getConcreteClassName(self)


    def copyProperty_default_value(self, source):
        """
        copyProperty_default_value(Coordinate self, Coordinate source)

        Parameters
        ----------
        source: OpenSim::Coordinate::Self const &

        """
        return _simulation.Coordinate_copyProperty_default_value(self, source)


    def append_default_value(self, value):
        """
        append_default_value(Coordinate self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Coordinate_append_default_value(self, value)


    def constructProperty_default_value(self, initValue):
        """
        constructProperty_default_value(Coordinate self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Coordinate_constructProperty_default_value(self, initValue)


    def get_default_value(self, *args):
        """
        get_default_value(Coordinate self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_value(Coordinate self) -> double const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_get_default_value(self, *args)


    def upd_default_value(self, *args):
        """
        upd_default_value(Coordinate self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_value(Coordinate self) -> double &

        Parameters
        ----------
        self: OpenSim::Coordinate *

        """
        return _simulation.Coordinate_upd_default_value(self, *args)


    def set_default_value(self, *args):
        """
        set_default_value(Coordinate self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_value(Coordinate self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Coordinate_set_default_value(self, *args)


    def copyProperty_default_speed_value(self, source):
        """
        copyProperty_default_speed_value(Coordinate self, Coordinate source)

        Parameters
        ----------
        source: OpenSim::Coordinate::Self const &

        """
        return _simulation.Coordinate_copyProperty_default_speed_value(self, source)


    def append_default_speed_value(self, value):
        """
        append_default_speed_value(Coordinate self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Coordinate_append_default_speed_value(self, value)


    def constructProperty_default_speed_value(self, initValue):
        """
        constructProperty_default_speed_value(Coordinate self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Coordinate_constructProperty_default_speed_value(self, initValue)


    def get_default_speed_value(self, *args):
        """
        get_default_speed_value(Coordinate self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_speed_value(Coordinate self) -> double const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_get_default_speed_value(self, *args)


    def upd_default_speed_value(self, *args):
        """
        upd_default_speed_value(Coordinate self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_speed_value(Coordinate self) -> double &

        Parameters
        ----------
        self: OpenSim::Coordinate *

        """
        return _simulation.Coordinate_upd_default_speed_value(self, *args)


    def set_default_speed_value(self, *args):
        """
        set_default_speed_value(Coordinate self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_speed_value(Coordinate self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Coordinate_set_default_speed_value(self, *args)


    def copyProperty_range(self, source):
        """
        copyProperty_range(Coordinate self, Coordinate source)

        Parameters
        ----------
        source: OpenSim::Coordinate::Self const &

        """
        return _simulation.Coordinate_copyProperty_range(self, source)


    def get_range(self, i):
        """
        get_range(Coordinate self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _simulation.Coordinate_get_range(self, i)


    def upd_range(self, i):
        """
        upd_range(Coordinate self, int i) -> double &

        Parameters
        ----------
        i: int

        """
        return _simulation.Coordinate_upd_range(self, i)


    def set_range(self, i, value):
        """
        set_range(Coordinate self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        """
        return _simulation.Coordinate_set_range(self, i, value)


    def append_range(self, value):
        """
        append_range(Coordinate self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Coordinate_append_range(self, value)


    def copyProperty_clamped(self, source):
        """
        copyProperty_clamped(Coordinate self, Coordinate source)

        Parameters
        ----------
        source: OpenSim::Coordinate::Self const &

        """
        return _simulation.Coordinate_copyProperty_clamped(self, source)


    def append_clamped(self, value):
        """
        append_clamped(Coordinate self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Coordinate_append_clamped(self, value)


    def constructProperty_clamped(self, initValue):
        """
        constructProperty_clamped(Coordinate self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Coordinate_constructProperty_clamped(self, initValue)


    def get_clamped(self, *args):
        """
        get_clamped(Coordinate self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_clamped(Coordinate self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_get_clamped(self, *args)


    def upd_clamped(self, *args):
        """
        upd_clamped(Coordinate self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_clamped(Coordinate self) -> bool &

        Parameters
        ----------
        self: OpenSim::Coordinate *

        """
        return _simulation.Coordinate_upd_clamped(self, *args)


    def set_clamped(self, *args):
        """
        set_clamped(Coordinate self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_clamped(Coordinate self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Coordinate_set_clamped(self, *args)


    def copyProperty_locked(self, source):
        """
        copyProperty_locked(Coordinate self, Coordinate source)

        Parameters
        ----------
        source: OpenSim::Coordinate::Self const &

        """
        return _simulation.Coordinate_copyProperty_locked(self, source)


    def append_locked(self, value):
        """
        append_locked(Coordinate self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Coordinate_append_locked(self, value)


    def constructProperty_locked(self, initValue):
        """
        constructProperty_locked(Coordinate self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Coordinate_constructProperty_locked(self, initValue)


    def get_locked(self, *args):
        """
        get_locked(Coordinate self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_locked(Coordinate self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_get_locked(self, *args)


    def upd_locked(self, *args):
        """
        upd_locked(Coordinate self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_locked(Coordinate self) -> bool &

        Parameters
        ----------
        self: OpenSim::Coordinate *

        """
        return _simulation.Coordinate_upd_locked(self, *args)


    def set_locked(self, *args):
        """
        set_locked(Coordinate self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_locked(Coordinate self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Coordinate_set_locked(self, *args)


    def copyProperty_prescribed_function(self, source):
        """
        copyProperty_prescribed_function(Coordinate self, Coordinate source)

        Parameters
        ----------
        source: OpenSim::Coordinate::Self const &

        """
        return _simulation.Coordinate_copyProperty_prescribed_function(self, source)


    def append_prescribed_function(self, value):
        """
        append_prescribed_function(Coordinate self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.Coordinate_append_prescribed_function(self, value)


    def constructProperty_prescribed_function(self, *args):
        """
        constructProperty_prescribed_function(Coordinate self)
        constructProperty_prescribed_function(Coordinate self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.Coordinate_constructProperty_prescribed_function(self, *args)


    def get_prescribed_function(self, *args):
        """
        get_prescribed_function(Coordinate self, int i) -> Function

        Parameters
        ----------
        i: int

        get_prescribed_function(Coordinate self) -> Function

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_get_prescribed_function(self, *args)


    def upd_prescribed_function(self, *args):
        """
        upd_prescribed_function(Coordinate self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_prescribed_function(Coordinate self) -> Function

        Parameters
        ----------
        self: OpenSim::Coordinate *

        """
        return _simulation.Coordinate_upd_prescribed_function(self, *args)


    def set_prescribed_function(self, *args):
        """
        set_prescribed_function(Coordinate self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_prescribed_function(Coordinate self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.Coordinate_set_prescribed_function(self, *args)


    def copyProperty_prescribed(self, source):
        """
        copyProperty_prescribed(Coordinate self, Coordinate source)

        Parameters
        ----------
        source: OpenSim::Coordinate::Self const &

        """
        return _simulation.Coordinate_copyProperty_prescribed(self, source)


    def append_prescribed(self, value):
        """
        append_prescribed(Coordinate self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Coordinate_append_prescribed(self, value)


    def constructProperty_prescribed(self, initValue):
        """
        constructProperty_prescribed(Coordinate self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Coordinate_constructProperty_prescribed(self, initValue)


    def get_prescribed(self, *args):
        """
        get_prescribed(Coordinate self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_prescribed(Coordinate self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_get_prescribed(self, *args)


    def upd_prescribed(self, *args):
        """
        upd_prescribed(Coordinate self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_prescribed(Coordinate self) -> bool &

        Parameters
        ----------
        self: OpenSim::Coordinate *

        """
        return _simulation.Coordinate_upd_prescribed(self, *args)


    def set_prescribed(self, *args):
        """
        set_prescribed(Coordinate self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_prescribed(Coordinate self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Coordinate_set_prescribed(self, *args)


    def copyProperty_is_free_to_satisfy_constraints(self, source):
        """
        copyProperty_is_free_to_satisfy_constraints(Coordinate self, Coordinate source)

        Parameters
        ----------
        source: OpenSim::Coordinate::Self const &

        """
        return _simulation.Coordinate_copyProperty_is_free_to_satisfy_constraints(self, source)


    def append_is_free_to_satisfy_constraints(self, value):
        """
        append_is_free_to_satisfy_constraints(Coordinate self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Coordinate_append_is_free_to_satisfy_constraints(self, value)


    def constructProperty_is_free_to_satisfy_constraints(self, initValue):
        """
        constructProperty_is_free_to_satisfy_constraints(Coordinate self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Coordinate_constructProperty_is_free_to_satisfy_constraints(self, initValue)


    def get_is_free_to_satisfy_constraints(self, *args):
        """
        get_is_free_to_satisfy_constraints(Coordinate self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_is_free_to_satisfy_constraints(Coordinate self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_get_is_free_to_satisfy_constraints(self, *args)


    def upd_is_free_to_satisfy_constraints(self, *args):
        """
        upd_is_free_to_satisfy_constraints(Coordinate self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_is_free_to_satisfy_constraints(Coordinate self) -> bool &

        Parameters
        ----------
        self: OpenSim::Coordinate *

        """
        return _simulation.Coordinate_upd_is_free_to_satisfy_constraints(self, *args)


    def set_is_free_to_satisfy_constraints(self, *args):
        """
        set_is_free_to_satisfy_constraints(Coordinate self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_is_free_to_satisfy_constraints(Coordinate self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Coordinate_set_is_free_to_satisfy_constraints(self, *args)

    __swig_setmethods__["_has_output_value"] = _simulation.Coordinate__has_output_value_set
    __swig_getmethods__["_has_output_value"] = _simulation.Coordinate__has_output_value_get
    if _newclass:
        _has_output_value = _swig_property(_simulation.Coordinate__has_output_value_get, _simulation.Coordinate__has_output_value_set)
    __swig_setmethods__["_has_output_speed"] = _simulation.Coordinate__has_output_speed_set
    __swig_getmethods__["_has_output_speed"] = _simulation.Coordinate__has_output_speed_get
    if _newclass:
        _has_output_speed = _swig_property(_simulation.Coordinate__has_output_speed_get, _simulation.Coordinate__has_output_speed_set)
    __swig_setmethods__["_has_output_acceleration"] = _simulation.Coordinate__has_output_acceleration_set
    __swig_getmethods__["_has_output_acceleration"] = _simulation.Coordinate__has_output_acceleration_get
    if _newclass:
        _has_output_acceleration = _swig_property(_simulation.Coordinate__has_output_acceleration_get, _simulation.Coordinate__has_output_acceleration_set)
    Undefined = _simulation.Coordinate_Undefined
    Rotational = _simulation.Coordinate_Rotational
    Translational = _simulation.Coordinate_Translational
    Coupled = _simulation.Coordinate_Coupled

    def getJoint(self):
        """
        getJoint(Coordinate self) -> Joint

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getJoint(self)


    def getMotionType(self):
        """
        getMotionType(Coordinate self) -> OpenSim::Coordinate::MotionType

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getMotionType(self)


    def getValue(self, s):
        """
        getValue(Coordinate self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Coordinate_getValue(self, s)


    def setValue(self, s, aValue, enforceContraints=True):
        """
        setValue(Coordinate self, State s, double aValue, bool enforceContraints=True)

        Parameters
        ----------
        s: SimTK::State &
        aValue: double
        enforceContraints: bool

        setValue(Coordinate self, State s, double aValue)

        Parameters
        ----------
        s: SimTK::State &
        aValue: double

        """
        return _simulation.Coordinate_setValue(self, s, aValue, enforceContraints)


    def getSpeedValue(self, s):
        """
        getSpeedValue(Coordinate self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Coordinate_getSpeedValue(self, s)


    def setSpeedValue(self, s, aValue):
        """
        setSpeedValue(Coordinate self, State s, double aValue)

        Parameters
        ----------
        s: SimTK::State &
        aValue: double

        """
        return _simulation.Coordinate_setSpeedValue(self, s, aValue)


    def getSpeedName(self):
        """
        getSpeedName(Coordinate self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getSpeedName(self)


    def getDefaultValue(self):
        """
        getDefaultValue(Coordinate self) -> double

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getDefaultValue(self)


    def setDefaultValue(self, aDefaultValue):
        """
        setDefaultValue(Coordinate self, double aDefaultValue)

        Parameters
        ----------
        aDefaultValue: double

        """
        return _simulation.Coordinate_setDefaultValue(self, aDefaultValue)


    def getDefaultSpeedValue(self):
        """
        getDefaultSpeedValue(Coordinate self) -> double

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getDefaultSpeedValue(self)


    def setDefaultSpeedValue(self, aDefaultSpeedValue):
        """
        setDefaultSpeedValue(Coordinate self, double aDefaultSpeedValue)

        Parameters
        ----------
        aDefaultSpeedValue: double

        """
        return _simulation.Coordinate_setDefaultSpeedValue(self, aDefaultSpeedValue)


    def getAccelerationValue(self, s):
        """
        getAccelerationValue(Coordinate self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Coordinate_getAccelerationValue(self, s)


    def getClamped(self, s):
        """
        getClamped(Coordinate self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Coordinate_getClamped(self, s)


    def setClamped(self, s, aLocked):
        """
        setClamped(Coordinate self, State s, bool aLocked)

        Parameters
        ----------
        s: SimTK::State &
        aLocked: bool

        """
        return _simulation.Coordinate_setClamped(self, s, aLocked)


    def getDefaultClamped(self):
        """
        getDefaultClamped(Coordinate self) -> bool

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getDefaultClamped(self)


    def setDefaultClamped(self, aClamped):
        """
        setDefaultClamped(Coordinate self, bool aClamped)

        Parameters
        ----------
        aClamped: bool

        """
        return _simulation.Coordinate_setDefaultClamped(self, aClamped)


    def getRangeMin(self):
        """
        getRangeMin(Coordinate self) -> double

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getRangeMin(self)


    def getRangeMax(self):
        """
        getRangeMax(Coordinate self) -> double

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getRangeMax(self)


    def setRangeMin(self, aMin):
        """
        setRangeMin(Coordinate self, double aMin)

        Parameters
        ----------
        aMin: double

        """
        return _simulation.Coordinate_setRangeMin(self, aMin)


    def setRangeMax(self, aMax):
        """
        setRangeMax(Coordinate self, double aMax)

        Parameters
        ----------
        aMax: double

        """
        return _simulation.Coordinate_setRangeMax(self, aMax)


    def getLocked(self, s):
        """
        getLocked(Coordinate self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Coordinate_getLocked(self, s)


    def setLocked(self, s, aLocked):
        """
        setLocked(Coordinate self, State s, bool aLocked)

        Parameters
        ----------
        s: SimTK::State &
        aLocked: bool

        """
        return _simulation.Coordinate_setLocked(self, s, aLocked)


    def getDefaultLocked(self):
        """
        getDefaultLocked(Coordinate self) -> bool

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getDefaultLocked(self)


    def setDefaultLocked(self, aLocked):
        """
        setDefaultLocked(Coordinate self, bool aLocked)

        Parameters
        ----------
        aLocked: bool

        """
        return _simulation.Coordinate_setDefaultLocked(self, aLocked)


    def isPrescribed(self, s):
        """
        isPrescribed(Coordinate self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Coordinate_isPrescribed(self, s)


    def setIsPrescribed(self, s, isPrescribed):
        """
        setIsPrescribed(Coordinate self, State s, bool isPrescribed)

        Parameters
        ----------
        s: SimTK::State &
        isPrescribed: bool

        """
        return _simulation.Coordinate_setIsPrescribed(self, s, isPrescribed)


    def getDefaultIsPrescribed(self):
        """
        getDefaultIsPrescribed(Coordinate self) -> bool

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getDefaultIsPrescribed(self)


    def setDefaultIsPrescribed(self, isPrescribed):
        """
        setDefaultIsPrescribed(Coordinate self, bool isPrescribed)

        Parameters
        ----------
        isPrescribed: bool

        """
        return _simulation.Coordinate_setDefaultIsPrescribed(self, isPrescribed)


    def setPrescribedFunction(self, function):
        """
        setPrescribedFunction(Coordinate self, Function function)

        Parameters
        ----------
        function: OpenSim::Function const &

        """
        return _simulation.Coordinate_setPrescribedFunction(self, function)


    def getPrescribedFunction(self):
        """
        getPrescribedFunction(Coordinate self) -> Function

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getPrescribedFunction(self)


    def isDependent(self, s):
        """
        isDependent(Coordinate self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Coordinate_isDependent(self, s)


    def isConstrained(self, s):
        """
        isConstrained(Coordinate self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Coordinate_isConstrained(self, s)


    def getMobilizerQIndex(self):
        """
        getMobilizerQIndex(Coordinate self) -> int

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getMobilizerQIndex(self)


    def getBodyIndex(self):
        """
        getBodyIndex(Coordinate self) -> SimTK::MobilizedBodyIndex

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getBodyIndex(self)


    def getUserSpecifiedMotionTypePriorTo40(self):
        """
        getUserSpecifiedMotionTypePriorTo40(Coordinate self) -> OpenSim::Coordinate::MotionType const &

        Parameters
        ----------
        self: OpenSim::Coordinate const *

        """
        return _simulation.Coordinate_getUserSpecifiedMotionTypePriorTo40(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Coordinate self) -> Coordinate
        __init__(OpenSim::Coordinate self, std::string const & aName, OpenSim::Coordinate::MotionType aMotionType, double defaultValue, double aRangeMin, double aRangeMax) -> Coordinate

        Parameters
        ----------
        aName: std::string const &
        aMotionType: enum OpenSim::Coordinate::MotionType
        defaultValue: double
        aRangeMin: double
        aRangeMax: double

        """
        this = _simulation.new_Coordinate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Coordinate
    __del__ = lambda self: None
Coordinate_swigregister = _simulation.Coordinate_swigregister
Coordinate_swigregister(Coordinate)

def Coordinate_safeDownCast(obj):
    """
    Coordinate_safeDownCast(OpenSimObject obj) -> Coordinate

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Coordinate_safeDownCast(obj)

def Coordinate_getClassName():
    """Coordinate_getClassName() -> std::string const &"""
    return _simulation.Coordinate_getClassName()

class SetCoordinates(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Coordinate,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetCoordinates, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetCoordinates, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetCoordinates

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetCoordinates_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetCoordinates self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetCoordinates_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetCoordinates_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetCoordinates self) -> SetCoordinates

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Coordinate,OpenSim::Object > const *

        """
        return _simulation.SetCoordinates_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetCoordinates self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Coordinate,OpenSim::Object > const *

        """
        return _simulation.SetCoordinates_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetCoordinates
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Coordinate,OpenSim::Object)> self) -> SetCoordinates
        __init__(OpenSim::Set<(OpenSim::Coordinate,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetCoordinates

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Coordinate,OpenSim::Object)> self, std::string const & aFileName) -> SetCoordinates

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Coordinate,OpenSim::Object)> self, SetCoordinates aSet) -> SetCoordinates

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Coordinate,OpenSim::Object > const &

        """
        this = _simulation.new_SetCoordinates(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetCoordinates self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Coordinate,OpenSim::Object > *

        """
        return _simulation.SetCoordinates_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetCoordinates self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetCoordinates_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetCoordinates self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetCoordinates_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetCoordinates self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Coordinate,OpenSim::Object > const *

        """
        return _simulation.SetCoordinates_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetCoordinates self, Coordinate aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Coordinate const *
        aStartIndex: int

        getIndex(SetCoordinates self, Coordinate aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Coordinate const *

        getIndex(SetCoordinates self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetCoordinates self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetCoordinates_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetCoordinates self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetCoordinates_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetCoordinates self, Coordinate aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Coordinate *

        """
        return _simulation.SetCoordinates_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetCoordinates self, Coordinate aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Coordinate const &

        """
        return _simulation.SetCoordinates_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetCoordinates self, int aIndex, Coordinate aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Coordinate *

        """
        return _simulation.SetCoordinates_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetCoordinates self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetCoordinates self, Coordinate aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Coordinate const *

        """
        return _simulation.SetCoordinates_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetCoordinates self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Coordinate,OpenSim::Object > *

        """
        return _simulation.SetCoordinates_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetCoordinates self, int aIndex, Coordinate aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Coordinate *
        preserveGroups: bool

        set(SetCoordinates self, int aIndex, Coordinate aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Coordinate *

        """
        return _simulation.SetCoordinates_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetCoordinates self, int aIndex) -> Coordinate

        Parameters
        ----------
        aIndex: int

        get(SetCoordinates self, std::string const & aName) -> Coordinate

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetCoordinates_get(self, *args)


    def contains(self, aName):
        """
        contains(SetCoordinates self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetCoordinates_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetCoordinates self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetCoordinates_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetCoordinates self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Coordinate,OpenSim::Object > const *

        """
        return _simulation.SetCoordinates_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetCoordinates self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetCoordinates_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetCoordinates self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetCoordinates_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetCoordinates self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetCoordinates_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetCoordinates self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetCoordinates_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetCoordinates self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetCoordinates_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetCoordinates self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetCoordinates self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetCoordinates_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetCoordinates_swigregister = _simulation.SetCoordinates_swigregister
SetCoordinates_swigregister(SetCoordinates)

def SetCoordinates_safeDownCast(obj):
    """
    SetCoordinates_safeDownCast(OpenSimObject obj) -> SetCoordinates

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetCoordinates_safeDownCast(obj)

def SetCoordinates_getClassName():
    """SetCoordinates_getClassName() -> std::string const &"""
    return _simulation.SetCoordinates_getClassName()

class CoordinateSet(SetCoordinates):
    """Proxy of C++ OpenSim::CoordinateSet class."""

    __swig_setmethods__ = {}
    for _s in [SetCoordinates]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetCoordinates]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.CoordinateSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CoordinateSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.CoordinateSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.CoordinateSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CoordinateSet self) -> CoordinateSet

        Parameters
        ----------
        self: OpenSim::CoordinateSet const *

        """
        return _simulation.CoordinateSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CoordinateSet const *

        """
        return _simulation.CoordinateSet_getConcreteClassName(self)


    def populate(self, model):
        """
        populate(CoordinateSet self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _simulation.CoordinateSet_populate(self, model)


    def getSpeedNames(self, rNames):
        """
        getSpeedNames(CoordinateSet self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.CoordinateSet_getSpeedNames(self, rNames)


    def __init__(self, *args):
        """
        __init__(OpenSim::CoordinateSet self) -> CoordinateSet
        __init__(OpenSim::CoordinateSet self, std::string const & file, bool updateFromXML=True) -> CoordinateSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::CoordinateSet self, std::string const & file) -> CoordinateSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_CoordinateSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_CoordinateSet
    __del__ = lambda self: None
CoordinateSet_swigregister = _simulation.CoordinateSet_swigregister
CoordinateSet_swigregister(CoordinateSet)

def CoordinateSet_safeDownCast(obj):
    """
    CoordinateSet_safeDownCast(OpenSimObject obj) -> CoordinateSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.CoordinateSet_safeDownCast(obj)

def CoordinateSet_getClassName():
    """CoordinateSet_getClassName() -> std::string const &"""
    return _simulation.CoordinateSet_getClassName()

class JointFramesAreTheSame(opensim.common.OpenSimException):
    """Proxy of C++ OpenSim::JointFramesAreTheSame class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointFramesAreTheSame, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointFramesAreTheSame, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, thisName, sameName):
        """
        __init__(OpenSim::JointFramesAreTheSame self, std::string const & file, size_t line, std::string const & func, std::string const & thisName, std::string const & sameName) -> JointFramesAreTheSame

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        thisName: std::string const &
        sameName: std::string const &

        """
        this = _simulation.new_JointFramesAreTheSame(file, line, func, thisName, sameName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_JointFramesAreTheSame
    __del__ = lambda self: None
JointFramesAreTheSame_swigregister = _simulation.JointFramesAreTheSame_swigregister
JointFramesAreTheSame_swigregister(JointFramesAreTheSame)

class Joint(ModelComponent):
    """Proxy of C++ OpenSim::Joint class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Joint, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Joint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Joint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Joint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Joint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Joint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Joint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Joint self) -> Joint

        Parameters
        ----------
        self: OpenSim::Joint const *

        """
        return _simulation.Joint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Joint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Joint const *

        """
        return _simulation.Joint_getConcreteClassName(self)


    def copyProperty_coordinates(self, source):
        """
        copyProperty_coordinates(Joint self, Joint source)

        Parameters
        ----------
        source: OpenSim::Joint::Self const &

        """
        return _simulation.Joint_copyProperty_coordinates(self, source)


    def get_coordinates(self, i):
        """
        get_coordinates(Joint self, int i) -> Coordinate

        Parameters
        ----------
        i: int

        """
        return _simulation.Joint_get_coordinates(self, i)


    def upd_coordinates(self, i):
        """
        upd_coordinates(Joint self, int i) -> Coordinate

        Parameters
        ----------
        i: int

        """
        return _simulation.Joint_upd_coordinates(self, i)


    def set_coordinates(self, i, value):
        """
        set_coordinates(Joint self, int i, Coordinate value)

        Parameters
        ----------
        i: int
        value: OpenSim::Coordinate const &

        """
        return _simulation.Joint_set_coordinates(self, i, value)


    def append_coordinates(self, value):
        """
        append_coordinates(Joint self, Coordinate value) -> int

        Parameters
        ----------
        value: OpenSim::Coordinate const &

        """
        return _simulation.Joint_append_coordinates(self, value)


    def constructProperty_coordinates(self):
        """
        constructProperty_coordinates(Joint self)

        Parameters
        ----------
        self: OpenSim::Joint *

        """
        return _simulation.Joint_constructProperty_coordinates(self)


    def copyProperty_frames(self, source):
        """
        copyProperty_frames(Joint self, Joint source)

        Parameters
        ----------
        source: OpenSim::Joint::Self const &

        """
        return _simulation.Joint_copyProperty_frames(self, source)


    def get_frames(self, i):
        """
        get_frames(Joint self, int i) -> PhysicalOffsetFrame

        Parameters
        ----------
        i: int

        """
        return _simulation.Joint_get_frames(self, i)


    def upd_frames(self, i):
        """
        upd_frames(Joint self, int i) -> PhysicalOffsetFrame

        Parameters
        ----------
        i: int

        """
        return _simulation.Joint_upd_frames(self, i)


    def set_frames(self, i, value):
        """
        set_frames(Joint self, int i, PhysicalOffsetFrame value)

        Parameters
        ----------
        i: int
        value: OpenSim::PhysicalOffsetFrame const &

        """
        return _simulation.Joint_set_frames(self, i, value)


    def append_frames(self, value):
        """
        append_frames(Joint self, PhysicalOffsetFrame value) -> int

        Parameters
        ----------
        value: OpenSim::PhysicalOffsetFrame const &

        """
        return _simulation.Joint_append_frames(self, value)


    def constructProperty_frames(self):
        """
        constructProperty_frames(Joint self)

        Parameters
        ----------
        self: OpenSim::Joint *

        """
        return _simulation.Joint_constructProperty_frames(self)

    __swig_setmethods__["PropertyIndex_socket_parent_frame"] = _simulation.Joint_PropertyIndex_socket_parent_frame_set
    __swig_getmethods__["PropertyIndex_socket_parent_frame"] = _simulation.Joint_PropertyIndex_socket_parent_frame_get
    if _newclass:
        PropertyIndex_socket_parent_frame = _swig_property(_simulation.Joint_PropertyIndex_socket_parent_frame_get, _simulation.Joint_PropertyIndex_socket_parent_frame_set)

    def connectSocket_parent_frame(self, object):
        """
        connectSocket_parent_frame(Joint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.Joint_connectSocket_parent_frame(self, object)

    __swig_setmethods__["PropertyIndex_socket_child_frame"] = _simulation.Joint_PropertyIndex_socket_child_frame_set
    __swig_getmethods__["PropertyIndex_socket_child_frame"] = _simulation.Joint_PropertyIndex_socket_child_frame_get
    if _newclass:
        PropertyIndex_socket_child_frame = _swig_property(_simulation.Joint_PropertyIndex_socket_child_frame_get, _simulation.Joint_PropertyIndex_socket_child_frame_set)

    def connectSocket_child_frame(self, object):
        """
        connectSocket_child_frame(Joint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.Joint_connectSocket_child_frame(self, object)

    __swig_setmethods__["_has_output_power"] = _simulation.Joint__has_output_power_set
    __swig_getmethods__["_has_output_power"] = _simulation.Joint__has_output_power_get
    if _newclass:
        _has_output_power = _swig_property(_simulation.Joint__has_output_power_get, _simulation.Joint__has_output_power_set)
    __swig_setmethods__["_has_output_reaction_on_parent"] = _simulation.Joint__has_output_reaction_on_parent_set
    __swig_getmethods__["_has_output_reaction_on_parent"] = _simulation.Joint__has_output_reaction_on_parent_get
    if _newclass:
        _has_output_reaction_on_parent = _swig_property(_simulation.Joint__has_output_reaction_on_parent_get, _simulation.Joint__has_output_reaction_on_parent_set)
    __swig_setmethods__["_has_output_reaction_on_child"] = _simulation.Joint__has_output_reaction_on_child_set
    __swig_getmethods__["_has_output_reaction_on_child"] = _simulation.Joint__has_output_reaction_on_child_get
    if _newclass:
        _has_output_reaction_on_child = _swig_property(_simulation.Joint__has_output_reaction_on_child_get, _simulation.Joint__has_output_reaction_on_child_set)
    __swig_destroy__ = _simulation.delete_Joint
    __del__ = lambda self: None

    def getChildFrame(self):
        """
        getChildFrame(Joint self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::Joint const *

        """
        return _simulation.Joint_getChildFrame(self)


    def getParentFrame(self):
        """
        getParentFrame(Joint self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::Joint const *

        """
        return _simulation.Joint_getParentFrame(self)


    def getCoordinate(self):
        """
        getCoordinate(Joint self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::Joint const *

        """
        return _simulation.Joint_getCoordinate(self)


    def updCoordinate(self):
        """
        updCoordinate(Joint self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::Joint *

        """
        return _simulation.Joint_updCoordinate(self)


    def numCoordinates(self):
        """
        numCoordinates(Joint self) -> int

        Parameters
        ----------
        self: OpenSim::Joint const *

        """
        return _simulation.Joint_numCoordinates(self)


    def isCoordinateUsed(self, aCoordinate):
        """
        isCoordinateUsed(Joint self, Coordinate aCoordinate) -> bool

        Parameters
        ----------
        aCoordinate: OpenSim::Coordinate const &

        """
        return _simulation.Joint_isCoordinateUsed(self, aCoordinate)


    def addFrame(self, frame):
        """
        addFrame(Joint self, PhysicalOffsetFrame frame)

        Parameters
        ----------
        frame: OpenSim::PhysicalOffsetFrame *

        """
        return _simulation.Joint_addFrame(self, frame)


    def calcEquivalentSpatialForce(self, state, mobilityForces):
        """
        calcEquivalentSpatialForce(Joint self, State state, Vector mobilityForces) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &
        mobilityForces: SimTK::Vector const &

        """
        return _simulation.Joint_calcEquivalentSpatialForce(self, state, mobilityForces)


    def calcReactionOnParentExpressedInGround(self, state):
        """
        calcReactionOnParentExpressedInGround(Joint self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Joint_calcReactionOnParentExpressedInGround(self, state)


    def calcReactionOnChildExpressedInGround(self, state):
        """
        calcReactionOnChildExpressedInGround(Joint self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Joint_calcReactionOnChildExpressedInGround(self, state)


    def calcPower(self, s):
        """
        calcPower(Joint self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Joint_calcPower(self, s)

Joint_swigregister = _simulation.Joint_swigregister
Joint_swigregister(Joint)

def Joint_safeDownCast(obj):
    """
    Joint_safeDownCast(OpenSimObject obj) -> Joint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Joint_safeDownCast(obj)

def Joint_getClassName():
    """Joint_getClassName() -> std::string const &"""
    return _simulation.Joint_getClassName()

class JointHasNoCoordinates(opensim.common.OpenSimException):
    """Proxy of C++ OpenSim::JointHasNoCoordinates class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointHasNoCoordinates, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointHasNoCoordinates, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        """
        __init__(OpenSim::JointHasNoCoordinates self, std::string const & file, size_t line, std::string const & func) -> JointHasNoCoordinates

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        this = _simulation.new_JointHasNoCoordinates(file, line, func)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_JointHasNoCoordinates
    __del__ = lambda self: None
JointHasNoCoordinates_swigregister = _simulation.JointHasNoCoordinates_swigregister
JointHasNoCoordinates_swigregister(JointHasNoCoordinates)

class SetJoints(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::Joint,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetJoints, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetJoints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetJoints

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetJoints_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetJoints self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetJoints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetJoints_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetJoints self) -> SetJoints

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Joint,OpenSim::ModelComponent > const *

        """
        return _simulation.SetJoints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetJoints self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Joint,OpenSim::ModelComponent > const *

        """
        return _simulation.SetJoints_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetJoints
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Joint,OpenSim::ModelComponent)> self) -> SetJoints
        __init__(OpenSim::Set<(OpenSim::Joint,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetJoints

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Joint,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetJoints

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Joint,OpenSim::ModelComponent)> self, SetJoints aSet) -> SetJoints

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Joint,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetJoints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetJoints self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Joint,OpenSim::ModelComponent > *

        """
        return _simulation.SetJoints_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetJoints self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetJoints_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetJoints self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetJoints_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetJoints self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Joint,OpenSim::ModelComponent > const *

        """
        return _simulation.SetJoints_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetJoints self, Joint aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Joint const *
        aStartIndex: int

        getIndex(SetJoints self, Joint aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Joint const *

        getIndex(SetJoints self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetJoints self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetJoints_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetJoints self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetJoints_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetJoints self, Joint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Joint *

        """
        return _simulation.SetJoints_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetJoints self, Joint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Joint const &

        """
        return _simulation.SetJoints_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetJoints self, int aIndex, Joint aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Joint *

        """
        return _simulation.SetJoints_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetJoints self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetJoints self, Joint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Joint const *

        """
        return _simulation.SetJoints_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetJoints self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Joint,OpenSim::ModelComponent > *

        """
        return _simulation.SetJoints_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetJoints self, int aIndex, Joint aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Joint *
        preserveGroups: bool

        set(SetJoints self, int aIndex, Joint aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Joint *

        """
        return _simulation.SetJoints_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetJoints self, int aIndex) -> Joint

        Parameters
        ----------
        aIndex: int

        get(SetJoints self, std::string const & aName) -> Joint

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetJoints_get(self, *args)


    def contains(self, aName):
        """
        contains(SetJoints self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetJoints_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetJoints self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetJoints_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetJoints self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Joint,OpenSim::ModelComponent > const *

        """
        return _simulation.SetJoints_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetJoints self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetJoints_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetJoints self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetJoints_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetJoints self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetJoints_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetJoints self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetJoints_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetJoints self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetJoints_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetJoints self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetJoints self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetJoints_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetJoints_swigregister = _simulation.SetJoints_swigregister
SetJoints_swigregister(SetJoints)

def SetJoints_safeDownCast(obj):
    """
    SetJoints_safeDownCast(OpenSimObject obj) -> SetJoints

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetJoints_safeDownCast(obj)

def SetJoints_getClassName():
    """SetJoints_getClassName() -> std::string const &"""
    return _simulation.SetJoints_getClassName()

class ModelComponentSetJoints(SetJoints):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Joint)> class."""

    __swig_setmethods__ = {}
    for _s in [SetJoints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetJoints, name, value)
    __swig_getmethods__ = {}
    for _s in [SetJoints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetJoints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetJoints

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetJoints_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetJoints self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetJoints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetJoints_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetJoints self) -> ModelComponentSetJoints

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Joint > const *

        """
        return _simulation.ModelComponentSetJoints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetJoints self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Joint > const *

        """
        return _simulation.ModelComponentSetJoints_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetJoints self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Joint > *

        """
        return _simulation.ModelComponentSetJoints_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::Joint)> self) -> ModelComponentSetJoints"""
        this = _simulation.new_ModelComponentSetJoints()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetJoints
    __del__ = lambda self: None
ModelComponentSetJoints_swigregister = _simulation.ModelComponentSetJoints_swigregister
ModelComponentSetJoints_swigregister(ModelComponentSetJoints)

def ModelComponentSetJoints_safeDownCast(obj):
    """
    ModelComponentSetJoints_safeDownCast(OpenSimObject obj) -> ModelComponentSetJoints

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetJoints_safeDownCast(obj)

def ModelComponentSetJoints_getClassName():
    """ModelComponentSetJoints_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetJoints_getClassName()

class JointSet(ModelComponentSetJoints):
    """Proxy of C++ OpenSim::JointSet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetJoints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetJoints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> JointSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.JointSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(JointSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.JointSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.JointSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(JointSet self) -> JointSet

        Parameters
        ----------
        self: OpenSim::JointSet const *

        """
        return _simulation.JointSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(JointSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::JointSet const *

        """
        return _simulation.JointSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::JointSet self) -> JointSet
        __init__(OpenSim::JointSet self, std::string const & file, bool updateFromXML=True) -> JointSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::JointSet self, std::string const & file) -> JointSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_JointSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_JointSet
    __del__ = lambda self: None
JointSet_swigregister = _simulation.JointSet_swigregister
JointSet_swigregister(JointSet)

def JointSet_safeDownCast(obj):
    """
    JointSet_safeDownCast(OpenSimObject obj) -> JointSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.JointSet_safeDownCast(obj)

def JointSet_getClassName():
    """JointSet_getClassName() -> std::string const &"""
    return _simulation.JointSet_getClassName()

class Constraint(ModelComponent):
    """Proxy of C++ OpenSim::Constraint class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Constraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Constraint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Constraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Constraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Constraint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Constraint self) -> Constraint

        Parameters
        ----------
        self: OpenSim::Constraint const *

        """
        return _simulation.Constraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Constraint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Constraint const *

        """
        return _simulation.Constraint_getConcreteClassName(self)


    def copyProperty_isEnforced(self, source):
        """
        copyProperty_isEnforced(Constraint self, Constraint source)

        Parameters
        ----------
        source: OpenSim::Constraint::Self const &

        """
        return _simulation.Constraint_copyProperty_isEnforced(self, source)


    def append_isEnforced(self, value):
        """
        append_isEnforced(Constraint self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Constraint_append_isEnforced(self, value)


    def constructProperty_isEnforced(self, initValue):
        """
        constructProperty_isEnforced(Constraint self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Constraint_constructProperty_isEnforced(self, initValue)


    def get_isEnforced(self, *args):
        """
        get_isEnforced(Constraint self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_isEnforced(Constraint self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Constraint const *

        """
        return _simulation.Constraint_get_isEnforced(self, *args)


    def upd_isEnforced(self, *args):
        """
        upd_isEnforced(Constraint self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_isEnforced(Constraint self) -> bool &

        Parameters
        ----------
        self: OpenSim::Constraint *

        """
        return _simulation.Constraint_upd_isEnforced(self, *args)


    def set_isEnforced(self, *args):
        """
        set_isEnforced(Constraint self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_isEnforced(Constraint self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Constraint_set_isEnforced(self, *args)

    __swig_destroy__ = _simulation.delete_Constraint
    __del__ = lambda self: None

    def updateFromConstraint(self, s, aConstraint):
        """
        updateFromConstraint(Constraint self, State s, Constraint aConstraint)

        Parameters
        ----------
        s: SimTK::State &
        aConstraint: OpenSim::Constraint const &

        """
        return _simulation.Constraint_updateFromConstraint(self, s, aConstraint)


    def isEnforced(self, s):
        """
        isEnforced(Constraint self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Constraint_isEnforced(self, s)


    def setIsEnforced(self, s, isEnforced):
        """
        setIsEnforced(Constraint self, State s, bool isEnforced) -> bool

        Parameters
        ----------
        s: SimTK::State &
        isEnforced: bool

        """
        return _simulation.Constraint_setIsEnforced(self, s, isEnforced)


    def calcConstraintForces(self, s, bodyForcesInAncestor, mobilityForces):
        """
        calcConstraintForces(Constraint self, State s, VectorOfSpatialVec bodyForcesInAncestor, Vector mobilityForces)

        Parameters
        ----------
        s: SimTK::State const &
        bodyForcesInAncestor: SimTK::Vector_< SimTK::SpatialVec > &
        mobilityForces: SimTK::Vector &

        """
        return _simulation.Constraint_calcConstraintForces(self, s, bodyForcesInAncestor, mobilityForces)


    def getRecordLabels(self):
        """
        getRecordLabels(Constraint self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::Constraint const *

        """
        return _simulation.Constraint_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(Constraint self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Constraint_getRecordValues(self, state)


    def setContactPointForInducedAccelerations(self, s, point):
        """
        setContactPointForInducedAccelerations(Constraint self, State s, Vec3 point)

        Parameters
        ----------
        s: SimTK::State const &
        point: SimTK::Vec3

        """
        return _simulation.Constraint_setContactPointForInducedAccelerations(self, s, point)

Constraint_swigregister = _simulation.Constraint_swigregister
Constraint_swigregister(Constraint)

def Constraint_safeDownCast(obj):
    """
    Constraint_safeDownCast(OpenSimObject obj) -> Constraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Constraint_safeDownCast(obj)

def Constraint_getClassName():
    """Constraint_getClassName() -> std::string const &"""
    return _simulation.Constraint_getClassName()

class SetConstraints(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::Constraint,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetConstraints, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetConstraints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetConstraints

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetConstraints_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetConstraints self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetConstraints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetConstraints_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetConstraints self) -> SetConstraints

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Constraint,OpenSim::ModelComponent > const *

        """
        return _simulation.SetConstraints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetConstraints self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Constraint,OpenSim::ModelComponent > const *

        """
        return _simulation.SetConstraints_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetConstraints
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Constraint,OpenSim::ModelComponent)> self) -> SetConstraints
        __init__(OpenSim::Set<(OpenSim::Constraint,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetConstraints

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Constraint,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetConstraints

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Constraint,OpenSim::ModelComponent)> self, SetConstraints aSet) -> SetConstraints

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Constraint,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetConstraints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetConstraints self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Constraint,OpenSim::ModelComponent > *

        """
        return _simulation.SetConstraints_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetConstraints self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetConstraints_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetConstraints self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetConstraints_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetConstraints self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Constraint,OpenSim::ModelComponent > const *

        """
        return _simulation.SetConstraints_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetConstraints self, Constraint aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Constraint const *
        aStartIndex: int

        getIndex(SetConstraints self, Constraint aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Constraint const *

        getIndex(SetConstraints self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetConstraints self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetConstraints_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetConstraints self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetConstraints_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetConstraints self, Constraint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Constraint *

        """
        return _simulation.SetConstraints_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetConstraints self, Constraint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Constraint const &

        """
        return _simulation.SetConstraints_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetConstraints self, int aIndex, Constraint aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Constraint *

        """
        return _simulation.SetConstraints_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetConstraints self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetConstraints self, Constraint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Constraint const *

        """
        return _simulation.SetConstraints_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetConstraints self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Constraint,OpenSim::ModelComponent > *

        """
        return _simulation.SetConstraints_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetConstraints self, int aIndex, Constraint aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Constraint *
        preserveGroups: bool

        set(SetConstraints self, int aIndex, Constraint aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Constraint *

        """
        return _simulation.SetConstraints_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetConstraints self, int aIndex) -> Constraint

        Parameters
        ----------
        aIndex: int

        get(SetConstraints self, std::string const & aName) -> Constraint

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetConstraints_get(self, *args)


    def contains(self, aName):
        """
        contains(SetConstraints self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetConstraints_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetConstraints self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetConstraints_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetConstraints self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Constraint,OpenSim::ModelComponent > const *

        """
        return _simulation.SetConstraints_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetConstraints self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetConstraints_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetConstraints self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetConstraints_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetConstraints self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetConstraints_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetConstraints self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetConstraints_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetConstraints self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetConstraints_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetConstraints self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetConstraints self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetConstraints_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetConstraints_swigregister = _simulation.SetConstraints_swigregister
SetConstraints_swigregister(SetConstraints)

def SetConstraints_safeDownCast(obj):
    """
    SetConstraints_safeDownCast(OpenSimObject obj) -> SetConstraints

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetConstraints_safeDownCast(obj)

def SetConstraints_getClassName():
    """SetConstraints_getClassName() -> std::string const &"""
    return _simulation.SetConstraints_getClassName()

class ModelComponentSetConstraints(SetConstraints):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Constraint)> class."""

    __swig_setmethods__ = {}
    for _s in [SetConstraints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetConstraints, name, value)
    __swig_getmethods__ = {}
    for _s in [SetConstraints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetConstraints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetConstraints

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetConstraints_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetConstraints self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetConstraints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetConstraints_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetConstraints self) -> ModelComponentSetConstraints

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Constraint > const *

        """
        return _simulation.ModelComponentSetConstraints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetConstraints self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Constraint > const *

        """
        return _simulation.ModelComponentSetConstraints_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetConstraints self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Constraint > *

        """
        return _simulation.ModelComponentSetConstraints_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::Constraint)> self) -> ModelComponentSetConstraints"""
        this = _simulation.new_ModelComponentSetConstraints()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetConstraints
    __del__ = lambda self: None
ModelComponentSetConstraints_swigregister = _simulation.ModelComponentSetConstraints_swigregister
ModelComponentSetConstraints_swigregister(ModelComponentSetConstraints)

def ModelComponentSetConstraints_safeDownCast(obj):
    """
    ModelComponentSetConstraints_safeDownCast(OpenSimObject obj) -> ModelComponentSetConstraints

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetConstraints_safeDownCast(obj)

def ModelComponentSetConstraints_getClassName():
    """ModelComponentSetConstraints_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetConstraints_getClassName()

class ConstraintSet(ModelComponentSetConstraints):
    """Proxy of C++ OpenSim::ConstraintSet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetConstraints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetConstraints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ConstraintSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ConstraintSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ConstraintSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ConstraintSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ConstraintSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ConstraintSet self) -> ConstraintSet

        Parameters
        ----------
        self: OpenSim::ConstraintSet const *

        """
        return _simulation.ConstraintSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ConstraintSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ConstraintSet const *

        """
        return _simulation.ConstraintSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ConstraintSet self) -> ConstraintSet
        __init__(OpenSim::ConstraintSet self, std::string const & file, bool updateFromXML=True) -> ConstraintSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::ConstraintSet self, std::string const & file) -> ConstraintSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_ConstraintSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ConstraintSet
    __del__ = lambda self: None
ConstraintSet_swigregister = _simulation.ConstraintSet_swigregister
ConstraintSet_swigregister(ConstraintSet)

def ConstraintSet_safeDownCast(obj):
    """
    ConstraintSet_safeDownCast(OpenSimObject obj) -> ConstraintSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ConstraintSet_safeDownCast(obj)

def ConstraintSet_getClassName():
    """ConstraintSet_getClassName() -> std::string const &"""
    return _simulation.ConstraintSet_getClassName()

class Force(ModelComponent):
    """Proxy of C++ OpenSim::Force class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Force, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Force, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Force

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Force_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Force self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Force_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Force_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Force self) -> Force

        Parameters
        ----------
        self: OpenSim::Force const *

        """
        return _simulation.Force_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Force self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Force const *

        """
        return _simulation.Force_getConcreteClassName(self)


    def copyProperty_appliesForce(self, source):
        """
        copyProperty_appliesForce(Force self, Force source)

        Parameters
        ----------
        source: OpenSim::Force::Self const &

        """
        return _simulation.Force_copyProperty_appliesForce(self, source)


    def append_appliesForce(self, value):
        """
        append_appliesForce(Force self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Force_append_appliesForce(self, value)


    def constructProperty_appliesForce(self, initValue):
        """
        constructProperty_appliesForce(Force self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Force_constructProperty_appliesForce(self, initValue)


    def get_appliesForce(self, *args):
        """
        get_appliesForce(Force self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_appliesForce(Force self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Force const *

        """
        return _simulation.Force_get_appliesForce(self, *args)


    def upd_appliesForce(self, *args):
        """
        upd_appliesForce(Force self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_appliesForce(Force self) -> bool &

        Parameters
        ----------
        self: OpenSim::Force *

        """
        return _simulation.Force_upd_appliesForce(self, *args)


    def set_appliesForce(self, *args):
        """
        set_appliesForce(Force self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_appliesForce(Force self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Force_set_appliesForce(self, *args)

    __swig_setmethods__["_has_output_potential_energy"] = _simulation.Force__has_output_potential_energy_set
    __swig_getmethods__["_has_output_potential_energy"] = _simulation.Force__has_output_potential_energy_get
    if _newclass:
        _has_output_potential_energy = _swig_property(_simulation.Force__has_output_potential_energy_get, _simulation.Force__has_output_potential_energy_set)

    def shouldBeParallelized(self):
        """
        shouldBeParallelized(Force self) -> bool

        Parameters
        ----------
        self: OpenSim::Force const *

        """
        return _simulation.Force_shouldBeParallelized(self)


    def appliesForce(self, s):
        """
        appliesForce(Force self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Force_appliesForce(self, s)


    def setAppliesForce(self, s, applyForce):
        """
        setAppliesForce(Force self, State s, bool applyForce)

        Parameters
        ----------
        s: SimTK::State &
        applyForce: bool

        """
        return _simulation.Force_setAppliesForce(self, s, applyForce)


    def getRecordLabels(self):
        """
        getRecordLabels(Force self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::Force const *

        """
        return _simulation.Force_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(Force self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Force_getRecordValues(self, state)


    def hasGeometryPath(self):
        """
        hasGeometryPath(Force self) -> bool

        Parameters
        ----------
        self: OpenSim::Force const *

        """
        return _simulation.Force_hasGeometryPath(self)

    __swig_destroy__ = _simulation.delete_Force
    __del__ = lambda self: None
Force_swigregister = _simulation.Force_swigregister
Force_swigregister(Force)

def Force_safeDownCast(obj):
    """
    Force_safeDownCast(OpenSimObject obj) -> Force

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Force_safeDownCast(obj)

def Force_getClassName():
    """Force_getClassName() -> std::string const &"""
    return _simulation.Force_getClassName()

class SetForces(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::Force,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetForces, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetForces, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetForces

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetForces_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetForces self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetForces_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetForces_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetForces self) -> SetForces

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Force,OpenSim::ModelComponent > const *

        """
        return _simulation.SetForces_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetForces self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Force,OpenSim::ModelComponent > const *

        """
        return _simulation.SetForces_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetForces
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Force,OpenSim::ModelComponent)> self) -> SetForces
        __init__(OpenSim::Set<(OpenSim::Force,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetForces

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Force,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetForces

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Force,OpenSim::ModelComponent)> self, SetForces aSet) -> SetForces

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Force,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetForces(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetForces self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Force,OpenSim::ModelComponent > *

        """
        return _simulation.SetForces_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetForces self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetForces_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetForces self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetForces_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetForces self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Force,OpenSim::ModelComponent > const *

        """
        return _simulation.SetForces_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetForces self, Force aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Force const *
        aStartIndex: int

        getIndex(SetForces self, Force aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Force const *

        getIndex(SetForces self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetForces self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetForces_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetForces self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetForces_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetForces self, Force aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Force *

        """
        return _simulation.SetForces_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetForces self, Force aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Force const &

        """
        return _simulation.SetForces_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetForces self, int aIndex, Force aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Force *

        """
        return _simulation.SetForces_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetForces self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetForces self, Force aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Force const *

        """
        return _simulation.SetForces_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetForces self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Force,OpenSim::ModelComponent > *

        """
        return _simulation.SetForces_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetForces self, int aIndex, Force aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Force *
        preserveGroups: bool

        set(SetForces self, int aIndex, Force aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Force *

        """
        return _simulation.SetForces_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetForces self, int aIndex) -> Force

        Parameters
        ----------
        aIndex: int

        get(SetForces self, std::string const & aName) -> Force

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetForces_get(self, *args)


    def contains(self, aName):
        """
        contains(SetForces self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetForces_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetForces self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetForces_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetForces self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Force,OpenSim::ModelComponent > const *

        """
        return _simulation.SetForces_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetForces self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetForces_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetForces self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetForces_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetForces self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetForces_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetForces self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetForces_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetForces self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetForces_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetForces self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetForces self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetForces_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetForces_swigregister = _simulation.SetForces_swigregister
SetForces_swigregister(SetForces)

def SetForces_safeDownCast(obj):
    """
    SetForces_safeDownCast(OpenSimObject obj) -> SetForces

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetForces_safeDownCast(obj)

def SetForces_getClassName():
    """SetForces_getClassName() -> std::string const &"""
    return _simulation.SetForces_getClassName()

class ModelComponentSetForces(SetForces):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Force)> class."""

    __swig_setmethods__ = {}
    for _s in [SetForces]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetForces, name, value)
    __swig_getmethods__ = {}
    for _s in [SetForces]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetForces, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetForces

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetForces_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetForces self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetForces_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetForces_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetForces self) -> ModelComponentSetForces

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Force > const *

        """
        return _simulation.ModelComponentSetForces_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetForces self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Force > const *

        """
        return _simulation.ModelComponentSetForces_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetForces self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Force > *

        """
        return _simulation.ModelComponentSetForces_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::Force)> self) -> ModelComponentSetForces"""
        this = _simulation.new_ModelComponentSetForces()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetForces
    __del__ = lambda self: None
ModelComponentSetForces_swigregister = _simulation.ModelComponentSetForces_swigregister
ModelComponentSetForces_swigregister(ModelComponentSetForces)

def ModelComponentSetForces_safeDownCast(obj):
    """
    ModelComponentSetForces_safeDownCast(OpenSimObject obj) -> ModelComponentSetForces

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetForces_safeDownCast(obj)

def ModelComponentSetForces_getClassName():
    """ModelComponentSetForces_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetForces_getClassName()

class ForceSet(ModelComponentSetForces):
    """Proxy of C++ OpenSim::ForceSet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetForces]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetForces]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForceSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ForceSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ForceSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ForceSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ForceSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ForceSet self) -> ForceSet

        Parameters
        ----------
        self: OpenSim::ForceSet const *

        """
        return _simulation.ForceSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForceSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ForceSet const *

        """
        return _simulation.ForceSet_getConcreteClassName(self)


    def extendConnectToModel(self, aModel):
        """
        extendConnectToModel(ForceSet self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.ForceSet_extendConnectToModel(self, aModel)


    def remove(self, aIndex):
        """
        remove(ForceSet self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.ForceSet_remove(self, aIndex)


    def appendNative(self, aForce):
        """
        appendNative(ForceSet self, Force aForce) -> bool

        Parameters
        ----------
        aForce: OpenSim::Force *

        """
        return _simulation.ForceSet_appendNative(self, aForce)


    def append(self, aForceSet, aAllowDuplicateNames=False):
        """
        append(ForceSet self, ForceSet aForceSet, bool aAllowDuplicateNames=False) -> bool

        Parameters
        ----------
        aForceSet: OpenSim::ForceSet &
        aAllowDuplicateNames: bool

        append(ForceSet self, ForceSet aForceSet) -> bool

        Parameters
        ----------
        aForceSet: OpenSim::ForceSet &

        """
        return _simulation.ForceSet_append(self, aForceSet, aAllowDuplicateNames)


    def set(self, aIndex, aForce, preserveGroups=False):
        """
        set(ForceSet self, int aIndex, Force aForce, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aForce: OpenSim::Force *
        preserveGroups: bool

        set(ForceSet self, int aIndex, Force aForce) -> bool

        Parameters
        ----------
        aIndex: int
        aForce: OpenSim::Force *

        """
        return _simulation.ForceSet_set(self, aIndex, aForce, preserveGroups)


    def insert(self, aIndex, aObject):
        """
        insert(ForceSet self, int aIndex, Force aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Force *

        """
        return _simulation.ForceSet_insert(self, aIndex, aObject)


    def getActuators(self):
        """
        getActuators(ForceSet self) -> SetActuators

        Parameters
        ----------
        self: OpenSim::ForceSet const *

        """
        return _simulation.ForceSet_getActuators(self)


    def updActuators(self):
        """
        updActuators(ForceSet self) -> SetActuators

        Parameters
        ----------
        self: OpenSim::ForceSet *

        """
        return _simulation.ForceSet_updActuators(self)


    def getMuscles(self):
        """
        getMuscles(ForceSet self) -> SetMuscles

        Parameters
        ----------
        self: OpenSim::ForceSet const *

        """
        return _simulation.ForceSet_getMuscles(self)


    def updMuscles(self):
        """
        updMuscles(ForceSet self) -> SetMuscles

        Parameters
        ----------
        self: OpenSim::ForceSet *

        """
        return _simulation.ForceSet_updMuscles(self)


    def getStateVariableNames(self, rNames):
        """
        getStateVariableNames(ForceSet self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.ForceSet_getStateVariableNames(self, rNames)


    def check(self):
        """
        check(ForceSet self) -> bool

        Parameters
        ----------
        self: OpenSim::ForceSet const *

        """
        return _simulation.ForceSet_check(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ForceSet self) -> ForceSet
        __init__(OpenSim::ForceSet self, std::string const & file, bool updateFromXML=True) -> ForceSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::ForceSet self, std::string const & file) -> ForceSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_ForceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def adoptAndAppend(self, aForce):
        aForce._markAdopted()
        return super(ForceSet, self).adoptAndAppend(aForce)


    def append(self, aForce):
        aForce._markAdopted()
        return self.appendNative(aForce)

    __swig_destroy__ = _simulation.delete_ForceSet
    __del__ = lambda self: None
ForceSet_swigregister = _simulation.ForceSet_swigregister
ForceSet_swigregister(ForceSet)

def ForceSet_safeDownCast(obj):
    """
    ForceSet_safeDownCast(OpenSimObject obj) -> ForceSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ForceSet_safeDownCast(obj)

def ForceSet_getClassName():
    """ForceSet_getClassName() -> std::string const &"""
    return _simulation.ForceSet_getClassName()

class ExternalForce(Force):
    """Proxy of C++ OpenSim::ExternalForce class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExternalForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ExternalForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ExternalForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ExternalForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ExternalForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ExternalForce self) -> ExternalForce

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getConcreteClassName(self)


    def copyProperty_applied_to_body(self, source):
        """
        copyProperty_applied_to_body(ExternalForce self, ExternalForce source)

        Parameters
        ----------
        source: OpenSim::ExternalForce::Self const &

        """
        return _simulation.ExternalForce_copyProperty_applied_to_body(self, source)


    def append_applied_to_body(self, value):
        """
        append_applied_to_body(ExternalForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_append_applied_to_body(self, value)


    def constructProperty_applied_to_body(self, initValue):
        """
        constructProperty_applied_to_body(ExternalForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExternalForce_constructProperty_applied_to_body(self, initValue)


    def get_applied_to_body(self, *args):
        """
        get_applied_to_body(ExternalForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_applied_to_body(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_get_applied_to_body(self, *args)


    def upd_applied_to_body(self, *args):
        """
        upd_applied_to_body(ExternalForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_applied_to_body(ExternalForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExternalForce *

        """
        return _simulation.ExternalForce_upd_applied_to_body(self, *args)


    def set_applied_to_body(self, *args):
        """
        set_applied_to_body(ExternalForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_applied_to_body(ExternalForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_set_applied_to_body(self, *args)


    def copyProperty_force_expressed_in_body(self, source):
        """
        copyProperty_force_expressed_in_body(ExternalForce self, ExternalForce source)

        Parameters
        ----------
        source: OpenSim::ExternalForce::Self const &

        """
        return _simulation.ExternalForce_copyProperty_force_expressed_in_body(self, source)


    def append_force_expressed_in_body(self, value):
        """
        append_force_expressed_in_body(ExternalForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_append_force_expressed_in_body(self, value)


    def constructProperty_force_expressed_in_body(self, initValue):
        """
        constructProperty_force_expressed_in_body(ExternalForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExternalForce_constructProperty_force_expressed_in_body(self, initValue)


    def get_force_expressed_in_body(self, *args):
        """
        get_force_expressed_in_body(ExternalForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_force_expressed_in_body(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_get_force_expressed_in_body(self, *args)


    def upd_force_expressed_in_body(self, *args):
        """
        upd_force_expressed_in_body(ExternalForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_force_expressed_in_body(ExternalForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExternalForce *

        """
        return _simulation.ExternalForce_upd_force_expressed_in_body(self, *args)


    def set_force_expressed_in_body(self, *args):
        """
        set_force_expressed_in_body(ExternalForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_force_expressed_in_body(ExternalForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_set_force_expressed_in_body(self, *args)


    def copyProperty_point_expressed_in_body(self, source):
        """
        copyProperty_point_expressed_in_body(ExternalForce self, ExternalForce source)

        Parameters
        ----------
        source: OpenSim::ExternalForce::Self const &

        """
        return _simulation.ExternalForce_copyProperty_point_expressed_in_body(self, source)


    def append_point_expressed_in_body(self, value):
        """
        append_point_expressed_in_body(ExternalForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_append_point_expressed_in_body(self, value)


    def constructProperty_point_expressed_in_body(self, initValue):
        """
        constructProperty_point_expressed_in_body(ExternalForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExternalForce_constructProperty_point_expressed_in_body(self, initValue)


    def get_point_expressed_in_body(self, *args):
        """
        get_point_expressed_in_body(ExternalForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_point_expressed_in_body(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_get_point_expressed_in_body(self, *args)


    def upd_point_expressed_in_body(self, *args):
        """
        upd_point_expressed_in_body(ExternalForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_point_expressed_in_body(ExternalForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExternalForce *

        """
        return _simulation.ExternalForce_upd_point_expressed_in_body(self, *args)


    def set_point_expressed_in_body(self, *args):
        """
        set_point_expressed_in_body(ExternalForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_point_expressed_in_body(ExternalForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_set_point_expressed_in_body(self, *args)


    def copyProperty_force_identifier(self, source):
        """
        copyProperty_force_identifier(ExternalForce self, ExternalForce source)

        Parameters
        ----------
        source: OpenSim::ExternalForce::Self const &

        """
        return _simulation.ExternalForce_copyProperty_force_identifier(self, source)


    def append_force_identifier(self, value):
        """
        append_force_identifier(ExternalForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_append_force_identifier(self, value)


    def constructProperty_force_identifier(self, *args):
        """
        constructProperty_force_identifier(ExternalForce self)
        constructProperty_force_identifier(ExternalForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExternalForce_constructProperty_force_identifier(self, *args)


    def get_force_identifier(self, *args):
        """
        get_force_identifier(ExternalForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_force_identifier(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_get_force_identifier(self, *args)


    def upd_force_identifier(self, *args):
        """
        upd_force_identifier(ExternalForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_force_identifier(ExternalForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExternalForce *

        """
        return _simulation.ExternalForce_upd_force_identifier(self, *args)


    def set_force_identifier(self, *args):
        """
        set_force_identifier(ExternalForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_force_identifier(ExternalForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_set_force_identifier(self, *args)


    def copyProperty_point_identifier(self, source):
        """
        copyProperty_point_identifier(ExternalForce self, ExternalForce source)

        Parameters
        ----------
        source: OpenSim::ExternalForce::Self const &

        """
        return _simulation.ExternalForce_copyProperty_point_identifier(self, source)


    def append_point_identifier(self, value):
        """
        append_point_identifier(ExternalForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_append_point_identifier(self, value)


    def constructProperty_point_identifier(self, *args):
        """
        constructProperty_point_identifier(ExternalForce self)
        constructProperty_point_identifier(ExternalForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExternalForce_constructProperty_point_identifier(self, *args)


    def get_point_identifier(self, *args):
        """
        get_point_identifier(ExternalForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_point_identifier(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_get_point_identifier(self, *args)


    def upd_point_identifier(self, *args):
        """
        upd_point_identifier(ExternalForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_point_identifier(ExternalForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExternalForce *

        """
        return _simulation.ExternalForce_upd_point_identifier(self, *args)


    def set_point_identifier(self, *args):
        """
        set_point_identifier(ExternalForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_point_identifier(ExternalForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_set_point_identifier(self, *args)


    def copyProperty_torque_identifier(self, source):
        """
        copyProperty_torque_identifier(ExternalForce self, ExternalForce source)

        Parameters
        ----------
        source: OpenSim::ExternalForce::Self const &

        """
        return _simulation.ExternalForce_copyProperty_torque_identifier(self, source)


    def append_torque_identifier(self, value):
        """
        append_torque_identifier(ExternalForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_append_torque_identifier(self, value)


    def constructProperty_torque_identifier(self, *args):
        """
        constructProperty_torque_identifier(ExternalForce self)
        constructProperty_torque_identifier(ExternalForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExternalForce_constructProperty_torque_identifier(self, *args)


    def get_torque_identifier(self, *args):
        """
        get_torque_identifier(ExternalForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_torque_identifier(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_get_torque_identifier(self, *args)


    def upd_torque_identifier(self, *args):
        """
        upd_torque_identifier(ExternalForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_torque_identifier(ExternalForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExternalForce *

        """
        return _simulation.ExternalForce_upd_torque_identifier(self, *args)


    def set_torque_identifier(self, *args):
        """
        set_torque_identifier(ExternalForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_torque_identifier(ExternalForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_set_torque_identifier(self, *args)


    def copyProperty_data_source_name(self, source):
        """
        copyProperty_data_source_name(ExternalForce self, ExternalForce source)

        Parameters
        ----------
        source: OpenSim::ExternalForce::Self const &

        """
        return _simulation.ExternalForce_copyProperty_data_source_name(self, source)


    def append_data_source_name(self, value):
        """
        append_data_source_name(ExternalForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_append_data_source_name(self, value)


    def constructProperty_data_source_name(self, *args):
        """
        constructProperty_data_source_name(ExternalForce self)
        constructProperty_data_source_name(ExternalForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExternalForce_constructProperty_data_source_name(self, *args)


    def get_data_source_name(self, *args):
        """
        get_data_source_name(ExternalForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_data_source_name(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_get_data_source_name(self, *args)


    def upd_data_source_name(self, *args):
        """
        upd_data_source_name(ExternalForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_data_source_name(ExternalForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExternalForce *

        """
        return _simulation.ExternalForce_upd_data_source_name(self, *args)


    def set_data_source_name(self, *args):
        """
        set_data_source_name(ExternalForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_data_source_name(ExternalForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExternalForce_set_data_source_name(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExternalForce self) -> ExternalForce
        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier, std::string const & torqueIdentifier, std::string const & appliedToBodyName, std::string const & forceExpressedInBodyName, std::string const & pointExpressedInBodyName) -> ExternalForce

        Parameters
        ----------
        dataSource: OpenSim::Storage const &
        forceIdentifier: std::string const &
        pointIdentifier: std::string const &
        torqueIdentifier: std::string const &
        appliedToBodyName: std::string const &
        forceExpressedInBodyName: std::string const &
        pointExpressedInBodyName: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier, std::string const & torqueIdentifier, std::string const & appliedToBodyName, std::string const & forceExpressedInBodyName) -> ExternalForce

        Parameters
        ----------
        dataSource: OpenSim::Storage const &
        forceIdentifier: std::string const &
        pointIdentifier: std::string const &
        torqueIdentifier: std::string const &
        appliedToBodyName: std::string const &
        forceExpressedInBodyName: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier, std::string const & torqueIdentifier, std::string const & appliedToBodyName) -> ExternalForce

        Parameters
        ----------
        dataSource: OpenSim::Storage const &
        forceIdentifier: std::string const &
        pointIdentifier: std::string const &
        torqueIdentifier: std::string const &
        appliedToBodyName: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier, std::string const & torqueIdentifier) -> ExternalForce

        Parameters
        ----------
        dataSource: OpenSim::Storage const &
        forceIdentifier: std::string const &
        pointIdentifier: std::string const &
        torqueIdentifier: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier, std::string const & pointIdentifier) -> ExternalForce

        Parameters
        ----------
        dataSource: OpenSim::Storage const &
        forceIdentifier: std::string const &
        pointIdentifier: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource, std::string const & forceIdentifier) -> ExternalForce

        Parameters
        ----------
        dataSource: OpenSim::Storage const &
        forceIdentifier: std::string const &

        __init__(OpenSim::ExternalForce self, Storage dataSource) -> ExternalForce

        Parameters
        ----------
        dataSource: OpenSim::Storage const &

        __init__(OpenSim::ExternalForce self, SimTK::Xml::Element & aNode) -> ExternalForce

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        this = _simulation.new_ExternalForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setDataSource(self, dataSource):
        """
        setDataSource(ExternalForce self, Storage dataSource)

        Parameters
        ----------
        dataSource: OpenSim::Storage const &

        """
        return _simulation.ExternalForce_setDataSource(self, dataSource)


    def getDataSourceName(self):
        """
        getDataSourceName(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getDataSourceName(self)


    def setAppliedToBodyName(self, applyToName):
        """
        setAppliedToBodyName(ExternalForce self, std::string const & applyToName)

        Parameters
        ----------
        applyToName: std::string const &

        """
        return _simulation.ExternalForce_setAppliedToBodyName(self, applyToName)


    def getAppliedToBodyName(self):
        """
        getAppliedToBodyName(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getAppliedToBodyName(self)


    def setPointExpressedInBodyName(self, pointInBodyName):
        """
        setPointExpressedInBodyName(ExternalForce self, std::string const & pointInBodyName)

        Parameters
        ----------
        pointInBodyName: std::string const &

        """
        return _simulation.ExternalForce_setPointExpressedInBodyName(self, pointInBodyName)


    def getPointExpressedInBodyName(self):
        """
        getPointExpressedInBodyName(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getPointExpressedInBodyName(self)


    def setForceExpressedInBodyName(self, forceInBodyName):
        """
        setForceExpressedInBodyName(ExternalForce self, std::string const & forceInBodyName)

        Parameters
        ----------
        forceInBodyName: std::string const &

        """
        return _simulation.ExternalForce_setForceExpressedInBodyName(self, forceInBodyName)


    def getForceExpressedInBodyName(self):
        """
        getForceExpressedInBodyName(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getForceExpressedInBodyName(self)


    def setForceIdentifier(self, aForceIdentifier):
        """
        setForceIdentifier(ExternalForce self, std::string const aForceIdentifier)

        Parameters
        ----------
        aForceIdentifier: std::string const

        """
        return _simulation.ExternalForce_setForceIdentifier(self, aForceIdentifier)


    def setPointIdentifier(self, aPointIdentifier):
        """
        setPointIdentifier(ExternalForce self, std::string const aPointIdentifier)

        Parameters
        ----------
        aPointIdentifier: std::string const

        """
        return _simulation.ExternalForce_setPointIdentifier(self, aPointIdentifier)


    def setTorqueIdentifier(self, aTorqueIdentifier):
        """
        setTorqueIdentifier(ExternalForce self, std::string const aTorqueIdentifier)

        Parameters
        ----------
        aTorqueIdentifier: std::string const

        """
        return _simulation.ExternalForce_setTorqueIdentifier(self, aTorqueIdentifier)


    def getForceIdentifier(self):
        """
        getForceIdentifier(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getForceIdentifier(self)


    def getPointIdentifier(self):
        """
        getPointIdentifier(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getPointIdentifier(self)


    def getTorqueIdentifier(self):
        """
        getTorqueIdentifier(ExternalForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getTorqueIdentifier(self)


    def getForceAtTime(self, aTime):
        """
        getForceAtTime(ExternalForce self, double aTime) -> Vec3

        Parameters
        ----------
        aTime: double

        """
        return _simulation.ExternalForce_getForceAtTime(self, aTime)


    def getPointAtTime(self, aTime):
        """
        getPointAtTime(ExternalForce self, double aTime) -> Vec3

        Parameters
        ----------
        aTime: double

        """
        return _simulation.ExternalForce_getPointAtTime(self, aTime)


    def getTorqueAtTime(self, aTime):
        """
        getTorqueAtTime(ExternalForce self, double aTime) -> Vec3

        Parameters
        ----------
        aTime: double

        """
        return _simulation.ExternalForce_getTorqueAtTime(self, aTime)


    def getRecordLabels(self):
        """
        getRecordLabels(ExternalForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ExternalForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ExternalForce_getRecordValues(self, state)


    def appliesForce(self):
        """
        appliesForce(ExternalForce self) -> bool

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_appliesForce(self)


    def specifiesPoint(self):
        """
        specifiesPoint(ExternalForce self) -> bool

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_specifiesPoint(self)


    def appliesTorque(self):
        """
        appliesTorque(ExternalForce self) -> bool

        Parameters
        ----------
        self: OpenSim::ExternalForce const *

        """
        return _simulation.ExternalForce_appliesTorque(self)

    __swig_destroy__ = _simulation.delete_ExternalForce
    __del__ = lambda self: None
ExternalForce_swigregister = _simulation.ExternalForce_swigregister
ExternalForce_swigregister(ExternalForce)

def ExternalForce_safeDownCast(obj):
    """
    ExternalForce_safeDownCast(OpenSimObject obj) -> ExternalForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ExternalForce_safeDownCast(obj)

def ExternalForce_getClassName():
    """ExternalForce_getClassName() -> std::string const &"""
    return _simulation.ExternalForce_getClassName()

class SetExternalForces(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::ExternalForce,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetExternalForces, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetExternalForces, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetExternalForces

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetExternalForces_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetExternalForces self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetExternalForces_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetExternalForces_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetExternalForces self) -> SetExternalForces

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ExternalForce,OpenSim::ModelComponent > const *

        """
        return _simulation.SetExternalForces_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetExternalForces self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ExternalForce,OpenSim::ModelComponent > const *

        """
        return _simulation.SetExternalForces_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetExternalForces
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::ExternalForce,OpenSim::ModelComponent)> self) -> SetExternalForces
        __init__(OpenSim::Set<(OpenSim::ExternalForce,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetExternalForces

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::ExternalForce,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetExternalForces

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::ExternalForce,OpenSim::ModelComponent)> self, SetExternalForces aSet) -> SetExternalForces

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::ExternalForce,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetExternalForces(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetExternalForces self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ExternalForce,OpenSim::ModelComponent > *

        """
        return _simulation.SetExternalForces_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetExternalForces self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetExternalForces_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetExternalForces self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetExternalForces_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetExternalForces self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ExternalForce,OpenSim::ModelComponent > const *

        """
        return _simulation.SetExternalForces_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetExternalForces self, ExternalForce aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ExternalForce const *
        aStartIndex: int

        getIndex(SetExternalForces self, ExternalForce aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ExternalForce const *

        getIndex(SetExternalForces self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetExternalForces self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetExternalForces_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetExternalForces self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetExternalForces_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetExternalForces self, ExternalForce aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ExternalForce *

        """
        return _simulation.SetExternalForces_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetExternalForces self, ExternalForce aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ExternalForce const &

        """
        return _simulation.SetExternalForces_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetExternalForces self, int aIndex, ExternalForce aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ExternalForce *

        """
        return _simulation.SetExternalForces_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetExternalForces self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetExternalForces self, ExternalForce aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ExternalForce const *

        """
        return _simulation.SetExternalForces_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetExternalForces self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ExternalForce,OpenSim::ModelComponent > *

        """
        return _simulation.SetExternalForces_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetExternalForces self, int aIndex, ExternalForce aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ExternalForce *
        preserveGroups: bool

        set(SetExternalForces self, int aIndex, ExternalForce aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ExternalForce *

        """
        return _simulation.SetExternalForces_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetExternalForces self, int aIndex) -> ExternalForce

        Parameters
        ----------
        aIndex: int

        get(SetExternalForces self, std::string const & aName) -> ExternalForce

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetExternalForces_get(self, *args)


    def contains(self, aName):
        """
        contains(SetExternalForces self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetExternalForces_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetExternalForces self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetExternalForces_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetExternalForces self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ExternalForce,OpenSim::ModelComponent > const *

        """
        return _simulation.SetExternalForces_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetExternalForces self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetExternalForces_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetExternalForces self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetExternalForces_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetExternalForces self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetExternalForces_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetExternalForces self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetExternalForces_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetExternalForces self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetExternalForces_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetExternalForces self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetExternalForces self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetExternalForces_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetExternalForces_swigregister = _simulation.SetExternalForces_swigregister
SetExternalForces_swigregister(SetExternalForces)

def SetExternalForces_safeDownCast(obj):
    """
    SetExternalForces_safeDownCast(OpenSimObject obj) -> SetExternalForces

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetExternalForces_safeDownCast(obj)

def SetExternalForces_getClassName():
    """SetExternalForces_getClassName() -> std::string const &"""
    return _simulation.SetExternalForces_getClassName()

class ModelComponentSetExternalForces(SetExternalForces):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::ExternalForce)> class."""

    __swig_setmethods__ = {}
    for _s in [SetExternalForces]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetExternalForces, name, value)
    __swig_getmethods__ = {}
    for _s in [SetExternalForces]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetExternalForces, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetExternalForces

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetExternalForces_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetExternalForces self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetExternalForces_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetExternalForces_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetExternalForces self) -> ModelComponentSetExternalForces

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ExternalForce > const *

        """
        return _simulation.ModelComponentSetExternalForces_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetExternalForces self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ExternalForce > const *

        """
        return _simulation.ModelComponentSetExternalForces_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetExternalForces self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ExternalForce > *

        """
        return _simulation.ModelComponentSetExternalForces_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::ExternalForce)> self) -> ModelComponentSetExternalForces"""
        this = _simulation.new_ModelComponentSetExternalForces()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetExternalForces
    __del__ = lambda self: None
ModelComponentSetExternalForces_swigregister = _simulation.ModelComponentSetExternalForces_swigregister
ModelComponentSetExternalForces_swigregister(ModelComponentSetExternalForces)

def ModelComponentSetExternalForces_safeDownCast(obj):
    """
    ModelComponentSetExternalForces_safeDownCast(OpenSimObject obj) -> ModelComponentSetExternalForces

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetExternalForces_safeDownCast(obj)

def ModelComponentSetExternalForces_getClassName():
    """ModelComponentSetExternalForces_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetExternalForces_getClassName()

class TwoFrameLinkerForce(Force):
    """Proxy of C++ OpenSim::TwoFrameLinker<(OpenSim::Force,OpenSim::PhysicalFrame)> class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoFrameLinkerForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoFrameLinkerForce, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TwoFrameLinkerForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.TwoFrameLinkerForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TwoFrameLinkerForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.TwoFrameLinkerForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.TwoFrameLinkerForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TwoFrameLinkerForce self) -> TwoFrameLinkerForce

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Force,OpenSim::PhysicalFrame > const *

        """
        return _simulation.TwoFrameLinkerForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TwoFrameLinkerForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Force,OpenSim::PhysicalFrame > const *

        """
        return _simulation.TwoFrameLinkerForce_getConcreteClassName(self)


    def copyProperty_frames(self, source):
        """
        copyProperty_frames(TwoFrameLinkerForce self, TwoFrameLinkerForce source)

        Parameters
        ----------
        source: OpenSim::TwoFrameLinker< OpenSim::Force,OpenSim::PhysicalFrame >::Self const &

        """
        return _simulation.TwoFrameLinkerForce_copyProperty_frames(self, source)


    def get_frames(self, i):
        """
        get_frames(TwoFrameLinkerForce self, int i) -> PhysicalFrame

        Parameters
        ----------
        i: int

        """
        return _simulation.TwoFrameLinkerForce_get_frames(self, i)


    def upd_frames(self, i):
        """
        upd_frames(TwoFrameLinkerForce self, int i) -> PhysicalFrame

        Parameters
        ----------
        i: int

        """
        return _simulation.TwoFrameLinkerForce_upd_frames(self, i)


    def set_frames(self, i, value):
        """
        set_frames(TwoFrameLinkerForce self, int i, PhysicalFrame value)

        Parameters
        ----------
        i: int
        value: OpenSim::PhysicalFrame const &

        """
        return _simulation.TwoFrameLinkerForce_set_frames(self, i, value)


    def append_frames(self, value):
        """
        append_frames(TwoFrameLinkerForce self, PhysicalFrame value) -> int

        Parameters
        ----------
        value: OpenSim::PhysicalFrame const &

        """
        return _simulation.TwoFrameLinkerForce_append_frames(self, value)


    def constructProperty_frames(self):
        """
        constructProperty_frames(TwoFrameLinkerForce self)

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Force,OpenSim::PhysicalFrame > *

        """
        return _simulation.TwoFrameLinkerForce_constructProperty_frames(self)

    __swig_setmethods__["PropertyIndex_socket_frame1"] = _simulation.TwoFrameLinkerForce_PropertyIndex_socket_frame1_set
    __swig_getmethods__["PropertyIndex_socket_frame1"] = _simulation.TwoFrameLinkerForce_PropertyIndex_socket_frame1_get
    if _newclass:
        PropertyIndex_socket_frame1 = _swig_property(_simulation.TwoFrameLinkerForce_PropertyIndex_socket_frame1_get, _simulation.TwoFrameLinkerForce_PropertyIndex_socket_frame1_set)

    def connectSocket_frame1(self, object):
        """
        connectSocket_frame1(TwoFrameLinkerForce self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.TwoFrameLinkerForce_connectSocket_frame1(self, object)

    __swig_setmethods__["PropertyIndex_socket_frame2"] = _simulation.TwoFrameLinkerForce_PropertyIndex_socket_frame2_set
    __swig_getmethods__["PropertyIndex_socket_frame2"] = _simulation.TwoFrameLinkerForce_PropertyIndex_socket_frame2_get
    if _newclass:
        PropertyIndex_socket_frame2 = _swig_property(_simulation.TwoFrameLinkerForce_PropertyIndex_socket_frame2_get, _simulation.TwoFrameLinkerForce_PropertyIndex_socket_frame2_set)

    def connectSocket_frame2(self, object):
        """
        connectSocket_frame2(TwoFrameLinkerForce self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.TwoFrameLinkerForce_connectSocket_frame2(self, object)


    def getFrame1(self):
        """
        getFrame1(TwoFrameLinkerForce self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Force,OpenSim::PhysicalFrame > const *

        """
        return _simulation.TwoFrameLinkerForce_getFrame1(self)


    def getFrame2(self):
        """
        getFrame2(TwoFrameLinkerForce self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Force,OpenSim::PhysicalFrame > const *

        """
        return _simulation.TwoFrameLinkerForce_getFrame2(self)


    def computeRelativeOffset(self, s):
        """
        computeRelativeOffset(TwoFrameLinkerForce self, State s) -> Transform

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TwoFrameLinkerForce_computeRelativeOffset(self, s)


    def computeRelativeVelocity(self, s):
        """
        computeRelativeVelocity(TwoFrameLinkerForce self, State s) -> SpatialVec

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TwoFrameLinkerForce_computeRelativeVelocity(self, s)


    def computeDeflection(self, s):
        """
        computeDeflection(TwoFrameLinkerForce self, State s) -> Vec6

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TwoFrameLinkerForce_computeDeflection(self, s)


    def computeDeflectionRate(self, s):
        """
        computeDeflectionRate(TwoFrameLinkerForce self, State s) -> Vec6

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TwoFrameLinkerForce_computeDeflectionRate(self, s)

    __swig_destroy__ = _simulation.delete_TwoFrameLinkerForce
    __del__ = lambda self: None
TwoFrameLinkerForce_swigregister = _simulation.TwoFrameLinkerForce_swigregister
TwoFrameLinkerForce_swigregister(TwoFrameLinkerForce)

def TwoFrameLinkerForce_safeDownCast(obj):
    """
    TwoFrameLinkerForce_safeDownCast(OpenSimObject obj) -> TwoFrameLinkerForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.TwoFrameLinkerForce_safeDownCast(obj)

def TwoFrameLinkerForce_getClassName():
    """TwoFrameLinkerForce_getClassName() -> std::string const &"""
    return _simulation.TwoFrameLinkerForce_getClassName()

class TwoFrameLinkerConstraint(Constraint):
    """Proxy of C++ OpenSim::TwoFrameLinker<(OpenSim::Constraint,OpenSim::PhysicalFrame)> class."""

    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoFrameLinkerConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoFrameLinkerConstraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TwoFrameLinkerConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.TwoFrameLinkerConstraint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TwoFrameLinkerConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.TwoFrameLinkerConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.TwoFrameLinkerConstraint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TwoFrameLinkerConstraint self) -> TwoFrameLinkerConstraint

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Constraint,OpenSim::PhysicalFrame > const *

        """
        return _simulation.TwoFrameLinkerConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TwoFrameLinkerConstraint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Constraint,OpenSim::PhysicalFrame > const *

        """
        return _simulation.TwoFrameLinkerConstraint_getConcreteClassName(self)


    def copyProperty_frames(self, source):
        """
        copyProperty_frames(TwoFrameLinkerConstraint self, TwoFrameLinkerConstraint source)

        Parameters
        ----------
        source: OpenSim::TwoFrameLinker< OpenSim::Constraint,OpenSim::PhysicalFrame >::Self const &

        """
        return _simulation.TwoFrameLinkerConstraint_copyProperty_frames(self, source)


    def get_frames(self, i):
        """
        get_frames(TwoFrameLinkerConstraint self, int i) -> PhysicalFrame

        Parameters
        ----------
        i: int

        """
        return _simulation.TwoFrameLinkerConstraint_get_frames(self, i)


    def upd_frames(self, i):
        """
        upd_frames(TwoFrameLinkerConstraint self, int i) -> PhysicalFrame

        Parameters
        ----------
        i: int

        """
        return _simulation.TwoFrameLinkerConstraint_upd_frames(self, i)


    def set_frames(self, i, value):
        """
        set_frames(TwoFrameLinkerConstraint self, int i, PhysicalFrame value)

        Parameters
        ----------
        i: int
        value: OpenSim::PhysicalFrame const &

        """
        return _simulation.TwoFrameLinkerConstraint_set_frames(self, i, value)


    def append_frames(self, value):
        """
        append_frames(TwoFrameLinkerConstraint self, PhysicalFrame value) -> int

        Parameters
        ----------
        value: OpenSim::PhysicalFrame const &

        """
        return _simulation.TwoFrameLinkerConstraint_append_frames(self, value)


    def constructProperty_frames(self):
        """
        constructProperty_frames(TwoFrameLinkerConstraint self)

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Constraint,OpenSim::PhysicalFrame > *

        """
        return _simulation.TwoFrameLinkerConstraint_constructProperty_frames(self)

    __swig_setmethods__["PropertyIndex_socket_frame1"] = _simulation.TwoFrameLinkerConstraint_PropertyIndex_socket_frame1_set
    __swig_getmethods__["PropertyIndex_socket_frame1"] = _simulation.TwoFrameLinkerConstraint_PropertyIndex_socket_frame1_get
    if _newclass:
        PropertyIndex_socket_frame1 = _swig_property(_simulation.TwoFrameLinkerConstraint_PropertyIndex_socket_frame1_get, _simulation.TwoFrameLinkerConstraint_PropertyIndex_socket_frame1_set)

    def connectSocket_frame1(self, object):
        """
        connectSocket_frame1(TwoFrameLinkerConstraint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.TwoFrameLinkerConstraint_connectSocket_frame1(self, object)

    __swig_setmethods__["PropertyIndex_socket_frame2"] = _simulation.TwoFrameLinkerConstraint_PropertyIndex_socket_frame2_set
    __swig_getmethods__["PropertyIndex_socket_frame2"] = _simulation.TwoFrameLinkerConstraint_PropertyIndex_socket_frame2_get
    if _newclass:
        PropertyIndex_socket_frame2 = _swig_property(_simulation.TwoFrameLinkerConstraint_PropertyIndex_socket_frame2_get, _simulation.TwoFrameLinkerConstraint_PropertyIndex_socket_frame2_set)

    def connectSocket_frame2(self, object):
        """
        connectSocket_frame2(TwoFrameLinkerConstraint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.TwoFrameLinkerConstraint_connectSocket_frame2(self, object)


    def getFrame1(self):
        """
        getFrame1(TwoFrameLinkerConstraint self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Constraint,OpenSim::PhysicalFrame > const *

        """
        return _simulation.TwoFrameLinkerConstraint_getFrame1(self)


    def getFrame2(self):
        """
        getFrame2(TwoFrameLinkerConstraint self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::TwoFrameLinker< OpenSim::Constraint,OpenSim::PhysicalFrame > const *

        """
        return _simulation.TwoFrameLinkerConstraint_getFrame2(self)


    def computeRelativeOffset(self, s):
        """
        computeRelativeOffset(TwoFrameLinkerConstraint self, State s) -> Transform

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TwoFrameLinkerConstraint_computeRelativeOffset(self, s)


    def computeRelativeVelocity(self, s):
        """
        computeRelativeVelocity(TwoFrameLinkerConstraint self, State s) -> SpatialVec

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TwoFrameLinkerConstraint_computeRelativeVelocity(self, s)


    def computeDeflection(self, s):
        """
        computeDeflection(TwoFrameLinkerConstraint self, State s) -> Vec6

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TwoFrameLinkerConstraint_computeDeflection(self, s)


    def computeDeflectionRate(self, s):
        """
        computeDeflectionRate(TwoFrameLinkerConstraint self, State s) -> Vec6

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.TwoFrameLinkerConstraint_computeDeflectionRate(self, s)

    __swig_destroy__ = _simulation.delete_TwoFrameLinkerConstraint
    __del__ = lambda self: None
TwoFrameLinkerConstraint_swigregister = _simulation.TwoFrameLinkerConstraint_swigregister
TwoFrameLinkerConstraint_swigregister(TwoFrameLinkerConstraint)

def TwoFrameLinkerConstraint_safeDownCast(obj):
    """
    TwoFrameLinkerConstraint_safeDownCast(OpenSimObject obj) -> TwoFrameLinkerConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.TwoFrameLinkerConstraint_safeDownCast(obj)

def TwoFrameLinkerConstraint_getClassName():
    """TwoFrameLinkerConstraint_getClassName() -> std::string const &"""
    return _simulation.TwoFrameLinkerConstraint_getClassName()

class FreeJoint(Joint):
    """Proxy of C++ OpenSim::FreeJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreeJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FreeJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FreeJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.FreeJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(FreeJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.FreeJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.FreeJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(FreeJoint self) -> FreeJoint

        Parameters
        ----------
        self: OpenSim::FreeJoint const *

        """
        return _simulation.FreeJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FreeJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::FreeJoint const *

        """
        return _simulation.FreeJoint_getConcreteClassName(self)

    Coord_Rotation1X = _simulation.FreeJoint_Coord_Rotation1X
    Coord_Rotation2Y = _simulation.FreeJoint_Coord_Rotation2Y
    Coord_Rotation3Z = _simulation.FreeJoint_Coord_Rotation3Z
    Coord_TranslationX = _simulation.FreeJoint_Coord_TranslationX
    Coord_TranslationY = _simulation.FreeJoint_Coord_TranslationY
    Coord_TranslationZ = _simulation.FreeJoint_Coord_TranslationZ

    def getCoordinate(self, *args):
        """
        getCoordinate(FreeJoint self) -> Coordinate
        getCoordinate(FreeJoint self, OpenSim::FreeJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::FreeJoint::Coord

        """
        return _simulation.FreeJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(FreeJoint self) -> Coordinate
        updCoordinate(FreeJoint self, OpenSim::FreeJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::FreeJoint::Coord

        """
        return _simulation.FreeJoint_updCoordinate(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FreeJoint self) -> FreeJoint
        __init__(OpenSim::FreeJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child) -> FreeJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &

        __init__(OpenSim::FreeJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) -> FreeJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &

        """
        this = _simulation.new_FreeJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_FreeJoint
    __del__ = lambda self: None
FreeJoint_swigregister = _simulation.FreeJoint_swigregister
FreeJoint_swigregister(FreeJoint)

def FreeJoint_safeDownCast(obj):
    """
    FreeJoint_safeDownCast(OpenSimObject obj) -> FreeJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.FreeJoint_safeDownCast(obj)

def FreeJoint_getClassName():
    """FreeJoint_getClassName() -> std::string const &"""
    return _simulation.FreeJoint_getClassName()

class CustomJoint(Joint):
    """Proxy of C++ OpenSim::CustomJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CustomJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.CustomJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CustomJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.CustomJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.CustomJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CustomJoint self) -> CustomJoint

        Parameters
        ----------
        self: OpenSim::CustomJoint const *

        """
        return _simulation.CustomJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CustomJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CustomJoint const *

        """
        return _simulation.CustomJoint_getConcreteClassName(self)


    def copyProperty_SpatialTransform(self, source):
        """
        copyProperty_SpatialTransform(CustomJoint self, CustomJoint source)

        Parameters
        ----------
        source: OpenSim::CustomJoint::Self const &

        """
        return _simulation.CustomJoint_copyProperty_SpatialTransform(self, source)


    def append_SpatialTransform(self, value):
        """
        append_SpatialTransform(CustomJoint self, SpatialTransform value) -> int

        Parameters
        ----------
        value: OpenSim::SpatialTransform const &

        """
        return _simulation.CustomJoint_append_SpatialTransform(self, value)


    def constructProperty_SpatialTransform(self, initValue):
        """
        constructProperty_SpatialTransform(CustomJoint self, SpatialTransform initValue)

        Parameters
        ----------
        initValue: OpenSim::SpatialTransform const &

        """
        return _simulation.CustomJoint_constructProperty_SpatialTransform(self, initValue)


    def get_SpatialTransform(self, *args):
        """
        get_SpatialTransform(CustomJoint self, int i) -> SpatialTransform

        Parameters
        ----------
        i: int

        get_SpatialTransform(CustomJoint self) -> SpatialTransform

        Parameters
        ----------
        self: OpenSim::CustomJoint const *

        """
        return _simulation.CustomJoint_get_SpatialTransform(self, *args)


    def upd_SpatialTransform(self, *args):
        """
        upd_SpatialTransform(CustomJoint self, int i) -> SpatialTransform

        Parameters
        ----------
        i: int

        upd_SpatialTransform(CustomJoint self) -> SpatialTransform

        Parameters
        ----------
        self: OpenSim::CustomJoint *

        """
        return _simulation.CustomJoint_upd_SpatialTransform(self, *args)


    def set_SpatialTransform(self, *args):
        """
        set_SpatialTransform(CustomJoint self, int i, SpatialTransform value)

        Parameters
        ----------
        i: int
        value: OpenSim::SpatialTransform const &

        set_SpatialTransform(CustomJoint self, SpatialTransform value)

        Parameters
        ----------
        value: OpenSim::SpatialTransform const &

        """
        return _simulation.CustomJoint_set_SpatialTransform(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::CustomJoint self) -> CustomJoint
        __init__(OpenSim::CustomJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child, SpatialTransform spatialTransform) -> CustomJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &
        spatialTransform: OpenSim::SpatialTransform &

        __init__(OpenSim::CustomJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild, SpatialTransform spatialTransform) -> CustomJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &
        spatialTransform: OpenSim::SpatialTransform &

        """
        this = _simulation.new_CustomJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSpatialTransform(self):
        """
        getSpatialTransform(CustomJoint self) -> SpatialTransform

        Parameters
        ----------
        self: OpenSim::CustomJoint const *

        """
        return _simulation.CustomJoint_getSpatialTransform(self)


    def updSpatialTransform(self):
        """
        updSpatialTransform(CustomJoint self) -> SpatialTransform

        Parameters
        ----------
        self: OpenSim::CustomJoint *

        """
        return _simulation.CustomJoint_updSpatialTransform(self)


    def getCoordinate(self, *args):
        """
        getCoordinate(CustomJoint self) -> Coordinate
        getCoordinate(CustomJoint self, unsigned int idx) -> Coordinate

        Parameters
        ----------
        idx: unsigned int

        """
        return _simulation.CustomJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(CustomJoint self) -> Coordinate
        updCoordinate(CustomJoint self, unsigned int idx) -> Coordinate

        Parameters
        ----------
        idx: unsigned int

        """
        return _simulation.CustomJoint_updCoordinate(self, *args)


    def extendScale(self, s, scaleSet):
        """
        extendScale(CustomJoint self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.CustomJoint_extendScale(self, s, scaleSet)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(CustomJoint self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(CustomJoint self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _simulation.CustomJoint_updateFromXMLNode(self, aNode, versionNumber)

    __swig_destroy__ = _simulation.delete_CustomJoint
    __del__ = lambda self: None
CustomJoint_swigregister = _simulation.CustomJoint_swigregister
CustomJoint_swigregister(CustomJoint)

def CustomJoint_safeDownCast(obj):
    """
    CustomJoint_safeDownCast(OpenSimObject obj) -> CustomJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.CustomJoint_safeDownCast(obj)

def CustomJoint_getClassName():
    """CustomJoint_getClassName() -> std::string const &"""
    return _simulation.CustomJoint_getClassName()

class EllipsoidJoint(Joint):
    """Proxy of C++ OpenSim::EllipsoidJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> EllipsoidJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.EllipsoidJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(EllipsoidJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.EllipsoidJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.EllipsoidJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(EllipsoidJoint self) -> EllipsoidJoint

        Parameters
        ----------
        self: OpenSim::EllipsoidJoint const *

        """
        return _simulation.EllipsoidJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(EllipsoidJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::EllipsoidJoint const *

        """
        return _simulation.EllipsoidJoint_getConcreteClassName(self)

    Coord_Rotation1X = _simulation.EllipsoidJoint_Coord_Rotation1X
    Coord_Rotation2Y = _simulation.EllipsoidJoint_Coord_Rotation2Y
    Coord_Rotation3Z = _simulation.EllipsoidJoint_Coord_Rotation3Z

    def copyProperty_radii_x_y_z(self, source):
        """
        copyProperty_radii_x_y_z(EllipsoidJoint self, EllipsoidJoint source)

        Parameters
        ----------
        source: OpenSim::EllipsoidJoint::Self const &

        """
        return _simulation.EllipsoidJoint_copyProperty_radii_x_y_z(self, source)


    def append_radii_x_y_z(self, value):
        """
        append_radii_x_y_z(EllipsoidJoint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.EllipsoidJoint_append_radii_x_y_z(self, value)


    def constructProperty_radii_x_y_z(self, initValue):
        """
        constructProperty_radii_x_y_z(EllipsoidJoint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.EllipsoidJoint_constructProperty_radii_x_y_z(self, initValue)


    def get_radii_x_y_z(self, *args):
        """
        get_radii_x_y_z(EllipsoidJoint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_radii_x_y_z(EllipsoidJoint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::EllipsoidJoint const *

        """
        return _simulation.EllipsoidJoint_get_radii_x_y_z(self, *args)


    def upd_radii_x_y_z(self, *args):
        """
        upd_radii_x_y_z(EllipsoidJoint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_radii_x_y_z(EllipsoidJoint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::EllipsoidJoint *

        """
        return _simulation.EllipsoidJoint_upd_radii_x_y_z(self, *args)


    def set_radii_x_y_z(self, *args):
        """
        set_radii_x_y_z(EllipsoidJoint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_radii_x_y_z(EllipsoidJoint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.EllipsoidJoint_set_radii_x_y_z(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::EllipsoidJoint self) -> EllipsoidJoint
        __init__(OpenSim::EllipsoidJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child, Vec3 ellipsoidRadii) -> EllipsoidJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &
        ellipsoidRadii: SimTK::Vec3 const &

        __init__(OpenSim::EllipsoidJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild, Vec3 ellipsoidRadii) -> EllipsoidJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &
        ellipsoidRadii: SimTK::Vec3 const &

        """
        this = _simulation.new_EllipsoidJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setEllipsoidRadii(self, radii):
        """
        setEllipsoidRadii(EllipsoidJoint self, Vec3 radii)

        Parameters
        ----------
        radii: SimTK::Vec3 const &

        """
        return _simulation.EllipsoidJoint_setEllipsoidRadii(self, radii)


    def getCoordinate(self, *args):
        """
        getCoordinate(EllipsoidJoint self) -> Coordinate
        getCoordinate(EllipsoidJoint self, OpenSim::EllipsoidJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::EllipsoidJoint::Coord

        """
        return _simulation.EllipsoidJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(EllipsoidJoint self) -> Coordinate
        updCoordinate(EllipsoidJoint self, OpenSim::EllipsoidJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::EllipsoidJoint::Coord

        """
        return _simulation.EllipsoidJoint_updCoordinate(self, *args)


    def extendScale(self, s, scaleSet):
        """
        extendScale(EllipsoidJoint self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.EllipsoidJoint_extendScale(self, s, scaleSet)

    __swig_destroy__ = _simulation.delete_EllipsoidJoint
    __del__ = lambda self: None
EllipsoidJoint_swigregister = _simulation.EllipsoidJoint_swigregister
EllipsoidJoint_swigregister(EllipsoidJoint)

def EllipsoidJoint_safeDownCast(obj):
    """
    EllipsoidJoint_safeDownCast(OpenSimObject obj) -> EllipsoidJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.EllipsoidJoint_safeDownCast(obj)

def EllipsoidJoint_getClassName():
    """EllipsoidJoint_getClassName() -> std::string const &"""
    return _simulation.EllipsoidJoint_getClassName()

class BallJoint(Joint):
    """Proxy of C++ OpenSim::BallJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BallJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.BallJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(BallJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.BallJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.BallJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(BallJoint self) -> BallJoint

        Parameters
        ----------
        self: OpenSim::BallJoint const *

        """
        return _simulation.BallJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BallJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::BallJoint const *

        """
        return _simulation.BallJoint_getConcreteClassName(self)

    Coord_Rotation1X = _simulation.BallJoint_Coord_Rotation1X
    Coord_Rotation2Y = _simulation.BallJoint_Coord_Rotation2Y
    Coord_Rotation3Z = _simulation.BallJoint_Coord_Rotation3Z

    def getCoordinate(self, *args):
        """
        getCoordinate(BallJoint self) -> Coordinate
        getCoordinate(BallJoint self, OpenSim::BallJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::BallJoint::Coord

        """
        return _simulation.BallJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(BallJoint self) -> Coordinate
        updCoordinate(BallJoint self, OpenSim::BallJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::BallJoint::Coord

        """
        return _simulation.BallJoint_updCoordinate(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::BallJoint self) -> BallJoint
        __init__(OpenSim::BallJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child) -> BallJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &

        __init__(OpenSim::BallJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) -> BallJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &

        """
        this = _simulation.new_BallJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_BallJoint
    __del__ = lambda self: None
BallJoint_swigregister = _simulation.BallJoint_swigregister
BallJoint_swigregister(BallJoint)

def BallJoint_safeDownCast(obj):
    """
    BallJoint_safeDownCast(OpenSimObject obj) -> BallJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.BallJoint_safeDownCast(obj)

def BallJoint_getClassName():
    """BallJoint_getClassName() -> std::string const &"""
    return _simulation.BallJoint_getClassName()

class PinJoint(Joint):
    """Proxy of C++ OpenSim::PinJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PinJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PinJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PinJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PinJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PinJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PinJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PinJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PinJoint self) -> PinJoint

        Parameters
        ----------
        self: OpenSim::PinJoint const *

        """
        return _simulation.PinJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PinJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PinJoint const *

        """
        return _simulation.PinJoint_getConcreteClassName(self)

    Coord_RotationZ = _simulation.PinJoint_Coord_RotationZ

    def getCoordinate(self, *args):
        """
        getCoordinate(PinJoint self) -> Coordinate
        getCoordinate(PinJoint self, OpenSim::PinJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::PinJoint::Coord

        """
        return _simulation.PinJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(PinJoint self) -> Coordinate
        updCoordinate(PinJoint self, OpenSim::PinJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::PinJoint::Coord

        """
        return _simulation.PinJoint_updCoordinate(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PinJoint self) -> PinJoint
        __init__(OpenSim::PinJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child) -> PinJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &

        __init__(OpenSim::PinJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) -> PinJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &

        """
        this = _simulation.new_PinJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PinJoint
    __del__ = lambda self: None
PinJoint_swigregister = _simulation.PinJoint_swigregister
PinJoint_swigregister(PinJoint)

def PinJoint_safeDownCast(obj):
    """
    PinJoint_safeDownCast(OpenSimObject obj) -> PinJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PinJoint_safeDownCast(obj)

def PinJoint_getClassName():
    """PinJoint_getClassName() -> std::string const &"""
    return _simulation.PinJoint_getClassName()

class SliderJoint(Joint):
    """Proxy of C++ OpenSim::SliderJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SliderJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SliderJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SliderJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SliderJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SliderJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SliderJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SliderJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SliderJoint self) -> SliderJoint

        Parameters
        ----------
        self: OpenSim::SliderJoint const *

        """
        return _simulation.SliderJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SliderJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SliderJoint const *

        """
        return _simulation.SliderJoint_getConcreteClassName(self)

    Coord_TranslationX = _simulation.SliderJoint_Coord_TranslationX

    def getCoordinate(self, *args):
        """
        getCoordinate(SliderJoint self) -> Coordinate
        getCoordinate(SliderJoint self, OpenSim::SliderJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::SliderJoint::Coord

        """
        return _simulation.SliderJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(SliderJoint self) -> Coordinate
        updCoordinate(SliderJoint self, OpenSim::SliderJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::SliderJoint::Coord

        """
        return _simulation.SliderJoint_updCoordinate(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::SliderJoint self) -> SliderJoint
        __init__(OpenSim::SliderJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child) -> SliderJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &

        __init__(OpenSim::SliderJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) -> SliderJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &

        """
        this = _simulation.new_SliderJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_SliderJoint
    __del__ = lambda self: None
SliderJoint_swigregister = _simulation.SliderJoint_swigregister
SliderJoint_swigregister(SliderJoint)

def SliderJoint_safeDownCast(obj):
    """
    SliderJoint_safeDownCast(OpenSimObject obj) -> SliderJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SliderJoint_safeDownCast(obj)

def SliderJoint_getClassName():
    """SliderJoint_getClassName() -> std::string const &"""
    return _simulation.SliderJoint_getClassName()

class WeldJoint(Joint):
    """Proxy of C++ OpenSim::WeldJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeldJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeldJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WeldJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WeldJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WeldJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WeldJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WeldJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WeldJoint self) -> WeldJoint

        Parameters
        ----------
        self: OpenSim::WeldJoint const *

        """
        return _simulation.WeldJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WeldJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WeldJoint const *

        """
        return _simulation.WeldJoint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WeldJoint self) -> WeldJoint
        __init__(OpenSim::WeldJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child) -> WeldJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &

        __init__(OpenSim::WeldJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) -> WeldJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &

        """
        this = _simulation.new_WeldJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WeldJoint
    __del__ = lambda self: None
WeldJoint_swigregister = _simulation.WeldJoint_swigregister
WeldJoint_swigregister(WeldJoint)

def WeldJoint_safeDownCast(obj):
    """
    WeldJoint_safeDownCast(OpenSimObject obj) -> WeldJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WeldJoint_safeDownCast(obj)

def WeldJoint_getClassName():
    """WeldJoint_getClassName() -> std::string const &"""
    return _simulation.WeldJoint_getClassName()

class GimbalJoint(Joint):
    """Proxy of C++ OpenSim::GimbalJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GimbalJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GimbalJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GimbalJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.GimbalJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(GimbalJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.GimbalJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.GimbalJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(GimbalJoint self) -> GimbalJoint

        Parameters
        ----------
        self: OpenSim::GimbalJoint const *

        """
        return _simulation.GimbalJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GimbalJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::GimbalJoint const *

        """
        return _simulation.GimbalJoint_getConcreteClassName(self)

    Coord_Rotation1X = _simulation.GimbalJoint_Coord_Rotation1X
    Coord_Rotation2Y = _simulation.GimbalJoint_Coord_Rotation2Y
    Coord_Rotation3Z = _simulation.GimbalJoint_Coord_Rotation3Z

    def getCoordinate(self, *args):
        """
        getCoordinate(GimbalJoint self) -> Coordinate
        getCoordinate(GimbalJoint self, OpenSim::GimbalJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::GimbalJoint::Coord

        """
        return _simulation.GimbalJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(GimbalJoint self) -> Coordinate
        updCoordinate(GimbalJoint self, OpenSim::GimbalJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::GimbalJoint::Coord

        """
        return _simulation.GimbalJoint_updCoordinate(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::GimbalJoint self) -> GimbalJoint
        __init__(OpenSim::GimbalJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child) -> GimbalJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &

        __init__(OpenSim::GimbalJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) -> GimbalJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &

        """
        this = _simulation.new_GimbalJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_GimbalJoint
    __del__ = lambda self: None
GimbalJoint_swigregister = _simulation.GimbalJoint_swigregister
GimbalJoint_swigregister(GimbalJoint)

def GimbalJoint_safeDownCast(obj):
    """
    GimbalJoint_safeDownCast(OpenSimObject obj) -> GimbalJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.GimbalJoint_safeDownCast(obj)

def GimbalJoint_getClassName():
    """GimbalJoint_getClassName() -> std::string const &"""
    return _simulation.GimbalJoint_getClassName()

class UniversalJoint(Joint):
    """Proxy of C++ OpenSim::UniversalJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniversalJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniversalJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> UniversalJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.UniversalJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(UniversalJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.UniversalJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.UniversalJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(UniversalJoint self) -> UniversalJoint

        Parameters
        ----------
        self: OpenSim::UniversalJoint const *

        """
        return _simulation.UniversalJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(UniversalJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::UniversalJoint const *

        """
        return _simulation.UniversalJoint_getConcreteClassName(self)

    Coord_Rotation1X = _simulation.UniversalJoint_Coord_Rotation1X
    Coord_Rotation2Y = _simulation.UniversalJoint_Coord_Rotation2Y

    def getCoordinate(self, *args):
        """
        getCoordinate(UniversalJoint self) -> Coordinate
        getCoordinate(UniversalJoint self, OpenSim::UniversalJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::UniversalJoint::Coord

        """
        return _simulation.UniversalJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(UniversalJoint self) -> Coordinate
        updCoordinate(UniversalJoint self, OpenSim::UniversalJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::UniversalJoint::Coord

        """
        return _simulation.UniversalJoint_updCoordinate(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::UniversalJoint self) -> UniversalJoint
        __init__(OpenSim::UniversalJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child) -> UniversalJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &

        __init__(OpenSim::UniversalJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) -> UniversalJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &

        """
        this = _simulation.new_UniversalJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_UniversalJoint
    __del__ = lambda self: None
UniversalJoint_swigregister = _simulation.UniversalJoint_swigregister
UniversalJoint_swigregister(UniversalJoint)

def UniversalJoint_safeDownCast(obj):
    """
    UniversalJoint_safeDownCast(OpenSimObject obj) -> UniversalJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.UniversalJoint_safeDownCast(obj)

def UniversalJoint_getClassName():
    """UniversalJoint_getClassName() -> std::string const &"""
    return _simulation.UniversalJoint_getClassName()

class PlanarJoint(Joint):
    """Proxy of C++ OpenSim::PlanarJoint class."""

    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlanarJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlanarJoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PlanarJoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PlanarJoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PlanarJoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PlanarJoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PlanarJoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PlanarJoint self) -> PlanarJoint

        Parameters
        ----------
        self: OpenSim::PlanarJoint const *

        """
        return _simulation.PlanarJoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PlanarJoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PlanarJoint const *

        """
        return _simulation.PlanarJoint_getConcreteClassName(self)

    Coord_RotationZ = _simulation.PlanarJoint_Coord_RotationZ
    Coord_TranslationX = _simulation.PlanarJoint_Coord_TranslationX
    Coord_TranslationY = _simulation.PlanarJoint_Coord_TranslationY

    def getCoordinate(self, *args):
        """
        getCoordinate(PlanarJoint self) -> Coordinate
        getCoordinate(PlanarJoint self, OpenSim::PlanarJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::PlanarJoint::Coord

        """
        return _simulation.PlanarJoint_getCoordinate(self, *args)


    def updCoordinate(self, *args):
        """
        updCoordinate(PlanarJoint self) -> Coordinate
        updCoordinate(PlanarJoint self, OpenSim::PlanarJoint::Coord idx) -> Coordinate

        Parameters
        ----------
        idx: enum OpenSim::PlanarJoint::Coord

        """
        return _simulation.PlanarJoint_updCoordinate(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PlanarJoint self) -> PlanarJoint
        __init__(OpenSim::PlanarJoint self, std::string const & name, PhysicalFrame parent, PhysicalFrame child) -> PlanarJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        child: OpenSim::PhysicalFrame const &

        __init__(OpenSim::PlanarJoint self, std::string const & name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) -> PlanarJoint

        Parameters
        ----------
        name: std::string const &
        parent: OpenSim::PhysicalFrame const &
        locationInParent: SimTK::Vec3 const &
        orientationInParent: SimTK::Vec3 const &
        child: OpenSim::PhysicalFrame const &
        locationInChild: SimTK::Vec3 const &
        orientationInChild: SimTK::Vec3 const &

        """
        this = _simulation.new_PlanarJoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PlanarJoint
    __del__ = lambda self: None
PlanarJoint_swigregister = _simulation.PlanarJoint_swigregister
PlanarJoint_swigregister(PlanarJoint)

def PlanarJoint_safeDownCast(obj):
    """
    PlanarJoint_safeDownCast(OpenSimObject obj) -> PlanarJoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PlanarJoint_safeDownCast(obj)

def PlanarJoint_getClassName():
    """PlanarJoint_getClassName() -> std::string const &"""
    return _simulation.PlanarJoint_getClassName()

class WeldConstraint(TwoFrameLinkerConstraint):
    """Proxy of C++ OpenSim::WeldConstraint class."""

    __swig_setmethods__ = {}
    for _s in [TwoFrameLinkerConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeldConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoFrameLinkerConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeldConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WeldConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WeldConstraint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WeldConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WeldConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WeldConstraint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WeldConstraint self) -> WeldConstraint

        Parameters
        ----------
        self: OpenSim::WeldConstraint const *

        """
        return _simulation.WeldConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WeldConstraint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WeldConstraint const *

        """
        return _simulation.WeldConstraint_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::WeldConstraint self) -> WeldConstraint
        __init__(OpenSim::WeldConstraint self, std::string const & name, std::string const & frame1Name, std::string const & frame2Name) -> WeldConstraint

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        frame2Name: std::string const &

        __init__(OpenSim::WeldConstraint self, std::string const & name, PhysicalFrame frame1, Vec3 locationInFrame1, Vec3 orientationInFrame1, PhysicalFrame frame2, Vec3 locationInFrame2, Vec3 orientationInFrame2) -> WeldConstraint

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        locationInFrame1: SimTK::Vec3 const &
        orientationInFrame1: SimTK::Vec3 const &
        frame2: OpenSim::PhysicalFrame const &
        locationInFrame2: SimTK::Vec3 const &
        orientationInFrame2: SimTK::Vec3 const &

        __init__(OpenSim::WeldConstraint self, std::string const & name, PhysicalFrame frame1, Transform transformInFrame1, PhysicalFrame frame2, Transform transformInFrame2) -> WeldConstraint

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        transformInFrame1: SimTK::Transform const &
        frame2: OpenSim::PhysicalFrame const &
        transformInFrame2: SimTK::Transform const &

        """
        this = _simulation.new_WeldConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WeldConstraint
    __del__ = lambda self: None

    def setContactPointForInducedAccelerations(self, s, point):
        """
        setContactPointForInducedAccelerations(WeldConstraint self, State s, Vec3 point)

        Parameters
        ----------
        s: SimTK::State const &
        point: SimTK::Vec3

        """
        return _simulation.WeldConstraint_setContactPointForInducedAccelerations(self, s, point)

WeldConstraint_swigregister = _simulation.WeldConstraint_swigregister
WeldConstraint_swigregister(WeldConstraint)

def WeldConstraint_safeDownCast(obj):
    """
    WeldConstraint_safeDownCast(OpenSimObject obj) -> WeldConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WeldConstraint_safeDownCast(obj)

def WeldConstraint_getClassName():
    """WeldConstraint_getClassName() -> std::string const &"""
    return _simulation.WeldConstraint_getClassName()

class PointConstraint(Constraint):
    """Proxy of C++ OpenSim::PointConstraint class."""

    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PointConstraint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PointConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PointConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PointConstraint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PointConstraint self) -> PointConstraint

        Parameters
        ----------
        self: OpenSim::PointConstraint const *

        """
        return _simulation.PointConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointConstraint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointConstraint const *

        """
        return _simulation.PointConstraint_getConcreteClassName(self)


    def copyProperty_location_body_1(self, source):
        """
        copyProperty_location_body_1(PointConstraint self, PointConstraint source)

        Parameters
        ----------
        source: OpenSim::PointConstraint::Self const &

        """
        return _simulation.PointConstraint_copyProperty_location_body_1(self, source)


    def append_location_body_1(self, value):
        """
        append_location_body_1(PointConstraint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointConstraint_append_location_body_1(self, value)


    def constructProperty_location_body_1(self, initValue):
        """
        constructProperty_location_body_1(PointConstraint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PointConstraint_constructProperty_location_body_1(self, initValue)


    def get_location_body_1(self, *args):
        """
        get_location_body_1(PointConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_location_body_1(PointConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointConstraint const *

        """
        return _simulation.PointConstraint_get_location_body_1(self, *args)


    def upd_location_body_1(self, *args):
        """
        upd_location_body_1(PointConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_location_body_1(PointConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointConstraint *

        """
        return _simulation.PointConstraint_upd_location_body_1(self, *args)


    def set_location_body_1(self, *args):
        """
        set_location_body_1(PointConstraint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_location_body_1(PointConstraint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointConstraint_set_location_body_1(self, *args)


    def copyProperty_location_body_2(self, source):
        """
        copyProperty_location_body_2(PointConstraint self, PointConstraint source)

        Parameters
        ----------
        source: OpenSim::PointConstraint::Self const &

        """
        return _simulation.PointConstraint_copyProperty_location_body_2(self, source)


    def append_location_body_2(self, value):
        """
        append_location_body_2(PointConstraint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointConstraint_append_location_body_2(self, value)


    def constructProperty_location_body_2(self, initValue):
        """
        constructProperty_location_body_2(PointConstraint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PointConstraint_constructProperty_location_body_2(self, initValue)


    def get_location_body_2(self, *args):
        """
        get_location_body_2(PointConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_location_body_2(PointConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointConstraint const *

        """
        return _simulation.PointConstraint_get_location_body_2(self, *args)


    def upd_location_body_2(self, *args):
        """
        upd_location_body_2(PointConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_location_body_2(PointConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointConstraint *

        """
        return _simulation.PointConstraint_upd_location_body_2(self, *args)


    def set_location_body_2(self, *args):
        """
        set_location_body_2(PointConstraint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_location_body_2(PointConstraint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointConstraint_set_location_body_2(self, *args)

    __swig_setmethods__["PropertyIndex_socket_body_1"] = _simulation.PointConstraint_PropertyIndex_socket_body_1_set
    __swig_getmethods__["PropertyIndex_socket_body_1"] = _simulation.PointConstraint_PropertyIndex_socket_body_1_get
    if _newclass:
        PropertyIndex_socket_body_1 = _swig_property(_simulation.PointConstraint_PropertyIndex_socket_body_1_get, _simulation.PointConstraint_PropertyIndex_socket_body_1_set)

    def connectSocket_body_1(self, object):
        """
        connectSocket_body_1(PointConstraint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.PointConstraint_connectSocket_body_1(self, object)

    __swig_setmethods__["PropertyIndex_socket_body_2"] = _simulation.PointConstraint_PropertyIndex_socket_body_2_set
    __swig_getmethods__["PropertyIndex_socket_body_2"] = _simulation.PointConstraint_PropertyIndex_socket_body_2_get
    if _newclass:
        PropertyIndex_socket_body_2 = _swig_property(_simulation.PointConstraint_PropertyIndex_socket_body_2_get, _simulation.PointConstraint_PropertyIndex_socket_body_2_set)

    def connectSocket_body_2(self, object):
        """
        connectSocket_body_2(PointConstraint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.PointConstraint_connectSocket_body_2(self, object)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointConstraint self) -> PointConstraint
        __init__(OpenSim::PointConstraint self, PhysicalFrame body1, Vec3 locationBody1, PhysicalFrame body2, Vec3 locationBody2) -> PointConstraint

        Parameters
        ----------
        body1: OpenSim::PhysicalFrame const &
        locationBody1: SimTK::Vec3 const &
        body2: OpenSim::PhysicalFrame const &
        locationBody2: SimTK::Vec3 const &

        """
        this = _simulation.new_PointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PointConstraint
    __del__ = lambda self: None

    def setBody1ByName(self, aBodyName):
        """
        setBody1ByName(PointConstraint self, std::string const & aBodyName)

        Parameters
        ----------
        aBodyName: std::string const &

        """
        return _simulation.PointConstraint_setBody1ByName(self, aBodyName)


    def setBody1PointLocation(self, location):
        """
        setBody1PointLocation(PointConstraint self, Vec3 location)

        Parameters
        ----------
        location: SimTK::Vec3

        """
        return _simulation.PointConstraint_setBody1PointLocation(self, location)


    def setBody2ByName(self, aBodyName):
        """
        setBody2ByName(PointConstraint self, std::string const & aBodyName)

        Parameters
        ----------
        aBodyName: std::string const &

        """
        return _simulation.PointConstraint_setBody2ByName(self, aBodyName)


    def setBody2PointLocation(self, location):
        """
        setBody2PointLocation(PointConstraint self, Vec3 location)

        Parameters
        ----------
        location: SimTK::Vec3

        """
        return _simulation.PointConstraint_setBody2PointLocation(self, location)


    def setContactPointForInducedAccelerations(self, s, point):
        """
        setContactPointForInducedAccelerations(PointConstraint self, State s, Vec3 point)

        Parameters
        ----------
        s: SimTK::State const &
        point: SimTK::Vec3

        """
        return _simulation.PointConstraint_setContactPointForInducedAccelerations(self, s, point)

PointConstraint_swigregister = _simulation.PointConstraint_swigregister
PointConstraint_swigregister(PointConstraint)

def PointConstraint_safeDownCast(obj):
    """
    PointConstraint_safeDownCast(OpenSimObject obj) -> PointConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PointConstraint_safeDownCast(obj)

def PointConstraint_getClassName():
    """PointConstraint_getClassName() -> std::string const &"""
    return _simulation.PointConstraint_getClassName()

class ConstantDistanceConstraint(Constraint):
    """Proxy of C++ OpenSim::ConstantDistanceConstraint class."""

    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantDistanceConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantDistanceConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ConstantDistanceConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ConstantDistanceConstraint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ConstantDistanceConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ConstantDistanceConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ConstantDistanceConstraint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ConstantDistanceConstraint self) -> ConstantDistanceConstraint

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint const *

        """
        return _simulation.ConstantDistanceConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ConstantDistanceConstraint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint const *

        """
        return _simulation.ConstantDistanceConstraint_getConcreteClassName(self)


    def copyProperty_location_body_1(self, source):
        """
        copyProperty_location_body_1(ConstantDistanceConstraint self, ConstantDistanceConstraint source)

        Parameters
        ----------
        source: OpenSim::ConstantDistanceConstraint::Self const &

        """
        return _simulation.ConstantDistanceConstraint_copyProperty_location_body_1(self, source)


    def append_location_body_1(self, value):
        """
        append_location_body_1(ConstantDistanceConstraint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ConstantDistanceConstraint_append_location_body_1(self, value)


    def constructProperty_location_body_1(self, initValue):
        """
        constructProperty_location_body_1(ConstantDistanceConstraint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.ConstantDistanceConstraint_constructProperty_location_body_1(self, initValue)


    def get_location_body_1(self, *args):
        """
        get_location_body_1(ConstantDistanceConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_location_body_1(ConstantDistanceConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint const *

        """
        return _simulation.ConstantDistanceConstraint_get_location_body_1(self, *args)


    def upd_location_body_1(self, *args):
        """
        upd_location_body_1(ConstantDistanceConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_location_body_1(ConstantDistanceConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint *

        """
        return _simulation.ConstantDistanceConstraint_upd_location_body_1(self, *args)


    def set_location_body_1(self, *args):
        """
        set_location_body_1(ConstantDistanceConstraint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_location_body_1(ConstantDistanceConstraint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ConstantDistanceConstraint_set_location_body_1(self, *args)


    def copyProperty_location_body_2(self, source):
        """
        copyProperty_location_body_2(ConstantDistanceConstraint self, ConstantDistanceConstraint source)

        Parameters
        ----------
        source: OpenSim::ConstantDistanceConstraint::Self const &

        """
        return _simulation.ConstantDistanceConstraint_copyProperty_location_body_2(self, source)


    def append_location_body_2(self, value):
        """
        append_location_body_2(ConstantDistanceConstraint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ConstantDistanceConstraint_append_location_body_2(self, value)


    def constructProperty_location_body_2(self, initValue):
        """
        constructProperty_location_body_2(ConstantDistanceConstraint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.ConstantDistanceConstraint_constructProperty_location_body_2(self, initValue)


    def get_location_body_2(self, *args):
        """
        get_location_body_2(ConstantDistanceConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_location_body_2(ConstantDistanceConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint const *

        """
        return _simulation.ConstantDistanceConstraint_get_location_body_2(self, *args)


    def upd_location_body_2(self, *args):
        """
        upd_location_body_2(ConstantDistanceConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_location_body_2(ConstantDistanceConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint *

        """
        return _simulation.ConstantDistanceConstraint_upd_location_body_2(self, *args)


    def set_location_body_2(self, *args):
        """
        set_location_body_2(ConstantDistanceConstraint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_location_body_2(ConstantDistanceConstraint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ConstantDistanceConstraint_set_location_body_2(self, *args)


    def copyProperty_constant_distance(self, source):
        """
        copyProperty_constant_distance(ConstantDistanceConstraint self, ConstantDistanceConstraint source)

        Parameters
        ----------
        source: OpenSim::ConstantDistanceConstraint::Self const &

        """
        return _simulation.ConstantDistanceConstraint_copyProperty_constant_distance(self, source)


    def append_constant_distance(self, value):
        """
        append_constant_distance(ConstantDistanceConstraint self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ConstantDistanceConstraint_append_constant_distance(self, value)


    def constructProperty_constant_distance(self, initValue):
        """
        constructProperty_constant_distance(ConstantDistanceConstraint self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ConstantDistanceConstraint_constructProperty_constant_distance(self, initValue)


    def get_constant_distance(self, *args):
        """
        get_constant_distance(ConstantDistanceConstraint self, int i) -> double const

        Parameters
        ----------
        i: int

        get_constant_distance(ConstantDistanceConstraint self) -> double const &

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint const *

        """
        return _simulation.ConstantDistanceConstraint_get_constant_distance(self, *args)


    def upd_constant_distance(self, *args):
        """
        upd_constant_distance(ConstantDistanceConstraint self, int i) -> double

        Parameters
        ----------
        i: int

        upd_constant_distance(ConstantDistanceConstraint self) -> double &

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint *

        """
        return _simulation.ConstantDistanceConstraint_upd_constant_distance(self, *args)


    def set_constant_distance(self, *args):
        """
        set_constant_distance(ConstantDistanceConstraint self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_constant_distance(ConstantDistanceConstraint self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ConstantDistanceConstraint_set_constant_distance(self, *args)

    __swig_setmethods__["PropertyIndex_socket_body_1"] = _simulation.ConstantDistanceConstraint_PropertyIndex_socket_body_1_set
    __swig_getmethods__["PropertyIndex_socket_body_1"] = _simulation.ConstantDistanceConstraint_PropertyIndex_socket_body_1_get
    if _newclass:
        PropertyIndex_socket_body_1 = _swig_property(_simulation.ConstantDistanceConstraint_PropertyIndex_socket_body_1_get, _simulation.ConstantDistanceConstraint_PropertyIndex_socket_body_1_set)

    def connectSocket_body_1(self, object):
        """
        connectSocket_body_1(ConstantDistanceConstraint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.ConstantDistanceConstraint_connectSocket_body_1(self, object)

    __swig_setmethods__["PropertyIndex_socket_body_2"] = _simulation.ConstantDistanceConstraint_PropertyIndex_socket_body_2_set
    __swig_getmethods__["PropertyIndex_socket_body_2"] = _simulation.ConstantDistanceConstraint_PropertyIndex_socket_body_2_get
    if _newclass:
        PropertyIndex_socket_body_2 = _swig_property(_simulation.ConstantDistanceConstraint_PropertyIndex_socket_body_2_get, _simulation.ConstantDistanceConstraint_PropertyIndex_socket_body_2_set)

    def connectSocket_body_2(self, object):
        """
        connectSocket_body_2(ConstantDistanceConstraint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.ConstantDistanceConstraint_connectSocket_body_2(self, object)


    def __init__(self, *args):
        """
        __init__(OpenSim::ConstantDistanceConstraint self) -> ConstantDistanceConstraint
        __init__(OpenSim::ConstantDistanceConstraint self, PhysicalFrame body1, Vec3 locationBody1, PhysicalFrame body2, Vec3 locationBody2, double const & distance) -> ConstantDistanceConstraint

        Parameters
        ----------
        body1: OpenSim::PhysicalFrame const &
        locationBody1: SimTK::Vec3 const &
        body2: OpenSim::PhysicalFrame const &
        locationBody2: SimTK::Vec3 const &
        distance: double const &

        """
        this = _simulation.new_ConstantDistanceConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ConstantDistanceConstraint
    __del__ = lambda self: None

    def getBody1(self):
        """
        getBody1(ConstantDistanceConstraint self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint const *

        """
        return _simulation.ConstantDistanceConstraint_getBody1(self)


    def getBody2(self):
        """
        getBody2(ConstantDistanceConstraint self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::ConstantDistanceConstraint const *

        """
        return _simulation.ConstantDistanceConstraint_getBody2(self)


    def setBody1ByName(self, aBodyName):
        """
        setBody1ByName(ConstantDistanceConstraint self, std::string const & aBodyName)

        Parameters
        ----------
        aBodyName: std::string const &

        """
        return _simulation.ConstantDistanceConstraint_setBody1ByName(self, aBodyName)


    def setBody1PointLocation(self, location):
        """
        setBody1PointLocation(ConstantDistanceConstraint self, Vec3 location)

        Parameters
        ----------
        location: SimTK::Vec3

        """
        return _simulation.ConstantDistanceConstraint_setBody1PointLocation(self, location)


    def setBody2ByName(self, aBodyName):
        """
        setBody2ByName(ConstantDistanceConstraint self, std::string const & aBodyName)

        Parameters
        ----------
        aBodyName: std::string const &

        """
        return _simulation.ConstantDistanceConstraint_setBody2ByName(self, aBodyName)


    def setBody2PointLocation(self, location):
        """
        setBody2PointLocation(ConstantDistanceConstraint self, Vec3 location)

        Parameters
        ----------
        location: SimTK::Vec3

        """
        return _simulation.ConstantDistanceConstraint_setBody2PointLocation(self, location)


    def setConstantDistance(self, distance):
        """
        setConstantDistance(ConstantDistanceConstraint self, double distance)

        Parameters
        ----------
        distance: double

        """
        return _simulation.ConstantDistanceConstraint_setConstantDistance(self, distance)

ConstantDistanceConstraint_swigregister = _simulation.ConstantDistanceConstraint_swigregister
ConstantDistanceConstraint_swigregister(ConstantDistanceConstraint)

def ConstantDistanceConstraint_safeDownCast(obj):
    """
    ConstantDistanceConstraint_safeDownCast(OpenSimObject obj) -> ConstantDistanceConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ConstantDistanceConstraint_safeDownCast(obj)

def ConstantDistanceConstraint_getClassName():
    """ConstantDistanceConstraint_getClassName() -> std::string const &"""
    return _simulation.ConstantDistanceConstraint_getClassName()

class CoordinateCouplerConstraint(Constraint):
    """Proxy of C++ OpenSim::CoordinateCouplerConstraint class."""

    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateCouplerConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateCouplerConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateCouplerConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.CoordinateCouplerConstraint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CoordinateCouplerConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.CoordinateCouplerConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.CoordinateCouplerConstraint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CoordinateCouplerConstraint self) -> CoordinateCouplerConstraint

        Parameters
        ----------
        self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _simulation.CoordinateCouplerConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateCouplerConstraint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _simulation.CoordinateCouplerConstraint_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::CoordinateCouplerConstraint self) -> CoordinateCouplerConstraint"""
        this = _simulation.new_CoordinateCouplerConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_CoordinateCouplerConstraint
    __del__ = lambda self: None

    def setIndependentCoordinateNames(self, aCoordNames):
        """
        setIndependentCoordinateNames(CoordinateCouplerConstraint self, ArrayStr aCoordNames)

        Parameters
        ----------
        aCoordNames: OpenSim::Array< std::string > const &

        """
        return _simulation.CoordinateCouplerConstraint_setIndependentCoordinateNames(self, aCoordNames)


    def getIndependentCoordinateNames(self):
        """
        getIndependentCoordinateNames(CoordinateCouplerConstraint self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _simulation.CoordinateCouplerConstraint_getIndependentCoordinateNames(self)


    def setDependentCoordinateName(self, aCoordName):
        """
        setDependentCoordinateName(CoordinateCouplerConstraint self, std::string const & aCoordName)

        Parameters
        ----------
        aCoordName: std::string const &

        """
        return _simulation.CoordinateCouplerConstraint_setDependentCoordinateName(self, aCoordName)


    def getDependentCoordinateName(self):
        """
        getDependentCoordinateName(CoordinateCouplerConstraint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _simulation.CoordinateCouplerConstraint_getDependentCoordinateName(self)


    def getFunction(self):
        """
        getFunction(CoordinateCouplerConstraint self) -> Function

        Parameters
        ----------
        self: OpenSim::CoordinateCouplerConstraint const *

        """
        return _simulation.CoordinateCouplerConstraint_getFunction(self)


    def setFunction(self, *args):
        """
        setFunction(CoordinateCouplerConstraint self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function const &

        setFunction(CoordinateCouplerConstraint self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _simulation.CoordinateCouplerConstraint_setFunction(self, *args)


    def extendScale(self, s, scaleSet):
        """
        extendScale(CoordinateCouplerConstraint self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.CoordinateCouplerConstraint_extendScale(self, s, scaleSet)

CoordinateCouplerConstraint_swigregister = _simulation.CoordinateCouplerConstraint_swigregister
CoordinateCouplerConstraint_swigregister(CoordinateCouplerConstraint)

def CoordinateCouplerConstraint_safeDownCast(obj):
    """
    CoordinateCouplerConstraint_safeDownCast(OpenSimObject obj) -> CoordinateCouplerConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.CoordinateCouplerConstraint_safeDownCast(obj)

def CoordinateCouplerConstraint_getClassName():
    """CoordinateCouplerConstraint_getClassName() -> std::string const &"""
    return _simulation.CoordinateCouplerConstraint_getClassName()

class PointOnLineConstraint(Constraint):
    """Proxy of C++ OpenSim::PointOnLineConstraint class."""

    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointOnLineConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointOnLineConstraint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointOnLineConstraint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PointOnLineConstraint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PointOnLineConstraint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PointOnLineConstraint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PointOnLineConstraint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PointOnLineConstraint self) -> PointOnLineConstraint

        Parameters
        ----------
        self: OpenSim::PointOnLineConstraint const *

        """
        return _simulation.PointOnLineConstraint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointOnLineConstraint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointOnLineConstraint const *

        """
        return _simulation.PointOnLineConstraint_getConcreteClassName(self)


    def copyProperty_line_direction_vec(self, source):
        """
        copyProperty_line_direction_vec(PointOnLineConstraint self, PointOnLineConstraint source)

        Parameters
        ----------
        source: OpenSim::PointOnLineConstraint::Self const &

        """
        return _simulation.PointOnLineConstraint_copyProperty_line_direction_vec(self, source)


    def append_line_direction_vec(self, value):
        """
        append_line_direction_vec(PointOnLineConstraint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_append_line_direction_vec(self, value)


    def constructProperty_line_direction_vec(self, initValue):
        """
        constructProperty_line_direction_vec(PointOnLineConstraint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_constructProperty_line_direction_vec(self, initValue)


    def get_line_direction_vec(self, *args):
        """
        get_line_direction_vec(PointOnLineConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_line_direction_vec(PointOnLineConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointOnLineConstraint const *

        """
        return _simulation.PointOnLineConstraint_get_line_direction_vec(self, *args)


    def upd_line_direction_vec(self, *args):
        """
        upd_line_direction_vec(PointOnLineConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_line_direction_vec(PointOnLineConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointOnLineConstraint *

        """
        return _simulation.PointOnLineConstraint_upd_line_direction_vec(self, *args)


    def set_line_direction_vec(self, *args):
        """
        set_line_direction_vec(PointOnLineConstraint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_line_direction_vec(PointOnLineConstraint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_set_line_direction_vec(self, *args)


    def copyProperty_point_on_line(self, source):
        """
        copyProperty_point_on_line(PointOnLineConstraint self, PointOnLineConstraint source)

        Parameters
        ----------
        source: OpenSim::PointOnLineConstraint::Self const &

        """
        return _simulation.PointOnLineConstraint_copyProperty_point_on_line(self, source)


    def append_point_on_line(self, value):
        """
        append_point_on_line(PointOnLineConstraint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_append_point_on_line(self, value)


    def constructProperty_point_on_line(self, initValue):
        """
        constructProperty_point_on_line(PointOnLineConstraint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_constructProperty_point_on_line(self, initValue)


    def get_point_on_line(self, *args):
        """
        get_point_on_line(PointOnLineConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point_on_line(PointOnLineConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointOnLineConstraint const *

        """
        return _simulation.PointOnLineConstraint_get_point_on_line(self, *args)


    def upd_point_on_line(self, *args):
        """
        upd_point_on_line(PointOnLineConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point_on_line(PointOnLineConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointOnLineConstraint *

        """
        return _simulation.PointOnLineConstraint_upd_point_on_line(self, *args)


    def set_point_on_line(self, *args):
        """
        set_point_on_line(PointOnLineConstraint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point_on_line(PointOnLineConstraint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_set_point_on_line(self, *args)


    def copyProperty_point_on_follower(self, source):
        """
        copyProperty_point_on_follower(PointOnLineConstraint self, PointOnLineConstraint source)

        Parameters
        ----------
        source: OpenSim::PointOnLineConstraint::Self const &

        """
        return _simulation.PointOnLineConstraint_copyProperty_point_on_follower(self, source)


    def append_point_on_follower(self, value):
        """
        append_point_on_follower(PointOnLineConstraint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_append_point_on_follower(self, value)


    def constructProperty_point_on_follower(self, initValue):
        """
        constructProperty_point_on_follower(PointOnLineConstraint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_constructProperty_point_on_follower(self, initValue)


    def get_point_on_follower(self, *args):
        """
        get_point_on_follower(PointOnLineConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point_on_follower(PointOnLineConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointOnLineConstraint const *

        """
        return _simulation.PointOnLineConstraint_get_point_on_follower(self, *args)


    def upd_point_on_follower(self, *args):
        """
        upd_point_on_follower(PointOnLineConstraint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point_on_follower(PointOnLineConstraint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointOnLineConstraint *

        """
        return _simulation.PointOnLineConstraint_upd_point_on_follower(self, *args)


    def set_point_on_follower(self, *args):
        """
        set_point_on_follower(PointOnLineConstraint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point_on_follower(PointOnLineConstraint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointOnLineConstraint_set_point_on_follower(self, *args)

    __swig_setmethods__["PropertyIndex_socket_line_body"] = _simulation.PointOnLineConstraint_PropertyIndex_socket_line_body_set
    __swig_getmethods__["PropertyIndex_socket_line_body"] = _simulation.PointOnLineConstraint_PropertyIndex_socket_line_body_get
    if _newclass:
        PropertyIndex_socket_line_body = _swig_property(_simulation.PointOnLineConstraint_PropertyIndex_socket_line_body_get, _simulation.PointOnLineConstraint_PropertyIndex_socket_line_body_set)

    def connectSocket_line_body(self, object):
        """
        connectSocket_line_body(PointOnLineConstraint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.PointOnLineConstraint_connectSocket_line_body(self, object)

    __swig_setmethods__["PropertyIndex_socket_follower_body"] = _simulation.PointOnLineConstraint_PropertyIndex_socket_follower_body_set
    __swig_getmethods__["PropertyIndex_socket_follower_body"] = _simulation.PointOnLineConstraint_PropertyIndex_socket_follower_body_get
    if _newclass:
        PropertyIndex_socket_follower_body = _swig_property(_simulation.PointOnLineConstraint_PropertyIndex_socket_follower_body_get, _simulation.PointOnLineConstraint_PropertyIndex_socket_follower_body_set)

    def connectSocket_follower_body(self, object):
        """
        connectSocket_follower_body(PointOnLineConstraint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.PointOnLineConstraint_connectSocket_follower_body(self, object)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointOnLineConstraint self) -> PointOnLineConstraint
        __init__(OpenSim::PointOnLineConstraint self, PhysicalFrame lineBody, Vec3 lineDirection, Vec3 pointOnLine, PhysicalFrame followerBody, Vec3 followerPoint) -> PointOnLineConstraint

        Parameters
        ----------
        lineBody: OpenSim::PhysicalFrame const &
        lineDirection: SimTK::Vec3 const &
        pointOnLine: SimTK::Vec3
        followerBody: OpenSim::PhysicalFrame const &
        followerPoint: SimTK::Vec3 const &

        """
        this = _simulation.new_PointOnLineConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PointOnLineConstraint
    __del__ = lambda self: None

    def setLineBodyByName(self, aBodyName):
        """
        setLineBodyByName(PointOnLineConstraint self, std::string const & aBodyName)

        Parameters
        ----------
        aBodyName: std::string const &

        """
        return _simulation.PointOnLineConstraint_setLineBodyByName(self, aBodyName)


    def setFollowerBodyByName(self, aBodyName):
        """
        setFollowerBodyByName(PointOnLineConstraint self, std::string const & aBodyName)

        Parameters
        ----------
        aBodyName: std::string const &

        """
        return _simulation.PointOnLineConstraint_setFollowerBodyByName(self, aBodyName)


    def setLineDirection(self, direction):
        """
        setLineDirection(PointOnLineConstraint self, Vec3 direction)

        Parameters
        ----------
        direction: SimTK::Vec3

        """
        return _simulation.PointOnLineConstraint_setLineDirection(self, direction)


    def setPointOnLine(self, point):
        """
        setPointOnLine(PointOnLineConstraint self, Vec3 point)

        Parameters
        ----------
        point: SimTK::Vec3

        """
        return _simulation.PointOnLineConstraint_setPointOnLine(self, point)


    def setPointOnFollower(self, point):
        """
        setPointOnFollower(PointOnLineConstraint self, Vec3 point)

        Parameters
        ----------
        point: SimTK::Vec3

        """
        return _simulation.PointOnLineConstraint_setPointOnFollower(self, point)

PointOnLineConstraint_swigregister = _simulation.PointOnLineConstraint_swigregister
PointOnLineConstraint_swigregister(PointOnLineConstraint)

def PointOnLineConstraint_safeDownCast(obj):
    """
    PointOnLineConstraint_safeDownCast(OpenSimObject obj) -> PointOnLineConstraint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PointOnLineConstraint_safeDownCast(obj)

def PointOnLineConstraint_getClassName():
    """PointOnLineConstraint_getClassName() -> std::string const &"""
    return _simulation.PointOnLineConstraint_getClassName()

class Controller(ModelComponent):
    """Proxy of C++ OpenSim::Controller class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Controller, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Controller, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Controller

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Controller_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Controller self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Controller_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Controller_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Controller self) -> Controller

        Parameters
        ----------
        self: OpenSim::Controller const *

        """
        return _simulation.Controller_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Controller self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Controller const *

        """
        return _simulation.Controller_getConcreteClassName(self)


    def copyProperty_enabled(self, source):
        """
        copyProperty_enabled(Controller self, Controller source)

        Parameters
        ----------
        source: OpenSim::Controller::Self const &

        """
        return _simulation.Controller_copyProperty_enabled(self, source)


    def append_enabled(self, value):
        """
        append_enabled(Controller self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Controller_append_enabled(self, value)


    def constructProperty_enabled(self, initValue):
        """
        constructProperty_enabled(Controller self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Controller_constructProperty_enabled(self, initValue)


    def get_enabled(self, *args):
        """
        get_enabled(Controller self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_enabled(Controller self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Controller const *

        """
        return _simulation.Controller_get_enabled(self, *args)


    def upd_enabled(self, *args):
        """
        upd_enabled(Controller self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_enabled(Controller self) -> bool &

        Parameters
        ----------
        self: OpenSim::Controller *

        """
        return _simulation.Controller_upd_enabled(self, *args)


    def set_enabled(self, *args):
        """
        set_enabled(Controller self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_enabled(Controller self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Controller_set_enabled(self, *args)


    def copyProperty_actuator_list(self, source):
        """
        copyProperty_actuator_list(Controller self, Controller source)

        Parameters
        ----------
        source: OpenSim::Controller::Self const &

        """
        return _simulation.Controller_copyProperty_actuator_list(self, source)


    def get_actuator_list(self, i):
        """
        get_actuator_list(Controller self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _simulation.Controller_get_actuator_list(self, i)


    def upd_actuator_list(self, i):
        """
        upd_actuator_list(Controller self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _simulation.Controller_upd_actuator_list(self, i)


    def set_actuator_list(self, i, value):
        """
        set_actuator_list(Controller self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _simulation.Controller_set_actuator_list(self, i, value)


    def append_actuator_list(self, value):
        """
        append_actuator_list(Controller self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Controller_append_actuator_list(self, value)


    def constructProperty_actuator_list(self):
        """
        constructProperty_actuator_list(Controller self)

        Parameters
        ----------
        self: OpenSim::Controller *

        """
        return _simulation.Controller_constructProperty_actuator_list(self)


    def isEnabled(self):
        """
        isEnabled(Controller self) -> bool

        Parameters
        ----------
        self: OpenSim::Controller const *

        """
        return _simulation.Controller_isEnabled(self)


    def setEnabled(self, enableFlag):
        """
        setEnabled(Controller self, bool enableFlag)

        Parameters
        ----------
        enableFlag: bool

        """
        return _simulation.Controller_setEnabled(self, enableFlag)


    def setActuators(self, actuators):
        """
        setActuators(Controller self, SetActuators actuators)

        Parameters
        ----------
        actuators: OpenSim::Set< OpenSim::Actuator > const &

        """
        return _simulation.Controller_setActuators(self, actuators)


    def addActuator(self, actuator):
        """
        addActuator(Controller self, Actuator actuator)

        Parameters
        ----------
        actuator: OpenSim::Actuator const &

        """
        return _simulation.Controller_addActuator(self, actuator)


    def getActuatorSet(self):
        """
        getActuatorSet(Controller self) -> OpenSim::Set< OpenSim::Actuator const > const &

        Parameters
        ----------
        self: OpenSim::Controller const *

        """
        return _simulation.Controller_getActuatorSet(self)


    def updActuators(self):
        """
        updActuators(Controller self) -> OpenSim::Set< OpenSim::Actuator const > &

        Parameters
        ----------
        self: OpenSim::Controller *

        """
        return _simulation.Controller_updActuators(self)


    def computeControls(self, s, controls):
        """
        computeControls(Controller self, State s, Vector controls)

        Parameters
        ----------
        s: SimTK::State const &
        controls: SimTK::Vector &

        """
        return _simulation.Controller_computeControls(self, s, controls)


    def getNumControls(self):
        """
        getNumControls(Controller self) -> int

        Parameters
        ----------
        self: OpenSim::Controller const *

        """
        return _simulation.Controller_getNumControls(self)

    __swig_destroy__ = _simulation.delete_Controller
    __del__ = lambda self: None
Controller_swigregister = _simulation.Controller_swigregister
Controller_swigregister(Controller)

def Controller_safeDownCast(obj):
    """
    Controller_safeDownCast(OpenSimObject obj) -> Controller

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Controller_safeDownCast(obj)

def Controller_getClassName():
    """Controller_getClassName() -> std::string const &"""
    return _simulation.Controller_getClassName()

class SetControllers(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::Controller,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetControllers, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetControllers, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetControllers

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetControllers_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetControllers self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetControllers_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetControllers_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetControllers self) -> SetControllers

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Controller,OpenSim::ModelComponent > const *

        """
        return _simulation.SetControllers_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetControllers self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Controller,OpenSim::ModelComponent > const *

        """
        return _simulation.SetControllers_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetControllers
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Controller,OpenSim::ModelComponent)> self) -> SetControllers
        __init__(OpenSim::Set<(OpenSim::Controller,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetControllers

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Controller,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetControllers

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Controller,OpenSim::ModelComponent)> self, SetControllers aSet) -> SetControllers

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Controller,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetControllers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetControllers self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Controller,OpenSim::ModelComponent > *

        """
        return _simulation.SetControllers_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetControllers self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetControllers_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetControllers self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetControllers_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetControllers self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Controller,OpenSim::ModelComponent > const *

        """
        return _simulation.SetControllers_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetControllers self, Controller aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Controller const *
        aStartIndex: int

        getIndex(SetControllers self, Controller aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Controller const *

        getIndex(SetControllers self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetControllers self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetControllers_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetControllers self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetControllers_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetControllers self, Controller aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Controller *

        """
        return _simulation.SetControllers_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetControllers self, Controller aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Controller const &

        """
        return _simulation.SetControllers_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetControllers self, int aIndex, Controller aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Controller *

        """
        return _simulation.SetControllers_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetControllers self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetControllers self, Controller aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Controller const *

        """
        return _simulation.SetControllers_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetControllers self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Controller,OpenSim::ModelComponent > *

        """
        return _simulation.SetControllers_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetControllers self, int aIndex, Controller aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Controller *
        preserveGroups: bool

        set(SetControllers self, int aIndex, Controller aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Controller *

        """
        return _simulation.SetControllers_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetControllers self, int aIndex) -> Controller

        Parameters
        ----------
        aIndex: int

        get(SetControllers self, std::string const & aName) -> Controller

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetControllers_get(self, *args)


    def contains(self, aName):
        """
        contains(SetControllers self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetControllers_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetControllers self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetControllers_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetControllers self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Controller,OpenSim::ModelComponent > const *

        """
        return _simulation.SetControllers_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetControllers self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetControllers_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetControllers self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetControllers_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetControllers self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetControllers_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetControllers self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetControllers_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetControllers self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetControllers_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetControllers self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetControllers self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetControllers_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetControllers_swigregister = _simulation.SetControllers_swigregister
SetControllers_swigregister(SetControllers)

def SetControllers_safeDownCast(obj):
    """
    SetControllers_safeDownCast(OpenSimObject obj) -> SetControllers

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetControllers_safeDownCast(obj)

def SetControllers_getClassName():
    """SetControllers_getClassName() -> std::string const &"""
    return _simulation.SetControllers_getClassName()

class ModelComponentSetControllers(SetControllers):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Controller)> class."""

    __swig_setmethods__ = {}
    for _s in [SetControllers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetControllers, name, value)
    __swig_getmethods__ = {}
    for _s in [SetControllers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetControllers, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetControllers

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetControllers_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetControllers self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetControllers_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetControllers_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetControllers self) -> ModelComponentSetControllers

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Controller > const *

        """
        return _simulation.ModelComponentSetControllers_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetControllers self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Controller > const *

        """
        return _simulation.ModelComponentSetControllers_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetControllers self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Controller > *

        """
        return _simulation.ModelComponentSetControllers_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::Controller)> self) -> ModelComponentSetControllers"""
        this = _simulation.new_ModelComponentSetControllers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetControllers
    __del__ = lambda self: None
ModelComponentSetControllers_swigregister = _simulation.ModelComponentSetControllers_swigregister
ModelComponentSetControllers_swigregister(ModelComponentSetControllers)

def ModelComponentSetControllers_safeDownCast(obj):
    """
    ModelComponentSetControllers_safeDownCast(OpenSimObject obj) -> ModelComponentSetControllers

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetControllers_safeDownCast(obj)

def ModelComponentSetControllers_getClassName():
    """ModelComponentSetControllers_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetControllers_getClassName()

class ControllerSet(ModelComponentSetControllers):
    """Proxy of C++ OpenSim::ControllerSet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetControllers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetControllers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControllerSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ControllerSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ControllerSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ControllerSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ControllerSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ControllerSet self) -> ControllerSet

        Parameters
        ----------
        self: OpenSim::ControllerSet const *

        """
        return _simulation.ControllerSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControllerSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ControllerSet const *

        """
        return _simulation.ControllerSet_getConcreteClassName(self)


    def constructStorage(self):
        """
        constructStorage(ControllerSet self)

        Parameters
        ----------
        self: OpenSim::ControllerSet *

        """
        return _simulation.ControllerSet_constructStorage(self)


    def storeControls(self, s, step):
        """
        storeControls(ControllerSet self, State s, int step)

        Parameters
        ----------
        s: SimTK::State const &
        step: int

        """
        return _simulation.ControllerSet_storeControls(self, s, step)


    def printControlStorage(self, fileName):
        """
        printControlStorage(ControllerSet self, std::string const & fileName)

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.ControllerSet_printControlStorage(self, fileName)


    def getControlTable(self):
        """
        getControlTable(ControllerSet self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::ControllerSet const *

        """
        return _simulation.ControllerSet_getControlTable(self)


    def setActuators(self, actuators):
        """
        setActuators(ControllerSet self, SetActuators actuators)

        Parameters
        ----------
        actuators: OpenSim::Set< OpenSim::Actuator > &

        """
        return _simulation.ControllerSet_setActuators(self, actuators)


    def setDesiredStates(self, yStore):
        """
        setDesiredStates(ControllerSet self, Storage yStore)

        Parameters
        ----------
        yStore: OpenSim::Storage *

        """
        return _simulation.ControllerSet_setDesiredStates(self, yStore)


    def computeControls(self, s, controls):
        """
        computeControls(ControllerSet self, State s, Vector controls)

        Parameters
        ----------
        s: SimTK::State const &
        controls: SimTK::Vector &

        """
        return _simulation.ControllerSet_computeControls(self, s, controls)


    def printInfo(self):
        """
        printInfo(ControllerSet self)

        Parameters
        ----------
        self: OpenSim::ControllerSet const *

        """
        return _simulation.ControllerSet_printInfo(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ControllerSet self) -> ControllerSet
        __init__(OpenSim::ControllerSet self, std::string const & file, bool updateFromXML=True) -> ControllerSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::ControllerSet self, std::string const & file) -> ControllerSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_ControllerSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ControllerSet
    __del__ = lambda self: None
ControllerSet_swigregister = _simulation.ControllerSet_swigregister
ControllerSet_swigregister(ControllerSet)

def ControllerSet_safeDownCast(obj):
    """
    ControllerSet_safeDownCast(OpenSimObject obj) -> ControllerSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ControllerSet_safeDownCast(obj)

def ControllerSet_getClassName():
    """ControllerSet_getClassName() -> std::string const &"""
    return _simulation.ControllerSet_getClassName()

class ExternalLoads(ModelComponentSetExternalForces):
    """Proxy of C++ OpenSim::ExternalLoads class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetExternalForces]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalLoads, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetExternalForces]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalLoads, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExternalLoads

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ExternalLoads_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ExternalLoads self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ExternalLoads_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ExternalLoads_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ExternalLoads self) -> ExternalLoads

        Parameters
        ----------
        self: OpenSim::ExternalLoads const *

        """
        return _simulation.ExternalLoads_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExternalLoads self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalLoads const *

        """
        return _simulation.ExternalLoads_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExternalLoads self) -> ExternalLoads
        __init__(OpenSim::ExternalLoads self, std::string const & fileName, bool aUpdateFromXMLNode) -> ExternalLoads

        Parameters
        ----------
        fileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::ExternalLoads self, ExternalLoads aExternalLoads) -> ExternalLoads

        Parameters
        ----------
        aExternalLoads: OpenSim::ExternalLoads const &

        """
        this = _simulation.new_ExternalLoads(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ExternalLoads
    __del__ = lambda self: None

    def copyData(self, otherExternalLoads):
        """
        copyData(ExternalLoads self, ExternalLoads otherExternalLoads)

        Parameters
        ----------
        otherExternalLoads: OpenSim::ExternalLoads const &

        """
        return _simulation.ExternalLoads_copyData(self, otherExternalLoads)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(ExternalLoads self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(ExternalLoads self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _simulation.ExternalLoads_updateFromXMLNode(self, aNode, versionNumber)


    def extendConnectToModel(self, aModel):
        """
        extendConnectToModel(ExternalLoads self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.ExternalLoads_extendConnectToModel(self, aModel)


    def getDataFileName(self):
        """
        getDataFileName(ExternalLoads self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalLoads const *

        """
        return _simulation.ExternalLoads_getDataFileName(self)


    def setDataFileName(self, aNewFile):
        """
        setDataFileName(ExternalLoads self, std::string const & aNewFile)

        Parameters
        ----------
        aNewFile: std::string const &

        """
        return _simulation.ExternalLoads_setDataFileName(self, aNewFile)


    def getExternalLoadsModelKinematicsFileName(self):
        """
        getExternalLoadsModelKinematicsFileName(ExternalLoads self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExternalLoads const *

        """
        return _simulation.ExternalLoads_getExternalLoadsModelKinematicsFileName(self)


    def setExternalLoadsModelKinematicsFileName(self, aFileName):
        """
        setExternalLoadsModelKinematicsFileName(ExternalLoads self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _simulation.ExternalLoads_setExternalLoadsModelKinematicsFileName(self, aFileName)


    def getLowpassCutoffFrequencyForLoadKinematics(self):
        """
        getLowpassCutoffFrequencyForLoadKinematics(ExternalLoads self) -> double

        Parameters
        ----------
        self: OpenSim::ExternalLoads const *

        """
        return _simulation.ExternalLoads_getLowpassCutoffFrequencyForLoadKinematics(self)


    def setLowpassCutoffFrequencyForLoadKinematics(self, aLowpassCutoffFrequency):
        """
        setLowpassCutoffFrequencyForLoadKinematics(ExternalLoads self, double aLowpassCutoffFrequency)

        Parameters
        ----------
        aLowpassCutoffFrequency: double

        """
        return _simulation.ExternalLoads_setLowpassCutoffFrequencyForLoadKinematics(self, aLowpassCutoffFrequency)


    def transformPointsExpressedInGroundToAppliedBodies(self, *args):
        """
        transformPointsExpressedInGroundToAppliedBodies(ExternalLoads self, Storage kinematics, double startTime, double endTime)

        Parameters
        ----------
        kinematics: OpenSim::Storage const &
        startTime: double
        endTime: double

        transformPointsExpressedInGroundToAppliedBodies(ExternalLoads self, Storage kinematics, double startTime)

        Parameters
        ----------
        kinematics: OpenSim::Storage const &
        startTime: double

        transformPointsExpressedInGroundToAppliedBodies(ExternalLoads self, Storage kinematics)

        Parameters
        ----------
        kinematics: OpenSim::Storage const &

        """
        return _simulation.ExternalLoads_transformPointsExpressedInGroundToAppliedBodies(self, *args)


    def transformPointExpressedInGroundToAppliedBody(self, exForce, kinematics, startTime, endTime):
        """
        transformPointExpressedInGroundToAppliedBody(ExternalLoads self, ExternalForce exForce, Storage kinematics, double startTime, double endTime) -> ExternalForce

        Parameters
        ----------
        exForce: OpenSim::ExternalForce const &
        kinematics: OpenSim::Storage const &
        startTime: double
        endTime: double

        """
        return _simulation.ExternalLoads_transformPointExpressedInGroundToAppliedBody(self, exForce, kinematics, startTime, endTime)


    def clearLoadedFromFile(self):
        """
        clearLoadedFromFile(ExternalLoads self)

        Parameters
        ----------
        self: OpenSim::ExternalLoads *

        """
        return _simulation.ExternalLoads_clearLoadedFromFile(self)

ExternalLoads_swigregister = _simulation.ExternalLoads_swigregister
ExternalLoads_swigregister(ExternalLoads)

def ExternalLoads_safeDownCast(obj):
    """
    ExternalLoads_safeDownCast(OpenSimObject obj) -> ExternalLoads

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ExternalLoads_safeDownCast(obj)

def ExternalLoads_getClassName():
    """ExternalLoads_getClassName() -> std::string const &"""
    return _simulation.ExternalLoads_getClassName()

class PrescribedForce(Force):
    """Proxy of C++ OpenSim::PrescribedForce class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrescribedForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrescribedForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PrescribedForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PrescribedForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PrescribedForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PrescribedForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PrescribedForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PrescribedForce self) -> PrescribedForce

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PrescribedForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getConcreteClassName(self)


    def copyProperty_pointIsGlobal(self, source):
        """
        copyProperty_pointIsGlobal(PrescribedForce self, PrescribedForce source)

        Parameters
        ----------
        source: OpenSim::PrescribedForce::Self const &

        """
        return _simulation.PrescribedForce_copyProperty_pointIsGlobal(self, source)


    def append_pointIsGlobal(self, value):
        """
        append_pointIsGlobal(PrescribedForce self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.PrescribedForce_append_pointIsGlobal(self, value)


    def constructProperty_pointIsGlobal(self, initValue):
        """
        constructProperty_pointIsGlobal(PrescribedForce self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.PrescribedForce_constructProperty_pointIsGlobal(self, initValue)


    def get_pointIsGlobal(self, *args):
        """
        get_pointIsGlobal(PrescribedForce self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_pointIsGlobal(PrescribedForce self) -> bool const &

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_get_pointIsGlobal(self, *args)


    def upd_pointIsGlobal(self, *args):
        """
        upd_pointIsGlobal(PrescribedForce self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_pointIsGlobal(PrescribedForce self) -> bool &

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_upd_pointIsGlobal(self, *args)


    def set_pointIsGlobal(self, *args):
        """
        set_pointIsGlobal(PrescribedForce self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_pointIsGlobal(PrescribedForce self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.PrescribedForce_set_pointIsGlobal(self, *args)


    def copyProperty_forceIsGlobal(self, source):
        """
        copyProperty_forceIsGlobal(PrescribedForce self, PrescribedForce source)

        Parameters
        ----------
        source: OpenSim::PrescribedForce::Self const &

        """
        return _simulation.PrescribedForce_copyProperty_forceIsGlobal(self, source)


    def append_forceIsGlobal(self, value):
        """
        append_forceIsGlobal(PrescribedForce self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.PrescribedForce_append_forceIsGlobal(self, value)


    def constructProperty_forceIsGlobal(self, initValue):
        """
        constructProperty_forceIsGlobal(PrescribedForce self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.PrescribedForce_constructProperty_forceIsGlobal(self, initValue)


    def get_forceIsGlobal(self, *args):
        """
        get_forceIsGlobal(PrescribedForce self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_forceIsGlobal(PrescribedForce self) -> bool const &

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_get_forceIsGlobal(self, *args)


    def upd_forceIsGlobal(self, *args):
        """
        upd_forceIsGlobal(PrescribedForce self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_forceIsGlobal(PrescribedForce self) -> bool &

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_upd_forceIsGlobal(self, *args)


    def set_forceIsGlobal(self, *args):
        """
        set_forceIsGlobal(PrescribedForce self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_forceIsGlobal(PrescribedForce self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.PrescribedForce_set_forceIsGlobal(self, *args)


    def copyProperty_forceFunctions(self, source):
        """
        copyProperty_forceFunctions(PrescribedForce self, PrescribedForce source)

        Parameters
        ----------
        source: OpenSim::PrescribedForce::Self const &

        """
        return _simulation.PrescribedForce_copyProperty_forceFunctions(self, source)


    def append_forceFunctions(self, value):
        """
        append_forceFunctions(PrescribedForce self, FunctionSet value) -> int

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_append_forceFunctions(self, value)


    def constructProperty_forceFunctions(self, initValue):
        """
        constructProperty_forceFunctions(PrescribedForce self, FunctionSet initValue)

        Parameters
        ----------
        initValue: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_constructProperty_forceFunctions(self, initValue)


    def get_forceFunctions(self, *args):
        """
        get_forceFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        get_forceFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_get_forceFunctions(self, *args)


    def upd_forceFunctions(self, *args):
        """
        upd_forceFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        upd_forceFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_upd_forceFunctions(self, *args)


    def set_forceFunctions(self, *args):
        """
        set_forceFunctions(PrescribedForce self, int i, FunctionSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::FunctionSet const &

        set_forceFunctions(PrescribedForce self, FunctionSet value)

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_set_forceFunctions(self, *args)


    def copyProperty_pointFunctions(self, source):
        """
        copyProperty_pointFunctions(PrescribedForce self, PrescribedForce source)

        Parameters
        ----------
        source: OpenSim::PrescribedForce::Self const &

        """
        return _simulation.PrescribedForce_copyProperty_pointFunctions(self, source)


    def append_pointFunctions(self, value):
        """
        append_pointFunctions(PrescribedForce self, FunctionSet value) -> int

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_append_pointFunctions(self, value)


    def constructProperty_pointFunctions(self, initValue):
        """
        constructProperty_pointFunctions(PrescribedForce self, FunctionSet initValue)

        Parameters
        ----------
        initValue: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_constructProperty_pointFunctions(self, initValue)


    def get_pointFunctions(self, *args):
        """
        get_pointFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        get_pointFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_get_pointFunctions(self, *args)


    def upd_pointFunctions(self, *args):
        """
        upd_pointFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        upd_pointFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_upd_pointFunctions(self, *args)


    def set_pointFunctions(self, *args):
        """
        set_pointFunctions(PrescribedForce self, int i, FunctionSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::FunctionSet const &

        set_pointFunctions(PrescribedForce self, FunctionSet value)

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_set_pointFunctions(self, *args)


    def copyProperty_torqueFunctions(self, source):
        """
        copyProperty_torqueFunctions(PrescribedForce self, PrescribedForce source)

        Parameters
        ----------
        source: OpenSim::PrescribedForce::Self const &

        """
        return _simulation.PrescribedForce_copyProperty_torqueFunctions(self, source)


    def append_torqueFunctions(self, value):
        """
        append_torqueFunctions(PrescribedForce self, FunctionSet value) -> int

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_append_torqueFunctions(self, value)


    def constructProperty_torqueFunctions(self, initValue):
        """
        constructProperty_torqueFunctions(PrescribedForce self, FunctionSet initValue)

        Parameters
        ----------
        initValue: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_constructProperty_torqueFunctions(self, initValue)


    def get_torqueFunctions(self, *args):
        """
        get_torqueFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        get_torqueFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_get_torqueFunctions(self, *args)


    def upd_torqueFunctions(self, *args):
        """
        upd_torqueFunctions(PrescribedForce self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        upd_torqueFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_upd_torqueFunctions(self, *args)


    def set_torqueFunctions(self, *args):
        """
        set_torqueFunctions(PrescribedForce self, int i, FunctionSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::FunctionSet const &

        set_torqueFunctions(PrescribedForce self, FunctionSet value)

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedForce_set_torqueFunctions(self, *args)

    __swig_setmethods__["PropertyIndex_socket_frame"] = _simulation.PrescribedForce_PropertyIndex_socket_frame_set
    __swig_getmethods__["PropertyIndex_socket_frame"] = _simulation.PrescribedForce_PropertyIndex_socket_frame_get
    if _newclass:
        PropertyIndex_socket_frame = _swig_property(_simulation.PrescribedForce_PropertyIndex_socket_frame_get, _simulation.PrescribedForce_PropertyIndex_socket_frame_set)

    def connectSocket_frame(self, object):
        """
        connectSocket_frame(PrescribedForce self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.PrescribedForce_connectSocket_frame(self, object)

    __swig_setmethods__["_has_output_force_applied"] = _simulation.PrescribedForce__has_output_force_applied_set
    __swig_getmethods__["_has_output_force_applied"] = _simulation.PrescribedForce__has_output_force_applied_get
    if _newclass:
        _has_output_force_applied = _swig_property(_simulation.PrescribedForce__has_output_force_applied_get, _simulation.PrescribedForce__has_output_force_applied_set)
    __swig_setmethods__["_has_output_torque_applied"] = _simulation.PrescribedForce__has_output_torque_applied_set
    __swig_getmethods__["_has_output_torque_applied"] = _simulation.PrescribedForce__has_output_torque_applied_get
    if _newclass:
        _has_output_torque_applied = _swig_property(_simulation.PrescribedForce__has_output_torque_applied_get, _simulation.PrescribedForce__has_output_torque_applied_set)
    __swig_setmethods__["_has_output_point_of_application"] = _simulation.PrescribedForce__has_output_point_of_application_set
    __swig_getmethods__["_has_output_point_of_application"] = _simulation.PrescribedForce__has_output_point_of_application_get
    if _newclass:
        _has_output_point_of_application = _swig_property(_simulation.PrescribedForce__has_output_point_of_application_get, _simulation.PrescribedForce__has_output_point_of_application_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::PrescribedForce self) -> PrescribedForce
        __init__(OpenSim::PrescribedForce self, std::string const & name, PhysicalFrame frame) -> PrescribedForce

        Parameters
        ----------
        name: std::string const &
        frame: OpenSim::PhysicalFrame const &

        __init__(OpenSim::PrescribedForce self, SimTK::Xml::Element & aNode) -> PrescribedForce

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        this = _simulation.new_PrescribedForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(PrescribedForce self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(PrescribedForce self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _simulation.PrescribedForce_updateFromXMLNode(self, aNode, versionNumber)


    def setFrameName(self, aBodyName):
        """
        setFrameName(PrescribedForce self, std::string const & aBodyName)

        Parameters
        ----------
        aBodyName: std::string const &

        """
        return _simulation.PrescribedForce_setFrameName(self, aBodyName)


    def getFrameName(self):
        """
        getFrameName(PrescribedForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getFrameName(self)


    def setBodyName(self, aBodyName):
        """
        setBodyName(PrescribedForce self, std::string const & aBodyName)

        Parameters
        ----------
        aBodyName: std::string const &

        """
        return _simulation.PrescribedForce_setBodyName(self, aBodyName)


    def getBodyName(self):
        """
        getBodyName(PrescribedForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getBodyName(self)


    def setForceFunctions(self, forceX, forceY, forceZ):
        """
        setForceFunctions(PrescribedForce self, Function forceX, Function forceY, Function forceZ)

        Parameters
        ----------
        forceX: OpenSim::Function *
        forceY: OpenSim::Function *
        forceZ: OpenSim::Function *

        """
        return _simulation.PrescribedForce_setForceFunctions(self, forceX, forceY, forceZ)


    def getForceFunctions(self):
        """
        getForceFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getForceFunctions(self)


    def updForceFunctions(self):
        """
        updForceFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_updForceFunctions(self)


    def getForceFunctionNames(self, aFunctionNames):
        """
        getForceFunctionNames(PrescribedForce self, ArrayStr aFunctionNames)

        Parameters
        ----------
        aFunctionNames: OpenSim::Array< std::string > &

        """
        return _simulation.PrescribedForce_getForceFunctionNames(self, aFunctionNames)


    def setForceFunctionNames(self, aFunctionNames, kineticsStore):
        """
        setForceFunctionNames(PrescribedForce self, ArrayStr aFunctionNames, Storage kineticsStore)

        Parameters
        ----------
        aFunctionNames: OpenSim::Array< std::string > const &
        kineticsStore: OpenSim::Storage const &

        """
        return _simulation.PrescribedForce_setForceFunctionNames(self, aFunctionNames, kineticsStore)


    def clearForceFunctions(self):
        """
        clearForceFunctions(PrescribedForce self)

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_clearForceFunctions(self)


    def setPointFunctions(self, pointX, pointY, pointZ):
        """
        setPointFunctions(PrescribedForce self, Function pointX, Function pointY, Function pointZ)

        Parameters
        ----------
        pointX: OpenSim::Function *
        pointY: OpenSim::Function *
        pointZ: OpenSim::Function *

        """
        return _simulation.PrescribedForce_setPointFunctions(self, pointX, pointY, pointZ)


    def getPointFunctions(self):
        """
        getPointFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getPointFunctions(self)


    def updPointFunctions(self):
        """
        updPointFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_updPointFunctions(self)


    def getPointFunctionNames(self, aFunctionNames):
        """
        getPointFunctionNames(PrescribedForce self, ArrayStr aFunctionNames)

        Parameters
        ----------
        aFunctionNames: OpenSim::Array< std::string > &

        """
        return _simulation.PrescribedForce_getPointFunctionNames(self, aFunctionNames)


    def setPointFunctionNames(self, aFunctionNames, kineticsStore):
        """
        setPointFunctionNames(PrescribedForce self, ArrayStr aFunctionNames, Storage kineticsStore)

        Parameters
        ----------
        aFunctionNames: OpenSim::Array< std::string > const &
        kineticsStore: OpenSim::Storage const &

        """
        return _simulation.PrescribedForce_setPointFunctionNames(self, aFunctionNames, kineticsStore)


    def clearPointFunctions(self):
        """
        clearPointFunctions(PrescribedForce self)

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_clearPointFunctions(self)


    def setTorqueFunctions(self, torqueX, torqueY, torqueZ):
        """
        setTorqueFunctions(PrescribedForce self, Function torqueX, Function torqueY, Function torqueZ)

        Parameters
        ----------
        torqueX: OpenSim::Function *
        torqueY: OpenSim::Function *
        torqueZ: OpenSim::Function *

        """
        return _simulation.PrescribedForce_setTorqueFunctions(self, torqueX, torqueY, torqueZ)


    def getTorqueFunctions(self):
        """
        getTorqueFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getTorqueFunctions(self)


    def updTorqueFunctions(self):
        """
        updTorqueFunctions(PrescribedForce self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_updTorqueFunctions(self)


    def getTorqueFunctionNames(self, aFunctionNames):
        """
        getTorqueFunctionNames(PrescribedForce self, ArrayStr aFunctionNames)

        Parameters
        ----------
        aFunctionNames: OpenSim::Array< std::string > &

        """
        return _simulation.PrescribedForce_getTorqueFunctionNames(self, aFunctionNames)


    def setTorqueFunctionNames(self, aFunctionNames, kineticsStore):
        """
        setTorqueFunctionNames(PrescribedForce self, ArrayStr aFunctionNames, Storage kineticsStore)

        Parameters
        ----------
        aFunctionNames: OpenSim::Array< std::string > const &
        kineticsStore: OpenSim::Storage const &

        """
        return _simulation.PrescribedForce_setTorqueFunctionNames(self, aFunctionNames, kineticsStore)


    def clearTorqueFunctions(self):
        """
        clearTorqueFunctions(PrescribedForce self)

        Parameters
        ----------
        self: OpenSim::PrescribedForce *

        """
        return _simulation.PrescribedForce_clearTorqueFunctions(self)


    def getForceIsInGlobalFrame(self):
        """
        getForceIsInGlobalFrame(PrescribedForce self) -> bool

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getForceIsInGlobalFrame(self)


    def setForceIsInGlobalFrame(self, isGlobal):
        """
        setForceIsInGlobalFrame(PrescribedForce self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _simulation.PrescribedForce_setForceIsInGlobalFrame(self, isGlobal)


    def getPointIsInGlobalFrame(self):
        """
        getPointIsInGlobalFrame(PrescribedForce self) -> bool

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getPointIsInGlobalFrame(self)


    def setPointIsInGlobalFrame(self, isGlobal):
        """
        setPointIsInGlobalFrame(PrescribedForce self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _simulation.PrescribedForce_setPointIsInGlobalFrame(self, isGlobal)


    def getFrame(self):
        """
        getFrame(PrescribedForce self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getFrame(self)


    def getForceAtTime(self, aTime):
        """
        getForceAtTime(PrescribedForce self, double aTime) -> Vec3

        Parameters
        ----------
        aTime: double

        """
        return _simulation.PrescribedForce_getForceAtTime(self, aTime)


    def getPointAtTime(self, aTime):
        """
        getPointAtTime(PrescribedForce self, double aTime) -> Vec3

        Parameters
        ----------
        aTime: double

        """
        return _simulation.PrescribedForce_getPointAtTime(self, aTime)


    def getTorqueAtTime(self, aTime):
        """
        getTorqueAtTime(PrescribedForce self, double aTime) -> Vec3

        Parameters
        ----------
        aTime: double

        """
        return _simulation.PrescribedForce_getTorqueAtTime(self, aTime)


    def getRecordLabels(self):
        """
        getRecordLabels(PrescribedForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::PrescribedForce const *

        """
        return _simulation.PrescribedForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(PrescribedForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.PrescribedForce_getRecordValues(self, state)


    def getForceApplied(self, state):
        """
        getForceApplied(PrescribedForce self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.PrescribedForce_getForceApplied(self, state)


    def getTorqueApplied(self, state):
        """
        getTorqueApplied(PrescribedForce self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.PrescribedForce_getTorqueApplied(self, state)


    def getApplicationPoint(self, state):
        """
        getApplicationPoint(PrescribedForce self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.PrescribedForce_getApplicationPoint(self, state)

    __swig_destroy__ = _simulation.delete_PrescribedForce
    __del__ = lambda self: None
PrescribedForce_swigregister = _simulation.PrescribedForce_swigregister
PrescribedForce_swigregister(PrescribedForce)

def PrescribedForce_safeDownCast(obj):
    """
    PrescribedForce_safeDownCast(OpenSimObject obj) -> PrescribedForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PrescribedForce_safeDownCast(obj)

def PrescribedForce_getClassName():
    """PrescribedForce_getClassName() -> std::string const &"""
    return _simulation.PrescribedForce_getClassName()

class CoordinateLimitForce(Force):
    """Proxy of C++ OpenSim::CoordinateLimitForce class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateLimitForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateLimitForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateLimitForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.CoordinateLimitForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CoordinateLimitForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.CoordinateLimitForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.CoordinateLimitForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CoordinateLimitForce self) -> CoordinateLimitForce

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateLimitForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_getConcreteClassName(self)


    def copyProperty_coordinate(self, source):
        """
        copyProperty_coordinate(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters
        ----------
        source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _simulation.CoordinateLimitForce_copyProperty_coordinate(self, source)


    def append_coordinate(self, value):
        """
        append_coordinate(CoordinateLimitForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.CoordinateLimitForce_append_coordinate(self, value)


    def constructProperty_coordinate(self, initValue):
        """
        constructProperty_coordinate(CoordinateLimitForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.CoordinateLimitForce_constructProperty_coordinate(self, initValue)


    def get_coordinate(self, *args):
        """
        get_coordinate(CoordinateLimitForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate(CoordinateLimitForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_get_coordinate(self, *args)


    def upd_coordinate(self, *args):
        """
        upd_coordinate(CoordinateLimitForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate(CoordinateLimitForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce *

        """
        return _simulation.CoordinateLimitForce_upd_coordinate(self, *args)


    def set_coordinate(self, *args):
        """
        set_coordinate(CoordinateLimitForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate(CoordinateLimitForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.CoordinateLimitForce_set_coordinate(self, *args)


    def copyProperty_upper_stiffness(self, source):
        """
        copyProperty_upper_stiffness(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters
        ----------
        source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _simulation.CoordinateLimitForce_copyProperty_upper_stiffness(self, source)


    def append_upper_stiffness(self, value):
        """
        append_upper_stiffness(CoordinateLimitForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_append_upper_stiffness(self, value)


    def constructProperty_upper_stiffness(self, initValue):
        """
        constructProperty_upper_stiffness(CoordinateLimitForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.CoordinateLimitForce_constructProperty_upper_stiffness(self, initValue)


    def get_upper_stiffness(self, *args):
        """
        get_upper_stiffness(CoordinateLimitForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_upper_stiffness(CoordinateLimitForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_get_upper_stiffness(self, *args)


    def upd_upper_stiffness(self, *args):
        """
        upd_upper_stiffness(CoordinateLimitForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_upper_stiffness(CoordinateLimitForce self) -> double &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce *

        """
        return _simulation.CoordinateLimitForce_upd_upper_stiffness(self, *args)


    def set_upper_stiffness(self, *args):
        """
        set_upper_stiffness(CoordinateLimitForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_upper_stiffness(CoordinateLimitForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_set_upper_stiffness(self, *args)


    def copyProperty_upper_limit(self, source):
        """
        copyProperty_upper_limit(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters
        ----------
        source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _simulation.CoordinateLimitForce_copyProperty_upper_limit(self, source)


    def append_upper_limit(self, value):
        """
        append_upper_limit(CoordinateLimitForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_append_upper_limit(self, value)


    def constructProperty_upper_limit(self, initValue):
        """
        constructProperty_upper_limit(CoordinateLimitForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.CoordinateLimitForce_constructProperty_upper_limit(self, initValue)


    def get_upper_limit(self, *args):
        """
        get_upper_limit(CoordinateLimitForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_upper_limit(CoordinateLimitForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_get_upper_limit(self, *args)


    def upd_upper_limit(self, *args):
        """
        upd_upper_limit(CoordinateLimitForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_upper_limit(CoordinateLimitForce self) -> double &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce *

        """
        return _simulation.CoordinateLimitForce_upd_upper_limit(self, *args)


    def set_upper_limit(self, *args):
        """
        set_upper_limit(CoordinateLimitForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_upper_limit(CoordinateLimitForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_set_upper_limit(self, *args)


    def copyProperty_lower_stiffness(self, source):
        """
        copyProperty_lower_stiffness(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters
        ----------
        source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _simulation.CoordinateLimitForce_copyProperty_lower_stiffness(self, source)


    def append_lower_stiffness(self, value):
        """
        append_lower_stiffness(CoordinateLimitForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_append_lower_stiffness(self, value)


    def constructProperty_lower_stiffness(self, initValue):
        """
        constructProperty_lower_stiffness(CoordinateLimitForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.CoordinateLimitForce_constructProperty_lower_stiffness(self, initValue)


    def get_lower_stiffness(self, *args):
        """
        get_lower_stiffness(CoordinateLimitForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_lower_stiffness(CoordinateLimitForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_get_lower_stiffness(self, *args)


    def upd_lower_stiffness(self, *args):
        """
        upd_lower_stiffness(CoordinateLimitForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_lower_stiffness(CoordinateLimitForce self) -> double &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce *

        """
        return _simulation.CoordinateLimitForce_upd_lower_stiffness(self, *args)


    def set_lower_stiffness(self, *args):
        """
        set_lower_stiffness(CoordinateLimitForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_lower_stiffness(CoordinateLimitForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_set_lower_stiffness(self, *args)


    def copyProperty_lower_limit(self, source):
        """
        copyProperty_lower_limit(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters
        ----------
        source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _simulation.CoordinateLimitForce_copyProperty_lower_limit(self, source)


    def append_lower_limit(self, value):
        """
        append_lower_limit(CoordinateLimitForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_append_lower_limit(self, value)


    def constructProperty_lower_limit(self, initValue):
        """
        constructProperty_lower_limit(CoordinateLimitForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.CoordinateLimitForce_constructProperty_lower_limit(self, initValue)


    def get_lower_limit(self, *args):
        """
        get_lower_limit(CoordinateLimitForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_lower_limit(CoordinateLimitForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_get_lower_limit(self, *args)


    def upd_lower_limit(self, *args):
        """
        upd_lower_limit(CoordinateLimitForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_lower_limit(CoordinateLimitForce self) -> double &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce *

        """
        return _simulation.CoordinateLimitForce_upd_lower_limit(self, *args)


    def set_lower_limit(self, *args):
        """
        set_lower_limit(CoordinateLimitForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_lower_limit(CoordinateLimitForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_set_lower_limit(self, *args)


    def copyProperty_damping(self, source):
        """
        copyProperty_damping(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters
        ----------
        source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _simulation.CoordinateLimitForce_copyProperty_damping(self, source)


    def append_damping(self, value):
        """
        append_damping(CoordinateLimitForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_append_damping(self, value)


    def constructProperty_damping(self, initValue):
        """
        constructProperty_damping(CoordinateLimitForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.CoordinateLimitForce_constructProperty_damping(self, initValue)


    def get_damping(self, *args):
        """
        get_damping(CoordinateLimitForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_damping(CoordinateLimitForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_get_damping(self, *args)


    def upd_damping(self, *args):
        """
        upd_damping(CoordinateLimitForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_damping(CoordinateLimitForce self) -> double &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce *

        """
        return _simulation.CoordinateLimitForce_upd_damping(self, *args)


    def set_damping(self, *args):
        """
        set_damping(CoordinateLimitForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_damping(CoordinateLimitForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_set_damping(self, *args)


    def copyProperty_transition(self, source):
        """
        copyProperty_transition(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters
        ----------
        source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _simulation.CoordinateLimitForce_copyProperty_transition(self, source)


    def append_transition(self, value):
        """
        append_transition(CoordinateLimitForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_append_transition(self, value)


    def constructProperty_transition(self, initValue):
        """
        constructProperty_transition(CoordinateLimitForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.CoordinateLimitForce_constructProperty_transition(self, initValue)


    def get_transition(self, *args):
        """
        get_transition(CoordinateLimitForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_transition(CoordinateLimitForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_get_transition(self, *args)


    def upd_transition(self, *args):
        """
        upd_transition(CoordinateLimitForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_transition(CoordinateLimitForce self) -> double &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce *

        """
        return _simulation.CoordinateLimitForce_upd_transition(self, *args)


    def set_transition(self, *args):
        """
        set_transition(CoordinateLimitForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_transition(CoordinateLimitForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.CoordinateLimitForce_set_transition(self, *args)


    def copyProperty_compute_dissipation_energy(self, source):
        """
        copyProperty_compute_dissipation_energy(CoordinateLimitForce self, CoordinateLimitForce source)

        Parameters
        ----------
        source: OpenSim::CoordinateLimitForce::Self const &

        """
        return _simulation.CoordinateLimitForce_copyProperty_compute_dissipation_energy(self, source)


    def append_compute_dissipation_energy(self, value):
        """
        append_compute_dissipation_energy(CoordinateLimitForce self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.CoordinateLimitForce_append_compute_dissipation_energy(self, value)


    def constructProperty_compute_dissipation_energy(self, initValue):
        """
        constructProperty_compute_dissipation_energy(CoordinateLimitForce self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.CoordinateLimitForce_constructProperty_compute_dissipation_energy(self, initValue)


    def get_compute_dissipation_energy(self, *args):
        """
        get_compute_dissipation_energy(CoordinateLimitForce self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_compute_dissipation_energy(CoordinateLimitForce self) -> bool const &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_get_compute_dissipation_energy(self, *args)


    def upd_compute_dissipation_energy(self, *args):
        """
        upd_compute_dissipation_energy(CoordinateLimitForce self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_compute_dissipation_energy(CoordinateLimitForce self) -> bool &

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce *

        """
        return _simulation.CoordinateLimitForce_upd_compute_dissipation_energy(self, *args)


    def set_compute_dissipation_energy(self, *args):
        """
        set_compute_dissipation_energy(CoordinateLimitForce self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_compute_dissipation_energy(CoordinateLimitForce self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.CoordinateLimitForce_set_compute_dissipation_energy(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::CoordinateLimitForce self) -> CoordinateLimitForce
        __init__(OpenSim::CoordinateLimitForce self, std::string const & coordName, double q_upper, double K_upper, double q_lower, double K_lower, double damping, double dq, bool computeDissipationEnergy=False) -> CoordinateLimitForce

        Parameters
        ----------
        coordName: std::string const &
        q_upper: double
        K_upper: double
        q_lower: double
        K_lower: double
        damping: double
        dq: double
        computeDissipationEnergy: bool

        __init__(OpenSim::CoordinateLimitForce self, std::string const & coordName, double q_upper, double K_upper, double q_lower, double K_lower, double damping, double dq) -> CoordinateLimitForce

        Parameters
        ----------
        coordName: std::string const &
        q_upper: double
        K_upper: double
        q_lower: double
        K_lower: double
        damping: double
        dq: double

        """
        this = _simulation.new_CoordinateLimitForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_CoordinateLimitForce
    __del__ = lambda self: None

    def setUpperStiffness(self, aUpperStiffness):
        """
        setUpperStiffness(CoordinateLimitForce self, double aUpperStiffness)

        Parameters
        ----------
        aUpperStiffness: double

        """
        return _simulation.CoordinateLimitForce_setUpperStiffness(self, aUpperStiffness)


    def getUpperStiffness(self):
        """
        getUpperStiffness(CoordinateLimitForce self) -> double

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_getUpperStiffness(self)


    def setUpperLimit(self, aUpperLimit):
        """
        setUpperLimit(CoordinateLimitForce self, double aUpperLimit)

        Parameters
        ----------
        aUpperLimit: double

        """
        return _simulation.CoordinateLimitForce_setUpperLimit(self, aUpperLimit)


    def getUpperLimit(self):
        """
        getUpperLimit(CoordinateLimitForce self) -> double

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_getUpperLimit(self)


    def setLowerStiffness(self, aLowerStiffness):
        """
        setLowerStiffness(CoordinateLimitForce self, double aLowerStiffness)

        Parameters
        ----------
        aLowerStiffness: double

        """
        return _simulation.CoordinateLimitForce_setLowerStiffness(self, aLowerStiffness)


    def getLowerStiffness(self):
        """
        getLowerStiffness(CoordinateLimitForce self) -> double

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_getLowerStiffness(self)


    def setLowerLimit(self, aLowerLimit):
        """
        setLowerLimit(CoordinateLimitForce self, double aLowerLimit)

        Parameters
        ----------
        aLowerLimit: double

        """
        return _simulation.CoordinateLimitForce_setLowerLimit(self, aLowerLimit)


    def getLowerLimit(self):
        """
        getLowerLimit(CoordinateLimitForce self) -> double

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_getLowerLimit(self)


    def setDamping(self, aDamping):
        """
        setDamping(CoordinateLimitForce self, double aDamping)

        Parameters
        ----------
        aDamping: double

        """
        return _simulation.CoordinateLimitForce_setDamping(self, aDamping)


    def getDamping(self):
        """
        getDamping(CoordinateLimitForce self) -> double

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_getDamping(self)


    def setTransition(self, aTransition):
        """
        setTransition(CoordinateLimitForce self, double aTransition)

        Parameters
        ----------
        aTransition: double

        """
        return _simulation.CoordinateLimitForce_setTransition(self, aTransition)


    def getTransition(self):
        """
        getTransition(CoordinateLimitForce self) -> double

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_getTransition(self)


    def setComputeDissipationEnergy(self, flag):
        """
        setComputeDissipationEnergy(CoordinateLimitForce self, bool flag)

        Parameters
        ----------
        flag: bool

        """
        return _simulation.CoordinateLimitForce_setComputeDissipationEnergy(self, flag)


    def isComputingDissipationEnergy(self):
        """
        isComputingDissipationEnergy(CoordinateLimitForce self) -> bool

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_isComputingDissipationEnergy(self)


    def getPowerDissipation(self, s):
        """
        getPowerDissipation(CoordinateLimitForce self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.CoordinateLimitForce_getPowerDissipation(self, s)


    def getDissipatedEnergy(self, s):
        """
        getDissipatedEnergy(CoordinateLimitForce self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.CoordinateLimitForce_getDissipatedEnergy(self, s)


    def calcLimitForce(self, s):
        """
        calcLimitForce(CoordinateLimitForce self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.CoordinateLimitForce_calcLimitForce(self, s)


    def computePotentialEnergy(self, s):
        """
        computePotentialEnergy(CoordinateLimitForce self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.CoordinateLimitForce_computePotentialEnergy(self, s)


    def getRecordLabels(self):
        """
        getRecordLabels(CoordinateLimitForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::CoordinateLimitForce const *

        """
        return _simulation.CoordinateLimitForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(CoordinateLimitForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.CoordinateLimitForce_getRecordValues(self, state)

CoordinateLimitForce_swigregister = _simulation.CoordinateLimitForce_swigregister
CoordinateLimitForce_swigregister(CoordinateLimitForce)

def CoordinateLimitForce_safeDownCast(obj):
    """
    CoordinateLimitForce_safeDownCast(OpenSimObject obj) -> CoordinateLimitForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.CoordinateLimitForce_safeDownCast(obj)

def CoordinateLimitForce_getClassName():
    """CoordinateLimitForce_getClassName() -> std::string const &"""
    return _simulation.CoordinateLimitForce_getClassName()

class ContactGeometry(ModelComponent):
    """Proxy of C++ OpenSim::ContactGeometry class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactGeometry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactGeometry

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ContactGeometry_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ContactGeometry self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ContactGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ContactGeometry_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ContactGeometry self) -> ContactGeometry

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactGeometry self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_getConcreteClassName(self)


    def copyProperty_location(self, source):
        """
        copyProperty_location(ContactGeometry self, ContactGeometry source)

        Parameters
        ----------
        source: OpenSim::ContactGeometry::Self const &

        """
        return _simulation.ContactGeometry_copyProperty_location(self, source)


    def append_location(self, value):
        """
        append_location(ContactGeometry self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ContactGeometry_append_location(self, value)


    def constructProperty_location(self, initValue):
        """
        constructProperty_location(ContactGeometry self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.ContactGeometry_constructProperty_location(self, initValue)


    def get_location(self, *args):
        """
        get_location(ContactGeometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_location(ContactGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_get_location(self, *args)


    def upd_location(self, *args):
        """
        upd_location(ContactGeometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_location(ContactGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ContactGeometry *

        """
        return _simulation.ContactGeometry_upd_location(self, *args)


    def set_location(self, *args):
        """
        set_location(ContactGeometry self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_location(ContactGeometry self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ContactGeometry_set_location(self, *args)


    def copyProperty_orientation(self, source):
        """
        copyProperty_orientation(ContactGeometry self, ContactGeometry source)

        Parameters
        ----------
        source: OpenSim::ContactGeometry::Self const &

        """
        return _simulation.ContactGeometry_copyProperty_orientation(self, source)


    def append_orientation(self, value):
        """
        append_orientation(ContactGeometry self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ContactGeometry_append_orientation(self, value)


    def constructProperty_orientation(self, initValue):
        """
        constructProperty_orientation(ContactGeometry self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.ContactGeometry_constructProperty_orientation(self, initValue)


    def get_orientation(self, *args):
        """
        get_orientation(ContactGeometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_orientation(ContactGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_get_orientation(self, *args)


    def upd_orientation(self, *args):
        """
        upd_orientation(ContactGeometry self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_orientation(ContactGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ContactGeometry *

        """
        return _simulation.ContactGeometry_upd_orientation(self, *args)


    def set_orientation(self, *args):
        """
        set_orientation(ContactGeometry self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_orientation(ContactGeometry self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ContactGeometry_set_orientation(self, *args)


    def copyProperty_Appearance(self, source):
        """
        copyProperty_Appearance(ContactGeometry self, ContactGeometry source)

        Parameters
        ----------
        source: OpenSim::ContactGeometry::Self const &

        """
        return _simulation.ContactGeometry_copyProperty_Appearance(self, source)


    def append_Appearance(self, value):
        """
        append_Appearance(ContactGeometry self, Appearance value) -> int

        Parameters
        ----------
        value: OpenSim::Appearance const &

        """
        return _simulation.ContactGeometry_append_Appearance(self, value)


    def constructProperty_Appearance(self, initValue):
        """
        constructProperty_Appearance(ContactGeometry self, Appearance initValue)

        Parameters
        ----------
        initValue: OpenSim::Appearance const &

        """
        return _simulation.ContactGeometry_constructProperty_Appearance(self, initValue)


    def get_Appearance(self, *args):
        """
        get_Appearance(ContactGeometry self, int i) -> Appearance

        Parameters
        ----------
        i: int

        get_Appearance(ContactGeometry self) -> Appearance

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_get_Appearance(self, *args)


    def upd_Appearance(self, *args):
        """
        upd_Appearance(ContactGeometry self, int i) -> Appearance

        Parameters
        ----------
        i: int

        upd_Appearance(ContactGeometry self) -> Appearance

        Parameters
        ----------
        self: OpenSim::ContactGeometry *

        """
        return _simulation.ContactGeometry_upd_Appearance(self, *args)


    def set_Appearance(self, *args):
        """
        set_Appearance(ContactGeometry self, int i, Appearance value)

        Parameters
        ----------
        i: int
        value: OpenSim::Appearance const &

        set_Appearance(ContactGeometry self, Appearance value)

        Parameters
        ----------
        value: OpenSim::Appearance const &

        """
        return _simulation.ContactGeometry_set_Appearance(self, *args)

    __swig_setmethods__["PropertyIndex_socket_frame"] = _simulation.ContactGeometry_PropertyIndex_socket_frame_set
    __swig_getmethods__["PropertyIndex_socket_frame"] = _simulation.ContactGeometry_PropertyIndex_socket_frame_get
    if _newclass:
        PropertyIndex_socket_frame = _swig_property(_simulation.ContactGeometry_PropertyIndex_socket_frame_get, _simulation.ContactGeometry_PropertyIndex_socket_frame_set)

    def connectSocket_frame(self, object):
        """
        connectSocket_frame(ContactGeometry self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.ContactGeometry_connectSocket_frame(self, object)


    def getFrame(self):
        """
        getFrame(ContactGeometry self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_getFrame(self)


    def setFrame(self, frame):
        """
        setFrame(ContactGeometry self, PhysicalFrame frame)

        Parameters
        ----------
        frame: OpenSim::PhysicalFrame const &

        """
        return _simulation.ContactGeometry_setFrame(self, frame)


    def createSimTKContactGeometry(self):
        """
        createSimTKContactGeometry(ContactGeometry self) -> SimTK::ContactGeometry

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_createSimTKContactGeometry(self)


    def getTransform(self):
        """
        getTransform(ContactGeometry self) -> Transform

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_getTransform(self)


    def scale(self, aScaleSet):
        """
        scale(ContactGeometry self, ScaleSet aScaleSet)

        Parameters
        ----------
        aScaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.ContactGeometry_scale(self, aScaleSet)


    def getLocation(self):
        """
        getLocation(ContactGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_getLocation(self)


    def setLocation(self, location):
        """
        setLocation(ContactGeometry self, Vec3 location)

        Parameters
        ----------
        location: SimTK::Vec3 const &

        """
        return _simulation.ContactGeometry_setLocation(self, location)


    def getOrientation(self):
        """
        getOrientation(ContactGeometry self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_getOrientation(self)


    def setOrientation(self, orientation):
        """
        setOrientation(ContactGeometry self, Vec3 orientation)

        Parameters
        ----------
        orientation: SimTK::Vec3 const &

        """
        return _simulation.ContactGeometry_setOrientation(self, orientation)


    def getBody(self):
        """
        getBody(ContactGeometry self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::ContactGeometry const *

        """
        return _simulation.ContactGeometry_getBody(self)


    def setBody(self, body):
        """
        setBody(ContactGeometry self, PhysicalFrame body)

        Parameters
        ----------
        body: OpenSim::PhysicalFrame const &

        """
        return _simulation.ContactGeometry_setBody(self, body)

    __swig_destroy__ = _simulation.delete_ContactGeometry
    __del__ = lambda self: None
ContactGeometry_swigregister = _simulation.ContactGeometry_swigregister
ContactGeometry_swigregister(ContactGeometry)

def ContactGeometry_safeDownCast(obj):
    """
    ContactGeometry_safeDownCast(OpenSimObject obj) -> ContactGeometry

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ContactGeometry_safeDownCast(obj)

def ContactGeometry_getClassName():
    """ContactGeometry_getClassName() -> std::string const &"""
    return _simulation.ContactGeometry_getClassName()

class SetContactGeometry(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::ContactGeometry,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetContactGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetContactGeometry, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetContactGeometry

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetContactGeometry_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetContactGeometry self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetContactGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetContactGeometry_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetContactGeometry self) -> SetContactGeometry

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ContactGeometry,OpenSim::ModelComponent > const *

        """
        return _simulation.SetContactGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetContactGeometry self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ContactGeometry,OpenSim::ModelComponent > const *

        """
        return _simulation.SetContactGeometry_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetContactGeometry
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::ContactGeometry,OpenSim::ModelComponent)> self) -> SetContactGeometry
        __init__(OpenSim::Set<(OpenSim::ContactGeometry,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetContactGeometry

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::ContactGeometry,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetContactGeometry

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::ContactGeometry,OpenSim::ModelComponent)> self, SetContactGeometry aSet) -> SetContactGeometry

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::ContactGeometry,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetContactGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetContactGeometry self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ContactGeometry,OpenSim::ModelComponent > *

        """
        return _simulation.SetContactGeometry_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetContactGeometry self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetContactGeometry_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetContactGeometry self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetContactGeometry_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetContactGeometry self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ContactGeometry,OpenSim::ModelComponent > const *

        """
        return _simulation.SetContactGeometry_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetContactGeometry self, ContactGeometry aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ContactGeometry const *
        aStartIndex: int

        getIndex(SetContactGeometry self, ContactGeometry aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ContactGeometry const *

        getIndex(SetContactGeometry self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetContactGeometry self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetContactGeometry_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetContactGeometry self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetContactGeometry_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetContactGeometry self, ContactGeometry aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ContactGeometry *

        """
        return _simulation.SetContactGeometry_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetContactGeometry self, ContactGeometry aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ContactGeometry const &

        """
        return _simulation.SetContactGeometry_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetContactGeometry self, int aIndex, ContactGeometry aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ContactGeometry *

        """
        return _simulation.SetContactGeometry_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetContactGeometry self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetContactGeometry self, ContactGeometry aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ContactGeometry const *

        """
        return _simulation.SetContactGeometry_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetContactGeometry self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ContactGeometry,OpenSim::ModelComponent > *

        """
        return _simulation.SetContactGeometry_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetContactGeometry self, int aIndex, ContactGeometry aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ContactGeometry *
        preserveGroups: bool

        set(SetContactGeometry self, int aIndex, ContactGeometry aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ContactGeometry *

        """
        return _simulation.SetContactGeometry_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetContactGeometry self, int aIndex) -> ContactGeometry

        Parameters
        ----------
        aIndex: int

        get(SetContactGeometry self, std::string const & aName) -> ContactGeometry

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetContactGeometry_get(self, *args)


    def contains(self, aName):
        """
        contains(SetContactGeometry self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetContactGeometry_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetContactGeometry self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetContactGeometry_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetContactGeometry self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::ContactGeometry,OpenSim::ModelComponent > const *

        """
        return _simulation.SetContactGeometry_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetContactGeometry self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetContactGeometry_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetContactGeometry self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetContactGeometry_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetContactGeometry self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetContactGeometry_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetContactGeometry self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetContactGeometry_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetContactGeometry self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetContactGeometry_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetContactGeometry self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetContactGeometry self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetContactGeometry_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetContactGeometry_swigregister = _simulation.SetContactGeometry_swigregister
SetContactGeometry_swigregister(SetContactGeometry)

def SetContactGeometry_safeDownCast(obj):
    """
    SetContactGeometry_safeDownCast(OpenSimObject obj) -> SetContactGeometry

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetContactGeometry_safeDownCast(obj)

def SetContactGeometry_getClassName():
    """SetContactGeometry_getClassName() -> std::string const &"""
    return _simulation.SetContactGeometry_getClassName()

class ModelComponentSetContactGeometry(SetContactGeometry):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::ContactGeometry)> class."""

    __swig_setmethods__ = {}
    for _s in [SetContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetContactGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [SetContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetContactGeometry, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetContactGeometry

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetContactGeometry_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetContactGeometry self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetContactGeometry_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetContactGeometry_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetContactGeometry self) -> ModelComponentSetContactGeometry

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ContactGeometry > const *

        """
        return _simulation.ModelComponentSetContactGeometry_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetContactGeometry self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ContactGeometry > const *

        """
        return _simulation.ModelComponentSetContactGeometry_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetContactGeometry self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::ContactGeometry > *

        """
        return _simulation.ModelComponentSetContactGeometry_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::ContactGeometry)> self) -> ModelComponentSetContactGeometry"""
        this = _simulation.new_ModelComponentSetContactGeometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetContactGeometry
    __del__ = lambda self: None
ModelComponentSetContactGeometry_swigregister = _simulation.ModelComponentSetContactGeometry_swigregister
ModelComponentSetContactGeometry_swigregister(ModelComponentSetContactGeometry)

def ModelComponentSetContactGeometry_safeDownCast(obj):
    """
    ModelComponentSetContactGeometry_safeDownCast(OpenSimObject obj) -> ModelComponentSetContactGeometry

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetContactGeometry_safeDownCast(obj)

def ModelComponentSetContactGeometry_getClassName():
    """ModelComponentSetContactGeometry_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetContactGeometry_getClassName()

class ContactGeometrySet(ModelComponentSetContactGeometry):
    """Proxy of C++ OpenSim::ContactGeometrySet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactGeometrySet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactGeometrySet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactGeometrySet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ContactGeometrySet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ContactGeometrySet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ContactGeometrySet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ContactGeometrySet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ContactGeometrySet self) -> ContactGeometrySet

        Parameters
        ----------
        self: OpenSim::ContactGeometrySet const *

        """
        return _simulation.ContactGeometrySet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactGeometrySet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ContactGeometrySet const *

        """
        return _simulation.ContactGeometrySet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ContactGeometrySet self) -> ContactGeometrySet
        __init__(OpenSim::ContactGeometrySet self, std::string const & file, bool updateFromXML=True) -> ContactGeometrySet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::ContactGeometrySet self, std::string const & file) -> ContactGeometrySet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_ContactGeometrySet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ContactGeometrySet
    __del__ = lambda self: None
ContactGeometrySet_swigregister = _simulation.ContactGeometrySet_swigregister
ContactGeometrySet_swigregister(ContactGeometrySet)

def ContactGeometrySet_safeDownCast(obj):
    """
    ContactGeometrySet_safeDownCast(OpenSimObject obj) -> ContactGeometrySet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ContactGeometrySet_safeDownCast(obj)

def ContactGeometrySet_getClassName():
    """ContactGeometrySet_getClassName() -> std::string const &"""
    return _simulation.ContactGeometrySet_getClassName()

class ContactHalfSpace(ContactGeometry):
    """Proxy of C++ OpenSim::ContactHalfSpace class."""

    __swig_setmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactHalfSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactHalfSpace, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactHalfSpace

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ContactHalfSpace_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ContactHalfSpace self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ContactHalfSpace_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ContactHalfSpace_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ContactHalfSpace self) -> ContactHalfSpace

        Parameters
        ----------
        self: OpenSim::ContactHalfSpace const *

        """
        return _simulation.ContactHalfSpace_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactHalfSpace self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ContactHalfSpace const *

        """
        return _simulation.ContactHalfSpace_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ContactHalfSpace self) -> ContactHalfSpace
        __init__(OpenSim::ContactHalfSpace self, Vec3 location, Vec3 orientation, PhysicalFrame frame) -> ContactHalfSpace

        Parameters
        ----------
        location: SimTK::Vec3 const &
        orientation: SimTK::Vec3 const &
        frame: OpenSim::PhysicalFrame const &

        __init__(OpenSim::ContactHalfSpace self, Vec3 location, Vec3 orientation, PhysicalFrame frame, std::string const & name) -> ContactHalfSpace

        Parameters
        ----------
        location: SimTK::Vec3 const &
        orientation: SimTK::Vec3 const &
        frame: OpenSim::PhysicalFrame const &
        name: std::string const &

        """
        this = _simulation.new_ContactHalfSpace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createSimTKContactGeometry(self):
        """
        createSimTKContactGeometry(ContactHalfSpace self) -> SimTK::ContactGeometry

        Parameters
        ----------
        self: OpenSim::ContactHalfSpace const *

        """
        return _simulation.ContactHalfSpace_createSimTKContactGeometry(self)


    def generateDecorations(self, fixed, hints, s, geometry):
        """
        generateDecorations(ContactHalfSpace self, bool fixed, ModelDisplayHints hints, State s, ArrayDecorativeGeometry geometry)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        s: SimTK::State const &
        geometry: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.ContactHalfSpace_generateDecorations(self, fixed, hints, s, geometry)

    __swig_destroy__ = _simulation.delete_ContactHalfSpace
    __del__ = lambda self: None
ContactHalfSpace_swigregister = _simulation.ContactHalfSpace_swigregister
ContactHalfSpace_swigregister(ContactHalfSpace)

def ContactHalfSpace_safeDownCast(obj):
    """
    ContactHalfSpace_safeDownCast(OpenSimObject obj) -> ContactHalfSpace

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ContactHalfSpace_safeDownCast(obj)

def ContactHalfSpace_getClassName():
    """ContactHalfSpace_getClassName() -> std::string const &"""
    return _simulation.ContactHalfSpace_getClassName()

class ContactMesh(ContactGeometry):
    """Proxy of C++ OpenSim::ContactMesh class."""

    __swig_setmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactMesh, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactMesh

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ContactMesh_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ContactMesh self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ContactMesh_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ContactMesh_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ContactMesh self) -> ContactMesh

        Parameters
        ----------
        self: OpenSim::ContactMesh const *

        """
        return _simulation.ContactMesh_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactMesh self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ContactMesh const *

        """
        return _simulation.ContactMesh_getConcreteClassName(self)


    def copyProperty_filename(self, source):
        """
        copyProperty_filename(ContactMesh self, ContactMesh source)

        Parameters
        ----------
        source: OpenSim::ContactMesh::Self const &

        """
        return _simulation.ContactMesh_copyProperty_filename(self, source)


    def append_filename(self, value):
        """
        append_filename(ContactMesh self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ContactMesh_append_filename(self, value)


    def constructProperty_filename(self, initValue):
        """
        constructProperty_filename(ContactMesh self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ContactMesh_constructProperty_filename(self, initValue)


    def get_filename(self, *args):
        """
        get_filename(ContactMesh self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_filename(ContactMesh self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ContactMesh const *

        """
        return _simulation.ContactMesh_get_filename(self, *args)


    def upd_filename(self, *args):
        """
        upd_filename(ContactMesh self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_filename(ContactMesh self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ContactMesh *

        """
        return _simulation.ContactMesh_upd_filename(self, *args)


    def set_filename(self, *args):
        """
        set_filename(ContactMesh self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_filename(ContactMesh self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ContactMesh_set_filename(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ContactMesh self) -> ContactMesh
        __init__(OpenSim::ContactMesh self, std::string const & filename, Vec3 location, Vec3 orientation, PhysicalFrame frame) -> ContactMesh

        Parameters
        ----------
        filename: std::string const &
        location: SimTK::Vec3 const &
        orientation: SimTK::Vec3 const &
        frame: OpenSim::PhysicalFrame const &

        __init__(OpenSim::ContactMesh self, std::string const & filename, Vec3 location, Vec3 orientation, PhysicalFrame frame, std::string const & name) -> ContactMesh

        Parameters
        ----------
        filename: std::string const &
        location: SimTK::Vec3 const &
        orientation: SimTK::Vec3 const &
        frame: OpenSim::PhysicalFrame const &
        name: std::string const &

        """
        this = _simulation.new_ContactMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createSimTKContactGeometry(self):
        """
        createSimTKContactGeometry(ContactMesh self) -> SimTK::ContactGeometry

        Parameters
        ----------
        self: OpenSim::ContactMesh const *

        """
        return _simulation.ContactMesh_createSimTKContactGeometry(self)


    def getFilename(self):
        """
        getFilename(ContactMesh self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ContactMesh const *

        """
        return _simulation.ContactMesh_getFilename(self)


    def setFilename(self, filename):
        """
        setFilename(ContactMesh self, std::string const & filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _simulation.ContactMesh_setFilename(self, filename)


    def generateDecorations(self, fixed, hints, s, geometry):
        """
        generateDecorations(ContactMesh self, bool fixed, ModelDisplayHints hints, State s, ArrayDecorativeGeometry geometry)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        s: SimTK::State const &
        geometry: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.ContactMesh_generateDecorations(self, fixed, hints, s, geometry)

    __swig_destroy__ = _simulation.delete_ContactMesh
    __del__ = lambda self: None
ContactMesh_swigregister = _simulation.ContactMesh_swigregister
ContactMesh_swigregister(ContactMesh)

def ContactMesh_safeDownCast(obj):
    """
    ContactMesh_safeDownCast(OpenSimObject obj) -> ContactMesh

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ContactMesh_safeDownCast(obj)

def ContactMesh_getClassName():
    """ContactMesh_getClassName() -> std::string const &"""
    return _simulation.ContactMesh_getClassName()

class ContactSphere(ContactGeometry):
    """Proxy of C++ OpenSim::ContactSphere class."""

    __swig_setmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [ContactGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactSphere, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ContactSphere

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ContactSphere_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ContactSphere self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ContactSphere_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ContactSphere_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ContactSphere self) -> ContactSphere

        Parameters
        ----------
        self: OpenSim::ContactSphere const *

        """
        return _simulation.ContactSphere_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ContactSphere self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ContactSphere const *

        """
        return _simulation.ContactSphere_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ContactSphere self) -> ContactSphere
        __init__(OpenSim::ContactSphere self, double radius, Vec3 location, PhysicalFrame frame) -> ContactSphere

        Parameters
        ----------
        radius: double
        location: SimTK::Vec3 const &
        frame: OpenSim::PhysicalFrame const &

        __init__(OpenSim::ContactSphere self, double radius, Vec3 location, PhysicalFrame frame, std::string const & name) -> ContactSphere

        Parameters
        ----------
        radius: double
        location: SimTK::Vec3 const &
        frame: OpenSim::PhysicalFrame const &
        name: std::string const &

        """
        this = _simulation.new_ContactSphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createSimTKContactGeometry(self):
        """
        createSimTKContactGeometry(ContactSphere self) -> SimTK::ContactGeometry

        Parameters
        ----------
        self: OpenSim::ContactSphere const *

        """
        return _simulation.ContactSphere_createSimTKContactGeometry(self)


    def getRadius(self):
        """
        getRadius(ContactSphere self) -> double

        Parameters
        ----------
        self: OpenSim::ContactSphere const *

        """
        return _simulation.ContactSphere_getRadius(self)


    def setRadius(self, radius):
        """
        setRadius(ContactSphere self, double radius)

        Parameters
        ----------
        radius: double

        """
        return _simulation.ContactSphere_setRadius(self, radius)


    def generateDecorations(self, fixed, hints, s, geometry):
        """
        generateDecorations(ContactSphere self, bool fixed, ModelDisplayHints hints, State s, ArrayDecorativeGeometry geometry)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        s: SimTK::State const &
        geometry: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.ContactSphere_generateDecorations(self, fixed, hints, s, geometry)

    __swig_destroy__ = _simulation.delete_ContactSphere
    __del__ = lambda self: None
ContactSphere_swigregister = _simulation.ContactSphere_swigregister
ContactSphere_swigregister(ContactSphere)

def ContactSphere_safeDownCast(obj):
    """
    ContactSphere_safeDownCast(OpenSimObject obj) -> ContactSphere

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ContactSphere_safeDownCast(obj)

def ContactSphere_getClassName():
    """ContactSphere_getClassName() -> std::string const &"""
    return _simulation.ContactSphere_getClassName()

class ElasticFoundationForce(Force):
    """Proxy of C++ OpenSim::ElasticFoundationForce class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElasticFoundationForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElasticFoundationForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ElasticFoundationForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ElasticFoundationForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ElasticFoundationForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ElasticFoundationForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ElasticFoundationForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ElasticFoundationForce self) -> ElasticFoundationForce

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce const *

        """
        return _simulation.ElasticFoundationForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ElasticFoundationForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce const *

        """
        return _simulation.ElasticFoundationForce_getConcreteClassName(self)


    def copyProperty_contact_parameters(self, source):
        """
        copyProperty_contact_parameters(ElasticFoundationForce self, ElasticFoundationForce source)

        Parameters
        ----------
        source: OpenSim::ElasticFoundationForce::Self const &

        """
        return _simulation.ElasticFoundationForce_copyProperty_contact_parameters(self, source)


    def append_contact_parameters(self, value):
        """
        append_contact_parameters(ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParametersSet const & value) -> int

        Parameters
        ----------
        value: OpenSim::ElasticFoundationForce::ContactParametersSet const &

        """
        return _simulation.ElasticFoundationForce_append_contact_parameters(self, value)


    def constructProperty_contact_parameters(self, initValue):
        """
        constructProperty_contact_parameters(ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParametersSet const & initValue)

        Parameters
        ----------
        initValue: OpenSim::ElasticFoundationForce::ContactParametersSet const &

        """
        return _simulation.ElasticFoundationForce_constructProperty_contact_parameters(self, initValue)


    def get_contact_parameters(self, *args):
        """
        get_contact_parameters(ElasticFoundationForce self, int i) -> OpenSim::ElasticFoundationForce::ContactParametersSet const

        Parameters
        ----------
        i: int

        get_contact_parameters(ElasticFoundationForce self) -> OpenSim::ElasticFoundationForce::ContactParametersSet const &

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce const *

        """
        return _simulation.ElasticFoundationForce_get_contact_parameters(self, *args)


    def upd_contact_parameters(self, *args):
        """
        upd_contact_parameters(ElasticFoundationForce self, int i) -> OpenSim::ElasticFoundationForce::ContactParametersSet

        Parameters
        ----------
        i: int

        upd_contact_parameters(ElasticFoundationForce self) -> OpenSim::ElasticFoundationForce::ContactParametersSet &

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_upd_contact_parameters(self, *args)


    def set_contact_parameters(self, *args):
        """
        set_contact_parameters(ElasticFoundationForce self, int i, OpenSim::ElasticFoundationForce::ContactParametersSet const & value)

        Parameters
        ----------
        i: int
        value: OpenSim::ElasticFoundationForce::ContactParametersSet const &

        set_contact_parameters(ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParametersSet const & value)

        Parameters
        ----------
        value: OpenSim::ElasticFoundationForce::ContactParametersSet const &

        """
        return _simulation.ElasticFoundationForce_set_contact_parameters(self, *args)


    def copyProperty_transition_velocity(self, source):
        """
        copyProperty_transition_velocity(ElasticFoundationForce self, ElasticFoundationForce source)

        Parameters
        ----------
        source: OpenSim::ElasticFoundationForce::Self const &

        """
        return _simulation.ElasticFoundationForce_copyProperty_transition_velocity(self, source)


    def append_transition_velocity(self, value):
        """
        append_transition_velocity(ElasticFoundationForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ElasticFoundationForce_append_transition_velocity(self, value)


    def constructProperty_transition_velocity(self, initValue):
        """
        constructProperty_transition_velocity(ElasticFoundationForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ElasticFoundationForce_constructProperty_transition_velocity(self, initValue)


    def get_transition_velocity(self, *args):
        """
        get_transition_velocity(ElasticFoundationForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_transition_velocity(ElasticFoundationForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce const *

        """
        return _simulation.ElasticFoundationForce_get_transition_velocity(self, *args)


    def upd_transition_velocity(self, *args):
        """
        upd_transition_velocity(ElasticFoundationForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_transition_velocity(ElasticFoundationForce self) -> double &

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_upd_transition_velocity(self, *args)


    def set_transition_velocity(self, *args):
        """
        set_transition_velocity(ElasticFoundationForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_transition_velocity(ElasticFoundationForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ElasticFoundationForce_set_transition_velocity(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ElasticFoundationForce self) -> ElasticFoundationForce
        __init__(OpenSim::ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParameters * params) -> ElasticFoundationForce

        Parameters
        ----------
        params: OpenSim::ElasticFoundationForce::ContactParameters *

        """
        this = _simulation.new_ElasticFoundationForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def extendAddToSystem(self, system):
        """
        extendAddToSystem(ElasticFoundationForce self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.ElasticFoundationForce_extendAddToSystem(self, system)


    def updContactParametersSet(self):
        """
        updContactParametersSet(ElasticFoundationForce self) -> OpenSim::ElasticFoundationForce::ContactParametersSet &

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_updContactParametersSet(self)


    def getContactParametersSet(self):
        """
        getContactParametersSet(ElasticFoundationForce self) -> OpenSim::ElasticFoundationForce::ContactParametersSet const &

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_getContactParametersSet(self)


    def addContactParameters(self, params):
        """
        addContactParameters(ElasticFoundationForce self, OpenSim::ElasticFoundationForce::ContactParameters * params)

        Parameters
        ----------
        params: OpenSim::ElasticFoundationForce::ContactParameters *

        """
        return _simulation.ElasticFoundationForce_addContactParameters(self, params)


    def getTransitionVelocity(self):
        """
        getTransitionVelocity(ElasticFoundationForce self) -> double

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce const *

        """
        return _simulation.ElasticFoundationForce_getTransitionVelocity(self)


    def setTransitionVelocity(self, velocity):
        """
        setTransitionVelocity(ElasticFoundationForce self, double velocity)

        Parameters
        ----------
        velocity: double

        """
        return _simulation.ElasticFoundationForce_setTransitionVelocity(self, velocity)


    def getStiffness(self):
        """
        getStiffness(ElasticFoundationForce self) -> double

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_getStiffness(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(ElasticFoundationForce self, double stiffness)

        Parameters
        ----------
        stiffness: double

        """
        return _simulation.ElasticFoundationForce_setStiffness(self, stiffness)


    def getDissipation(self):
        """
        getDissipation(ElasticFoundationForce self) -> double

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_getDissipation(self)


    def setDissipation(self, dissipation):
        """
        setDissipation(ElasticFoundationForce self, double dissipation)

        Parameters
        ----------
        dissipation: double

        """
        return _simulation.ElasticFoundationForce_setDissipation(self, dissipation)


    def getStaticFriction(self):
        """
        getStaticFriction(ElasticFoundationForce self) -> double

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_getStaticFriction(self)


    def setStaticFriction(self, friction):
        """
        setStaticFriction(ElasticFoundationForce self, double friction)

        Parameters
        ----------
        friction: double

        """
        return _simulation.ElasticFoundationForce_setStaticFriction(self, friction)


    def getDynamicFriction(self):
        """
        getDynamicFriction(ElasticFoundationForce self) -> double

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_getDynamicFriction(self)


    def setDynamicFriction(self, friction):
        """
        setDynamicFriction(ElasticFoundationForce self, double friction)

        Parameters
        ----------
        friction: double

        """
        return _simulation.ElasticFoundationForce_setDynamicFriction(self, friction)


    def getViscousFriction(self):
        """
        getViscousFriction(ElasticFoundationForce self) -> double

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce *

        """
        return _simulation.ElasticFoundationForce_getViscousFriction(self)


    def setViscousFriction(self, friction):
        """
        setViscousFriction(ElasticFoundationForce self, double friction)

        Parameters
        ----------
        friction: double

        """
        return _simulation.ElasticFoundationForce_setViscousFriction(self, friction)


    def addGeometry(self, name):
        """
        addGeometry(ElasticFoundationForce self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ElasticFoundationForce_addGeometry(self, name)


    def getRecordLabels(self):
        """
        getRecordLabels(ElasticFoundationForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ElasticFoundationForce const *

        """
        return _simulation.ElasticFoundationForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ElasticFoundationForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ElasticFoundationForce_getRecordValues(self, state)

    __swig_destroy__ = _simulation.delete_ElasticFoundationForce
    __del__ = lambda self: None
ElasticFoundationForce_swigregister = _simulation.ElasticFoundationForce_swigregister
ElasticFoundationForce_swigregister(ElasticFoundationForce)

def ElasticFoundationForce_safeDownCast(obj):
    """
    ElasticFoundationForce_safeDownCast(OpenSimObject obj) -> ElasticFoundationForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ElasticFoundationForce_safeDownCast(obj)

def ElasticFoundationForce_getClassName():
    """ElasticFoundationForce_getClassName() -> std::string const &"""
    return _simulation.ElasticFoundationForce_getClassName()

class HuntCrossleyForce(Force):
    """Proxy of C++ OpenSim::HuntCrossleyForce class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HuntCrossleyForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HuntCrossleyForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> HuntCrossleyForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.HuntCrossleyForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(HuntCrossleyForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.HuntCrossleyForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.HuntCrossleyForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(HuntCrossleyForce self) -> HuntCrossleyForce

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce const *

        """
        return _simulation.HuntCrossleyForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(HuntCrossleyForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce const *

        """
        return _simulation.HuntCrossleyForce_getConcreteClassName(self)


    def copyProperty_contact_parameters(self, source):
        """
        copyProperty_contact_parameters(HuntCrossleyForce self, HuntCrossleyForce source)

        Parameters
        ----------
        source: OpenSim::HuntCrossleyForce::Self const &

        """
        return _simulation.HuntCrossleyForce_copyProperty_contact_parameters(self, source)


    def append_contact_parameters(self, value):
        """
        append_contact_parameters(HuntCrossleyForce self, OpenSim::HuntCrossleyForce::ContactParametersSet const & value) -> int

        Parameters
        ----------
        value: OpenSim::HuntCrossleyForce::ContactParametersSet const &

        """
        return _simulation.HuntCrossleyForce_append_contact_parameters(self, value)


    def constructProperty_contact_parameters(self, initValue):
        """
        constructProperty_contact_parameters(HuntCrossleyForce self, OpenSim::HuntCrossleyForce::ContactParametersSet const & initValue)

        Parameters
        ----------
        initValue: OpenSim::HuntCrossleyForce::ContactParametersSet const &

        """
        return _simulation.HuntCrossleyForce_constructProperty_contact_parameters(self, initValue)


    def get_contact_parameters(self, *args):
        """
        get_contact_parameters(HuntCrossleyForce self, int i) -> OpenSim::HuntCrossleyForce::ContactParametersSet const

        Parameters
        ----------
        i: int

        get_contact_parameters(HuntCrossleyForce self) -> OpenSim::HuntCrossleyForce::ContactParametersSet const &

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce const *

        """
        return _simulation.HuntCrossleyForce_get_contact_parameters(self, *args)


    def upd_contact_parameters(self, *args):
        """
        upd_contact_parameters(HuntCrossleyForce self, int i) -> OpenSim::HuntCrossleyForce::ContactParametersSet

        Parameters
        ----------
        i: int

        upd_contact_parameters(HuntCrossleyForce self) -> OpenSim::HuntCrossleyForce::ContactParametersSet &

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_upd_contact_parameters(self, *args)


    def set_contact_parameters(self, *args):
        """
        set_contact_parameters(HuntCrossleyForce self, int i, OpenSim::HuntCrossleyForce::ContactParametersSet const & value)

        Parameters
        ----------
        i: int
        value: OpenSim::HuntCrossleyForce::ContactParametersSet const &

        set_contact_parameters(HuntCrossleyForce self, OpenSim::HuntCrossleyForce::ContactParametersSet const & value)

        Parameters
        ----------
        value: OpenSim::HuntCrossleyForce::ContactParametersSet const &

        """
        return _simulation.HuntCrossleyForce_set_contact_parameters(self, *args)


    def copyProperty_transition_velocity(self, source):
        """
        copyProperty_transition_velocity(HuntCrossleyForce self, HuntCrossleyForce source)

        Parameters
        ----------
        source: OpenSim::HuntCrossleyForce::Self const &

        """
        return _simulation.HuntCrossleyForce_copyProperty_transition_velocity(self, source)


    def append_transition_velocity(self, value):
        """
        append_transition_velocity(HuntCrossleyForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.HuntCrossleyForce_append_transition_velocity(self, value)


    def constructProperty_transition_velocity(self, initValue):
        """
        constructProperty_transition_velocity(HuntCrossleyForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.HuntCrossleyForce_constructProperty_transition_velocity(self, initValue)


    def get_transition_velocity(self, *args):
        """
        get_transition_velocity(HuntCrossleyForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_transition_velocity(HuntCrossleyForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce const *

        """
        return _simulation.HuntCrossleyForce_get_transition_velocity(self, *args)


    def upd_transition_velocity(self, *args):
        """
        upd_transition_velocity(HuntCrossleyForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_transition_velocity(HuntCrossleyForce self) -> double &

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_upd_transition_velocity(self, *args)


    def set_transition_velocity(self, *args):
        """
        set_transition_velocity(HuntCrossleyForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_transition_velocity(HuntCrossleyForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.HuntCrossleyForce_set_transition_velocity(self, *args)


    def __init__(self):
        """__init__(OpenSim::HuntCrossleyForce self) -> HuntCrossleyForce"""
        this = _simulation.new_HuntCrossleyForce()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def updContactParametersSet(self):
        """
        updContactParametersSet(HuntCrossleyForce self) -> OpenSim::HuntCrossleyForce::ContactParametersSet &

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_updContactParametersSet(self)


    def getContactParametersSet(self):
        """
        getContactParametersSet(HuntCrossleyForce self) -> OpenSim::HuntCrossleyForce::ContactParametersSet const &

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_getContactParametersSet(self)


    def addContactParameters(self, params):
        """
        addContactParameters(HuntCrossleyForce self, OpenSim::HuntCrossleyForce::ContactParameters * params)

        Parameters
        ----------
        params: OpenSim::HuntCrossleyForce::ContactParameters *

        """
        return _simulation.HuntCrossleyForce_addContactParameters(self, params)


    def getTransitionVelocity(self):
        """
        getTransitionVelocity(HuntCrossleyForce self) -> double

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce const *

        """
        return _simulation.HuntCrossleyForce_getTransitionVelocity(self)


    def setTransitionVelocity(self, velocity):
        """
        setTransitionVelocity(HuntCrossleyForce self, double velocity)

        Parameters
        ----------
        velocity: double

        """
        return _simulation.HuntCrossleyForce_setTransitionVelocity(self, velocity)


    def getStiffness(self):
        """
        getStiffness(HuntCrossleyForce self) -> double

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_getStiffness(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(HuntCrossleyForce self, double stiffness)

        Parameters
        ----------
        stiffness: double

        """
        return _simulation.HuntCrossleyForce_setStiffness(self, stiffness)


    def getDissipation(self):
        """
        getDissipation(HuntCrossleyForce self) -> double

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_getDissipation(self)


    def setDissipation(self, dissipation):
        """
        setDissipation(HuntCrossleyForce self, double dissipation)

        Parameters
        ----------
        dissipation: double

        """
        return _simulation.HuntCrossleyForce_setDissipation(self, dissipation)


    def getStaticFriction(self):
        """
        getStaticFriction(HuntCrossleyForce self) -> double

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_getStaticFriction(self)


    def setStaticFriction(self, friction):
        """
        setStaticFriction(HuntCrossleyForce self, double friction)

        Parameters
        ----------
        friction: double

        """
        return _simulation.HuntCrossleyForce_setStaticFriction(self, friction)


    def getDynamicFriction(self):
        """
        getDynamicFriction(HuntCrossleyForce self) -> double

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_getDynamicFriction(self)


    def setDynamicFriction(self, friction):
        """
        setDynamicFriction(HuntCrossleyForce self, double friction)

        Parameters
        ----------
        friction: double

        """
        return _simulation.HuntCrossleyForce_setDynamicFriction(self, friction)


    def getViscousFriction(self):
        """
        getViscousFriction(HuntCrossleyForce self) -> double

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce *

        """
        return _simulation.HuntCrossleyForce_getViscousFriction(self)


    def setViscousFriction(self, friction):
        """
        setViscousFriction(HuntCrossleyForce self, double friction)

        Parameters
        ----------
        friction: double

        """
        return _simulation.HuntCrossleyForce_setViscousFriction(self, friction)


    def addGeometry(self, name):
        """
        addGeometry(HuntCrossleyForce self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.HuntCrossleyForce_addGeometry(self, name)


    def getRecordLabels(self):
        """
        getRecordLabels(HuntCrossleyForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::HuntCrossleyForce const *

        """
        return _simulation.HuntCrossleyForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(HuntCrossleyForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.HuntCrossleyForce_getRecordValues(self, state)

    __swig_destroy__ = _simulation.delete_HuntCrossleyForce
    __del__ = lambda self: None
HuntCrossleyForce_swigregister = _simulation.HuntCrossleyForce_swigregister
HuntCrossleyForce_swigregister(HuntCrossleyForce)

def HuntCrossleyForce_safeDownCast(obj):
    """
    HuntCrossleyForce_safeDownCast(OpenSimObject obj) -> HuntCrossleyForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.HuntCrossleyForce_safeDownCast(obj)

def HuntCrossleyForce_getClassName():
    """HuntCrossleyForce_getClassName() -> std::string const &"""
    return _simulation.HuntCrossleyForce_getClassName()

class Actuator(Force):
    """Proxy of C++ OpenSim::Actuator class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actuator, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actuator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Actuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Actuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Actuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Actuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Actuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Actuator self) -> Actuator

        Parameters
        ----------
        self: OpenSim::Actuator const *

        """
        return _simulation.Actuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Actuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Actuator const *

        """
        return _simulation.Actuator_getConcreteClassName(self)


    def numControls(self):
        """
        numControls(Actuator self) -> int

        Parameters
        ----------
        self: OpenSim::Actuator const *

        """
        return _simulation.Actuator_numControls(self)


    def getDefaultControls(self):
        """
        getDefaultControls(Actuator self) -> Vector

        Parameters
        ----------
        self: OpenSim::Actuator *

        """
        return _simulation.Actuator_getDefaultControls(self)


    def getControls(self, modelControls, actuatorControls):
        """
        getControls(Actuator self, Vector modelControls, Vector actuatorControls)

        Parameters
        ----------
        modelControls: SimTK::Vector const &
        actuatorControls: SimTK::Vector &

        """
        return _simulation.Actuator_getControls(self, modelControls, actuatorControls)


    def setControls(self, actuatorControls, modelControls):
        """
        setControls(Actuator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.Actuator_setControls(self, actuatorControls, modelControls)


    def addInControls(self, actuatorControls, modelControls):
        """
        addInControls(Actuator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.Actuator_addInControls(self, actuatorControls, modelControls)


    def getPower(self, s):
        """
        getPower(Actuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Actuator_getPower(self, s)


    def computeEquilibrium(self, s):
        """
        computeEquilibrium(Actuator self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Actuator_computeEquilibrium(self, s)

    __swig_destroy__ = _simulation.delete_Actuator
    __del__ = lambda self: None
Actuator_swigregister = _simulation.Actuator_swigregister
Actuator_swigregister(Actuator)

def Actuator_safeDownCast(obj):
    """
    Actuator_safeDownCast(OpenSimObject obj) -> Actuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Actuator_safeDownCast(obj)

def Actuator_getClassName():
    """Actuator_getClassName() -> std::string const &"""
    return _simulation.Actuator_getClassName()

class ScalarActuator(Actuator):
    """Proxy of C++ OpenSim::ScalarActuator class."""

    __swig_setmethods__ = {}
    for _s in [Actuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [Actuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarActuator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ScalarActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ScalarActuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ScalarActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ScalarActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ScalarActuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ScalarActuator self) -> ScalarActuator

        Parameters
        ----------
        self: OpenSim::ScalarActuator const *

        """
        return _simulation.ScalarActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ScalarActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ScalarActuator const *

        """
        return _simulation.ScalarActuator_getConcreteClassName(self)


    def copyProperty_min_control(self, source):
        """
        copyProperty_min_control(ScalarActuator self, ScalarActuator source)

        Parameters
        ----------
        source: OpenSim::ScalarActuator::Self const &

        """
        return _simulation.ScalarActuator_copyProperty_min_control(self, source)


    def append_min_control(self, value):
        """
        append_min_control(ScalarActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ScalarActuator_append_min_control(self, value)


    def constructProperty_min_control(self, initValue):
        """
        constructProperty_min_control(ScalarActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ScalarActuator_constructProperty_min_control(self, initValue)


    def get_min_control(self, *args):
        """
        get_min_control(ScalarActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_min_control(ScalarActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ScalarActuator const *

        """
        return _simulation.ScalarActuator_get_min_control(self, *args)


    def upd_min_control(self, *args):
        """
        upd_min_control(ScalarActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_min_control(ScalarActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::ScalarActuator *

        """
        return _simulation.ScalarActuator_upd_min_control(self, *args)


    def set_min_control(self, *args):
        """
        set_min_control(ScalarActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_min_control(ScalarActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ScalarActuator_set_min_control(self, *args)


    def copyProperty_max_control(self, source):
        """
        copyProperty_max_control(ScalarActuator self, ScalarActuator source)

        Parameters
        ----------
        source: OpenSim::ScalarActuator::Self const &

        """
        return _simulation.ScalarActuator_copyProperty_max_control(self, source)


    def append_max_control(self, value):
        """
        append_max_control(ScalarActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ScalarActuator_append_max_control(self, value)


    def constructProperty_max_control(self, initValue):
        """
        constructProperty_max_control(ScalarActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ScalarActuator_constructProperty_max_control(self, initValue)


    def get_max_control(self, *args):
        """
        get_max_control(ScalarActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_control(ScalarActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ScalarActuator const *

        """
        return _simulation.ScalarActuator_get_max_control(self, *args)


    def upd_max_control(self, *args):
        """
        upd_max_control(ScalarActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_max_control(ScalarActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::ScalarActuator *

        """
        return _simulation.ScalarActuator_upd_max_control(self, *args)


    def set_max_control(self, *args):
        """
        set_max_control(ScalarActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_max_control(ScalarActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ScalarActuator_set_max_control(self, *args)

    __swig_setmethods__["_has_output_actuation"] = _simulation.ScalarActuator__has_output_actuation_set
    __swig_getmethods__["_has_output_actuation"] = _simulation.ScalarActuator__has_output_actuation_get
    if _newclass:
        _has_output_actuation = _swig_property(_simulation.ScalarActuator__has_output_actuation_get, _simulation.ScalarActuator__has_output_actuation_set)
    __swig_setmethods__["_has_output_speed"] = _simulation.ScalarActuator__has_output_speed_set
    __swig_getmethods__["_has_output_speed"] = _simulation.ScalarActuator__has_output_speed_get
    if _newclass:
        _has_output_speed = _swig_property(_simulation.ScalarActuator__has_output_speed_get, _simulation.ScalarActuator__has_output_speed_set)

    def getControl(self, s):
        """
        getControl(ScalarActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ScalarActuator_getControl(self, s)


    def numControls(self):
        """
        numControls(ScalarActuator self) -> int

        Parameters
        ----------
        self: OpenSim::ScalarActuator const *

        """
        return _simulation.ScalarActuator_numControls(self)


    def setActuation(self, s, aActuation):
        """
        setActuation(ScalarActuator self, State s, double aActuation)

        Parameters
        ----------
        s: SimTK::State const &
        aActuation: double

        """
        return _simulation.ScalarActuator_setActuation(self, s, aActuation)


    def getActuation(self, s):
        """
        getActuation(ScalarActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ScalarActuator_getActuation(self, s)


    def setSpeed(self, s, aspeed):
        """
        setSpeed(ScalarActuator self, State s, double aspeed)

        Parameters
        ----------
        s: SimTK::State const &
        aspeed: double

        """
        return _simulation.ScalarActuator_setSpeed(self, s, aspeed)


    def getSpeed(self, s):
        """
        getSpeed(ScalarActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ScalarActuator_getSpeed(self, s)


    def getPower(self, s):
        """
        getPower(ScalarActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ScalarActuator_getPower(self, s)


    def getStress(self, s):
        """
        getStress(ScalarActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ScalarActuator_getStress(self, s)


    def getOptimalForce(self):
        """
        getOptimalForce(ScalarActuator self) -> double

        Parameters
        ----------
        self: OpenSim::ScalarActuator const *

        """
        return _simulation.ScalarActuator_getOptimalForce(self)


    def setMinControl(self, aMinControl):
        """
        setMinControl(ScalarActuator self, double const & aMinControl)

        Parameters
        ----------
        aMinControl: double const &

        """
        return _simulation.ScalarActuator_setMinControl(self, aMinControl)


    def getMinControl(self):
        """
        getMinControl(ScalarActuator self) -> double

        Parameters
        ----------
        self: OpenSim::ScalarActuator const *

        """
        return _simulation.ScalarActuator_getMinControl(self)


    def setMaxControl(self, aMaxControl):
        """
        setMaxControl(ScalarActuator self, double const & aMaxControl)

        Parameters
        ----------
        aMaxControl: double const &

        """
        return _simulation.ScalarActuator_setMaxControl(self, aMaxControl)


    def getMaxControl(self):
        """
        getMaxControl(ScalarActuator self) -> double

        Parameters
        ----------
        self: OpenSim::ScalarActuator const *

        """
        return _simulation.ScalarActuator_getMaxControl(self)


    def overrideActuation(self, s, flag):
        """
        overrideActuation(ScalarActuator self, State s, bool flag)

        Parameters
        ----------
        s: SimTK::State &
        flag: bool

        """
        return _simulation.ScalarActuator_overrideActuation(self, s, flag)


    def isActuationOverridden(self, s):
        """
        isActuationOverridden(ScalarActuator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ScalarActuator_isActuationOverridden(self, s)


    def setOverrideActuation(self, s, value):
        """
        setOverrideActuation(ScalarActuator self, State s, double value)

        Parameters
        ----------
        s: SimTK::State &
        value: double

        """
        return _simulation.ScalarActuator_setOverrideActuation(self, s, value)


    def getOverrideActuation(self, s):
        """
        getOverrideActuation(ScalarActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ScalarActuator_getOverrideActuation(self, s)

    __swig_destroy__ = _simulation.delete_ScalarActuator
    __del__ = lambda self: None
ScalarActuator_swigregister = _simulation.ScalarActuator_swigregister
ScalarActuator_swigregister(ScalarActuator)

def ScalarActuator_safeDownCast(obj):
    """
    ScalarActuator_safeDownCast(OpenSimObject obj) -> ScalarActuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ScalarActuator_safeDownCast(obj)

def ScalarActuator_getClassName():
    """ScalarActuator_getClassName() -> std::string const &"""
    return _simulation.ScalarActuator_getClassName()

class SetActuators(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Actuator,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetActuators, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetActuators, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetActuators

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetActuators_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetActuators self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetActuators_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetActuators_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetActuators self) -> SetActuators

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Actuator,OpenSim::Object > const *

        """
        return _simulation.SetActuators_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetActuators self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Actuator,OpenSim::Object > const *

        """
        return _simulation.SetActuators_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetActuators
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Actuator,OpenSim::Object)> self) -> SetActuators
        __init__(OpenSim::Set<(OpenSim::Actuator,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetActuators

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Actuator,OpenSim::Object)> self, std::string const & aFileName) -> SetActuators

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Actuator,OpenSim::Object)> self, SetActuators aSet) -> SetActuators

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Actuator,OpenSim::Object > const &

        """
        this = _simulation.new_SetActuators(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetActuators self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Actuator,OpenSim::Object > *

        """
        return _simulation.SetActuators_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetActuators self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetActuators_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetActuators self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetActuators_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetActuators self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Actuator,OpenSim::Object > const *

        """
        return _simulation.SetActuators_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetActuators self, Actuator aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Actuator const *
        aStartIndex: int

        getIndex(SetActuators self, Actuator aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Actuator const *

        getIndex(SetActuators self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetActuators self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetActuators_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetActuators self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetActuators_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetActuators self, Actuator aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Actuator *

        """
        return _simulation.SetActuators_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetActuators self, Actuator aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Actuator const &

        """
        return _simulation.SetActuators_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetActuators self, int aIndex, Actuator aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Actuator *

        """
        return _simulation.SetActuators_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetActuators self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetActuators self, Actuator aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Actuator const *

        """
        return _simulation.SetActuators_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetActuators self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Actuator,OpenSim::Object > *

        """
        return _simulation.SetActuators_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetActuators self, int aIndex, Actuator aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Actuator *
        preserveGroups: bool

        set(SetActuators self, int aIndex, Actuator aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Actuator *

        """
        return _simulation.SetActuators_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetActuators self, int aIndex) -> Actuator

        Parameters
        ----------
        aIndex: int

        get(SetActuators self, std::string const & aName) -> Actuator

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetActuators_get(self, *args)


    def contains(self, aName):
        """
        contains(SetActuators self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetActuators_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetActuators self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetActuators_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetActuators self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Actuator,OpenSim::Object > const *

        """
        return _simulation.SetActuators_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetActuators self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetActuators_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetActuators self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetActuators_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetActuators self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetActuators_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetActuators self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetActuators_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetActuators self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetActuators_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetActuators self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetActuators self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetActuators_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetActuators_swigregister = _simulation.SetActuators_swigregister
SetActuators_swigregister(SetActuators)

def SetActuators_safeDownCast(obj):
    """
    SetActuators_safeDownCast(OpenSimObject obj) -> SetActuators

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetActuators_safeDownCast(obj)

def SetActuators_getClassName():
    """SetActuators_getClassName() -> std::string const &"""
    return _simulation.SetActuators_getClassName()

class Analysis(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Analysis class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analysis, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Analysis, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Analysis

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Analysis_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Analysis self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Analysis_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Analysis_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Analysis self) -> Analysis

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Analysis self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_getConcreteClassName(self)

    __swig_setmethods__["_model"] = _simulation.Analysis__model_set
    __swig_getmethods__["_model"] = _simulation.Analysis__model_get
    if _newclass:
        _model = _swig_property(_simulation.Analysis__model_get, _simulation.Analysis__model_set)
    __swig_setmethods__["_statesStore"] = _simulation.Analysis__statesStore_set
    __swig_getmethods__["_statesStore"] = _simulation.Analysis__statesStore_get
    if _newclass:
        _statesStore = _swig_property(_simulation.Analysis__statesStore_get, _simulation.Analysis__statesStore_set)
    __swig_destroy__ = _simulation.delete_Analysis
    __del__ = lambda self: None

    def begin(self, s):
        """
        begin(Analysis self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Analysis_begin(self, s)


    def step(self, s, stepNumber):
        """
        step(Analysis self, State s, int stepNumber) -> int

        Parameters
        ----------
        s: SimTK::State const &
        stepNumber: int

        """
        return _simulation.Analysis_step(self, s, stepNumber)


    def end(self, s):
        """
        end(Analysis self, State s) -> int

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Analysis_end(self, s)


    def setModel(self, aModel):
        """
        setModel(Analysis self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.Analysis_setModel(self, aModel)


    def setStatesStore(self, aStatesStore):
        """
        setStatesStore(Analysis self, Storage aStatesStore)

        Parameters
        ----------
        aStatesStore: OpenSim::Storage const &

        """
        return _simulation.Analysis_setStatesStore(self, aStatesStore)


    def setOn(self, aTrueFalse):
        """
        setOn(Analysis self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.Analysis_setOn(self, aTrueFalse)


    def getOn(self):
        """
        getOn(Analysis self) -> bool

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_getOn(self)


    def setStartTime(self, aStartTime):
        """
        setStartTime(Analysis self, double aStartTime)

        Parameters
        ----------
        aStartTime: double

        """
        return _simulation.Analysis_setStartTime(self, aStartTime)


    def getStartTime(self):
        """
        getStartTime(Analysis self) -> double

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_getStartTime(self)


    def setEndTime(self, aEndTime):
        """
        setEndTime(Analysis self, double aEndTime)

        Parameters
        ----------
        aEndTime: double

        """
        return _simulation.Analysis_setEndTime(self, aEndTime)


    def getEndTime(self):
        """
        getEndTime(Analysis self) -> double

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_getEndTime(self)


    def setInDegrees(self, aTrueFalse):
        """
        setInDegrees(Analysis self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.Analysis_setInDegrees(self, aTrueFalse)


    def getInDegrees(self):
        """
        getInDegrees(Analysis self) -> bool

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_getInDegrees(self)


    def proceed(self, aStep=0):
        """
        proceed(Analysis self, int aStep=0) -> bool

        Parameters
        ----------
        aStep: int

        proceed(Analysis self) -> bool

        Parameters
        ----------
        self: OpenSim::Analysis *

        """
        return _simulation.Analysis_proceed(self, aStep)


    def setStepInterval(self, aStepInterval):
        """
        setStepInterval(Analysis self, int aStepInterval)

        Parameters
        ----------
        aStepInterval: int

        """
        return _simulation.Analysis_setStepInterval(self, aStepInterval)


    def getStepInterval(self):
        """
        getStepInterval(Analysis self) -> int

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_getStepInterval(self)


    def setColumnLabels(self, aLabels):
        """
        setColumnLabels(Analysis self, ArrayStr aLabels)

        Parameters
        ----------
        aLabels: OpenSim::Array< std::string > const &

        """
        return _simulation.Analysis_setColumnLabels(self, aLabels)


    def getColumnLabels(self):
        """
        getColumnLabels(Analysis self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_getColumnLabels(self)


    def getStorageList(self):
        """
        getStorageList(Analysis self) -> ArrayStorage

        Parameters
        ----------
        self: OpenSim::Analysis *

        """
        return _simulation.Analysis_getStorageList(self)


    def setPrintResultFiles(self, aToWrite):
        """
        setPrintResultFiles(Analysis self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _simulation.Analysis_setPrintResultFiles(self, aToWrite)


    def getPrintResultFiles(self):
        """
        getPrintResultFiles(Analysis self) -> bool

        Parameters
        ----------
        self: OpenSim::Analysis const *

        """
        return _simulation.Analysis_getPrintResultFiles(self)


    def printResults(self, *args):
        """
        printResults(Analysis self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(Analysis self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(Analysis self, std::string const & aBaseName, std::string const & aDir) -> int

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(Analysis self, std::string const & aBaseName) -> int

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _simulation.Analysis_printResults(self, *args)

Analysis_swigregister = _simulation.Analysis_swigregister
Analysis_swigregister(Analysis)

def Analysis_safeDownCast(obj):
    """
    Analysis_safeDownCast(OpenSimObject obj) -> Analysis

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Analysis_safeDownCast(obj)

def Analysis_getClassName():
    """Analysis_getClassName() -> std::string const &"""
    return _simulation.Analysis_getClassName()

class SetAnalysis(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Analysis,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetAnalysis, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetAnalysis, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetAnalysis

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetAnalysis_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetAnalysis self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetAnalysis_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetAnalysis_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetAnalysis self) -> SetAnalysis

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Analysis,OpenSim::Object > const *

        """
        return _simulation.SetAnalysis_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetAnalysis self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Analysis,OpenSim::Object > const *

        """
        return _simulation.SetAnalysis_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetAnalysis
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Analysis,OpenSim::Object)> self) -> SetAnalysis
        __init__(OpenSim::Set<(OpenSim::Analysis,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetAnalysis

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Analysis,OpenSim::Object)> self, std::string const & aFileName) -> SetAnalysis

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Analysis,OpenSim::Object)> self, SetAnalysis aSet) -> SetAnalysis

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Analysis,OpenSim::Object > const &

        """
        this = _simulation.new_SetAnalysis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetAnalysis self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Analysis,OpenSim::Object > *

        """
        return _simulation.SetAnalysis_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetAnalysis self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetAnalysis_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetAnalysis self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetAnalysis_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetAnalysis self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Analysis,OpenSim::Object > const *

        """
        return _simulation.SetAnalysis_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetAnalysis self, Analysis aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Analysis const *
        aStartIndex: int

        getIndex(SetAnalysis self, Analysis aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Analysis const *

        getIndex(SetAnalysis self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetAnalysis self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetAnalysis_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetAnalysis self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetAnalysis_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetAnalysis self, Analysis aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Analysis *

        """
        return _simulation.SetAnalysis_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetAnalysis self, Analysis aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Analysis const &

        """
        return _simulation.SetAnalysis_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetAnalysis self, int aIndex, Analysis aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Analysis *

        """
        return _simulation.SetAnalysis_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetAnalysis self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetAnalysis self, Analysis aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Analysis const *

        """
        return _simulation.SetAnalysis_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetAnalysis self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Analysis,OpenSim::Object > *

        """
        return _simulation.SetAnalysis_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetAnalysis self, int aIndex, Analysis aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Analysis *
        preserveGroups: bool

        set(SetAnalysis self, int aIndex, Analysis aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Analysis *

        """
        return _simulation.SetAnalysis_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetAnalysis self, int aIndex) -> Analysis

        Parameters
        ----------
        aIndex: int

        get(SetAnalysis self, std::string const & aName) -> Analysis

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetAnalysis_get(self, *args)


    def contains(self, aName):
        """
        contains(SetAnalysis self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetAnalysis_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetAnalysis self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetAnalysis_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetAnalysis self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Analysis,OpenSim::Object > const *

        """
        return _simulation.SetAnalysis_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetAnalysis self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetAnalysis_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetAnalysis self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetAnalysis_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetAnalysis self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetAnalysis_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetAnalysis self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetAnalysis_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetAnalysis self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetAnalysis_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetAnalysis self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetAnalysis self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetAnalysis_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetAnalysis_swigregister = _simulation.SetAnalysis_swigregister
SetAnalysis_swigregister(SetAnalysis)

def SetAnalysis_safeDownCast(obj):
    """
    SetAnalysis_safeDownCast(OpenSimObject obj) -> SetAnalysis

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetAnalysis_safeDownCast(obj)

def SetAnalysis_getClassName():
    """SetAnalysis_getClassName() -> std::string const &"""
    return _simulation.SetAnalysis_getClassName()

class AnalysisSet(SetAnalysis):
    """Proxy of C++ OpenSim::AnalysisSet class."""

    __swig_setmethods__ = {}
    for _s in [SetAnalysis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetAnalysis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AnalysisSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.AnalysisSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(AnalysisSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.AnalysisSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.AnalysisSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(AnalysisSet self) -> AnalysisSet

        Parameters
        ----------
        self: OpenSim::AnalysisSet const *

        """
        return _simulation.AnalysisSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AnalysisSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AnalysisSet const *

        """
        return _simulation.AnalysisSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::AnalysisSet self) -> AnalysisSet
        __init__(OpenSim::AnalysisSet self, Model aModel) -> AnalysisSet

        Parameters
        ----------
        aModel: OpenSim::Model *

        __init__(OpenSim::AnalysisSet self, std::string const & aFileName) -> AnalysisSet

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::AnalysisSet self, AnalysisSet aSet) -> AnalysisSet

        Parameters
        ----------
        aSet: OpenSim::AnalysisSet const &

        """
        this = _simulation.new_AnalysisSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_AnalysisSet
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(AnalysisSet self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.AnalysisSet_setModel(self, aModel)


    def getModel(self):
        """
        getModel(AnalysisSet self) -> Model

        Parameters
        ----------
        self: OpenSim::AnalysisSet *

        """
        return _simulation.AnalysisSet_getModel(self)


    def setOn(self, *args):
        """
        setOn(AnalysisSet self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        setOn(AnalysisSet self, ArrayBool aOn)

        Parameters
        ----------
        aOn: OpenSim::Array< bool > const &

        """
        return _simulation.AnalysisSet_setOn(self, *args)


    def getOn(self):
        """
        getOn(AnalysisSet self) -> ArrayBool

        Parameters
        ----------
        self: OpenSim::AnalysisSet const *

        """
        return _simulation.AnalysisSet_getOn(self)


    def begin(self, s):
        """
        begin(AnalysisSet self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.AnalysisSet_begin(self, s)


    def step(self, s, stepNumber):
        """
        step(AnalysisSet self, State s, int stepNumber)

        Parameters
        ----------
        s: SimTK::State const &
        stepNumber: int

        """
        return _simulation.AnalysisSet_step(self, s, stepNumber)


    def end(self, s):
        """
        end(AnalysisSet self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.AnalysisSet_end(self, s)


    def printResults(self, *args):
        """
        printResults(AnalysisSet self, std::string const & aBaseName, std::string const & aPath, double aDT=-1.0, std::string const & aExtension)

        Parameters
        ----------
        aBaseName: std::string const &
        aPath: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(AnalysisSet self, std::string const & aBaseName, std::string const & aPath, double aDT=-1.0)

        Parameters
        ----------
        aBaseName: std::string const &
        aPath: std::string const &
        aDT: double

        printResults(AnalysisSet self, std::string const & aBaseName, std::string const & aPath)

        Parameters
        ----------
        aBaseName: std::string const &
        aPath: std::string const &

        printResults(AnalysisSet self, std::string const & aBaseName)

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _simulation.AnalysisSet_printResults(self, *args)


    def getAvailableAnalyses(analysisset):
        """
        getAvailableAnalyses(AnalysisSet analysisset)

        Parameters
        ----------
        analysisset: OpenSim::AnalysisSet &

        """
        return _simulation.AnalysisSet_getAvailableAnalyses(analysisset)

    getAvailableAnalyses = staticmethod(getAvailableAnalyses)

    def adoptAndAppend(self, aAnalysis):
        aAnalysis._markAdopted()
        return super(AnalysisSet, self).adoptAndAppend(aAnalysis)

AnalysisSet_swigregister = _simulation.AnalysisSet_swigregister
AnalysisSet_swigregister(AnalysisSet)

def AnalysisSet_safeDownCast(obj):
    """
    AnalysisSet_safeDownCast(OpenSimObject obj) -> AnalysisSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.AnalysisSet_safeDownCast(obj)

def AnalysisSet_getClassName():
    """AnalysisSet_getClassName() -> std::string const &"""
    return _simulation.AnalysisSet_getClassName()

def AnalysisSet_getAvailableAnalyses(analysisset):
    """
    AnalysisSet_getAvailableAnalyses(AnalysisSet analysisset)

    Parameters
    ----------
    analysisset: OpenSim::AnalysisSet &

    """
    return _simulation.AnalysisSet_getAvailableAnalyses(analysisset)

class Control(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Control class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Control, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Control, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Control

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Control_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Control self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Control_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Control_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Control self) -> Control

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Control self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_Control
    __del__ = lambda self: None

    def setIsModelControl(self, aTrueFalse):
        """
        setIsModelControl(Control self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.Control_setIsModelControl(self, aTrueFalse)


    def getIsModelControl(self):
        """
        getIsModelControl(Control self) -> bool

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getIsModelControl(self)


    def setExtrapolate(self, aTrueFalse):
        """
        setExtrapolate(Control self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.Control_setExtrapolate(self, aTrueFalse)


    def getExtrapolate(self):
        """
        getExtrapolate(Control self) -> bool

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getExtrapolate(self)


    def setFilterOn(self, aTrueFalse):
        """
        setFilterOn(Control self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.Control_setFilterOn(self, aTrueFalse)


    def getFilterOn(self):
        """
        getFilterOn(Control self) -> bool

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getFilterOn(self)


    def getNumParameters(self):
        """
        getNumParameters(Control self) -> int

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getNumParameters(self)


    def setDefaultParameterMin(self, aMin):
        """
        setDefaultParameterMin(Control self, double aMin)

        Parameters
        ----------
        aMin: double

        """
        return _simulation.Control_setDefaultParameterMin(self, aMin)


    def getDefaultParameterMin(self):
        """
        getDefaultParameterMin(Control self) -> double

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getDefaultParameterMin(self)


    def setDefaultParameterMax(self, aMax):
        """
        setDefaultParameterMax(Control self, double aMax)

        Parameters
        ----------
        aMax: double

        """
        return _simulation.Control_setDefaultParameterMax(self, aMax)


    def getDefaultParameterMax(self):
        """
        getDefaultParameterMax(Control self) -> double

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getDefaultParameterMax(self)


    def setParameterMin(self, aI, aMin):
        """
        setParameterMin(Control self, int aI, double aMin)

        Parameters
        ----------
        aI: int
        aMin: double

        """
        return _simulation.Control_setParameterMin(self, aI, aMin)


    def getParameterMin(self, aI):
        """
        getParameterMin(Control self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.Control_getParameterMin(self, aI)


    def setParameterMax(self, aI, aMax):
        """
        setParameterMax(Control self, int aI, double aMax)

        Parameters
        ----------
        aI: int
        aMax: double

        """
        return _simulation.Control_setParameterMax(self, aI, aMax)


    def getParameterMax(self, aI):
        """
        getParameterMax(Control self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.Control_getParameterMax(self, aI)


    def getParameterTime(self, aI):
        """
        getParameterTime(Control self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.Control_getParameterTime(self, aI)


    def getParameterNeighborhood(self, aI, rTLower, rTUpper):
        """
        getParameterNeighborhood(Control self, int aI, double & rTLower, double & rTUpper)

        Parameters
        ----------
        aI: int
        rTLower: double &
        rTUpper: double &

        """
        return _simulation.Control_getParameterNeighborhood(self, aI, rTLower, rTUpper)


    def getParameterList(self, *args):
        """
        getParameterList(Control self, double aT, ArrayInt rList) -> int

        Parameters
        ----------
        aT: double
        rList: OpenSim::Array< int > &

        getParameterList(Control self, double aTLower, double aTUpper, ArrayInt rList) -> int

        Parameters
        ----------
        aTLower: double
        aTUpper: double
        rList: OpenSim::Array< int > &

        """
        return _simulation.Control_getParameterList(self, *args)


    def getParameterValue(self, aI):
        """
        getParameterValue(Control self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.Control_getParameterValue(self, aI)


    def setParameterValue(self, aI, aX):
        """
        setParameterValue(Control self, int aI, double aX)

        Parameters
        ----------
        aI: int
        aX: double

        """
        return _simulation.Control_setParameterValue(self, aI, aX)


    def getControlValue(self, aT=0.0):
        """
        getControlValue(Control self, double aT=0.0) -> double

        Parameters
        ----------
        aT: double

        getControlValue(Control self) -> double

        Parameters
        ----------
        self: OpenSim::Control *

        """
        return _simulation.Control_getControlValue(self, aT)


    def setControlValue(self, aT, aX):
        """
        setControlValue(Control self, double aT, double aX)

        Parameters
        ----------
        aT: double
        aX: double

        """
        return _simulation.Control_setControlValue(self, aT, aX)


    def getControlValueMin(self, aT=0.0):
        """
        getControlValueMin(Control self, double aT=0.0) -> double

        Parameters
        ----------
        aT: double

        getControlValueMin(Control self) -> double

        Parameters
        ----------
        self: OpenSim::Control *

        """
        return _simulation.Control_getControlValueMin(self, aT)


    def setControlValueMin(self, aT, aMin):
        """
        setControlValueMin(Control self, double aT, double aMin)

        Parameters
        ----------
        aT: double
        aMin: double

        """
        return _simulation.Control_setControlValueMin(self, aT, aMin)


    def getControlValueMax(self, aT=0.0):
        """
        getControlValueMax(Control self, double aT=0.0) -> double

        Parameters
        ----------
        aT: double

        getControlValueMax(Control self) -> double

        Parameters
        ----------
        self: OpenSim::Control *

        """
        return _simulation.Control_getControlValueMax(self, aT)


    def setControlValueMax(self, aT, aMax):
        """
        setControlValueMax(Control self, double aT, double aMax)

        Parameters
        ----------
        aT: double
        aMax: double

        """
        return _simulation.Control_setControlValueMax(self, aT, aMax)


    def getFirstTime(self):
        """
        getFirstTime(Control self) -> double const

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getFirstTime(self)


    def getLastTime(self):
        """
        getLastTime(Control self) -> double const

        Parameters
        ----------
        self: OpenSim::Control const *

        """
        return _simulation.Control_getLastTime(self)


    def simplify(self, aProperties):
        """
        simplify(Control self, PropertySet const & aProperties)

        Parameters
        ----------
        aProperties: PropertySet const &

        """
        return _simulation.Control_simplify(self, aProperties)


    def filter(self, aT):
        """
        filter(Control self, double aT)

        Parameters
        ----------
        aT: double

        """
        return _simulation.Control_filter(self, aT)

Control_swigregister = _simulation.Control_swigregister
Control_swigregister(Control)

def Control_safeDownCast(obj):
    """
    Control_safeDownCast(OpenSimObject obj) -> Control

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Control_safeDownCast(obj)

def Control_getClassName():
    """Control_getClassName() -> std::string const &"""
    return _simulation.Control_getClassName()

class SetControls(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::Control,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetControls, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetControls, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetControls

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetControls_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetControls self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetControls_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetControls_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetControls self) -> SetControls

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Control,OpenSim::Object > const *

        """
        return _simulation.SetControls_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetControls self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Control,OpenSim::Object > const *

        """
        return _simulation.SetControls_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetControls
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Control,OpenSim::Object)> self) -> SetControls
        __init__(OpenSim::Set<(OpenSim::Control,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetControls

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Control,OpenSim::Object)> self, std::string const & aFileName) -> SetControls

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Control,OpenSim::Object)> self, SetControls aSet) -> SetControls

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Control,OpenSim::Object > const &

        """
        this = _simulation.new_SetControls(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetControls self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Control,OpenSim::Object > *

        """
        return _simulation.SetControls_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetControls self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetControls_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetControls self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetControls_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetControls self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Control,OpenSim::Object > const *

        """
        return _simulation.SetControls_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetControls self, Control aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Control const *
        aStartIndex: int

        getIndex(SetControls self, Control aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Control const *

        getIndex(SetControls self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetControls self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetControls_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetControls self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetControls_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetControls self, Control aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Control *

        """
        return _simulation.SetControls_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetControls self, Control aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Control const &

        """
        return _simulation.SetControls_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetControls self, int aIndex, Control aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Control *

        """
        return _simulation.SetControls_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetControls self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetControls self, Control aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Control const *

        """
        return _simulation.SetControls_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetControls self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Control,OpenSim::Object > *

        """
        return _simulation.SetControls_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetControls self, int aIndex, Control aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Control *
        preserveGroups: bool

        set(SetControls self, int aIndex, Control aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Control *

        """
        return _simulation.SetControls_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetControls self, int aIndex) -> Control

        Parameters
        ----------
        aIndex: int

        get(SetControls self, std::string const & aName) -> Control

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetControls_get(self, *args)


    def contains(self, aName):
        """
        contains(SetControls self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetControls_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetControls self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetControls_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetControls self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Control,OpenSim::Object > const *

        """
        return _simulation.SetControls_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetControls self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetControls_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetControls self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetControls_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetControls self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetControls_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetControls self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetControls_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetControls self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetControls_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetControls self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetControls self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetControls_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetControls_swigregister = _simulation.SetControls_swigregister
SetControls_swigregister(SetControls)

def SetControls_safeDownCast(obj):
    """
    SetControls_safeDownCast(OpenSimObject obj) -> SetControls

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetControls_safeDownCast(obj)

def SetControls_getClassName():
    """SetControls_getClassName() -> std::string const &"""
    return _simulation.SetControls_getClassName()

class ControlSet(SetControls):
    """Proxy of C++ OpenSim::ControlSet class."""

    __swig_setmethods__ = {}
    for _s in [SetControls]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetControls]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControlSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ControlSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ControlSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ControlSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ControlSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ControlSet self) -> ControlSet

        Parameters
        ----------
        self: OpenSim::ControlSet const *

        """
        return _simulation.ControlSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControlSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ControlSet const *

        """
        return _simulation.ControlSet_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_ControlSet
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ControlSet self) -> ControlSet
        __init__(OpenSim::ControlSet self, std::string const & aFileName) -> ControlSet

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::ControlSet self, ControlSet aSet) -> ControlSet

        Parameters
        ----------
        aSet: OpenSim::ControlSet const &

        __init__(OpenSim::ControlSet self, Storage aStorage, int nControlsToConvert=0, int aStartIndex=0) -> ControlSet

        Parameters
        ----------
        aStorage: OpenSim::Storage const &
        nControlsToConvert: int
        aStartIndex: int

        __init__(OpenSim::ControlSet self, Storage aStorage, int nControlsToConvert=0) -> ControlSet

        Parameters
        ----------
        aStorage: OpenSim::Storage const &
        nControlsToConvert: int

        __init__(OpenSim::ControlSet self, Storage aStorage) -> ControlSet

        Parameters
        ----------
        aStorage: OpenSim::Storage const &

        """
        this = _simulation.new_ControlSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSize(self, aForModelControls=True):
        """
        getSize(ControlSet self, bool aForModelControls=True) -> int

        Parameters
        ----------
        aForModelControls: bool

        getSize(ControlSet self) -> int

        Parameters
        ----------
        self: OpenSim::ControlSet const *

        """
        return _simulation.ControlSet_getSize(self, aForModelControls)


    def getControlList(self, aType, rList, aForModelControls=True):
        """
        getControlList(ControlSet self, char const * aType, ArrayInt rList, bool aForModelControls=True)

        Parameters
        ----------
        aType: char const *
        rList: OpenSim::Array< int > &
        aForModelControls: bool

        getControlList(ControlSet self, char const * aType, ArrayInt rList)

        Parameters
        ----------
        aType: char const *
        rList: OpenSim::Array< int > &

        """
        return _simulation.ControlSet_getControlList(self, aType, rList, aForModelControls)


    def getControlValues(self, aT, rX, aForModelControls=True):
        """
        getControlValues(ControlSet self, double aT, ArrayDouble rX, bool aForModelControls=True)

        Parameters
        ----------
        aT: double
        rX: OpenSim::Array< double > &
        aForModelControls: bool

        getControlValues(ControlSet self, double aT, ArrayDouble rX)

        Parameters
        ----------
        aT: double
        rX: OpenSim::Array< double > &

        """
        return _simulation.ControlSet_getControlValues(self, aT, rX, aForModelControls)


    def setControlValues(self, aT, aX, aForModelControls=True):
        """
        setControlValues(ControlSet self, double aT, ArrayDouble aX, bool aForModelControls=True)

        Parameters
        ----------
        aT: double
        aX: OpenSim::Array< double > const &
        aForModelControls: bool

        setControlValues(ControlSet self, double aT, ArrayDouble aX)

        Parameters
        ----------
        aT: double
        aX: OpenSim::Array< double > const &

        """
        return _simulation.ControlSet_setControlValues(self, aT, aX, aForModelControls)


    def getNumParameters(self, aForModelControls=True):
        """
        getNumParameters(ControlSet self, bool aForModelControls=True) -> int

        Parameters
        ----------
        aForModelControls: bool

        getNumParameters(ControlSet self) -> int

        Parameters
        ----------
        self: OpenSim::ControlSet const *

        """
        return _simulation.ControlSet_getNumParameters(self, aForModelControls)


    def getParameterList(self, *args):
        """
        getParameterList(ControlSet self, ArrayInt rList, bool aForModelControls=True)

        Parameters
        ----------
        rList: OpenSim::Array< int > &
        aForModelControls: bool

        getParameterList(ControlSet self, ArrayInt rList)

        Parameters
        ----------
        rList: OpenSim::Array< int > &

        getParameterList(ControlSet self, double aT, ArrayInt rList, bool aForModelControls=True)

        Parameters
        ----------
        aT: double
        rList: OpenSim::Array< int > &
        aForModelControls: bool

        getParameterList(ControlSet self, double aT, ArrayInt rList)

        Parameters
        ----------
        aT: double
        rList: OpenSim::Array< int > &

        getParameterList(ControlSet self, double aTLower, double aTUpper, ArrayInt rList, bool aForModelControls=True)

        Parameters
        ----------
        aTLower: double
        aTUpper: double
        rList: OpenSim::Array< int > &
        aForModelControls: bool

        getParameterList(ControlSet self, double aTLower, double aTUpper, ArrayInt rList)

        Parameters
        ----------
        aTLower: double
        aTUpper: double
        rList: OpenSim::Array< int > &

        """
        return _simulation.ControlSet_getParameterList(self, *args)


    def getParameterMins(self, rMins, aList=None):
        """
        getParameterMins(ControlSet self, ArrayDouble rMins, ArrayInt aList=None)

        Parameters
        ----------
        rMins: OpenSim::Array< double > &
        aList: OpenSim::Array< int > const *

        getParameterMins(ControlSet self, ArrayDouble rMins)

        Parameters
        ----------
        rMins: OpenSim::Array< double > &

        """
        return _simulation.ControlSet_getParameterMins(self, rMins, aList)


    def getParameterMaxs(self, rMaxs, aList=None):
        """
        getParameterMaxs(ControlSet self, ArrayDouble rMaxs, ArrayInt aList=None)

        Parameters
        ----------
        rMaxs: OpenSim::Array< double > &
        aList: OpenSim::Array< int > const *

        getParameterMaxs(ControlSet self, ArrayDouble rMaxs)

        Parameters
        ----------
        rMaxs: OpenSim::Array< double > &

        """
        return _simulation.ControlSet_getParameterMaxs(self, rMaxs, aList)


    def getParameterValues(self, rP, aList=None):
        """
        getParameterValues(ControlSet self, ArrayDouble rP, ArrayInt aList=None)

        Parameters
        ----------
        rP: OpenSim::Array< double > &
        aList: OpenSim::Array< int > const *

        getParameterValues(ControlSet self, ArrayDouble rP)

        Parameters
        ----------
        rP: OpenSim::Array< double > &

        """
        return _simulation.ControlSet_getParameterValues(self, rP, aList)


    def setParameterValues(self, aP, aList=None):
        """
        setParameterValues(ControlSet self, ArrayDouble aP, ArrayInt aList=None)

        Parameters
        ----------
        aP: OpenSim::Array< double > const &
        aList: OpenSim::Array< int > const *

        setParameterValues(ControlSet self, ArrayDouble aP)

        Parameters
        ----------
        aP: OpenSim::Array< double > const &

        """
        return _simulation.ControlSet_setParameterValues(self, aP, aList)


    def simplify(self, aProperties):
        """
        simplify(ControlSet self, PropertySet const & aProperties)

        Parameters
        ----------
        aProperties: PropertySet const &

        """
        return _simulation.ControlSet_simplify(self, aProperties)


    def filter(self, aT):
        """
        filter(ControlSet self, double aT)

        Parameters
        ----------
        aT: double

        """
        return _simulation.ControlSet_filter(self, aT)


    def constructStorage(self, aN, aT1, aT2, aForModelControls):
        """
        constructStorage(ControlSet self, int aN, double aT1, double aT2, bool aForModelControls) -> Storage

        Parameters
        ----------
        aN: int
        aT1: double
        aT2: double
        aForModelControls: bool

        """
        return _simulation.ControlSet_constructStorage(self, aN, aT1, aT2, aForModelControls)


    def mapParameterToControl(self, aIndex):
        """
        mapParameterToControl(ControlSet self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.ControlSet_mapParameterToControl(self, aIndex)


    def mapParameterToParameter(self, aIndex):
        """
        mapParameterToParameter(ControlSet self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.ControlSet_mapParameterToParameter(self, aIndex)


    def generateParameterMaps(self):
        """
        generateParameterMaps(ControlSet self)

        Parameters
        ----------
        self: OpenSim::ControlSet *

        """
        return _simulation.ControlSet_generateParameterMaps(self)


    def adoptAndAppend(self, aControl):
        aControl._markAdopted()
        return super(ControlSet, self).adoptAndAppend(aControl)

ControlSet_swigregister = _simulation.ControlSet_swigregister
ControlSet_swigregister(ControlSet)

def ControlSet_safeDownCast(obj):
    """
    ControlSet_safeDownCast(OpenSimObject obj) -> ControlSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ControlSet_safeDownCast(obj)

def ControlSet_getClassName():
    """ControlSet_getClassName() -> std::string const &"""
    return _simulation.ControlSet_getClassName()

class ControlConstant(Control):
    """Proxy of C++ OpenSim::ControlConstant class."""

    __swig_setmethods__ = {}
    for _s in [Control]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlConstant, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlConstant, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControlConstant

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ControlConstant_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ControlConstant self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ControlConstant_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ControlConstant_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ControlConstant self) -> ControlConstant

        Parameters
        ----------
        self: OpenSim::ControlConstant const *

        """
        return _simulation.ControlConstant_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControlConstant self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ControlConstant const *

        """
        return _simulation.ControlConstant_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_ControlConstant
    __del__ = lambda self: None

    def getNumParameters(self):
        """
        getNumParameters(ControlConstant self) -> int

        Parameters
        ----------
        self: OpenSim::ControlConstant const *

        """
        return _simulation.ControlConstant_getNumParameters(self)


    def setParameterMin(self, aI, aMin):
        """
        setParameterMin(ControlConstant self, int aI, double aMin)

        Parameters
        ----------
        aI: int
        aMin: double

        """
        return _simulation.ControlConstant_setParameterMin(self, aI, aMin)


    def getParameterMin(self, aI):
        """
        getParameterMin(ControlConstant self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.ControlConstant_getParameterMin(self, aI)


    def setParameterMax(self, aI, aMax):
        """
        setParameterMax(ControlConstant self, int aI, double aMax)

        Parameters
        ----------
        aI: int
        aMax: double

        """
        return _simulation.ControlConstant_setParameterMax(self, aI, aMax)


    def getParameterMax(self, aI):
        """
        getParameterMax(ControlConstant self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.ControlConstant_getParameterMax(self, aI)


    def getParameterTime(self, aI):
        """
        getParameterTime(ControlConstant self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.ControlConstant_getParameterTime(self, aI)


    def getParameterNeighborhood(self, aI, rTLower, rTUpper):
        """
        getParameterNeighborhood(ControlConstant self, int aI, double & rTLower, double & rTUpper)

        Parameters
        ----------
        aI: int
        rTLower: double &
        rTUpper: double &

        """
        return _simulation.ControlConstant_getParameterNeighborhood(self, aI, rTLower, rTUpper)


    def getParameterList(self, *args):
        """
        getParameterList(ControlConstant self, double aT, ArrayInt rList) -> int

        Parameters
        ----------
        aT: double
        rList: OpenSim::Array< int > &

        getParameterList(ControlConstant self, double aT1, double aT2, ArrayInt rList) -> int

        Parameters
        ----------
        aT1: double
        aT2: double
        rList: OpenSim::Array< int > &

        """
        return _simulation.ControlConstant_getParameterList(self, *args)


    def setParameterValue(self, aI, aX):
        """
        setParameterValue(ControlConstant self, int aI, double aX)

        Parameters
        ----------
        aI: int
        aX: double

        """
        return _simulation.ControlConstant_setParameterValue(self, aI, aX)


    def getParameterValue(self, aI):
        """
        getParameterValue(ControlConstant self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.ControlConstant_getParameterValue(self, aI)


    def setControlValue(self, aT, aX):
        """
        setControlValue(ControlConstant self, double aT, double aX)

        Parameters
        ----------
        aT: double
        aX: double

        """
        return _simulation.ControlConstant_setControlValue(self, aT, aX)


    def getControlValue(self, aT):
        """
        getControlValue(ControlConstant self, double aT) -> double

        Parameters
        ----------
        aT: double

        """
        return _simulation.ControlConstant_getControlValue(self, aT)


    def getControlValueMin(self, aT=0.0):
        """
        getControlValueMin(ControlConstant self, double aT=0.0) -> double

        Parameters
        ----------
        aT: double

        getControlValueMin(ControlConstant self) -> double

        Parameters
        ----------
        self: OpenSim::ControlConstant *

        """
        return _simulation.ControlConstant_getControlValueMin(self, aT)


    def setControlValueMin(self, aT, aX):
        """
        setControlValueMin(ControlConstant self, double aT, double aX)

        Parameters
        ----------
        aT: double
        aX: double

        """
        return _simulation.ControlConstant_setControlValueMin(self, aT, aX)


    def getControlValueMax(self, aT=0.0):
        """
        getControlValueMax(ControlConstant self, double aT=0.0) -> double

        Parameters
        ----------
        aT: double

        getControlValueMax(ControlConstant self) -> double

        Parameters
        ----------
        self: OpenSim::ControlConstant *

        """
        return _simulation.ControlConstant_getControlValueMax(self, aT)


    def setControlValueMax(self, aT, aX):
        """
        setControlValueMax(ControlConstant self, double aT, double aX)

        Parameters
        ----------
        aT: double
        aX: double

        """
        return _simulation.ControlConstant_setControlValueMax(self, aT, aX)

ControlConstant_swigregister = _simulation.ControlConstant_swigregister
ControlConstant_swigregister(ControlConstant)

def ControlConstant_safeDownCast(obj):
    """
    ControlConstant_safeDownCast(OpenSimObject obj) -> ControlConstant

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ControlConstant_safeDownCast(obj)

def ControlConstant_getClassName():
    """ControlConstant_getClassName() -> std::string const &"""
    return _simulation.ControlConstant_getClassName()

class ControlLinearNode(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::ControlLinearNode class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlLinearNode, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlLinearNode, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControlLinearNode

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ControlLinearNode_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ControlLinearNode self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ControlLinearNode_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ControlLinearNode_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ControlLinearNode self) -> ControlLinearNode

        Parameters
        ----------
        self: OpenSim::ControlLinearNode const *

        """
        return _simulation.ControlLinearNode_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControlLinearNode self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ControlLinearNode const *

        """
        return _simulation.ControlLinearNode_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ControlLinearNode self, double aT=0.0, double aValue=0.0) -> ControlLinearNode

        Parameters
        ----------
        aT: double
        aValue: double

        __init__(OpenSim::ControlLinearNode self, double aT=0.0) -> ControlLinearNode

        Parameters
        ----------
        aT: double

        __init__(OpenSim::ControlLinearNode self) -> ControlLinearNode
        __init__(OpenSim::ControlLinearNode self, ControlLinearNode aNode) -> ControlLinearNode

        Parameters
        ----------
        aNode: OpenSim::ControlLinearNode const &

        """
        this = _simulation.new_ControlLinearNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ControlLinearNode
    __del__ = lambda self: None

    def setTime(self, aT):
        """
        setTime(ControlLinearNode self, double aT)

        Parameters
        ----------
        aT: double

        """
        return _simulation.ControlLinearNode_setTime(self, aT)


    def getTime(self):
        """
        getTime(ControlLinearNode self) -> double

        Parameters
        ----------
        self: OpenSim::ControlLinearNode const *

        """
        return _simulation.ControlLinearNode_getTime(self)


    def setValue(self, aValue):
        """
        setValue(ControlLinearNode self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _simulation.ControlLinearNode_setValue(self, aValue)


    def getValue(self):
        """
        getValue(ControlLinearNode self) -> double

        Parameters
        ----------
        self: OpenSim::ControlLinearNode const *

        """
        return _simulation.ControlLinearNode_getValue(self)


    def toString(self):
        """
        toString(ControlLinearNode self) -> char *

        Parameters
        ----------
        self: OpenSim::ControlLinearNode *

        """
        return _simulation.ControlLinearNode_toString(self)

ControlLinearNode_swigregister = _simulation.ControlLinearNode_swigregister
ControlLinearNode_swigregister(ControlLinearNode)

def ControlLinearNode_safeDownCast(obj):
    """
    ControlLinearNode_safeDownCast(OpenSimObject obj) -> ControlLinearNode

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ControlLinearNode_safeDownCast(obj)

def ControlLinearNode_getClassName():
    """ControlLinearNode_getClassName() -> std::string const &"""
    return _simulation.ControlLinearNode_getClassName()

class SetControlNodes(_object):
    """Proxy of C++ OpenSim::ArrayPtrs<(OpenSim::ControlLinearNode)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetControlNodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetControlNodes, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _simulation.delete_SetControlNodes
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::ArrayPtrs<(OpenSim::ControlLinearNode)> self, int aCapacity=1) -> SetControlNodes

        Parameters
        ----------
        aCapacity: int

        __init__(OpenSim::ArrayPtrs<(OpenSim::ControlLinearNode)> self) -> SetControlNodes
        __init__(OpenSim::ArrayPtrs<(OpenSim::ControlLinearNode)> self, SetControlNodes aArray) -> SetControlNodes

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > const &

        """
        this = _simulation.new_SetControlNodes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clearAndDestroy(self):
        """
        clearAndDestroy(SetControlNodes self)

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > *

        """
        return _simulation.SetControlNodes_clearAndDestroy(self)


    def setSize(self, aSize):
        """
        setSize(SetControlNodes self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetControlNodes_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetControlNodes self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > const *

        """
        return _simulation.SetControlNodes_getSize(self)


    def size(self):
        """
        size(SetControlNodes self) -> int

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > const *

        """
        return _simulation.SetControlNodes_size(self)


    def getIndex(self, *args):
        """
        getIndex(SetControlNodes self, OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT *
        aStartIndex: int

        getIndex(SetControlNodes self, OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT * aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT *

        getIndex(SetControlNodes self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetControlNodes self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetControlNodes_getIndex(self, *args)


    def append(self, *args):
        """
        append(SetControlNodes self, ControlLinearNode aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ControlLinearNode *

        append(SetControlNodes self, SetControlNodes aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > &

        """
        return _simulation.SetControlNodes_append(self, *args)


    def insert(self, aIndex, aObject):
        """
        insert(SetControlNodes self, int aIndex, ControlLinearNode aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ControlLinearNode *

        """
        return _simulation.SetControlNodes_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetControlNodes self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetControlNodes self, OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT *

        """
        return _simulation.SetControlNodes_remove(self, *args)


    def set(self, aIndex, aObject):
        """
        set(SetControlNodes self, int aIndex, ControlLinearNode aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::ControlLinearNode *

        """
        return _simulation.SetControlNodes_set(self, aIndex, aObject)


    def get(self, *args):
        """
        get(SetControlNodes self, int aIndex) -> ControlLinearNode

        Parameters
        ----------
        aIndex: int

        get(SetControlNodes self, std::string const & aName) -> ControlLinearNode

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetControlNodes_get(self, *args)


    def getLast(self):
        """
        getLast(SetControlNodes self) -> ControlLinearNode

        Parameters
        ----------
        self: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode > const *

        """
        return _simulation.SetControlNodes_getLast(self)


    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(SetControlNodes self, OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(SetControlNodes self, OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT & aObject, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT &
        aFindFirst: bool
        aLo: int

        searchBinary(SetControlNodes self, OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT & aObject, bool aFindFirst=False) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT &
        aFindFirst: bool

        searchBinary(SetControlNodes self, OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT & aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::ControlLinearNode >::ConstT &

        """
        return _simulation.SetControlNodes_searchBinary(self, aObject, aFindFirst, aLo, aHi)

SetControlNodes_swigregister = _simulation.SetControlNodes_swigregister
SetControlNodes_swigregister(SetControlNodes)

class ControlLinear(Control):
    """Proxy of C++ OpenSim::ControlLinear class."""

    __swig_setmethods__ = {}
    for _s in [Control]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlLinear, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlLinear, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ControlLinear

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ControlLinear_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ControlLinear self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ControlLinear_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ControlLinear_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ControlLinear self) -> ControlLinear

        Parameters
        ----------
        self: OpenSim::ControlLinear const *

        """
        return _simulation.ControlLinear_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ControlLinear self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ControlLinear const *

        """
        return _simulation.ControlLinear_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ControlLinear self) -> ControlLinear
        __init__(OpenSim::ControlLinear self, ControlLinear aControl) -> ControlLinear

        Parameters
        ----------
        aControl: OpenSim::ControlLinear const &

        """
        this = _simulation.new_ControlLinear(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ControlLinear
    __del__ = lambda self: None

    def copyData(self, aControl):
        """
        copyData(ControlLinear self, ControlLinear aControl)

        Parameters
        ----------
        aControl: OpenSim::ControlLinear const &

        """
        return _simulation.ControlLinear_copyData(self, aControl)


    def setUseSteps(self, aTrueFalse):
        """
        setUseSteps(ControlLinear self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.ControlLinear_setUseSteps(self, aTrueFalse)


    def getUseSteps(self):
        """
        getUseSteps(ControlLinear self) -> bool

        Parameters
        ----------
        self: OpenSim::ControlLinear const *

        """
        return _simulation.ControlLinear_getUseSteps(self)


    def setKp(self, aKp):
        """
        setKp(ControlLinear self, double aKp)

        Parameters
        ----------
        aKp: double

        """
        return _simulation.ControlLinear_setKp(self, aKp)


    def getKp(self):
        """
        getKp(ControlLinear self) -> double

        Parameters
        ----------
        self: OpenSim::ControlLinear const *

        """
        return _simulation.ControlLinear_getKp(self)


    def setKv(self, aKv):
        """
        setKv(ControlLinear self, double aKv)

        Parameters
        ----------
        aKv: double

        """
        return _simulation.ControlLinear_setKv(self, aKv)


    def getKv(self):
        """
        getKv(ControlLinear self) -> double

        Parameters
        ----------
        self: OpenSim::ControlLinear const *

        """
        return _simulation.ControlLinear_getKv(self)


    def getNumParameters(self):
        """
        getNumParameters(ControlLinear self) -> int

        Parameters
        ----------
        self: OpenSim::ControlLinear const *

        """
        return _simulation.ControlLinear_getNumParameters(self)


    def setParameterMin(self, aI, aMin):
        """
        setParameterMin(ControlLinear self, int aI, double aMin)

        Parameters
        ----------
        aI: int
        aMin: double

        """
        return _simulation.ControlLinear_setParameterMin(self, aI, aMin)


    def getParameterMin(self, aI):
        """
        getParameterMin(ControlLinear self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.ControlLinear_getParameterMin(self, aI)


    def setParameterMax(self, aI, aMax):
        """
        setParameterMax(ControlLinear self, int aI, double aMax)

        Parameters
        ----------
        aI: int
        aMax: double

        """
        return _simulation.ControlLinear_setParameterMax(self, aI, aMax)


    def getParameterMax(self, aI):
        """
        getParameterMax(ControlLinear self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.ControlLinear_getParameterMax(self, aI)


    def getParameterTime(self, aI):
        """
        getParameterTime(ControlLinear self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.ControlLinear_getParameterTime(self, aI)


    def getParameterNeighborhood(self, aI, rTLower, rTUpper):
        """
        getParameterNeighborhood(ControlLinear self, int aI, double & rTLower, double & rTUpper)

        Parameters
        ----------
        aI: int
        rTLower: double &
        rTUpper: double &

        """
        return _simulation.ControlLinear_getParameterNeighborhood(self, aI, rTLower, rTUpper)


    def getParameterList(self, *args):
        """
        getParameterList(ControlLinear self, double aT, ArrayInt rList) -> int

        Parameters
        ----------
        aT: double
        rList: OpenSim::Array< int > &

        getParameterList(ControlLinear self, double aT1, double aT2, ArrayInt rList) -> int

        Parameters
        ----------
        aT1: double
        aT2: double
        rList: OpenSim::Array< int > &

        """
        return _simulation.ControlLinear_getParameterList(self, *args)


    def setParameterValue(self, aI, aP):
        """
        setParameterValue(ControlLinear self, int aI, double aP)

        Parameters
        ----------
        aI: int
        aP: double

        """
        return _simulation.ControlLinear_setParameterValue(self, aI, aP)


    def getParameterValue(self, aI):
        """
        getParameterValue(ControlLinear self, int aI) -> double

        Parameters
        ----------
        aI: int

        """
        return _simulation.ControlLinear_getParameterValue(self, aI)


    def setControlValue(self, aT, aX):
        """
        setControlValue(ControlLinear self, double aT, double aX)

        Parameters
        ----------
        aT: double
        aX: double

        """
        return _simulation.ControlLinear_setControlValue(self, aT, aX)


    def getControlValue(self, aT):
        """
        getControlValue(ControlLinear self, double aT) -> double

        Parameters
        ----------
        aT: double

        """
        return _simulation.ControlLinear_getControlValue(self, aT)


    def getControlValueMin(self, aT=0.0):
        """
        getControlValueMin(ControlLinear self, double aT=0.0) -> double

        Parameters
        ----------
        aT: double

        getControlValueMin(ControlLinear self) -> double

        Parameters
        ----------
        self: OpenSim::ControlLinear *

        """
        return _simulation.ControlLinear_getControlValueMin(self, aT)


    def setControlValueMin(self, aT, aX):
        """
        setControlValueMin(ControlLinear self, double aT, double aX)

        Parameters
        ----------
        aT: double
        aX: double

        """
        return _simulation.ControlLinear_setControlValueMin(self, aT, aX)


    def getControlValueMax(self, aT=0.0):
        """
        getControlValueMax(ControlLinear self, double aT=0.0) -> double

        Parameters
        ----------
        aT: double

        getControlValueMax(ControlLinear self) -> double

        Parameters
        ----------
        self: OpenSim::ControlLinear *

        """
        return _simulation.ControlLinear_getControlValueMax(self, aT)


    def setControlValueMax(self, aT, aX):
        """
        setControlValueMax(ControlLinear self, double aT, double aX)

        Parameters
        ----------
        aT: double
        aX: double

        """
        return _simulation.ControlLinear_setControlValueMax(self, aT, aX)


    def clearControlNodes(self):
        """
        clearControlNodes(ControlLinear self)

        Parameters
        ----------
        self: OpenSim::ControlLinear *

        """
        return _simulation.ControlLinear_clearControlNodes(self)


    def getControlValues(self):
        """
        getControlValues(ControlLinear self) -> SetControlNodes

        Parameters
        ----------
        self: OpenSim::ControlLinear *

        """
        return _simulation.ControlLinear_getControlValues(self)


    def getControlMinValues(self):
        """
        getControlMinValues(ControlLinear self) -> SetControlNodes

        Parameters
        ----------
        self: OpenSim::ControlLinear *

        """
        return _simulation.ControlLinear_getControlMinValues(self)


    def getControlMaxValues(self):
        """
        getControlMaxValues(ControlLinear self) -> SetControlNodes

        Parameters
        ----------
        self: OpenSim::ControlLinear *

        """
        return _simulation.ControlLinear_getControlMaxValues(self)


    def insertNewValueNode(self, index, newNode):
        """
        insertNewValueNode(ControlLinear self, int index, ControlLinearNode newNode)

        Parameters
        ----------
        index: int
        newNode: OpenSim::ControlLinearNode const &

        """
        return _simulation.ControlLinear_insertNewValueNode(self, index, newNode)


    def insertNewMinNode(self, index, newNode):
        """
        insertNewMinNode(ControlLinear self, int index, ControlLinearNode newNode)

        Parameters
        ----------
        index: int
        newNode: OpenSim::ControlLinearNode const &

        """
        return _simulation.ControlLinear_insertNewMinNode(self, index, newNode)


    def insertNewMaxNode(self, index, newNode):
        """
        insertNewMaxNode(ControlLinear self, int index, ControlLinearNode newNode)

        Parameters
        ----------
        index: int
        newNode: OpenSim::ControlLinearNode const &

        """
        return _simulation.ControlLinear_insertNewMaxNode(self, index, newNode)


    def getFirstTime(self):
        """
        getFirstTime(ControlLinear self) -> double const

        Parameters
        ----------
        self: OpenSim::ControlLinear const *

        """
        return _simulation.ControlLinear_getFirstTime(self)


    def getLastTime(self):
        """
        getLastTime(ControlLinear self) -> double const

        Parameters
        ----------
        self: OpenSim::ControlLinear const *

        """
        return _simulation.ControlLinear_getLastTime(self)


    def simplify(self, *args):
        """
        simplify(ControlLinear self, PropertySet const & aProperties)

        Parameters
        ----------
        aProperties: PropertySet const &

        simplify(ControlLinear self, double const & cutoffFrequency, double const & distance) -> bool

        Parameters
        ----------
        cutoffFrequency: double const &
        distance: double const &

        """
        return _simulation.ControlLinear_simplify(self, *args)


    def filter(self, aT):
        """
        filter(ControlLinear self, double aT)

        Parameters
        ----------
        aT: double

        """
        return _simulation.ControlLinear_filter(self, aT)


    def Interpolate(aX1, aY1, aX2, aY2, aX):
        """
        Interpolate(double aX1, double aY1, double aX2, double aY2, double aX) -> double

        Parameters
        ----------
        aX1: double
        aY1: double
        aX2: double
        aY2: double
        aX: double

        """
        return _simulation.ControlLinear_Interpolate(aX1, aY1, aX2, aY2, aX)

    Interpolate = staticmethod(Interpolate)
ControlLinear_swigregister = _simulation.ControlLinear_swigregister
ControlLinear_swigregister(ControlLinear)

def ControlLinear_safeDownCast(obj):
    """
    ControlLinear_safeDownCast(OpenSimObject obj) -> ControlLinear

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ControlLinear_safeDownCast(obj)

def ControlLinear_getClassName():
    """ControlLinear_getClassName() -> std::string const &"""
    return _simulation.ControlLinear_getClassName()

def ControlLinear_Interpolate(aX1, aY1, aX2, aY2, aX):
    """
    ControlLinear_Interpolate(double aX1, double aY1, double aX2, double aY2, double aX) -> double

    Parameters
    ----------
    aX1: double
    aY1: double
    aX2: double
    aY2: double
    aX: double

    """
    return _simulation.ControlLinear_Interpolate(aX1, aY1, aX2, aY2, aX)

class PrescribedController(Controller):
    """Proxy of C++ OpenSim::PrescribedController class."""

    __swig_setmethods__ = {}
    for _s in [Controller]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrescribedController, name, value)
    __swig_getmethods__ = {}
    for _s in [Controller]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrescribedController, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PrescribedController

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PrescribedController_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PrescribedController self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PrescribedController_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PrescribedController_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PrescribedController self) -> PrescribedController

        Parameters
        ----------
        self: OpenSim::PrescribedController const *

        """
        return _simulation.PrescribedController_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PrescribedController self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PrescribedController const *

        """
        return _simulation.PrescribedController_getConcreteClassName(self)


    def copyProperty_ControlFunctions(self, source):
        """
        copyProperty_ControlFunctions(PrescribedController self, PrescribedController source)

        Parameters
        ----------
        source: OpenSim::PrescribedController::Self const &

        """
        return _simulation.PrescribedController_copyProperty_ControlFunctions(self, source)


    def append_ControlFunctions(self, value):
        """
        append_ControlFunctions(PrescribedController self, FunctionSet value) -> int

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedController_append_ControlFunctions(self, value)


    def constructProperty_ControlFunctions(self, initValue):
        """
        constructProperty_ControlFunctions(PrescribedController self, FunctionSet initValue)

        Parameters
        ----------
        initValue: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedController_constructProperty_ControlFunctions(self, initValue)


    def get_ControlFunctions(self, *args):
        """
        get_ControlFunctions(PrescribedController self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        get_ControlFunctions(PrescribedController self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedController const *

        """
        return _simulation.PrescribedController_get_ControlFunctions(self, *args)


    def upd_ControlFunctions(self, *args):
        """
        upd_ControlFunctions(PrescribedController self, int i) -> FunctionSet

        Parameters
        ----------
        i: int

        upd_ControlFunctions(PrescribedController self) -> FunctionSet

        Parameters
        ----------
        self: OpenSim::PrescribedController *

        """
        return _simulation.PrescribedController_upd_ControlFunctions(self, *args)


    def set_ControlFunctions(self, *args):
        """
        set_ControlFunctions(PrescribedController self, int i, FunctionSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::FunctionSet const &

        set_ControlFunctions(PrescribedController self, FunctionSet value)

        Parameters
        ----------
        value: OpenSim::FunctionSet const &

        """
        return _simulation.PrescribedController_set_ControlFunctions(self, *args)


    def copyProperty_controls_file(self, source):
        """
        copyProperty_controls_file(PrescribedController self, PrescribedController source)

        Parameters
        ----------
        source: OpenSim::PrescribedController::Self const &

        """
        return _simulation.PrescribedController_copyProperty_controls_file(self, source)


    def append_controls_file(self, value):
        """
        append_controls_file(PrescribedController self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.PrescribedController_append_controls_file(self, value)


    def constructProperty_controls_file(self, *args):
        """
        constructProperty_controls_file(PrescribedController self)
        constructProperty_controls_file(PrescribedController self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.PrescribedController_constructProperty_controls_file(self, *args)


    def get_controls_file(self, *args):
        """
        get_controls_file(PrescribedController self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_controls_file(PrescribedController self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PrescribedController const *

        """
        return _simulation.PrescribedController_get_controls_file(self, *args)


    def upd_controls_file(self, *args):
        """
        upd_controls_file(PrescribedController self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_controls_file(PrescribedController self) -> std::string &

        Parameters
        ----------
        self: OpenSim::PrescribedController *

        """
        return _simulation.PrescribedController_upd_controls_file(self, *args)


    def set_controls_file(self, *args):
        """
        set_controls_file(PrescribedController self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_controls_file(PrescribedController self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.PrescribedController_set_controls_file(self, *args)


    def copyProperty_interpolation_method(self, source):
        """
        copyProperty_interpolation_method(PrescribedController self, PrescribedController source)

        Parameters
        ----------
        source: OpenSim::PrescribedController::Self const &

        """
        return _simulation.PrescribedController_copyProperty_interpolation_method(self, source)


    def append_interpolation_method(self, value):
        """
        append_interpolation_method(PrescribedController self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _simulation.PrescribedController_append_interpolation_method(self, value)


    def constructProperty_interpolation_method(self, *args):
        """
        constructProperty_interpolation_method(PrescribedController self)
        constructProperty_interpolation_method(PrescribedController self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _simulation.PrescribedController_constructProperty_interpolation_method(self, *args)


    def get_interpolation_method(self, *args):
        """
        get_interpolation_method(PrescribedController self, int i) -> int const

        Parameters
        ----------
        i: int

        get_interpolation_method(PrescribedController self) -> int const &

        Parameters
        ----------
        self: OpenSim::PrescribedController const *

        """
        return _simulation.PrescribedController_get_interpolation_method(self, *args)


    def upd_interpolation_method(self, *args):
        """
        upd_interpolation_method(PrescribedController self, int i) -> int

        Parameters
        ----------
        i: int

        upd_interpolation_method(PrescribedController self) -> int &

        Parameters
        ----------
        self: OpenSim::PrescribedController *

        """
        return _simulation.PrescribedController_upd_interpolation_method(self, *args)


    def set_interpolation_method(self, *args):
        """
        set_interpolation_method(PrescribedController self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_interpolation_method(PrescribedController self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _simulation.PrescribedController_set_interpolation_method(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::PrescribedController self) -> PrescribedController
        __init__(OpenSim::PrescribedController self, std::string const & controlsFileName, int interpMethodType=1) -> PrescribedController

        Parameters
        ----------
        controlsFileName: std::string const &
        interpMethodType: int

        __init__(OpenSim::PrescribedController self, std::string const & controlsFileName) -> PrescribedController

        Parameters
        ----------
        controlsFileName: std::string const &

        """
        this = _simulation.new_PrescribedController(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PrescribedController
    __del__ = lambda self: None

    def computeControls(self, s, controls):
        """
        computeControls(PrescribedController self, State s, Vector controls)

        Parameters
        ----------
        s: SimTK::State const &
        controls: SimTK::Vector &

        """
        return _simulation.PrescribedController_computeControls(self, s, controls)


    def prescribeControlForActuator(self, *args):
        """
        prescribeControlForActuator(PrescribedController self, int index, Function prescribedFunction)

        Parameters
        ----------
        index: int
        prescribedFunction: OpenSim::Function *

        prescribeControlForActuator(PrescribedController self, std::string const actName, Function prescribedFunction)

        Parameters
        ----------
        actName: std::string const
        prescribedFunction: OpenSim::Function *

        """
        val = _simulation.PrescribedController_prescribeControlForActuator(self, *args)

        args[1]._markAdopted()


        return val

PrescribedController_swigregister = _simulation.PrescribedController_swigregister
PrescribedController_swigregister(PrescribedController)

def PrescribedController_safeDownCast(obj):
    """
    PrescribedController_safeDownCast(OpenSimObject obj) -> PrescribedController

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PrescribedController_safeDownCast(obj)

def PrescribedController_getClassName():
    """PrescribedController_getClassName() -> std::string const &"""
    return _simulation.PrescribedController_getClassName()

class Manager(_object):
    """Proxy of C++ OpenSim::Manager class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Manager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Manager, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::Manager self, Model model) -> Manager

        Parameters
        ----------
        model: OpenSim::Model &

        __init__(OpenSim::Manager self, Model model, State state) -> Manager

        Parameters
        ----------
        model: OpenSim::Model &
        state: SimTK::State const &

        __init__(OpenSim::Manager self) -> Manager
        """
        this = _simulation.new_Manager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setSessionName(self, name):
        """
        setSessionName(Manager self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Manager_setSessionName(self, name)


    def setModel(self, model):
        """
        setModel(Manager self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _simulation.Manager_setModel(self, model)


    def getSessionName(self):
        """
        getSessionName(Manager self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_getSessionName(self)


    def toString(self):
        """
        toString(Manager self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_toString(self)


    def setPerformAnalyses(self, performAnalyses):
        """
        setPerformAnalyses(Manager self, bool performAnalyses)

        Parameters
        ----------
        performAnalyses: bool

        """
        return _simulation.Manager_setPerformAnalyses(self, performAnalyses)


    def setWriteToStorage(self, writeToStorage):
        """
        setWriteToStorage(Manager self, bool writeToStorage)

        Parameters
        ----------
        writeToStorage: bool

        """
        return _simulation.Manager_setWriteToStorage(self, writeToStorage)

    IntegratorMethod_ExplicitEuler = _simulation.Manager_IntegratorMethod_ExplicitEuler
    IntegratorMethod_RungeKutta2 = _simulation.Manager_IntegratorMethod_RungeKutta2
    IntegratorMethod_RungeKutta3 = _simulation.Manager_IntegratorMethod_RungeKutta3
    IntegratorMethod_RungeKuttaFeldberg = _simulation.Manager_IntegratorMethod_RungeKuttaFeldberg
    IntegratorMethod_RungeKuttaMerson = _simulation.Manager_IntegratorMethod_RungeKuttaMerson
    IntegratorMethod_SemiExplicitEuler2 = _simulation.Manager_IntegratorMethod_SemiExplicitEuler2
    IntegratorMethod_Verlet = _simulation.Manager_IntegratorMethod_Verlet

    def setIntegratorMethod(self, integMethod):
        """
        setIntegratorMethod(Manager self, OpenSim::Manager::IntegratorMethod integMethod)

        Parameters
        ----------
        integMethod: enum OpenSim::Manager::IntegratorMethod

        """
        return _simulation.Manager_setIntegratorMethod(self, integMethod)


    def getIntegrator(self):
        """
        getIntegrator(Manager self) -> SimTK::Integrator &

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_getIntegrator(self)


    def setIntegratorAccuracy(self, accuracy):
        """
        setIntegratorAccuracy(Manager self, double accuracy)

        Parameters
        ----------
        accuracy: double

        """
        return _simulation.Manager_setIntegratorAccuracy(self, accuracy)


    def setIntegratorMinimumStepSize(self, hmin):
        """
        setIntegratorMinimumStepSize(Manager self, double hmin)

        Parameters
        ----------
        hmin: double

        """
        return _simulation.Manager_setIntegratorMinimumStepSize(self, hmin)


    def setIntegratorMaximumStepSize(self, hmax):
        """
        setIntegratorMaximumStepSize(Manager self, double hmax)

        Parameters
        ----------
        hmax: double

        """
        return _simulation.Manager_setIntegratorMaximumStepSize(self, hmax)


    def setIntegratorInternalStepLimit(self, nSteps):
        """
        setIntegratorInternalStepLimit(Manager self, int nSteps)

        Parameters
        ----------
        nSteps: int

        """
        return _simulation.Manager_setIntegratorInternalStepLimit(self, nSteps)


    def setUseSpecifiedDT(self, aTrueFalse):
        """
        setUseSpecifiedDT(Manager self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.Manager_setUseSpecifiedDT(self, aTrueFalse)


    def getUseSpecifiedDT(self):
        """
        getUseSpecifiedDT(Manager self) -> bool

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_getUseSpecifiedDT(self)


    def setUseConstantDT(self, aTrueFalse):
        """
        setUseConstantDT(Manager self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.Manager_setUseConstantDT(self, aTrueFalse)


    def getUseConstantDT(self):
        """
        getUseConstantDT(Manager self) -> bool

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_getUseConstantDT(self)


    def getDTArray(self):
        """
        getDTArray(Manager self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::Manager *

        """
        return _simulation.Manager_getDTArray(self)


    def setDTArray(self, aDT, aTI=0.0):
        """
        setDTArray(Manager self, Vector aDT, double aTI=0.0)

        Parameters
        ----------
        aDT: SimTK::Vector_< double > const &
        aTI: double

        setDTArray(Manager self, Vector aDT)

        Parameters
        ----------
        aDT: SimTK::Vector_< double > const &

        """
        return _simulation.Manager_setDTArray(self, aDT, aTI)


    def getDTArrayDT(self, aStep):
        """
        getDTArrayDT(Manager self, int aStep) -> double

        Parameters
        ----------
        aStep: int

        """
        return _simulation.Manager_getDTArrayDT(self, aStep)


    def printDTArray(self, aFileName=None):
        """
        printDTArray(Manager self, char const * aFileName=None)

        Parameters
        ----------
        aFileName: char const *

        printDTArray(Manager self)

        Parameters
        ----------
        self: OpenSim::Manager *

        """
        return _simulation.Manager_printDTArray(self, aFileName)


    def getTimeArray(self):
        """
        getTimeArray(Manager self) -> ArrayDouble

        Parameters
        ----------
        self: OpenSim::Manager *

        """
        return _simulation.Manager_getTimeArray(self)


    def getTimeArrayTime(self, aStep):
        """
        getTimeArrayTime(Manager self, int aStep) -> double

        Parameters
        ----------
        aStep: int

        """
        return _simulation.Manager_getTimeArrayTime(self, aStep)


    def getTimeArrayStep(self, aTime):
        """
        getTimeArrayStep(Manager self, double aTime) -> int

        Parameters
        ----------
        aTime: double

        """
        return _simulation.Manager_getTimeArrayStep(self, aTime)


    def printTimeArray(self, aFileName=None):
        """
        printTimeArray(Manager self, char const * aFileName=None)

        Parameters
        ----------
        aFileName: char const *

        printTimeArray(Manager self)

        Parameters
        ----------
        self: OpenSim::Manager *

        """
        return _simulation.Manager_printTimeArray(self, aFileName)


    def resetTimeAndDTArrays(self, aTime):
        """
        resetTimeAndDTArrays(Manager self, double aTime)

        Parameters
        ----------
        aTime: double

        """
        return _simulation.Manager_resetTimeAndDTArrays(self, aTime)


    def getNextTimeArrayTime(self, aTime):
        """
        getNextTimeArrayTime(Manager self, double aTime) -> double

        Parameters
        ----------
        aTime: double

        """
        return _simulation.Manager_getNextTimeArrayTime(self, aTime)


    def initialize(self, s):
        """
        initialize(Manager self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Manager_initialize(self, s)


    def integrate(self, finalTime):
        """
        integrate(Manager self, double finalTime) -> State

        Parameters
        ----------
        finalTime: double

        """
        return _simulation.Manager_integrate(self, finalTime)


    def getState(self):
        """
        getState(Manager self) -> State

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_getState(self)


    def getFixedStepSize(self, tArrayStep):
        """
        getFixedStepSize(Manager self, int tArrayStep) -> double

        Parameters
        ----------
        tArrayStep: int

        """
        return _simulation.Manager_getFixedStepSize(self, tArrayStep)


    def hasStateStorage(self):
        """
        hasStateStorage(Manager self) -> bool

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_hasStateStorage(self)


    def setStateStorage(self, aStorage):
        """
        setStateStorage(Manager self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage &

        """
        return _simulation.Manager_setStateStorage(self, aStorage)


    def getStateStorage(self):
        """
        getStateStorage(Manager self) -> Storage

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_getStateStorage(self)


    def getStatesTable(self):
        """
        getStatesTable(Manager self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::Manager const *

        """
        return _simulation.Manager_getStatesTable(self)


    def halt(self):
        """
        halt(Manager self)

        Parameters
        ----------
        self: OpenSim::Manager *

        """
        return _simulation.Manager_halt(self)


    def clearHalt(self):
        """
        clearHalt(Manager self)

        Parameters
        ----------
        self: OpenSim::Manager *

        """
        return _simulation.Manager_clearHalt(self)


    def checkHalt(self):
        """
        checkHalt(Manager self) -> bool

        Parameters
        ----------
        self: OpenSim::Manager *

        """
        return _simulation.Manager_checkHalt(self)

    __swig_destroy__ = _simulation.delete_Manager
    __del__ = lambda self: None
Manager_swigregister = _simulation.Manager_swigregister
Manager_swigregister(Manager)

class AbstractTool(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::AbstractTool class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractTool, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractTool, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AbstractTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.AbstractTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(AbstractTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.AbstractTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.AbstractTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(AbstractTool self) -> AbstractTool

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AbstractTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_AbstractTool
    __del__ = lambda self: None

    def setModel(self, aModel):
        """
        setModel(AbstractTool self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.AbstractTool_setModel(self, aModel)


    def getModel(self):
        """
        getModel(AbstractTool self) -> Model

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getModel(self)


    def getReplaceForceSet(self):
        """
        getReplaceForceSet(AbstractTool self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getReplaceForceSet(self)


    def setReplaceForceSet(self, aReplace):
        """
        setReplaceForceSet(AbstractTool self, bool aReplace)

        Parameters
        ----------
        aReplace: bool

        """
        return _simulation.AbstractTool_setReplaceForceSet(self, aReplace)


    def getNextAvailableForceName(self, *args):
        """
        getNextAvailableForceName(AbstractTool self, std::string const prefix) -> std::string

        Parameters
        ----------
        prefix: std::string const

        getNextAvailableForceName(AbstractTool self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getNextAvailableForceName(self, *args)


    def getExternalLoads(self):
        """
        getExternalLoads(AbstractTool self) -> ExternalLoads

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getExternalLoads(self)


    def updExternalLoads(self):
        """
        updExternalLoads(AbstractTool self) -> ExternalLoads

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_updExternalLoads(self)


    def setExternalLoads(self, el):
        """
        setExternalLoads(AbstractTool self, ExternalLoads el)

        Parameters
        ----------
        el: OpenSim::ExternalLoads &

        """
        return _simulation.AbstractTool_setExternalLoads(self, el)


    def modelHasExternalLoads(self):
        """
        modelHasExternalLoads(AbstractTool self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_modelHasExternalLoads(self)


    def getExternalLoadsFileName(self):
        """
        getExternalLoadsFileName(AbstractTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getExternalLoadsFileName(self)


    def setExternalLoadsFileName(self, aFileName):
        """
        setExternalLoadsFileName(AbstractTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _simulation.AbstractTool_setExternalLoadsFileName(self, aFileName)


    def getForceSetFiles(self):
        """
        getForceSetFiles(AbstractTool self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_getForceSetFiles(self)


    def setForceSetFiles(self, aForceSetFiles):
        """
        setForceSetFiles(AbstractTool self, ArrayStr aForceSetFiles)

        Parameters
        ----------
        aForceSetFiles: OpenSim::Array< std::string > const &

        """
        return _simulation.AbstractTool_setForceSetFiles(self, aForceSetFiles)


    def getOutputPrecision(self):
        """
        getOutputPrecision(AbstractTool self) -> int

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getOutputPrecision(self)


    def setOutputPrecision(self, aPrecision):
        """
        setOutputPrecision(AbstractTool self, int aPrecision)

        Parameters
        ----------
        aPrecision: int

        """
        return _simulation.AbstractTool_setOutputPrecision(self, aPrecision)


    def getAnalysisSet(self):
        """
        getAnalysisSet(AbstractTool self) -> AnalysisSet

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getAnalysisSet(self)


    def getResultsDir(self):
        """
        getResultsDir(AbstractTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getResultsDir(self)


    def setResultsDir(self, aString):
        """
        setResultsDir(AbstractTool self, std::string const & aString)

        Parameters
        ----------
        aString: std::string const &

        """
        return _simulation.AbstractTool_setResultsDir(self, aString)


    def getInitialTime(self):
        """
        getInitialTime(AbstractTool self) -> double

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getInitialTime(self)


    def getFinalTime(self):
        """
        getFinalTime(AbstractTool self) -> double

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getFinalTime(self)


    def setInitialTime(self, aInitialTime):
        """
        setInitialTime(AbstractTool self, double const aInitialTime)

        Parameters
        ----------
        aInitialTime: double const

        """
        return _simulation.AbstractTool_setInitialTime(self, aInitialTime)


    def setFinalTime(self, aFinalTime):
        """
        setFinalTime(AbstractTool self, double const aFinalTime)

        Parameters
        ----------
        aFinalTime: double const

        """
        return _simulation.AbstractTool_setFinalTime(self, aFinalTime)


    def getStartTime(self):
        """
        getStartTime(AbstractTool self) -> double

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getStartTime(self)


    def setStartTime(self, aStartTime):
        """
        setStartTime(AbstractTool self, double const aStartTime)

        Parameters
        ----------
        aStartTime: double const

        """
        return _simulation.AbstractTool_setStartTime(self, aStartTime)


    def getMaximumNumberOfSteps(self):
        """
        getMaximumNumberOfSteps(AbstractTool self) -> int

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getMaximumNumberOfSteps(self)


    def setMaximumNumberOfSteps(self, aMaxSteps):
        """
        setMaximumNumberOfSteps(AbstractTool self, int aMaxSteps)

        Parameters
        ----------
        aMaxSteps: int

        """
        return _simulation.AbstractTool_setMaximumNumberOfSteps(self, aMaxSteps)


    def getMaxDT(self):
        """
        getMaxDT(AbstractTool self) -> double

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getMaxDT(self)


    def setMaxDT(self, aMaxDT):
        """
        setMaxDT(AbstractTool self, double aMaxDT)

        Parameters
        ----------
        aMaxDT: double

        """
        return _simulation.AbstractTool_setMaxDT(self, aMaxDT)


    def getMinDT(self):
        """
        getMinDT(AbstractTool self) -> double

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getMinDT(self)


    def setMinDT(self, aMinDT):
        """
        setMinDT(AbstractTool self, double aMinDT)

        Parameters
        ----------
        aMinDT: double

        """
        return _simulation.AbstractTool_setMinDT(self, aMinDT)


    def getErrorTolerance(self):
        """
        getErrorTolerance(AbstractTool self) -> double

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getErrorTolerance(self)


    def setErrorTolerance(self, aErrorTolerance):
        """
        setErrorTolerance(AbstractTool self, double aErrorTolerance)

        Parameters
        ----------
        aErrorTolerance: double

        """
        return _simulation.AbstractTool_setErrorTolerance(self, aErrorTolerance)


    def getModelFilename(self):
        """
        getModelFilename(AbstractTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getModelFilename(self)


    def setModelFilename(self, aModelFile):
        """
        setModelFilename(AbstractTool self, std::string const & aModelFile)

        Parameters
        ----------
        aModelFile: std::string const &

        """
        return _simulation.AbstractTool_setModelFilename(self, aModelFile)


    def getSolveForEquilibrium(self):
        """
        getSolveForEquilibrium(AbstractTool self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getSolveForEquilibrium(self)


    def setSolveForEquilibrium(self, aSolve):
        """
        setSolveForEquilibrium(AbstractTool self, bool aSolve)

        Parameters
        ----------
        aSolve: bool

        """
        return _simulation.AbstractTool_setSolveForEquilibrium(self, aSolve)


    def loadModel(self, aToolSetupFileName, rOriginalForceSet=None):
        """
        loadModel(AbstractTool self, std::string const & aToolSetupFileName, ForceSet rOriginalForceSet=None)

        Parameters
        ----------
        aToolSetupFileName: std::string const &
        rOriginalForceSet: OpenSim::ForceSet *

        loadModel(AbstractTool self, std::string const & aToolSetupFileName)

        Parameters
        ----------
        aToolSetupFileName: std::string const &

        """
        return _simulation.AbstractTool_loadModel(self, aToolSetupFileName, rOriginalForceSet)


    def updateModelForces(self, model, aToolSetupFileName, rOriginalForceSet=None):
        """
        updateModelForces(AbstractTool self, Model model, std::string const & aToolSetupFileName, ForceSet rOriginalForceSet=None)

        Parameters
        ----------
        model: OpenSim::Model &
        aToolSetupFileName: std::string const &
        rOriginalForceSet: OpenSim::ForceSet *

        updateModelForces(AbstractTool self, Model model, std::string const & aToolSetupFileName)

        Parameters
        ----------
        model: OpenSim::Model &
        aToolSetupFileName: std::string const &

        """
        return _simulation.AbstractTool_updateModelForces(self, model, aToolSetupFileName, rOriginalForceSet)


    def addAnalysisSetToModel(self):
        """
        addAnalysisSetToModel(AbstractTool self)

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_addAnalysisSetToModel(self)


    def addControllerSetToModel(self):
        """
        addControllerSetToModel(AbstractTool self)

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_addControllerSetToModel(self)


    def removeControllerSetFromModel(self):
        """
        removeControllerSetFromModel(AbstractTool self)

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_removeControllerSetFromModel(self)


    def removeAnalysisSetFromModel(self):
        """
        removeAnalysisSetFromModel(AbstractTool self)

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_removeAnalysisSetFromModel(self)


    def setToolOwnsModel(self, trueFalse):
        """
        setToolOwnsModel(AbstractTool self, bool const trueFalse)

        Parameters
        ----------
        trueFalse: bool const

        """
        return _simulation.AbstractTool_setToolOwnsModel(self, trueFalse)


    def getToolOwnsModel(self):
        """
        getToolOwnsModel(AbstractTool self) -> bool const

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getToolOwnsModel(self)


    def getControlsFileName(self):
        """
        getControlsFileName(AbstractTool self) -> std::string

        Parameters
        ----------
        self: OpenSim::AbstractTool const *

        """
        return _simulation.AbstractTool_getControlsFileName(self)


    def setControlsFileName(self, controlsFilename):
        """
        setControlsFileName(AbstractTool self, std::string const & controlsFilename)

        Parameters
        ----------
        controlsFilename: std::string const &

        """
        return _simulation.AbstractTool_setControlsFileName(self, controlsFilename)


    def run(self):
        """
        run(AbstractTool self) -> bool

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_run(self)


    def printResults(self, *args):
        """
        printResults(AbstractTool self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0, std::string const & aExtension)

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        printResults(AbstractTool self, std::string const & aBaseName, std::string const & aDir, double aDT=-1.0)

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &
        aDT: double

        printResults(AbstractTool self, std::string const & aBaseName, std::string const & aDir)

        Parameters
        ----------
        aBaseName: std::string const &
        aDir: std::string const &

        printResults(AbstractTool self, std::string const & aBaseName)

        Parameters
        ----------
        aBaseName: std::string const &

        """
        return _simulation.AbstractTool_printResults(self, *args)


    def createExternalLoads(self, externalLoadsFileName, model):
        """
        createExternalLoads(AbstractTool self, std::string const & externalLoadsFileName, Model model) -> bool

        Parameters
        ----------
        externalLoadsFileName: std::string const &
        model: OpenSim::Model &

        """
        return _simulation.AbstractTool_createExternalLoads(self, externalLoadsFileName, model)


    def removeExternalLoadsFromModel(self):
        """
        removeExternalLoadsFromModel(AbstractTool self)

        Parameters
        ----------
        self: OpenSim::AbstractTool *

        """
        return _simulation.AbstractTool_removeExternalLoadsFromModel(self)


    def updateFromXMLNode(self, aNode, versionNumber):
        """
        updateFromXMLNode(AbstractTool self, SimTK::Xml::Element & aNode, int versionNumber)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _simulation.AbstractTool_updateFromXMLNode(self, aNode, versionNumber)


    def loadQStorage(self, statesFileName, rQStore):
        """
        loadQStorage(AbstractTool self, std::string const & statesFileName, Storage rQStore)

        Parameters
        ----------
        statesFileName: std::string const &
        rQStore: OpenSim::Storage &

        """
        return _simulation.AbstractTool_loadQStorage(self, statesFileName, rQStore)

AbstractTool_swigregister = _simulation.AbstractTool_swigregister
AbstractTool_swigregister(AbstractTool)

def AbstractTool_safeDownCast(obj):
    """
    AbstractTool_safeDownCast(OpenSimObject obj) -> AbstractTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.AbstractTool_safeDownCast(obj)

def AbstractTool_getClassName():
    """AbstractTool_getClassName() -> std::string const &"""
    return _simulation.AbstractTool_getClassName()

class Point(ModelComponent):
    """Proxy of C++ OpenSim::Point class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Point

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Point_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Point self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Point_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Point_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Point self) -> Point

        Parameters
        ----------
        self: OpenSim::Point const *

        """
        return _simulation.Point_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Point self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Point const *

        """
        return _simulation.Point_getConcreteClassName(self)

    __swig_setmethods__["_has_output_location"] = _simulation.Point__has_output_location_set
    __swig_getmethods__["_has_output_location"] = _simulation.Point__has_output_location_get
    if _newclass:
        _has_output_location = _swig_property(_simulation.Point__has_output_location_get, _simulation.Point__has_output_location_set)
    __swig_setmethods__["_has_output_velocity"] = _simulation.Point__has_output_velocity_set
    __swig_getmethods__["_has_output_velocity"] = _simulation.Point__has_output_velocity_get
    if _newclass:
        _has_output_velocity = _swig_property(_simulation.Point__has_output_velocity_get, _simulation.Point__has_output_velocity_set)
    __swig_setmethods__["_has_output_acceleration"] = _simulation.Point__has_output_acceleration_set
    __swig_getmethods__["_has_output_acceleration"] = _simulation.Point__has_output_acceleration_get
    if _newclass:
        _has_output_acceleration = _swig_property(_simulation.Point__has_output_acceleration_get, _simulation.Point__has_output_acceleration_set)
    __swig_destroy__ = _simulation.delete_Point
    __del__ = lambda self: None

    def getLocationInGround(self, state):
        """
        getLocationInGround(Point self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Point_getLocationInGround(self, state)


    def getVelocityInGround(self, state):
        """
        getVelocityInGround(Point self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Point_getVelocityInGround(self, state)


    def getAccelerationInGround(self, state):
        """
        getAccelerationInGround(Point self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Point_getAccelerationInGround(self, state)


    def calcDistanceBetween(self, *args):
        """
        calcDistanceBetween(Point self, State state, Point other) -> double

        Parameters
        ----------
        state: SimTK::State const &
        other: OpenSim::Point const &

        calcDistanceBetween(Point self, State state, Frame frame, Vec3 location) -> double

        Parameters
        ----------
        state: SimTK::State const &
        frame: OpenSim::Frame const &
        location: SimTK::Vec3 const &

        """
        return _simulation.Point_calcDistanceBetween(self, *args)


    def calcSpeedBetween(self, state, other):
        """
        calcSpeedBetween(Point self, State state, Point other) -> double

        Parameters
        ----------
        state: SimTK::State const &
        other: OpenSim::Point const &

        """
        return _simulation.Point_calcSpeedBetween(self, state, other)

Point_swigregister = _simulation.Point_swigregister
Point_swigregister(Point)

def Point_safeDownCast(obj):
    """
    Point_safeDownCast(OpenSimObject obj) -> Point

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Point_safeDownCast(obj)

def Point_getClassName():
    """Point_getClassName() -> std::string const &"""
    return _simulation.Point_getClassName()

class Station(Point):
    """Proxy of C++ OpenSim::Station class."""

    __swig_setmethods__ = {}
    for _s in [Point]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Station, name, value)
    __swig_getmethods__ = {}
    for _s in [Point]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Station, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Station

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Station_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Station self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Station_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Station_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Station self) -> Station

        Parameters
        ----------
        self: OpenSim::Station const *

        """
        return _simulation.Station_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Station self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Station const *

        """
        return _simulation.Station_getConcreteClassName(self)


    def copyProperty_location(self, source):
        """
        copyProperty_location(Station self, Station source)

        Parameters
        ----------
        source: OpenSim::Station::Self const &

        """
        return _simulation.Station_copyProperty_location(self, source)


    def append_location(self, value):
        """
        append_location(Station self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Station_append_location(self, value)


    def constructProperty_location(self, initValue):
        """
        constructProperty_location(Station self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Station_constructProperty_location(self, initValue)


    def get_location(self, *args):
        """
        get_location(Station self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_location(Station self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Station const *

        """
        return _simulation.Station_get_location(self, *args)


    def upd_location(self, *args):
        """
        upd_location(Station self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_location(Station self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Station *

        """
        return _simulation.Station_upd_location(self, *args)


    def set_location(self, *args):
        """
        set_location(Station self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_location(Station self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Station_set_location(self, *args)

    __swig_setmethods__["PropertyIndex_socket_parent_frame"] = _simulation.Station_PropertyIndex_socket_parent_frame_set
    __swig_getmethods__["PropertyIndex_socket_parent_frame"] = _simulation.Station_PropertyIndex_socket_parent_frame_get
    if _newclass:
        PropertyIndex_socket_parent_frame = _swig_property(_simulation.Station_PropertyIndex_socket_parent_frame_get, _simulation.Station_PropertyIndex_socket_parent_frame_set)

    def connectSocket_parent_frame(self, object):
        """
        connectSocket_parent_frame(Station self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.Station_connectSocket_parent_frame(self, object)


    def __init__(self, *args):
        """
        __init__(OpenSim::Station self) -> Station
        __init__(OpenSim::Station self, PhysicalFrame frame, Vec3 location) -> Station

        Parameters
        ----------
        frame: OpenSim::PhysicalFrame const &
        location: SimTK::Vec3 const &

        """
        this = _simulation.new_Station(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Station
    __del__ = lambda self: None

    def getParentFrame(self):
        """
        getParentFrame(Station self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::Station const *

        """
        return _simulation.Station_getParentFrame(self)


    def setParentFrame(self, aFrame):
        """
        setParentFrame(Station self, PhysicalFrame aFrame)

        Parameters
        ----------
        aFrame: OpenSim::PhysicalFrame const &

        """
        return _simulation.Station_setParentFrame(self, aFrame)


    def findLocationInFrame(self, s, frame):
        """
        findLocationInFrame(Station self, State s, Frame frame) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &
        frame: OpenSim::Frame const &

        """
        return _simulation.Station_findLocationInFrame(self, s, frame)


    def extendScale(self, s, scaleSet):
        """
        extendScale(Station self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.Station_extendScale(self, s, scaleSet)

Station_swigregister = _simulation.Station_swigregister
Station_swigregister(Station)

def Station_safeDownCast(obj):
    """
    Station_safeDownCast(OpenSimObject obj) -> Station

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Station_safeDownCast(obj)

def Station_getClassName():
    """Station_getClassName() -> std::string const &"""
    return _simulation.Station_getClassName()

class Marker(Station):
    """Proxy of C++ OpenSim::Marker class."""

    __swig_setmethods__ = {}
    for _s in [Station]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Marker, name, value)
    __swig_getmethods__ = {}
    for _s in [Station]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Marker, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Marker

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Marker_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Marker self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Marker_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Marker_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Marker self) -> Marker

        Parameters
        ----------
        self: OpenSim::Marker const *

        """
        return _simulation.Marker_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Marker self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Marker const *

        """
        return _simulation.Marker_getConcreteClassName(self)


    def copyProperty_fixed(self, source):
        """
        copyProperty_fixed(Marker self, Marker source)

        Parameters
        ----------
        source: OpenSim::Marker::Self const &

        """
        return _simulation.Marker_copyProperty_fixed(self, source)


    def append_fixed(self, value):
        """
        append_fixed(Marker self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Marker_append_fixed(self, value)


    def constructProperty_fixed(self, initValue):
        """
        constructProperty_fixed(Marker self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Marker_constructProperty_fixed(self, initValue)


    def get_fixed(self, *args):
        """
        get_fixed(Marker self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_fixed(Marker self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Marker const *

        """
        return _simulation.Marker_get_fixed(self, *args)


    def upd_fixed(self, *args):
        """
        upd_fixed(Marker self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_fixed(Marker self) -> bool &

        Parameters
        ----------
        self: OpenSim::Marker *

        """
        return _simulation.Marker_upd_fixed(self, *args)


    def set_fixed(self, *args):
        """
        set_fixed(Marker self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_fixed(Marker self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Marker_set_fixed(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Marker self) -> Marker
        __init__(OpenSim::Marker self, std::string const & name, PhysicalFrame frame, Vec3 location) -> Marker

        Parameters
        ----------
        name: std::string const &
        frame: OpenSim::PhysicalFrame const &
        location: SimTK::Vec3 const &

        """
        this = _simulation.new_Marker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Marker
    __del__ = lambda self: None

    def getParentFrameName(self):
        """
        getParentFrameName(Marker self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Marker const *

        """
        return _simulation.Marker_getParentFrameName(self)


    def setParentFrameName(self, parentFrameName):
        """
        setParentFrameName(Marker self, std::string const & parentFrameName)

        Parameters
        ----------
        parentFrameName: std::string const &

        """
        return _simulation.Marker_setParentFrameName(self, parentFrameName)


    def changeFrame(self, parentFrame):
        """
        changeFrame(Marker self, PhysicalFrame parentFrame)

        Parameters
        ----------
        parentFrame: OpenSim::PhysicalFrame const &

        """
        return _simulation.Marker_changeFrame(self, parentFrame)


    def changeFramePreserveLocation(self, s, newParentFrame):
        """
        changeFramePreserveLocation(Marker self, State s, PhysicalFrame newParentFrame)

        Parameters
        ----------
        s: SimTK::State const &
        newParentFrame: OpenSim::PhysicalFrame const &

        """
        return _simulation.Marker_changeFramePreserveLocation(self, s, newParentFrame)


    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(Marker self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(Marker self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _simulation.Marker_updateFromXMLNode(self, aNode, versionNumber)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(Marker self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.Marker_generateDecorations(self, fixed, hints, state, appendToThis)

Marker_swigregister = _simulation.Marker_swigregister
Marker_swigregister(Marker)

def Marker_safeDownCast(obj):
    """
    Marker_safeDownCast(OpenSimObject obj) -> Marker

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Marker_safeDownCast(obj)

def Marker_getClassName():
    """Marker_getClassName() -> std::string const &"""
    return _simulation.Marker_getClassName()

class SetMarkers(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::Marker,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMarkers, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMarkers, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMarkers

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetMarkers_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetMarkers self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetMarkers_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetMarkers_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetMarkers self) -> SetMarkers

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Marker,OpenSim::ModelComponent > const *

        """
        return _simulation.SetMarkers_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMarkers self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Marker,OpenSim::ModelComponent > const *

        """
        return _simulation.SetMarkers_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetMarkers
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Marker,OpenSim::ModelComponent)> self) -> SetMarkers
        __init__(OpenSim::Set<(OpenSim::Marker,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMarkers

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Marker,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetMarkers

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Marker,OpenSim::ModelComponent)> self, SetMarkers aSet) -> SetMarkers

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Marker,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetMarkers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMarkers self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Marker,OpenSim::ModelComponent > *

        """
        return _simulation.SetMarkers_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMarkers self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetMarkers_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMarkers self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetMarkers_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMarkers self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Marker,OpenSim::ModelComponent > const *

        """
        return _simulation.SetMarkers_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMarkers self, Marker aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Marker const *
        aStartIndex: int

        getIndex(SetMarkers self, Marker aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Marker const *

        getIndex(SetMarkers self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetMarkers self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMarkers_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMarkers self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMarkers_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMarkers self, Marker aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Marker *

        """
        return _simulation.SetMarkers_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMarkers self, Marker aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Marker const &

        """
        return _simulation.SetMarkers_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMarkers self, int aIndex, Marker aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Marker *

        """
        return _simulation.SetMarkers_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMarkers self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetMarkers self, Marker aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Marker const *

        """
        return _simulation.SetMarkers_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMarkers self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Marker,OpenSim::ModelComponent > *

        """
        return _simulation.SetMarkers_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMarkers self, int aIndex, Marker aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Marker *
        preserveGroups: bool

        set(SetMarkers self, int aIndex, Marker aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Marker *

        """
        return _simulation.SetMarkers_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMarkers self, int aIndex) -> Marker

        Parameters
        ----------
        aIndex: int

        get(SetMarkers self, std::string const & aName) -> Marker

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMarkers_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMarkers self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMarkers_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMarkers self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMarkers_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMarkers self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Marker,OpenSim::ModelComponent > const *

        """
        return _simulation.SetMarkers_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMarkers self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetMarkers_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMarkers self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetMarkers_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMarkers self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetMarkers_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMarkers self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetMarkers_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMarkers self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMarkers_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMarkers self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetMarkers self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetMarkers_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetMarkers_swigregister = _simulation.SetMarkers_swigregister
SetMarkers_swigregister(SetMarkers)

def SetMarkers_safeDownCast(obj):
    """
    SetMarkers_safeDownCast(OpenSimObject obj) -> SetMarkers

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetMarkers_safeDownCast(obj)

def SetMarkers_getClassName():
    """SetMarkers_getClassName() -> std::string const &"""
    return _simulation.SetMarkers_getClassName()

class ModelComponentSetMarkers(SetMarkers):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Marker)> class."""

    __swig_setmethods__ = {}
    for _s in [SetMarkers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetMarkers, name, value)
    __swig_getmethods__ = {}
    for _s in [SetMarkers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetMarkers, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetMarkers

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetMarkers_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetMarkers self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetMarkers_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetMarkers_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetMarkers self) -> ModelComponentSetMarkers

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Marker > const *

        """
        return _simulation.ModelComponentSetMarkers_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetMarkers self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Marker > const *

        """
        return _simulation.ModelComponentSetMarkers_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetMarkers self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Marker > *

        """
        return _simulation.ModelComponentSetMarkers_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::Marker)> self) -> ModelComponentSetMarkers"""
        this = _simulation.new_ModelComponentSetMarkers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetMarkers
    __del__ = lambda self: None
ModelComponentSetMarkers_swigregister = _simulation.ModelComponentSetMarkers_swigregister
ModelComponentSetMarkers_swigregister(ModelComponentSetMarkers)

def ModelComponentSetMarkers_safeDownCast(obj):
    """
    ModelComponentSetMarkers_safeDownCast(OpenSimObject obj) -> ModelComponentSetMarkers

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetMarkers_safeDownCast(obj)

def ModelComponentSetMarkers_getClassName():
    """ModelComponentSetMarkers_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetMarkers_getClassName()

class MarkerSet(ModelComponentSetMarkers):
    """Proxy of C++ OpenSim::MarkerSet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetMarkers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetMarkers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.MarkerSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MarkerSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.MarkerSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.MarkerSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MarkerSet self) -> MarkerSet

        Parameters
        ----------
        self: OpenSim::MarkerSet const *

        """
        return _simulation.MarkerSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerSet const *

        """
        return _simulation.MarkerSet_getConcreteClassName(self)


    def getMarkerNames(self, aMarkerNamesArray):
        """
        getMarkerNames(MarkerSet self, ArrayStr aMarkerNamesArray)

        Parameters
        ----------
        aMarkerNamesArray: OpenSim::Array< std::string > &

        """
        return _simulation.MarkerSet_getMarkerNames(self, aMarkerNamesArray)


    def addNamePrefix(self, prefix):
        """
        addNamePrefix(MarkerSet self, std::string const & prefix)

        Parameters
        ----------
        prefix: std::string const &

        """
        return _simulation.MarkerSet_addNamePrefix(self, prefix)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerSet self) -> MarkerSet
        __init__(OpenSim::MarkerSet self, std::string const & file, bool updateFromXML=True) -> MarkerSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::MarkerSet self, std::string const & file) -> MarkerSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_MarkerSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def adoptAndAppend(self, aMarker):
        aMarker._markAdopted()
        return super(MarkerSet, self).adoptAndAppend(aMarker)

    __swig_destroy__ = _simulation.delete_MarkerSet
    __del__ = lambda self: None
MarkerSet_swigregister = _simulation.MarkerSet_swigregister
MarkerSet_swigregister(MarkerSet)

def MarkerSet_safeDownCast(obj):
    """
    MarkerSet_safeDownCast(OpenSimObject obj) -> MarkerSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.MarkerSet_safeDownCast(obj)

def MarkerSet_getClassName():
    """MarkerSet_getClassName() -> std::string const &"""
    return _simulation.MarkerSet_getClassName()

class WrapSphere(WrapObject):
    """Proxy of C++ OpenSim::WrapSphere class."""

    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapSphere, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapSphere

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapSphere_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapSphere self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapSphere_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapSphere_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapSphere self) -> WrapSphere

        Parameters
        ----------
        self: OpenSim::WrapSphere const *

        """
        return _simulation.WrapSphere_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapSphere self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapSphere const *

        """
        return _simulation.WrapSphere_getConcreteClassName(self)


    def copyProperty_radius(self, source):
        """
        copyProperty_radius(WrapSphere self, WrapSphere source)

        Parameters
        ----------
        source: OpenSim::WrapSphere::Self const &

        """
        return _simulation.WrapSphere_copyProperty_radius(self, source)


    def append_radius(self, value):
        """
        append_radius(WrapSphere self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapSphere_append_radius(self, value)


    def constructProperty_radius(self, initValue):
        """
        constructProperty_radius(WrapSphere self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapSphere_constructProperty_radius(self, initValue)


    def get_radius(self, *args):
        """
        get_radius(WrapSphere self, int i) -> double const

        Parameters
        ----------
        i: int

        get_radius(WrapSphere self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapSphere const *

        """
        return _simulation.WrapSphere_get_radius(self, *args)


    def upd_radius(self, *args):
        """
        upd_radius(WrapSphere self, int i) -> double

        Parameters
        ----------
        i: int

        upd_radius(WrapSphere self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapSphere *

        """
        return _simulation.WrapSphere_upd_radius(self, *args)


    def set_radius(self, *args):
        """
        set_radius(WrapSphere self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_radius(WrapSphere self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapSphere_set_radius(self, *args)


    def __init__(self):
        """__init__(OpenSim::WrapSphere self) -> WrapSphere"""
        this = _simulation.new_WrapSphere()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WrapSphere
    __del__ = lambda self: None

    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapSphere self) -> char const *

        Parameters
        ----------
        self: OpenSim::WrapSphere const *

        """
        return _simulation.WrapSphere_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapSphere self) -> std::string

        Parameters
        ----------
        self: OpenSim::WrapSphere const *

        """
        return _simulation.WrapSphere_getDimensionsString(self)


    def getRadius(self):
        """
        getRadius(WrapSphere self) -> double

        Parameters
        ----------
        self: OpenSim::WrapSphere const *

        """
        return _simulation.WrapSphere_getRadius(self)


    def extendScale(self, s, scaleSet):
        """
        extendScale(WrapSphere self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.WrapSphere_extendScale(self, s, scaleSet)

WrapSphere_swigregister = _simulation.WrapSphere_swigregister
WrapSphere_swigregister(WrapSphere)

def WrapSphere_safeDownCast(obj):
    """
    WrapSphere_safeDownCast(OpenSimObject obj) -> WrapSphere

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapSphere_safeDownCast(obj)

def WrapSphere_getClassName():
    """WrapSphere_getClassName() -> std::string const &"""
    return _simulation.WrapSphere_getClassName()

class WrapCylinder(WrapObject):
    """Proxy of C++ OpenSim::WrapCylinder class."""

    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapCylinder, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapCylinder

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapCylinder_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapCylinder self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapCylinder_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapCylinder_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapCylinder self) -> WrapCylinder

        Parameters
        ----------
        self: OpenSim::WrapCylinder const *

        """
        return _simulation.WrapCylinder_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapCylinder self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapCylinder const *

        """
        return _simulation.WrapCylinder_getConcreteClassName(self)


    def copyProperty_radius(self, source):
        """
        copyProperty_radius(WrapCylinder self, WrapCylinder source)

        Parameters
        ----------
        source: OpenSim::WrapCylinder::Self const &

        """
        return _simulation.WrapCylinder_copyProperty_radius(self, source)


    def append_radius(self, value):
        """
        append_radius(WrapCylinder self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapCylinder_append_radius(self, value)


    def constructProperty_radius(self, initValue):
        """
        constructProperty_radius(WrapCylinder self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapCylinder_constructProperty_radius(self, initValue)


    def get_radius(self, *args):
        """
        get_radius(WrapCylinder self, int i) -> double const

        Parameters
        ----------
        i: int

        get_radius(WrapCylinder self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapCylinder const *

        """
        return _simulation.WrapCylinder_get_radius(self, *args)


    def upd_radius(self, *args):
        """
        upd_radius(WrapCylinder self, int i) -> double

        Parameters
        ----------
        i: int

        upd_radius(WrapCylinder self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapCylinder *

        """
        return _simulation.WrapCylinder_upd_radius(self, *args)


    def set_radius(self, *args):
        """
        set_radius(WrapCylinder self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_radius(WrapCylinder self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapCylinder_set_radius(self, *args)


    def copyProperty_length(self, source):
        """
        copyProperty_length(WrapCylinder self, WrapCylinder source)

        Parameters
        ----------
        source: OpenSim::WrapCylinder::Self const &

        """
        return _simulation.WrapCylinder_copyProperty_length(self, source)


    def append_length(self, value):
        """
        append_length(WrapCylinder self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapCylinder_append_length(self, value)


    def constructProperty_length(self, initValue):
        """
        constructProperty_length(WrapCylinder self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapCylinder_constructProperty_length(self, initValue)


    def get_length(self, *args):
        """
        get_length(WrapCylinder self, int i) -> double const

        Parameters
        ----------
        i: int

        get_length(WrapCylinder self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapCylinder const *

        """
        return _simulation.WrapCylinder_get_length(self, *args)


    def upd_length(self, *args):
        """
        upd_length(WrapCylinder self, int i) -> double

        Parameters
        ----------
        i: int

        upd_length(WrapCylinder self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapCylinder *

        """
        return _simulation.WrapCylinder_upd_length(self, *args)


    def set_length(self, *args):
        """
        set_length(WrapCylinder self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_length(WrapCylinder self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapCylinder_set_length(self, *args)


    def __init__(self):
        """__init__(OpenSim::WrapCylinder self) -> WrapCylinder"""
        this = _simulation.new_WrapCylinder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WrapCylinder
    __del__ = lambda self: None

    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapCylinder self) -> char const *

        Parameters
        ----------
        self: OpenSim::WrapCylinder const *

        """
        return _simulation.WrapCylinder_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapCylinder self) -> std::string

        Parameters
        ----------
        self: OpenSim::WrapCylinder const *

        """
        return _simulation.WrapCylinder_getDimensionsString(self)


    def extendScale(self, s, scaleSet):
        """
        extendScale(WrapCylinder self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.WrapCylinder_extendScale(self, s, scaleSet)

WrapCylinder_swigregister = _simulation.WrapCylinder_swigregister
WrapCylinder_swigregister(WrapCylinder)

def WrapCylinder_safeDownCast(obj):
    """
    WrapCylinder_safeDownCast(OpenSimObject obj) -> WrapCylinder

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapCylinder_safeDownCast(obj)

def WrapCylinder_getClassName():
    """WrapCylinder_getClassName() -> std::string const &"""
    return _simulation.WrapCylinder_getClassName()

class WrapTorus(WrapObject):
    """Proxy of C++ OpenSim::WrapTorus class."""

    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapTorus, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapTorus, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapTorus

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapTorus_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapTorus self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapTorus_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapTorus_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapTorus self) -> WrapTorus

        Parameters
        ----------
        self: OpenSim::WrapTorus const *

        """
        return _simulation.WrapTorus_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapTorus self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapTorus const *

        """
        return _simulation.WrapTorus_getConcreteClassName(self)


    def copyProperty_inner_radius(self, source):
        """
        copyProperty_inner_radius(WrapTorus self, WrapTorus source)

        Parameters
        ----------
        source: OpenSim::WrapTorus::Self const &

        """
        return _simulation.WrapTorus_copyProperty_inner_radius(self, source)


    def append_inner_radius(self, value):
        """
        append_inner_radius(WrapTorus self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapTorus_append_inner_radius(self, value)


    def constructProperty_inner_radius(self, initValue):
        """
        constructProperty_inner_radius(WrapTorus self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapTorus_constructProperty_inner_radius(self, initValue)


    def get_inner_radius(self, *args):
        """
        get_inner_radius(WrapTorus self, int i) -> double const

        Parameters
        ----------
        i: int

        get_inner_radius(WrapTorus self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapTorus const *

        """
        return _simulation.WrapTorus_get_inner_radius(self, *args)


    def upd_inner_radius(self, *args):
        """
        upd_inner_radius(WrapTorus self, int i) -> double

        Parameters
        ----------
        i: int

        upd_inner_radius(WrapTorus self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapTorus *

        """
        return _simulation.WrapTorus_upd_inner_radius(self, *args)


    def set_inner_radius(self, *args):
        """
        set_inner_radius(WrapTorus self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_inner_radius(WrapTorus self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapTorus_set_inner_radius(self, *args)


    def copyProperty_outer_radius(self, source):
        """
        copyProperty_outer_radius(WrapTorus self, WrapTorus source)

        Parameters
        ----------
        source: OpenSim::WrapTorus::Self const &

        """
        return _simulation.WrapTorus_copyProperty_outer_radius(self, source)


    def append_outer_radius(self, value):
        """
        append_outer_radius(WrapTorus self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapTorus_append_outer_radius(self, value)


    def constructProperty_outer_radius(self, initValue):
        """
        constructProperty_outer_radius(WrapTorus self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapTorus_constructProperty_outer_radius(self, initValue)


    def get_outer_radius(self, *args):
        """
        get_outer_radius(WrapTorus self, int i) -> double const

        Parameters
        ----------
        i: int

        get_outer_radius(WrapTorus self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapTorus const *

        """
        return _simulation.WrapTorus_get_outer_radius(self, *args)


    def upd_outer_radius(self, *args):
        """
        upd_outer_radius(WrapTorus self, int i) -> double

        Parameters
        ----------
        i: int

        upd_outer_radius(WrapTorus self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapTorus *

        """
        return _simulation.WrapTorus_upd_outer_radius(self, *args)


    def set_outer_radius(self, *args):
        """
        set_outer_radius(WrapTorus self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_outer_radius(WrapTorus self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapTorus_set_outer_radius(self, *args)


    def __init__(self):
        """__init__(OpenSim::WrapTorus self) -> WrapTorus"""
        this = _simulation.new_WrapTorus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WrapTorus
    __del__ = lambda self: None

    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapTorus self) -> char const *

        Parameters
        ----------
        self: OpenSim::WrapTorus const *

        """
        return _simulation.WrapTorus_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapTorus self) -> std::string

        Parameters
        ----------
        self: OpenSim::WrapTorus const *

        """
        return _simulation.WrapTorus_getDimensionsString(self)


    def getInnerRadius(self):
        """
        getInnerRadius(WrapTorus self) -> SimTK::Real

        Parameters
        ----------
        self: OpenSim::WrapTorus const *

        """
        return _simulation.WrapTorus_getInnerRadius(self)


    def getOuterRadius(self):
        """
        getOuterRadius(WrapTorus self) -> SimTK::Real

        Parameters
        ----------
        self: OpenSim::WrapTorus const *

        """
        return _simulation.WrapTorus_getOuterRadius(self)


    def extendScale(self, s, scaleSet):
        """
        extendScale(WrapTorus self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.WrapTorus_extendScale(self, s, scaleSet)

WrapTorus_swigregister = _simulation.WrapTorus_swigregister
WrapTorus_swigregister(WrapTorus)

def WrapTorus_safeDownCast(obj):
    """
    WrapTorus_safeDownCast(OpenSimObject obj) -> WrapTorus

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapTorus_safeDownCast(obj)

def WrapTorus_getClassName():
    """WrapTorus_getClassName() -> std::string const &"""
    return _simulation.WrapTorus_getClassName()

class WrapEllipsoid(WrapObject):
    """Proxy of C++ OpenSim::WrapEllipsoid class."""

    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapEllipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapEllipsoid, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapEllipsoid

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapEllipsoid_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapEllipsoid self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapEllipsoid_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapEllipsoid_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapEllipsoid self) -> WrapEllipsoid

        Parameters
        ----------
        self: OpenSim::WrapEllipsoid const *

        """
        return _simulation.WrapEllipsoid_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapEllipsoid self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapEllipsoid const *

        """
        return _simulation.WrapEllipsoid_getConcreteClassName(self)


    def copyProperty_dimensions(self, source):
        """
        copyProperty_dimensions(WrapEllipsoid self, WrapEllipsoid source)

        Parameters
        ----------
        source: OpenSim::WrapEllipsoid::Self const &

        """
        return _simulation.WrapEllipsoid_copyProperty_dimensions(self, source)


    def append_dimensions(self, value):
        """
        append_dimensions(WrapEllipsoid self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapEllipsoid_append_dimensions(self, value)


    def constructProperty_dimensions(self, initValue):
        """
        constructProperty_dimensions(WrapEllipsoid self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.WrapEllipsoid_constructProperty_dimensions(self, initValue)


    def get_dimensions(self, *args):
        """
        get_dimensions(WrapEllipsoid self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_dimensions(WrapEllipsoid self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapEllipsoid const *

        """
        return _simulation.WrapEllipsoid_get_dimensions(self, *args)


    def upd_dimensions(self, *args):
        """
        upd_dimensions(WrapEllipsoid self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_dimensions(WrapEllipsoid self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapEllipsoid *

        """
        return _simulation.WrapEllipsoid_upd_dimensions(self, *args)


    def set_dimensions(self, *args):
        """
        set_dimensions(WrapEllipsoid self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_dimensions(WrapEllipsoid self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapEllipsoid_set_dimensions(self, *args)


    def __init__(self):
        """__init__(OpenSim::WrapEllipsoid self) -> WrapEllipsoid"""
        this = _simulation.new_WrapEllipsoid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WrapEllipsoid
    __del__ = lambda self: None

    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapEllipsoid self) -> char const *

        Parameters
        ----------
        self: OpenSim::WrapEllipsoid const *

        """
        return _simulation.WrapEllipsoid_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapEllipsoid self) -> std::string

        Parameters
        ----------
        self: OpenSim::WrapEllipsoid const *

        """
        return _simulation.WrapEllipsoid_getDimensionsString(self)


    def getRadii(self):
        """
        getRadii(WrapEllipsoid self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapEllipsoid const *

        """
        return _simulation.WrapEllipsoid_getRadii(self)


    def extendScale(self, s, scaleSet):
        """
        extendScale(WrapEllipsoid self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.WrapEllipsoid_extendScale(self, s, scaleSet)

WrapEllipsoid_swigregister = _simulation.WrapEllipsoid_swigregister
WrapEllipsoid_swigregister(WrapEllipsoid)

def WrapEllipsoid_safeDownCast(obj):
    """
    WrapEllipsoid_safeDownCast(OpenSimObject obj) -> WrapEllipsoid

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapEllipsoid_safeDownCast(obj)

def WrapEllipsoid_getClassName():
    """WrapEllipsoid_getClassName() -> std::string const &"""
    return _simulation.WrapEllipsoid_getClassName()

class PathWrap(ModelComponent):
    """Proxy of C++ OpenSim::PathWrap class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathWrap, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathWrap, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathWrap

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PathWrap_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PathWrap self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PathWrap_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PathWrap_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PathWrap self) -> PathWrap

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathWrap self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getConcreteClassName(self)


    def copyProperty_wrap_object(self, source):
        """
        copyProperty_wrap_object(PathWrap self, PathWrap source)

        Parameters
        ----------
        source: OpenSim::PathWrap::Self const &

        """
        return _simulation.PathWrap_copyProperty_wrap_object(self, source)


    def append_wrap_object(self, value):
        """
        append_wrap_object(PathWrap self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.PathWrap_append_wrap_object(self, value)


    def constructProperty_wrap_object(self, initValue):
        """
        constructProperty_wrap_object(PathWrap self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.PathWrap_constructProperty_wrap_object(self, initValue)


    def get_wrap_object(self, *args):
        """
        get_wrap_object(PathWrap self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_wrap_object(PathWrap self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_get_wrap_object(self, *args)


    def upd_wrap_object(self, *args):
        """
        upd_wrap_object(PathWrap self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_wrap_object(PathWrap self) -> std::string &

        Parameters
        ----------
        self: OpenSim::PathWrap *

        """
        return _simulation.PathWrap_upd_wrap_object(self, *args)


    def set_wrap_object(self, *args):
        """
        set_wrap_object(PathWrap self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_wrap_object(PathWrap self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.PathWrap_set_wrap_object(self, *args)


    def copyProperty_method(self, source):
        """
        copyProperty_method(PathWrap self, PathWrap source)

        Parameters
        ----------
        source: OpenSim::PathWrap::Self const &

        """
        return _simulation.PathWrap_copyProperty_method(self, source)


    def append_method(self, value):
        """
        append_method(PathWrap self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.PathWrap_append_method(self, value)


    def constructProperty_method(self, initValue):
        """
        constructProperty_method(PathWrap self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.PathWrap_constructProperty_method(self, initValue)


    def get_method(self, *args):
        """
        get_method(PathWrap self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_method(PathWrap self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_get_method(self, *args)


    def upd_method(self, *args):
        """
        upd_method(PathWrap self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_method(PathWrap self) -> std::string &

        Parameters
        ----------
        self: OpenSim::PathWrap *

        """
        return _simulation.PathWrap_upd_method(self, *args)


    def set_method(self, *args):
        """
        set_method(PathWrap self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_method(PathWrap self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.PathWrap_set_method(self, *args)


    def copyProperty_range(self, source):
        """
        copyProperty_range(PathWrap self, PathWrap source)

        Parameters
        ----------
        source: OpenSim::PathWrap::Self const &

        """
        return _simulation.PathWrap_copyProperty_range(self, source)


    def get_range(self, i):
        """
        get_range(PathWrap self, int i) -> int const &

        Parameters
        ----------
        i: int

        """
        return _simulation.PathWrap_get_range(self, i)


    def upd_range(self, i):
        """
        upd_range(PathWrap self, int i) -> int &

        Parameters
        ----------
        i: int

        """
        return _simulation.PathWrap_upd_range(self, i)


    def set_range(self, i, value):
        """
        set_range(PathWrap self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        """
        return _simulation.PathWrap_set_range(self, i, value)


    def append_range(self, value):
        """
        append_range(PathWrap self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _simulation.PathWrap_append_range(self, value)

    hybrid = _simulation.PathWrap_hybrid
    midpoint = _simulation.PathWrap_midpoint
    axial = _simulation.PathWrap_axial

    def __init__(self):
        """__init__(OpenSim::PathWrap self) -> PathWrap"""
        this = _simulation.new_PathWrap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PathWrap
    __del__ = lambda self: None

    def getStartPoint(self):
        """
        getStartPoint(PathWrap self) -> int

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getStartPoint(self)


    def getEndPoint(self):
        """
        getEndPoint(PathWrap self) -> int

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getEndPoint(self)


    def getWrapObjectName(self):
        """
        getWrapObjectName(PathWrap self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getWrapObjectName(self)


    def getWrapObject(self):
        """
        getWrapObject(PathWrap self) -> WrapObject

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getWrapObject(self)


    def setWrapObject(self, aWrapObject):
        """
        setWrapObject(PathWrap self, WrapObject aWrapObject)

        Parameters
        ----------
        aWrapObject: OpenSim::WrapObject &

        """
        return _simulation.PathWrap_setWrapObject(self, aWrapObject)


    def getWrapPoint1(self):
        """
        getWrapPoint1(PathWrap self) -> PathWrapPoint const &

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getWrapPoint1(self)


    def getWrapPoint2(self):
        """
        getWrapPoint2(PathWrap self) -> PathWrapPoint const &

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getWrapPoint2(self)


    def updWrapPoint1(self):
        """
        updWrapPoint1(PathWrap self) -> PathWrapPoint &

        Parameters
        ----------
        self: OpenSim::PathWrap *

        """
        return _simulation.PathWrap_updWrapPoint1(self)


    def updWrapPoint2(self):
        """
        updWrapPoint2(PathWrap self) -> PathWrapPoint &

        Parameters
        ----------
        self: OpenSim::PathWrap *

        """
        return _simulation.PathWrap_updWrapPoint2(self)


    def getMethod(self):
        """
        getMethod(PathWrap self) -> OpenSim::PathWrap::WrapMethod

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getMethod(self)


    def setMethod(self, aMethod):
        """
        setMethod(PathWrap self, OpenSim::PathWrap::WrapMethod aMethod)

        Parameters
        ----------
        aMethod: enum OpenSim::PathWrap::WrapMethod

        """
        return _simulation.PathWrap_setMethod(self, aMethod)


    def getMethodName(self):
        """
        getMethodName(PathWrap self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getMethodName(self)


    def getPreviousWrap(self):
        """
        getPreviousWrap(PathWrap self) -> OpenSim::WrapResult const &

        Parameters
        ----------
        self: OpenSim::PathWrap const *

        """
        return _simulation.PathWrap_getPreviousWrap(self)


    def setPreviousWrap(self, aWrapResult):
        """
        setPreviousWrap(PathWrap self, OpenSim::WrapResult const & aWrapResult)

        Parameters
        ----------
        aWrapResult: OpenSim::WrapResult const &

        """
        return _simulation.PathWrap_setPreviousWrap(self, aWrapResult)


    def resetPreviousWrap(self):
        """
        resetPreviousWrap(PathWrap self)

        Parameters
        ----------
        self: OpenSim::PathWrap *

        """
        return _simulation.PathWrap_resetPreviousWrap(self)

PathWrap_swigregister = _simulation.PathWrap_swigregister
PathWrap_swigregister(PathWrap)

def PathWrap_safeDownCast(obj):
    """
    PathWrap_safeDownCast(OpenSimObject obj) -> PathWrap

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PathWrap_safeDownCast(obj)

def PathWrap_getClassName():
    """PathWrap_getClassName() -> std::string const &"""
    return _simulation.PathWrap_getClassName()

class SetPathWrap(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::PathWrap,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetPathWrap, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetPathWrap, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetPathWrap

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetPathWrap_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetPathWrap self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetPathWrap_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetPathWrap_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetPathWrap self) -> SetPathWrap

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::PathWrap,OpenSim::Object > const *

        """
        return _simulation.SetPathWrap_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetPathWrap self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::PathWrap,OpenSim::Object > const *

        """
        return _simulation.SetPathWrap_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetPathWrap
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::PathWrap,OpenSim::Object)> self) -> SetPathWrap
        __init__(OpenSim::Set<(OpenSim::PathWrap,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetPathWrap

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::PathWrap,OpenSim::Object)> self, std::string const & aFileName) -> SetPathWrap

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::PathWrap,OpenSim::Object)> self, SetPathWrap aSet) -> SetPathWrap

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::PathWrap,OpenSim::Object > const &

        """
        this = _simulation.new_SetPathWrap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetPathWrap self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::PathWrap,OpenSim::Object > *

        """
        return _simulation.SetPathWrap_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetPathWrap self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetPathWrap_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetPathWrap self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetPathWrap_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetPathWrap self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::PathWrap,OpenSim::Object > const *

        """
        return _simulation.SetPathWrap_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetPathWrap self, PathWrap aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::PathWrap const *
        aStartIndex: int

        getIndex(SetPathWrap self, PathWrap aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::PathWrap const *

        getIndex(SetPathWrap self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetPathWrap self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetPathWrap_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetPathWrap self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetPathWrap_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetPathWrap self, PathWrap aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::PathWrap *

        """
        return _simulation.SetPathWrap_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetPathWrap self, PathWrap aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::PathWrap const &

        """
        return _simulation.SetPathWrap_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetPathWrap self, int aIndex, PathWrap aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::PathWrap *

        """
        return _simulation.SetPathWrap_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetPathWrap self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetPathWrap self, PathWrap aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::PathWrap const *

        """
        return _simulation.SetPathWrap_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetPathWrap self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::PathWrap,OpenSim::Object > *

        """
        return _simulation.SetPathWrap_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetPathWrap self, int aIndex, PathWrap aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::PathWrap *
        preserveGroups: bool

        set(SetPathWrap self, int aIndex, PathWrap aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::PathWrap *

        """
        return _simulation.SetPathWrap_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetPathWrap self, int aIndex) -> PathWrap

        Parameters
        ----------
        aIndex: int

        get(SetPathWrap self, std::string const & aName) -> PathWrap

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetPathWrap_get(self, *args)


    def contains(self, aName):
        """
        contains(SetPathWrap self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetPathWrap_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetPathWrap self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetPathWrap_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetPathWrap self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::PathWrap,OpenSim::Object > const *

        """
        return _simulation.SetPathWrap_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetPathWrap self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetPathWrap_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetPathWrap self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetPathWrap_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetPathWrap self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetPathWrap_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetPathWrap self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetPathWrap_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetPathWrap self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetPathWrap_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetPathWrap self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetPathWrap self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetPathWrap_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetPathWrap_swigregister = _simulation.SetPathWrap_swigregister
SetPathWrap_swigregister(SetPathWrap)

def SetPathWrap_safeDownCast(obj):
    """
    SetPathWrap_safeDownCast(OpenSimObject obj) -> SetPathWrap

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetPathWrap_safeDownCast(obj)

def SetPathWrap_getClassName():
    """SetPathWrap_getClassName() -> std::string const &"""
    return _simulation.SetPathWrap_getClassName()

class PathWrapSet(SetPathWrap):
    """Proxy of C++ OpenSim::PathWrapSet class."""

    __swig_setmethods__ = {}
    for _s in [SetPathWrap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathWrapSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetPathWrap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathWrapSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathWrapSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PathWrapSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PathWrapSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PathWrapSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PathWrapSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PathWrapSet self) -> PathWrapSet

        Parameters
        ----------
        self: OpenSim::PathWrapSet const *

        """
        return _simulation.PathWrapSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathWrapSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathWrapSet const *

        """
        return _simulation.PathWrapSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PathWrapSet self) -> PathWrapSet
        __init__(OpenSim::PathWrapSet self, PathWrapSet aPathWrapSet) -> PathWrapSet

        Parameters
        ----------
        aPathWrapSet: OpenSim::PathWrapSet const &

        """
        this = _simulation.new_PathWrapSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PathWrapSet
    __del__ = lambda self: None
PathWrapSet_swigregister = _simulation.PathWrapSet_swigregister
PathWrapSet_swigregister(PathWrapSet)

def PathWrapSet_safeDownCast(obj):
    """
    PathWrapSet_safeDownCast(OpenSimObject obj) -> PathWrapSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PathWrapSet_safeDownCast(obj)

def PathWrapSet_getClassName():
    """PathWrapSet_getClassName() -> std::string const &"""
    return _simulation.PathWrapSet_getClassName()

class WrapCylinderObst(WrapObject):
    """Proxy of C++ OpenSim::WrapCylinderObst class."""

    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapCylinderObst, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapCylinderObst, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapCylinderObst

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapCylinderObst_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapCylinderObst self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapCylinderObst_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapCylinderObst_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapCylinderObst self) -> WrapCylinderObst

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapCylinderObst self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_getConcreteClassName(self)


    def copyProperty_radius(self, source):
        """
        copyProperty_radius(WrapCylinderObst self, WrapCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapCylinderObst::Self const &

        """
        return _simulation.WrapCylinderObst_copyProperty_radius(self, source)


    def append_radius(self, value):
        """
        append_radius(WrapCylinderObst self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapCylinderObst_append_radius(self, value)


    def constructProperty_radius(self, initValue):
        """
        constructProperty_radius(WrapCylinderObst self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapCylinderObst_constructProperty_radius(self, initValue)


    def get_radius(self, *args):
        """
        get_radius(WrapCylinderObst self, int i) -> double const

        Parameters
        ----------
        i: int

        get_radius(WrapCylinderObst self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_get_radius(self, *args)


    def upd_radius(self, *args):
        """
        upd_radius(WrapCylinderObst self, int i) -> double

        Parameters
        ----------
        i: int

        upd_radius(WrapCylinderObst self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst *

        """
        return _simulation.WrapCylinderObst_upd_radius(self, *args)


    def set_radius(self, *args):
        """
        set_radius(WrapCylinderObst self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_radius(WrapCylinderObst self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapCylinderObst_set_radius(self, *args)


    def copyProperty_length(self, source):
        """
        copyProperty_length(WrapCylinderObst self, WrapCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapCylinderObst::Self const &

        """
        return _simulation.WrapCylinderObst_copyProperty_length(self, source)


    def append_length(self, value):
        """
        append_length(WrapCylinderObst self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapCylinderObst_append_length(self, value)


    def constructProperty_length(self, initValue):
        """
        constructProperty_length(WrapCylinderObst self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapCylinderObst_constructProperty_length(self, initValue)


    def get_length(self, *args):
        """
        get_length(WrapCylinderObst self, int i) -> double const

        Parameters
        ----------
        i: int

        get_length(WrapCylinderObst self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_get_length(self, *args)


    def upd_length(self, *args):
        """
        upd_length(WrapCylinderObst self, int i) -> double

        Parameters
        ----------
        i: int

        upd_length(WrapCylinderObst self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst *

        """
        return _simulation.WrapCylinderObst_upd_length(self, *args)


    def set_length(self, *args):
        """
        set_length(WrapCylinderObst self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_length(WrapCylinderObst self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapCylinderObst_set_length(self, *args)


    def copyProperty_wrapDirection(self, source):
        """
        copyProperty_wrapDirection(WrapCylinderObst self, WrapCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapCylinderObst::Self const &

        """
        return _simulation.WrapCylinderObst_copyProperty_wrapDirection(self, source)


    def append_wrapDirection(self, value):
        """
        append_wrapDirection(WrapCylinderObst self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapCylinderObst_append_wrapDirection(self, value)


    def constructProperty_wrapDirection(self, initValue):
        """
        constructProperty_wrapDirection(WrapCylinderObst self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.WrapCylinderObst_constructProperty_wrapDirection(self, initValue)


    def get_wrapDirection(self, *args):
        """
        get_wrapDirection(WrapCylinderObst self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_wrapDirection(WrapCylinderObst self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_get_wrapDirection(self, *args)


    def upd_wrapDirection(self, *args):
        """
        upd_wrapDirection(WrapCylinderObst self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_wrapDirection(WrapCylinderObst self) -> std::string &

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst *

        """
        return _simulation.WrapCylinderObst_upd_wrapDirection(self, *args)


    def set_wrapDirection(self, *args):
        """
        set_wrapDirection(WrapCylinderObst self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_wrapDirection(WrapCylinderObst self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapCylinderObst_set_wrapDirection(self, *args)


    def __init__(self):
        """__init__(OpenSim::WrapCylinderObst self) -> WrapCylinderObst"""
        this = _simulation.new_WrapCylinderObst()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WrapCylinderObst
    __del__ = lambda self: None

    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapCylinderObst self) -> char const *

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapCylinderObst self) -> std::string

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_getDimensionsString(self)


    def getRadius(self):
        """
        getRadius(WrapCylinderObst self) -> double

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_getRadius(self)


    def setRadius(self, aRadius):
        """
        setRadius(WrapCylinderObst self, double aRadius)

        Parameters
        ----------
        aRadius: double

        """
        return _simulation.WrapCylinderObst_setRadius(self, aRadius)


    def getLength(self):
        """
        getLength(WrapCylinderObst self) -> double

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_getLength(self)


    def setLength(self, aLength):
        """
        setLength(WrapCylinderObst self, double aLength)

        Parameters
        ----------
        aLength: double

        """
        return _simulation.WrapCylinderObst_setLength(self, aLength)


    def getWrapDirection(self):
        """
        getWrapDirection(WrapCylinderObst self) -> int

        Parameters
        ----------
        self: OpenSim::WrapCylinderObst const *

        """
        return _simulation.WrapCylinderObst_getWrapDirection(self)

WrapCylinderObst_swigregister = _simulation.WrapCylinderObst_swigregister
WrapCylinderObst_swigregister(WrapCylinderObst)

def WrapCylinderObst_safeDownCast(obj):
    """
    WrapCylinderObst_safeDownCast(OpenSimObject obj) -> WrapCylinderObst

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapCylinderObst_safeDownCast(obj)

def WrapCylinderObst_getClassName():
    """WrapCylinderObst_getClassName() -> std::string const &"""
    return _simulation.WrapCylinderObst_getClassName()

class WrapSphereObst(WrapObject):
    """Proxy of C++ OpenSim::WrapSphereObst class."""

    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapSphereObst, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapSphereObst, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapSphereObst

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapSphereObst_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapSphereObst self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapSphereObst_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapSphereObst_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapSphereObst self) -> WrapSphereObst

        Parameters
        ----------
        self: OpenSim::WrapSphereObst const *

        """
        return _simulation.WrapSphereObst_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapSphereObst self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapSphereObst const *

        """
        return _simulation.WrapSphereObst_getConcreteClassName(self)


    def copyProperty_radius(self, source):
        """
        copyProperty_radius(WrapSphereObst self, WrapSphereObst source)

        Parameters
        ----------
        source: OpenSim::WrapSphereObst::Self const &

        """
        return _simulation.WrapSphereObst_copyProperty_radius(self, source)


    def append_radius(self, value):
        """
        append_radius(WrapSphereObst self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapSphereObst_append_radius(self, value)


    def constructProperty_radius(self, initValue):
        """
        constructProperty_radius(WrapSphereObst self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapSphereObst_constructProperty_radius(self, initValue)


    def get_radius(self, *args):
        """
        get_radius(WrapSphereObst self, int i) -> double const

        Parameters
        ----------
        i: int

        get_radius(WrapSphereObst self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapSphereObst const *

        """
        return _simulation.WrapSphereObst_get_radius(self, *args)


    def upd_radius(self, *args):
        """
        upd_radius(WrapSphereObst self, int i) -> double

        Parameters
        ----------
        i: int

        upd_radius(WrapSphereObst self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapSphereObst *

        """
        return _simulation.WrapSphereObst_upd_radius(self, *args)


    def set_radius(self, *args):
        """
        set_radius(WrapSphereObst self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_radius(WrapSphereObst self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapSphereObst_set_radius(self, *args)


    def copyProperty_length(self, source):
        """
        copyProperty_length(WrapSphereObst self, WrapSphereObst source)

        Parameters
        ----------
        source: OpenSim::WrapSphereObst::Self const &

        """
        return _simulation.WrapSphereObst_copyProperty_length(self, source)


    def append_length(self, value):
        """
        append_length(WrapSphereObst self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapSphereObst_append_length(self, value)


    def constructProperty_length(self, initValue):
        """
        constructProperty_length(WrapSphereObst self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapSphereObst_constructProperty_length(self, initValue)


    def get_length(self, *args):
        """
        get_length(WrapSphereObst self, int i) -> double const

        Parameters
        ----------
        i: int

        get_length(WrapSphereObst self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapSphereObst const *

        """
        return _simulation.WrapSphereObst_get_length(self, *args)


    def upd_length(self, *args):
        """
        upd_length(WrapSphereObst self, int i) -> double

        Parameters
        ----------
        i: int

        upd_length(WrapSphereObst self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapSphereObst *

        """
        return _simulation.WrapSphereObst_upd_length(self, *args)


    def set_length(self, *args):
        """
        set_length(WrapSphereObst self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_length(WrapSphereObst self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapSphereObst_set_length(self, *args)


    def __init__(self):
        """__init__(OpenSim::WrapSphereObst self) -> WrapSphereObst"""
        this = _simulation.new_WrapSphereObst()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WrapSphereObst
    __del__ = lambda self: None

    def getRadius(self):
        """
        getRadius(WrapSphereObst self) -> double

        Parameters
        ----------
        self: OpenSim::WrapSphereObst const *

        """
        return _simulation.WrapSphereObst_getRadius(self)


    def setRadius(self, aRadius):
        """
        setRadius(WrapSphereObst self, double aRadius)

        Parameters
        ----------
        aRadius: double

        """
        return _simulation.WrapSphereObst_setRadius(self, aRadius)


    def getLength(self):
        """
        getLength(WrapSphereObst self) -> double

        Parameters
        ----------
        self: OpenSim::WrapSphereObst const *

        """
        return _simulation.WrapSphereObst_getLength(self)


    def setLength(self, aLength):
        """
        setLength(WrapSphereObst self, double aLength)

        Parameters
        ----------
        aLength: double

        """
        return _simulation.WrapSphereObst_setLength(self, aLength)


    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapSphereObst self) -> char const *

        Parameters
        ----------
        self: OpenSim::WrapSphereObst const *

        """
        return _simulation.WrapSphereObst_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapSphereObst self) -> std::string

        Parameters
        ----------
        self: OpenSim::WrapSphereObst const *

        """
        return _simulation.WrapSphereObst_getDimensionsString(self)

WrapSphereObst_swigregister = _simulation.WrapSphereObst_swigregister
WrapSphereObst_swigregister(WrapSphereObst)

def WrapSphereObst_safeDownCast(obj):
    """
    WrapSphereObst_safeDownCast(OpenSimObject obj) -> WrapSphereObst

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapSphereObst_safeDownCast(obj)

def WrapSphereObst_getClassName():
    """WrapSphereObst_getClassName() -> std::string const &"""
    return _simulation.WrapSphereObst_getClassName()

class WrapDoubleCylinderObst(WrapObject):
    """Proxy of C++ OpenSim::WrapDoubleCylinderObst class."""

    __swig_setmethods__ = {}
    for _s in [WrapObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapDoubleCylinderObst, name, value)
    __swig_getmethods__ = {}
    for _s in [WrapObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrapDoubleCylinderObst, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> WrapDoubleCylinderObst

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.WrapDoubleCylinderObst_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(WrapDoubleCylinderObst self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.WrapDoubleCylinderObst_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.WrapDoubleCylinderObst_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(WrapDoubleCylinderObst self) -> WrapDoubleCylinderObst

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(WrapDoubleCylinderObst self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_getConcreteClassName(self)


    def copyProperty_wrapVcylHomeBodyName(self, source):
        """
        copyProperty_wrapVcylHomeBodyName(WrapDoubleCylinderObst self, WrapDoubleCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapDoubleCylinderObst::Self const &

        """
        return _simulation.WrapDoubleCylinderObst_copyProperty_wrapVcylHomeBodyName(self, source)


    def append_wrapVcylHomeBodyName(self, value):
        """
        append_wrapVcylHomeBodyName(WrapDoubleCylinderObst self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_append_wrapVcylHomeBodyName(self, value)


    def constructProperty_wrapVcylHomeBodyName(self, initValue):
        """
        constructProperty_wrapVcylHomeBodyName(WrapDoubleCylinderObst self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_constructProperty_wrapVcylHomeBodyName(self, initValue)


    def get_wrapVcylHomeBodyName(self, *args):
        """
        get_wrapVcylHomeBodyName(WrapDoubleCylinderObst self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_wrapVcylHomeBodyName(WrapDoubleCylinderObst self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_get_wrapVcylHomeBodyName(self, *args)


    def upd_wrapVcylHomeBodyName(self, *args):
        """
        upd_wrapVcylHomeBodyName(WrapDoubleCylinderObst self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_wrapVcylHomeBodyName(WrapDoubleCylinderObst self) -> std::string &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst *

        """
        return _simulation.WrapDoubleCylinderObst_upd_wrapVcylHomeBodyName(self, *args)


    def set_wrapVcylHomeBodyName(self, *args):
        """
        set_wrapVcylHomeBodyName(WrapDoubleCylinderObst self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_wrapVcylHomeBodyName(WrapDoubleCylinderObst self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_set_wrapVcylHomeBodyName(self, *args)


    def copyProperty_radiusUcyl(self, source):
        """
        copyProperty_radiusUcyl(WrapDoubleCylinderObst self, WrapDoubleCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapDoubleCylinderObst::Self const &

        """
        return _simulation.WrapDoubleCylinderObst_copyProperty_radiusUcyl(self, source)


    def append_radiusUcyl(self, value):
        """
        append_radiusUcyl(WrapDoubleCylinderObst self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapDoubleCylinderObst_append_radiusUcyl(self, value)


    def constructProperty_radiusUcyl(self, initValue):
        """
        constructProperty_radiusUcyl(WrapDoubleCylinderObst self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapDoubleCylinderObst_constructProperty_radiusUcyl(self, initValue)


    def get_radiusUcyl(self, *args):
        """
        get_radiusUcyl(WrapDoubleCylinderObst self, int i) -> double const

        Parameters
        ----------
        i: int

        get_radiusUcyl(WrapDoubleCylinderObst self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_get_radiusUcyl(self, *args)


    def upd_radiusUcyl(self, *args):
        """
        upd_radiusUcyl(WrapDoubleCylinderObst self, int i) -> double

        Parameters
        ----------
        i: int

        upd_radiusUcyl(WrapDoubleCylinderObst self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst *

        """
        return _simulation.WrapDoubleCylinderObst_upd_radiusUcyl(self, *args)


    def set_radiusUcyl(self, *args):
        """
        set_radiusUcyl(WrapDoubleCylinderObst self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_radiusUcyl(WrapDoubleCylinderObst self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapDoubleCylinderObst_set_radiusUcyl(self, *args)


    def copyProperty_radiusVcyl(self, source):
        """
        copyProperty_radiusVcyl(WrapDoubleCylinderObst self, WrapDoubleCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapDoubleCylinderObst::Self const &

        """
        return _simulation.WrapDoubleCylinderObst_copyProperty_radiusVcyl(self, source)


    def append_radiusVcyl(self, value):
        """
        append_radiusVcyl(WrapDoubleCylinderObst self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapDoubleCylinderObst_append_radiusVcyl(self, value)


    def constructProperty_radiusVcyl(self, initValue):
        """
        constructProperty_radiusVcyl(WrapDoubleCylinderObst self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapDoubleCylinderObst_constructProperty_radiusVcyl(self, initValue)


    def get_radiusVcyl(self, *args):
        """
        get_radiusVcyl(WrapDoubleCylinderObst self, int i) -> double const

        Parameters
        ----------
        i: int

        get_radiusVcyl(WrapDoubleCylinderObst self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_get_radiusVcyl(self, *args)


    def upd_radiusVcyl(self, *args):
        """
        upd_radiusVcyl(WrapDoubleCylinderObst self, int i) -> double

        Parameters
        ----------
        i: int

        upd_radiusVcyl(WrapDoubleCylinderObst self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst *

        """
        return _simulation.WrapDoubleCylinderObst_upd_radiusVcyl(self, *args)


    def set_radiusVcyl(self, *args):
        """
        set_radiusVcyl(WrapDoubleCylinderObst self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_radiusVcyl(WrapDoubleCylinderObst self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapDoubleCylinderObst_set_radiusVcyl(self, *args)


    def copyProperty_wrapUcylDirection(self, source):
        """
        copyProperty_wrapUcylDirection(WrapDoubleCylinderObst self, WrapDoubleCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapDoubleCylinderObst::Self const &

        """
        return _simulation.WrapDoubleCylinderObst_copyProperty_wrapUcylDirection(self, source)


    def append_wrapUcylDirection(self, value):
        """
        append_wrapUcylDirection(WrapDoubleCylinderObst self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_append_wrapUcylDirection(self, value)


    def constructProperty_wrapUcylDirection(self, initValue):
        """
        constructProperty_wrapUcylDirection(WrapDoubleCylinderObst self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_constructProperty_wrapUcylDirection(self, initValue)


    def get_wrapUcylDirection(self, *args):
        """
        get_wrapUcylDirection(WrapDoubleCylinderObst self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_wrapUcylDirection(WrapDoubleCylinderObst self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_get_wrapUcylDirection(self, *args)


    def upd_wrapUcylDirection(self, *args):
        """
        upd_wrapUcylDirection(WrapDoubleCylinderObst self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_wrapUcylDirection(WrapDoubleCylinderObst self) -> std::string &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst *

        """
        return _simulation.WrapDoubleCylinderObst_upd_wrapUcylDirection(self, *args)


    def set_wrapUcylDirection(self, *args):
        """
        set_wrapUcylDirection(WrapDoubleCylinderObst self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_wrapUcylDirection(WrapDoubleCylinderObst self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_set_wrapUcylDirection(self, *args)


    def copyProperty_wrapVcylDirection(self, source):
        """
        copyProperty_wrapVcylDirection(WrapDoubleCylinderObst self, WrapDoubleCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapDoubleCylinderObst::Self const &

        """
        return _simulation.WrapDoubleCylinderObst_copyProperty_wrapVcylDirection(self, source)


    def append_wrapVcylDirection(self, value):
        """
        append_wrapVcylDirection(WrapDoubleCylinderObst self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_append_wrapVcylDirection(self, value)


    def constructProperty_wrapVcylDirection(self, initValue):
        """
        constructProperty_wrapVcylDirection(WrapDoubleCylinderObst self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_constructProperty_wrapVcylDirection(self, initValue)


    def get_wrapVcylDirection(self, *args):
        """
        get_wrapVcylDirection(WrapDoubleCylinderObst self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_wrapVcylDirection(WrapDoubleCylinderObst self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_get_wrapVcylDirection(self, *args)


    def upd_wrapVcylDirection(self, *args):
        """
        upd_wrapVcylDirection(WrapDoubleCylinderObst self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_wrapVcylDirection(WrapDoubleCylinderObst self) -> std::string &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst *

        """
        return _simulation.WrapDoubleCylinderObst_upd_wrapVcylDirection(self, *args)


    def set_wrapVcylDirection(self, *args):
        """
        set_wrapVcylDirection(WrapDoubleCylinderObst self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_wrapVcylDirection(WrapDoubleCylinderObst self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.WrapDoubleCylinderObst_set_wrapVcylDirection(self, *args)


    def copyProperty_translationVcyl(self, source):
        """
        copyProperty_translationVcyl(WrapDoubleCylinderObst self, WrapDoubleCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapDoubleCylinderObst::Self const &

        """
        return _simulation.WrapDoubleCylinderObst_copyProperty_translationVcyl(self, source)


    def append_translationVcyl(self, value):
        """
        append_translationVcyl(WrapDoubleCylinderObst self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapDoubleCylinderObst_append_translationVcyl(self, value)


    def constructProperty_translationVcyl(self, initValue):
        """
        constructProperty_translationVcyl(WrapDoubleCylinderObst self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.WrapDoubleCylinderObst_constructProperty_translationVcyl(self, initValue)


    def get_translationVcyl(self, *args):
        """
        get_translationVcyl(WrapDoubleCylinderObst self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_translationVcyl(WrapDoubleCylinderObst self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_get_translationVcyl(self, *args)


    def upd_translationVcyl(self, *args):
        """
        upd_translationVcyl(WrapDoubleCylinderObst self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_translationVcyl(WrapDoubleCylinderObst self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst *

        """
        return _simulation.WrapDoubleCylinderObst_upd_translationVcyl(self, *args)


    def set_translationVcyl(self, *args):
        """
        set_translationVcyl(WrapDoubleCylinderObst self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_translationVcyl(WrapDoubleCylinderObst self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapDoubleCylinderObst_set_translationVcyl(self, *args)


    def copyProperty_xyz_body_rotationVcyl(self, source):
        """
        copyProperty_xyz_body_rotationVcyl(WrapDoubleCylinderObst self, WrapDoubleCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapDoubleCylinderObst::Self const &

        """
        return _simulation.WrapDoubleCylinderObst_copyProperty_xyz_body_rotationVcyl(self, source)


    def append_xyz_body_rotationVcyl(self, value):
        """
        append_xyz_body_rotationVcyl(WrapDoubleCylinderObst self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapDoubleCylinderObst_append_xyz_body_rotationVcyl(self, value)


    def constructProperty_xyz_body_rotationVcyl(self, initValue):
        """
        constructProperty_xyz_body_rotationVcyl(WrapDoubleCylinderObst self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.WrapDoubleCylinderObst_constructProperty_xyz_body_rotationVcyl(self, initValue)


    def get_xyz_body_rotationVcyl(self, *args):
        """
        get_xyz_body_rotationVcyl(WrapDoubleCylinderObst self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_xyz_body_rotationVcyl(WrapDoubleCylinderObst self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_get_xyz_body_rotationVcyl(self, *args)


    def upd_xyz_body_rotationVcyl(self, *args):
        """
        upd_xyz_body_rotationVcyl(WrapDoubleCylinderObst self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_xyz_body_rotationVcyl(WrapDoubleCylinderObst self) -> Vec3

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst *

        """
        return _simulation.WrapDoubleCylinderObst_upd_xyz_body_rotationVcyl(self, *args)


    def set_xyz_body_rotationVcyl(self, *args):
        """
        set_xyz_body_rotationVcyl(WrapDoubleCylinderObst self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_xyz_body_rotationVcyl(WrapDoubleCylinderObst self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.WrapDoubleCylinderObst_set_xyz_body_rotationVcyl(self, *args)


    def copyProperty_length(self, source):
        """
        copyProperty_length(WrapDoubleCylinderObst self, WrapDoubleCylinderObst source)

        Parameters
        ----------
        source: OpenSim::WrapDoubleCylinderObst::Self const &

        """
        return _simulation.WrapDoubleCylinderObst_copyProperty_length(self, source)


    def append_length(self, value):
        """
        append_length(WrapDoubleCylinderObst self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapDoubleCylinderObst_append_length(self, value)


    def constructProperty_length(self, initValue):
        """
        constructProperty_length(WrapDoubleCylinderObst self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.WrapDoubleCylinderObst_constructProperty_length(self, initValue)


    def get_length(self, *args):
        """
        get_length(WrapDoubleCylinderObst self, int i) -> double const

        Parameters
        ----------
        i: int

        get_length(WrapDoubleCylinderObst self) -> double const &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_get_length(self, *args)


    def upd_length(self, *args):
        """
        upd_length(WrapDoubleCylinderObst self, int i) -> double

        Parameters
        ----------
        i: int

        upd_length(WrapDoubleCylinderObst self) -> double &

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst *

        """
        return _simulation.WrapDoubleCylinderObst_upd_length(self, *args)


    def set_length(self, *args):
        """
        set_length(WrapDoubleCylinderObst self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_length(WrapDoubleCylinderObst self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.WrapDoubleCylinderObst_set_length(self, *args)


    def __init__(self):
        """__init__(OpenSim::WrapDoubleCylinderObst self) -> WrapDoubleCylinderObst"""
        this = _simulation.new_WrapDoubleCylinderObst()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_WrapDoubleCylinderObst
    __del__ = lambda self: None

    def getWrapTypeName(self):
        """
        getWrapTypeName(WrapDoubleCylinderObst self) -> char const *

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_getWrapTypeName(self)


    def getDimensionsString(self):
        """
        getDimensionsString(WrapDoubleCylinderObst self) -> std::string

        Parameters
        ----------
        self: OpenSim::WrapDoubleCylinderObst const *

        """
        return _simulation.WrapDoubleCylinderObst_getDimensionsString(self)


    def connectToModelAndBody(self, aModel, aBody):
        """
        connectToModelAndBody(WrapDoubleCylinderObst self, Model aModel, PhysicalFrame aBody)

        Parameters
        ----------
        aModel: OpenSim::Model &
        aBody: OpenSim::PhysicalFrame &

        """
        return _simulation.WrapDoubleCylinderObst_connectToModelAndBody(self, aModel, aBody)

WrapDoubleCylinderObst_swigregister = _simulation.WrapDoubleCylinderObst_swigregister
WrapDoubleCylinderObst_swigregister(WrapDoubleCylinderObst)

def WrapDoubleCylinderObst_safeDownCast(obj):
    """
    WrapDoubleCylinderObst_safeDownCast(OpenSimObject obj) -> WrapDoubleCylinderObst

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.WrapDoubleCylinderObst_safeDownCast(obj)

def WrapDoubleCylinderObst_getClassName():
    """WrapDoubleCylinderObst_getClassName() -> std::string const &"""
    return _simulation.WrapDoubleCylinderObst_getClassName()

class Probe(ModelComponent):
    """Proxy of C++ OpenSim::Probe class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Probe, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Probe, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Probe

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Probe_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Probe self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Probe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Probe_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Probe self) -> Probe

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Probe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_getConcreteClassName(self)


    def copyProperty_enabled(self, source):
        """
        copyProperty_enabled(Probe self, Probe source)

        Parameters
        ----------
        source: OpenSim::Probe::Self const &

        """
        return _simulation.Probe_copyProperty_enabled(self, source)


    def append_enabled(self, value):
        """
        append_enabled(Probe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Probe_append_enabled(self, value)


    def constructProperty_enabled(self, initValue):
        """
        constructProperty_enabled(Probe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Probe_constructProperty_enabled(self, initValue)


    def get_enabled(self, *args):
        """
        get_enabled(Probe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_enabled(Probe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_get_enabled(self, *args)


    def upd_enabled(self, *args):
        """
        upd_enabled(Probe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_enabled(Probe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Probe *

        """
        return _simulation.Probe_upd_enabled(self, *args)


    def set_enabled(self, *args):
        """
        set_enabled(Probe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_enabled(Probe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Probe_set_enabled(self, *args)


    def copyProperty_probe_operation(self, source):
        """
        copyProperty_probe_operation(Probe self, Probe source)

        Parameters
        ----------
        source: OpenSim::Probe::Self const &

        """
        return _simulation.Probe_copyProperty_probe_operation(self, source)


    def append_probe_operation(self, value):
        """
        append_probe_operation(Probe self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Probe_append_probe_operation(self, value)


    def constructProperty_probe_operation(self, initValue):
        """
        constructProperty_probe_operation(Probe self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.Probe_constructProperty_probe_operation(self, initValue)


    def get_probe_operation(self, *args):
        """
        get_probe_operation(Probe self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_probe_operation(Probe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_get_probe_operation(self, *args)


    def upd_probe_operation(self, *args):
        """
        upd_probe_operation(Probe self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_probe_operation(Probe self) -> std::string &

        Parameters
        ----------
        self: OpenSim::Probe *

        """
        return _simulation.Probe_upd_probe_operation(self, *args)


    def set_probe_operation(self, *args):
        """
        set_probe_operation(Probe self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_probe_operation(Probe self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Probe_set_probe_operation(self, *args)


    def copyProperty_initial_conditions_for_integration(self, source):
        """
        copyProperty_initial_conditions_for_integration(Probe self, Probe source)

        Parameters
        ----------
        source: OpenSim::Probe::Self const &

        """
        return _simulation.Probe_copyProperty_initial_conditions_for_integration(self, source)


    def get_initial_conditions_for_integration(self, i):
        """
        get_initial_conditions_for_integration(Probe self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _simulation.Probe_get_initial_conditions_for_integration(self, i)


    def upd_initial_conditions_for_integration(self, i):
        """
        upd_initial_conditions_for_integration(Probe self, int i) -> double &

        Parameters
        ----------
        i: int

        """
        return _simulation.Probe_upd_initial_conditions_for_integration(self, i)


    def set_initial_conditions_for_integration(self, i, value):
        """
        set_initial_conditions_for_integration(Probe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        """
        return _simulation.Probe_set_initial_conditions_for_integration(self, i, value)


    def append_initial_conditions_for_integration(self, value):
        """
        append_initial_conditions_for_integration(Probe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Probe_append_initial_conditions_for_integration(self, value)


    def constructProperty_initial_conditions_for_integration(self):
        """
        constructProperty_initial_conditions_for_integration(Probe self)

        Parameters
        ----------
        self: OpenSim::Probe *

        """
        return _simulation.Probe_constructProperty_initial_conditions_for_integration(self)


    def copyProperty_gain(self, source):
        """
        copyProperty_gain(Probe self, Probe source)

        Parameters
        ----------
        source: OpenSim::Probe::Self const &

        """
        return _simulation.Probe_copyProperty_gain(self, source)


    def append_gain(self, value):
        """
        append_gain(Probe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Probe_append_gain(self, value)


    def constructProperty_gain(self, initValue):
        """
        constructProperty_gain(Probe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Probe_constructProperty_gain(self, initValue)


    def get_gain(self, *args):
        """
        get_gain(Probe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_gain(Probe self) -> double const &

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_get_gain(self, *args)


    def upd_gain(self, *args):
        """
        upd_gain(Probe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_gain(Probe self) -> double &

        Parameters
        ----------
        self: OpenSim::Probe *

        """
        return _simulation.Probe_upd_gain(self, *args)


    def set_gain(self, *args):
        """
        set_gain(Probe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_gain(Probe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Probe_set_gain(self, *args)

    __swig_setmethods__["_has_output_probe_outputs"] = _simulation.Probe__has_output_probe_outputs_set
    __swig_getmethods__["_has_output_probe_outputs"] = _simulation.Probe__has_output_probe_outputs_get
    if _newclass:
        _has_output_probe_outputs = _swig_property(_simulation.Probe__has_output_probe_outputs_get, _simulation.Probe__has_output_probe_outputs_set)

    def reset(self, s):
        """
        reset(Probe self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Probe_reset(self, s)


    def getNumInternalMeasureStates(self):
        """
        getNumInternalMeasureStates(Probe self) -> int

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_getNumInternalMeasureStates(self)


    def isEnabled(self):
        """
        isEnabled(Probe self) -> bool

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_isEnabled(self)


    def setEnabled(self, enabled):
        """
        setEnabled(Probe self, bool enabled)

        Parameters
        ----------
        enabled: bool

        """
        return _simulation.Probe_setEnabled(self, enabled)


    def getOperation(self):
        """
        getOperation(Probe self) -> std::string

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_getOperation(self)


    def setOperation(self, probe_operation):
        """
        setOperation(Probe self, std::string probe_operation)

        Parameters
        ----------
        probe_operation: std::string

        """
        return _simulation.Probe_setOperation(self, probe_operation)


    def getInitialConditions(self):
        """
        getInitialConditions(Probe self) -> Vector

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_getInitialConditions(self)


    def setInitialConditions(self, initial_conditions_for_integration):
        """
        setInitialConditions(Probe self, Vector initial_conditions_for_integration)

        Parameters
        ----------
        initial_conditions_for_integration: SimTK::Vector

        """
        return _simulation.Probe_setInitialConditions(self, initial_conditions_for_integration)


    def getGain(self):
        """
        getGain(Probe self) -> double

        Parameters
        ----------
        self: OpenSim::Probe const *

        """
        return _simulation.Probe_getGain(self)


    def setGain(self, gain):
        """
        setGain(Probe self, double gain)

        Parameters
        ----------
        gain: double

        """
        return _simulation.Probe_setGain(self, gain)


    def getProbeOutputs(self, state):
        """
        getProbeOutputs(Probe self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Probe_getProbeOutputs(self, state)


    def updateFromXMLNode(self, node, versionNumber):
        """
        updateFromXMLNode(Probe self, SimTK::Xml::Element & node, int versionNumber)

        Parameters
        ----------
        node: SimTK::Xml::Element &
        versionNumber: int

        """
        return _simulation.Probe_updateFromXMLNode(self, node, versionNumber)

    __swig_destroy__ = _simulation.delete_Probe
    __del__ = lambda self: None
Probe_swigregister = _simulation.Probe_swigregister
Probe_swigregister(Probe)

def Probe_safeDownCast(obj):
    """
    Probe_safeDownCast(OpenSimObject obj) -> Probe

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Probe_safeDownCast(obj)

def Probe_getClassName():
    """Probe_getClassName() -> std::string const &"""
    return _simulation.Probe_getClassName()

class SetProbes(ModelComponent):
    """Proxy of C++ OpenSim::Set<(OpenSim::Probe,OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetProbes, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetProbes, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetProbes

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetProbes_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetProbes self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetProbes_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetProbes_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetProbes self) -> SetProbes

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Probe,OpenSim::ModelComponent > const *

        """
        return _simulation.SetProbes_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetProbes self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Probe,OpenSim::ModelComponent > const *

        """
        return _simulation.SetProbes_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetProbes
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::Probe,OpenSim::ModelComponent)> self) -> SetProbes
        __init__(OpenSim::Set<(OpenSim::Probe,OpenSim::ModelComponent)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetProbes

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::Probe,OpenSim::ModelComponent)> self, std::string const & aFileName) -> SetProbes

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::Probe,OpenSim::ModelComponent)> self, SetProbes aSet) -> SetProbes

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Probe,OpenSim::ModelComponent > const &

        """
        this = _simulation.new_SetProbes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetProbes self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Probe,OpenSim::ModelComponent > *

        """
        return _simulation.SetProbes_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetProbes self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetProbes_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetProbes self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetProbes_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetProbes self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Probe,OpenSim::ModelComponent > const *

        """
        return _simulation.SetProbes_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetProbes self, Probe aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Probe const *
        aStartIndex: int

        getIndex(SetProbes self, Probe aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::Probe const *

        getIndex(SetProbes self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetProbes self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetProbes_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetProbes self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetProbes_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetProbes self, Probe aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Probe *

        """
        return _simulation.SetProbes_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetProbes self, Probe aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Probe const &

        """
        return _simulation.SetProbes_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetProbes self, int aIndex, Probe aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Probe *

        """
        return _simulation.SetProbes_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetProbes self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetProbes self, Probe aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Probe const *

        """
        return _simulation.SetProbes_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetProbes self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Probe,OpenSim::ModelComponent > *

        """
        return _simulation.SetProbes_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetProbes self, int aIndex, Probe aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Probe *
        preserveGroups: bool

        set(SetProbes self, int aIndex, Probe aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Probe *

        """
        return _simulation.SetProbes_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetProbes self, int aIndex) -> Probe

        Parameters
        ----------
        aIndex: int

        get(SetProbes self, std::string const & aName) -> Probe

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetProbes_get(self, *args)


    def contains(self, aName):
        """
        contains(SetProbes self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetProbes_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetProbes self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetProbes_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetProbes self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::Probe,OpenSim::ModelComponent > const *

        """
        return _simulation.SetProbes_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetProbes self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetProbes_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetProbes self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetProbes_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetProbes self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetProbes_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetProbes self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetProbes_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetProbes self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetProbes_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetProbes self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetProbes self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetProbes_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetProbes_swigregister = _simulation.SetProbes_swigregister
SetProbes_swigregister(SetProbes)

def SetProbes_safeDownCast(obj):
    """
    SetProbes_safeDownCast(OpenSimObject obj) -> SetProbes

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetProbes_safeDownCast(obj)

def SetProbes_getClassName():
    """SetProbes_getClassName() -> std::string const &"""
    return _simulation.SetProbes_getClassName()

class ModelComponentSetProbes(SetProbes):
    """Proxy of C++ OpenSim::ModelComponentSet<(OpenSim::Probe)> class."""

    __swig_setmethods__ = {}
    for _s in [SetProbes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentSetProbes, name, value)
    __swig_getmethods__ = {}
    for _s in [SetProbes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentSetProbes, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelComponentSetProbes

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelComponentSetProbes_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelComponentSetProbes self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelComponentSetProbes_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelComponentSetProbes_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelComponentSetProbes self) -> ModelComponentSetProbes

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Probe > const *

        """
        return _simulation.ModelComponentSetProbes_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentSetProbes self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Probe > const *

        """
        return _simulation.ModelComponentSetProbes_getConcreteClassName(self)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(ModelComponentSetProbes self)

        Parameters
        ----------
        self: OpenSim::ModelComponentSet< OpenSim::Probe > *

        """
        return _simulation.ModelComponentSetProbes_extendFinalizeFromProperties(self)


    def __init__(self):
        """__init__(OpenSim::ModelComponentSet<(OpenSim::Probe)> self) -> ModelComponentSetProbes"""
        this = _simulation.new_ModelComponentSetProbes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentSetProbes
    __del__ = lambda self: None
ModelComponentSetProbes_swigregister = _simulation.ModelComponentSetProbes_swigregister
ModelComponentSetProbes_swigregister(ModelComponentSetProbes)

def ModelComponentSetProbes_safeDownCast(obj):
    """
    ModelComponentSetProbes_safeDownCast(OpenSimObject obj) -> ModelComponentSetProbes

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelComponentSetProbes_safeDownCast(obj)

def ModelComponentSetProbes_getClassName():
    """ModelComponentSetProbes_getClassName() -> std::string const &"""
    return _simulation.ModelComponentSetProbes_getClassName()

class ProbeSet(ModelComponentSetProbes):
    """Proxy of C++ OpenSim::ProbeSet class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponentSetProbes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbeSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponentSetProbes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProbeSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ProbeSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ProbeSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ProbeSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ProbeSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ProbeSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ProbeSet self) -> ProbeSet

        Parameters
        ----------
        self: OpenSim::ProbeSet const *

        """
        return _simulation.ProbeSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ProbeSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ProbeSet const *

        """
        return _simulation.ProbeSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::ProbeSet self) -> ProbeSet
        __init__(OpenSim::ProbeSet self, std::string const & file, bool updateFromXML=True) -> ProbeSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::ProbeSet self, std::string const & file) -> ProbeSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_ProbeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def adoptAndAppend(self, aProbe):
        aProbe._markAdopted()
        return super(ProbeSet, self).adoptAndAppend(aProbe)

    __swig_destroy__ = _simulation.delete_ProbeSet
    __del__ = lambda self: None
ProbeSet_swigregister = _simulation.ProbeSet_swigregister
ProbeSet_swigregister(ProbeSet)

def ProbeSet_safeDownCast(obj):
    """
    ProbeSet_safeDownCast(OpenSimObject obj) -> ProbeSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ProbeSet_safeDownCast(obj)

def ProbeSet_getClassName():
    """ProbeSet_getClassName() -> std::string const &"""
    return _simulation.ProbeSet_getClassName()

class SystemEnergyProbe(Probe):
    """Proxy of C++ OpenSim::SystemEnergyProbe class."""

    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemEnergyProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemEnergyProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SystemEnergyProbe

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SystemEnergyProbe_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SystemEnergyProbe self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SystemEnergyProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SystemEnergyProbe_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SystemEnergyProbe self) -> SystemEnergyProbe

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe const *

        """
        return _simulation.SystemEnergyProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SystemEnergyProbe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe const *

        """
        return _simulation.SystemEnergyProbe_getConcreteClassName(self)


    def copyProperty_compute_kinetic_energy(self, source):
        """
        copyProperty_compute_kinetic_energy(SystemEnergyProbe self, SystemEnergyProbe source)

        Parameters
        ----------
        source: OpenSim::SystemEnergyProbe::Self const &

        """
        return _simulation.SystemEnergyProbe_copyProperty_compute_kinetic_energy(self, source)


    def append_compute_kinetic_energy(self, value):
        """
        append_compute_kinetic_energy(SystemEnergyProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.SystemEnergyProbe_append_compute_kinetic_energy(self, value)


    def constructProperty_compute_kinetic_energy(self, initValue):
        """
        constructProperty_compute_kinetic_energy(SystemEnergyProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.SystemEnergyProbe_constructProperty_compute_kinetic_energy(self, initValue)


    def get_compute_kinetic_energy(self, *args):
        """
        get_compute_kinetic_energy(SystemEnergyProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_compute_kinetic_energy(SystemEnergyProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe const *

        """
        return _simulation.SystemEnergyProbe_get_compute_kinetic_energy(self, *args)


    def upd_compute_kinetic_energy(self, *args):
        """
        upd_compute_kinetic_energy(SystemEnergyProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_compute_kinetic_energy(SystemEnergyProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe *

        """
        return _simulation.SystemEnergyProbe_upd_compute_kinetic_energy(self, *args)


    def set_compute_kinetic_energy(self, *args):
        """
        set_compute_kinetic_energy(SystemEnergyProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_compute_kinetic_energy(SystemEnergyProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.SystemEnergyProbe_set_compute_kinetic_energy(self, *args)


    def copyProperty_compute_potential_energy(self, source):
        """
        copyProperty_compute_potential_energy(SystemEnergyProbe self, SystemEnergyProbe source)

        Parameters
        ----------
        source: OpenSim::SystemEnergyProbe::Self const &

        """
        return _simulation.SystemEnergyProbe_copyProperty_compute_potential_energy(self, source)


    def append_compute_potential_energy(self, value):
        """
        append_compute_potential_energy(SystemEnergyProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.SystemEnergyProbe_append_compute_potential_energy(self, value)


    def constructProperty_compute_potential_energy(self, initValue):
        """
        constructProperty_compute_potential_energy(SystemEnergyProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.SystemEnergyProbe_constructProperty_compute_potential_energy(self, initValue)


    def get_compute_potential_energy(self, *args):
        """
        get_compute_potential_energy(SystemEnergyProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_compute_potential_energy(SystemEnergyProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe const *

        """
        return _simulation.SystemEnergyProbe_get_compute_potential_energy(self, *args)


    def upd_compute_potential_energy(self, *args):
        """
        upd_compute_potential_energy(SystemEnergyProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_compute_potential_energy(SystemEnergyProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe *

        """
        return _simulation.SystemEnergyProbe_upd_compute_potential_energy(self, *args)


    def set_compute_potential_energy(self, *args):
        """
        set_compute_potential_energy(SystemEnergyProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_compute_potential_energy(SystemEnergyProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.SystemEnergyProbe_set_compute_potential_energy(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::SystemEnergyProbe self) -> SystemEnergyProbe
        __init__(OpenSim::SystemEnergyProbe self, bool computeKE, bool computePE) -> SystemEnergyProbe

        Parameters
        ----------
        computeKE: bool
        computePE: bool

        """
        this = _simulation.new_SystemEnergyProbe(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getComputeKineticEnergy(self):
        """
        getComputeKineticEnergy(SystemEnergyProbe self) -> bool

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe const *

        """
        return _simulation.SystemEnergyProbe_getComputeKineticEnergy(self)


    def getComputePotentialEnergy(self):
        """
        getComputePotentialEnergy(SystemEnergyProbe self) -> bool

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe const *

        """
        return _simulation.SystemEnergyProbe_getComputePotentialEnergy(self)


    def setComputeKineticEnergy(self, c):
        """
        setComputeKineticEnergy(SystemEnergyProbe self, bool c)

        Parameters
        ----------
        c: bool

        """
        return _simulation.SystemEnergyProbe_setComputeKineticEnergy(self, c)


    def setComputePotentialEnergy(self, c):
        """
        setComputePotentialEnergy(SystemEnergyProbe self, bool c)

        Parameters
        ----------
        c: bool

        """
        return _simulation.SystemEnergyProbe_setComputePotentialEnergy(self, c)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(SystemEnergyProbe self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.SystemEnergyProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(SystemEnergyProbe self) -> int

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe const *

        """
        return _simulation.SystemEnergyProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(SystemEnergyProbe self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::SystemEnergyProbe const *

        """
        return _simulation.SystemEnergyProbe_getProbeOutputLabels(self)

    __swig_destroy__ = _simulation.delete_SystemEnergyProbe
    __del__ = lambda self: None
SystemEnergyProbe_swigregister = _simulation.SystemEnergyProbe_swigregister
SystemEnergyProbe_swigregister(SystemEnergyProbe)

def SystemEnergyProbe_safeDownCast(obj):
    """
    SystemEnergyProbe_safeDownCast(OpenSimObject obj) -> SystemEnergyProbe

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SystemEnergyProbe_safeDownCast(obj)

def SystemEnergyProbe_getClassName():
    """SystemEnergyProbe_getClassName() -> std::string const &"""
    return _simulation.SystemEnergyProbe_getClassName()

class JointInternalPowerProbe(Probe):
    """Proxy of C++ OpenSim::JointInternalPowerProbe class."""

    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointInternalPowerProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointInternalPowerProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> JointInternalPowerProbe

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.JointInternalPowerProbe_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(JointInternalPowerProbe self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.JointInternalPowerProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.JointInternalPowerProbe_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(JointInternalPowerProbe self) -> JointInternalPowerProbe

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(JointInternalPowerProbe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_getConcreteClassName(self)


    def copyProperty_joint_names(self, source):
        """
        copyProperty_joint_names(JointInternalPowerProbe self, JointInternalPowerProbe source)

        Parameters
        ----------
        source: OpenSim::JointInternalPowerProbe::Self const &

        """
        return _simulation.JointInternalPowerProbe_copyProperty_joint_names(self, source)


    def get_joint_names(self, i):
        """
        get_joint_names(JointInternalPowerProbe self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _simulation.JointInternalPowerProbe_get_joint_names(self, i)


    def upd_joint_names(self, i):
        """
        upd_joint_names(JointInternalPowerProbe self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _simulation.JointInternalPowerProbe_upd_joint_names(self, i)


    def set_joint_names(self, i, value):
        """
        set_joint_names(JointInternalPowerProbe self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _simulation.JointInternalPowerProbe_set_joint_names(self, i, value)


    def append_joint_names(self, value):
        """
        append_joint_names(JointInternalPowerProbe self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.JointInternalPowerProbe_append_joint_names(self, value)


    def constructProperty_joint_names(self):
        """
        constructProperty_joint_names(JointInternalPowerProbe self)

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe *

        """
        return _simulation.JointInternalPowerProbe_constructProperty_joint_names(self)


    def copyProperty_sum_powers_together(self, source):
        """
        copyProperty_sum_powers_together(JointInternalPowerProbe self, JointInternalPowerProbe source)

        Parameters
        ----------
        source: OpenSim::JointInternalPowerProbe::Self const &

        """
        return _simulation.JointInternalPowerProbe_copyProperty_sum_powers_together(self, source)


    def append_sum_powers_together(self, value):
        """
        append_sum_powers_together(JointInternalPowerProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.JointInternalPowerProbe_append_sum_powers_together(self, value)


    def constructProperty_sum_powers_together(self, initValue):
        """
        constructProperty_sum_powers_together(JointInternalPowerProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.JointInternalPowerProbe_constructProperty_sum_powers_together(self, initValue)


    def get_sum_powers_together(self, *args):
        """
        get_sum_powers_together(JointInternalPowerProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_sum_powers_together(JointInternalPowerProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_get_sum_powers_together(self, *args)


    def upd_sum_powers_together(self, *args):
        """
        upd_sum_powers_together(JointInternalPowerProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_sum_powers_together(JointInternalPowerProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe *

        """
        return _simulation.JointInternalPowerProbe_upd_sum_powers_together(self, *args)


    def set_sum_powers_together(self, *args):
        """
        set_sum_powers_together(JointInternalPowerProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_sum_powers_together(JointInternalPowerProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.JointInternalPowerProbe_set_sum_powers_together(self, *args)


    def copyProperty_exponent(self, source):
        """
        copyProperty_exponent(JointInternalPowerProbe self, JointInternalPowerProbe source)

        Parameters
        ----------
        source: OpenSim::JointInternalPowerProbe::Self const &

        """
        return _simulation.JointInternalPowerProbe_copyProperty_exponent(self, source)


    def append_exponent(self, value):
        """
        append_exponent(JointInternalPowerProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.JointInternalPowerProbe_append_exponent(self, value)


    def constructProperty_exponent(self, initValue):
        """
        constructProperty_exponent(JointInternalPowerProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.JointInternalPowerProbe_constructProperty_exponent(self, initValue)


    def get_exponent(self, *args):
        """
        get_exponent(JointInternalPowerProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_exponent(JointInternalPowerProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_get_exponent(self, *args)


    def upd_exponent(self, *args):
        """
        upd_exponent(JointInternalPowerProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_exponent(JointInternalPowerProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe *

        """
        return _simulation.JointInternalPowerProbe_upd_exponent(self, *args)


    def set_exponent(self, *args):
        """
        set_exponent(JointInternalPowerProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_exponent(JointInternalPowerProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.JointInternalPowerProbe_set_exponent(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::JointInternalPowerProbe self) -> JointInternalPowerProbe
        __init__(OpenSim::JointInternalPowerProbe self, ArrayStr joint_names, bool const sum_powers_together, double const exponent) -> JointInternalPowerProbe

        Parameters
        ----------
        joint_names: OpenSim::Array< std::string > const &
        sum_powers_together: bool const
        exponent: double const

        """
        this = _simulation.new_JointInternalPowerProbe(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getJointNames(self):
        """
        getJointNames(JointInternalPowerProbe self) -> PropertyString

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_getJointNames(self)


    def getSumPowersTogether(self):
        """
        getSumPowersTogether(JointInternalPowerProbe self) -> bool const

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_getSumPowersTogether(self)


    def getExponent(self):
        """
        getExponent(JointInternalPowerProbe self) -> double const

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_getExponent(self)


    def setJointNames(self, aJointNames):
        """
        setJointNames(JointInternalPowerProbe self, ArrayStr aJointNames)

        Parameters
        ----------
        aJointNames: OpenSim::Array< std::string > const &

        """
        return _simulation.JointInternalPowerProbe_setJointNames(self, aJointNames)


    def setSumPowersTogether(self, sum_powers_together):
        """
        setSumPowersTogether(JointInternalPowerProbe self, bool sum_powers_together)

        Parameters
        ----------
        sum_powers_together: bool

        """
        return _simulation.JointInternalPowerProbe_setSumPowersTogether(self, sum_powers_together)


    def setExponent(self, exponent):
        """
        setExponent(JointInternalPowerProbe self, double const exponent)

        Parameters
        ----------
        exponent: double const

        """
        return _simulation.JointInternalPowerProbe_setExponent(self, exponent)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(JointInternalPowerProbe self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.JointInternalPowerProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(JointInternalPowerProbe self) -> int

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(JointInternalPowerProbe self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::JointInternalPowerProbe const *

        """
        return _simulation.JointInternalPowerProbe_getProbeOutputLabels(self)

    __swig_destroy__ = _simulation.delete_JointInternalPowerProbe
    __del__ = lambda self: None
JointInternalPowerProbe_swigregister = _simulation.JointInternalPowerProbe_swigregister
JointInternalPowerProbe_swigregister(JointInternalPowerProbe)

def JointInternalPowerProbe_safeDownCast(obj):
    """
    JointInternalPowerProbe_safeDownCast(OpenSimObject obj) -> JointInternalPowerProbe

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.JointInternalPowerProbe_safeDownCast(obj)

def JointInternalPowerProbe_getClassName():
    """JointInternalPowerProbe_getClassName() -> std::string const &"""
    return _simulation.JointInternalPowerProbe_getClassName()

class ActuatorPowerProbe(Probe):
    """Proxy of C++ OpenSim::ActuatorPowerProbe class."""

    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActuatorPowerProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActuatorPowerProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ActuatorPowerProbe

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ActuatorPowerProbe_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ActuatorPowerProbe self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ActuatorPowerProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ActuatorPowerProbe_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ActuatorPowerProbe self) -> ActuatorPowerProbe

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActuatorPowerProbe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_getConcreteClassName(self)


    def copyProperty_actuator_names(self, source):
        """
        copyProperty_actuator_names(ActuatorPowerProbe self, ActuatorPowerProbe source)

        Parameters
        ----------
        source: OpenSim::ActuatorPowerProbe::Self const &

        """
        return _simulation.ActuatorPowerProbe_copyProperty_actuator_names(self, source)


    def get_actuator_names(self, i):
        """
        get_actuator_names(ActuatorPowerProbe self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _simulation.ActuatorPowerProbe_get_actuator_names(self, i)


    def upd_actuator_names(self, i):
        """
        upd_actuator_names(ActuatorPowerProbe self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _simulation.ActuatorPowerProbe_upd_actuator_names(self, i)


    def set_actuator_names(self, i, value):
        """
        set_actuator_names(ActuatorPowerProbe self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _simulation.ActuatorPowerProbe_set_actuator_names(self, i, value)


    def append_actuator_names(self, value):
        """
        append_actuator_names(ActuatorPowerProbe self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ActuatorPowerProbe_append_actuator_names(self, value)


    def constructProperty_actuator_names(self):
        """
        constructProperty_actuator_names(ActuatorPowerProbe self)

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe *

        """
        return _simulation.ActuatorPowerProbe_constructProperty_actuator_names(self)


    def copyProperty_sum_powers_together(self, source):
        """
        copyProperty_sum_powers_together(ActuatorPowerProbe self, ActuatorPowerProbe source)

        Parameters
        ----------
        source: OpenSim::ActuatorPowerProbe::Self const &

        """
        return _simulation.ActuatorPowerProbe_copyProperty_sum_powers_together(self, source)


    def append_sum_powers_together(self, value):
        """
        append_sum_powers_together(ActuatorPowerProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.ActuatorPowerProbe_append_sum_powers_together(self, value)


    def constructProperty_sum_powers_together(self, initValue):
        """
        constructProperty_sum_powers_together(ActuatorPowerProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.ActuatorPowerProbe_constructProperty_sum_powers_together(self, initValue)


    def get_sum_powers_together(self, *args):
        """
        get_sum_powers_together(ActuatorPowerProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_sum_powers_together(ActuatorPowerProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_get_sum_powers_together(self, *args)


    def upd_sum_powers_together(self, *args):
        """
        upd_sum_powers_together(ActuatorPowerProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_sum_powers_together(ActuatorPowerProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe *

        """
        return _simulation.ActuatorPowerProbe_upd_sum_powers_together(self, *args)


    def set_sum_powers_together(self, *args):
        """
        set_sum_powers_together(ActuatorPowerProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_sum_powers_together(ActuatorPowerProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.ActuatorPowerProbe_set_sum_powers_together(self, *args)


    def copyProperty_exponent(self, source):
        """
        copyProperty_exponent(ActuatorPowerProbe self, ActuatorPowerProbe source)

        Parameters
        ----------
        source: OpenSim::ActuatorPowerProbe::Self const &

        """
        return _simulation.ActuatorPowerProbe_copyProperty_exponent(self, source)


    def append_exponent(self, value):
        """
        append_exponent(ActuatorPowerProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActuatorPowerProbe_append_exponent(self, value)


    def constructProperty_exponent(self, initValue):
        """
        constructProperty_exponent(ActuatorPowerProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActuatorPowerProbe_constructProperty_exponent(self, initValue)


    def get_exponent(self, *args):
        """
        get_exponent(ActuatorPowerProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_exponent(ActuatorPowerProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_get_exponent(self, *args)


    def upd_exponent(self, *args):
        """
        upd_exponent(ActuatorPowerProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_exponent(ActuatorPowerProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe *

        """
        return _simulation.ActuatorPowerProbe_upd_exponent(self, *args)


    def set_exponent(self, *args):
        """
        set_exponent(ActuatorPowerProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_exponent(ActuatorPowerProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActuatorPowerProbe_set_exponent(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ActuatorPowerProbe self) -> ActuatorPowerProbe
        __init__(OpenSim::ActuatorPowerProbe self, ArrayStr actuator_names, bool const sum_powers_together, double const exponent) -> ActuatorPowerProbe

        Parameters
        ----------
        actuator_names: OpenSim::Array< std::string > const
        sum_powers_together: bool const
        exponent: double const

        """
        this = _simulation.new_ActuatorPowerProbe(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getActuatorNames(self):
        """
        getActuatorNames(ActuatorPowerProbe self) -> PropertyString

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_getActuatorNames(self)


    def getSumPowersTogether(self):
        """
        getSumPowersTogether(ActuatorPowerProbe self) -> bool const

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_getSumPowersTogether(self)


    def getExponent(self):
        """
        getExponent(ActuatorPowerProbe self) -> double const

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_getExponent(self)


    def setActuatorNames(self, actuatorNames):
        """
        setActuatorNames(ActuatorPowerProbe self, ArrayStr actuatorNames)

        Parameters
        ----------
        actuatorNames: OpenSim::Array< std::string > const &

        """
        return _simulation.ActuatorPowerProbe_setActuatorNames(self, actuatorNames)


    def setSumPowersTogether(self, sum_powers_together):
        """
        setSumPowersTogether(ActuatorPowerProbe self, bool sum_powers_together)

        Parameters
        ----------
        sum_powers_together: bool

        """
        return _simulation.ActuatorPowerProbe_setSumPowersTogether(self, sum_powers_together)


    def setExponent(self, exponent):
        """
        setExponent(ActuatorPowerProbe self, double const exponent)

        Parameters
        ----------
        exponent: double const

        """
        return _simulation.ActuatorPowerProbe_setExponent(self, exponent)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(ActuatorPowerProbe self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ActuatorPowerProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(ActuatorPowerProbe self) -> int

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(ActuatorPowerProbe self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ActuatorPowerProbe const *

        """
        return _simulation.ActuatorPowerProbe_getProbeOutputLabels(self)


    def extendConnectToModel(self, aModel):
        """
        extendConnectToModel(ActuatorPowerProbe self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.ActuatorPowerProbe_extendConnectToModel(self, aModel)

    __swig_destroy__ = _simulation.delete_ActuatorPowerProbe
    __del__ = lambda self: None
ActuatorPowerProbe_swigregister = _simulation.ActuatorPowerProbe_swigregister
ActuatorPowerProbe_swigregister(ActuatorPowerProbe)

def ActuatorPowerProbe_safeDownCast(obj):
    """
    ActuatorPowerProbe_safeDownCast(OpenSimObject obj) -> ActuatorPowerProbe

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ActuatorPowerProbe_safeDownCast(obj)

def ActuatorPowerProbe_getClassName():
    """ActuatorPowerProbe_getClassName() -> std::string const &"""
    return _simulation.ActuatorPowerProbe_getClassName()

class ActuatorForceProbe(Probe):
    """Proxy of C++ OpenSim::ActuatorForceProbe class."""

    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActuatorForceProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActuatorForceProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ActuatorForceProbe

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ActuatorForceProbe_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ActuatorForceProbe self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ActuatorForceProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ActuatorForceProbe_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ActuatorForceProbe self) -> ActuatorForceProbe

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActuatorForceProbe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_getConcreteClassName(self)


    def copyProperty_actuator_names(self, source):
        """
        copyProperty_actuator_names(ActuatorForceProbe self, ActuatorForceProbe source)

        Parameters
        ----------
        source: OpenSim::ActuatorForceProbe::Self const &

        """
        return _simulation.ActuatorForceProbe_copyProperty_actuator_names(self, source)


    def get_actuator_names(self, i):
        """
        get_actuator_names(ActuatorForceProbe self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _simulation.ActuatorForceProbe_get_actuator_names(self, i)


    def upd_actuator_names(self, i):
        """
        upd_actuator_names(ActuatorForceProbe self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _simulation.ActuatorForceProbe_upd_actuator_names(self, i)


    def set_actuator_names(self, i, value):
        """
        set_actuator_names(ActuatorForceProbe self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _simulation.ActuatorForceProbe_set_actuator_names(self, i, value)


    def append_actuator_names(self, value):
        """
        append_actuator_names(ActuatorForceProbe self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ActuatorForceProbe_append_actuator_names(self, value)


    def constructProperty_actuator_names(self):
        """
        constructProperty_actuator_names(ActuatorForceProbe self)

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe *

        """
        return _simulation.ActuatorForceProbe_constructProperty_actuator_names(self)


    def copyProperty_sum_forces_together(self, source):
        """
        copyProperty_sum_forces_together(ActuatorForceProbe self, ActuatorForceProbe source)

        Parameters
        ----------
        source: OpenSim::ActuatorForceProbe::Self const &

        """
        return _simulation.ActuatorForceProbe_copyProperty_sum_forces_together(self, source)


    def append_sum_forces_together(self, value):
        """
        append_sum_forces_together(ActuatorForceProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.ActuatorForceProbe_append_sum_forces_together(self, value)


    def constructProperty_sum_forces_together(self, initValue):
        """
        constructProperty_sum_forces_together(ActuatorForceProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.ActuatorForceProbe_constructProperty_sum_forces_together(self, initValue)


    def get_sum_forces_together(self, *args):
        """
        get_sum_forces_together(ActuatorForceProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_sum_forces_together(ActuatorForceProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_get_sum_forces_together(self, *args)


    def upd_sum_forces_together(self, *args):
        """
        upd_sum_forces_together(ActuatorForceProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_sum_forces_together(ActuatorForceProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe *

        """
        return _simulation.ActuatorForceProbe_upd_sum_forces_together(self, *args)


    def set_sum_forces_together(self, *args):
        """
        set_sum_forces_together(ActuatorForceProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_sum_forces_together(ActuatorForceProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.ActuatorForceProbe_set_sum_forces_together(self, *args)


    def copyProperty_exponent(self, source):
        """
        copyProperty_exponent(ActuatorForceProbe self, ActuatorForceProbe source)

        Parameters
        ----------
        source: OpenSim::ActuatorForceProbe::Self const &

        """
        return _simulation.ActuatorForceProbe_copyProperty_exponent(self, source)


    def append_exponent(self, value):
        """
        append_exponent(ActuatorForceProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActuatorForceProbe_append_exponent(self, value)


    def constructProperty_exponent(self, initValue):
        """
        constructProperty_exponent(ActuatorForceProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActuatorForceProbe_constructProperty_exponent(self, initValue)


    def get_exponent(self, *args):
        """
        get_exponent(ActuatorForceProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_exponent(ActuatorForceProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_get_exponent(self, *args)


    def upd_exponent(self, *args):
        """
        upd_exponent(ActuatorForceProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_exponent(ActuatorForceProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe *

        """
        return _simulation.ActuatorForceProbe_upd_exponent(self, *args)


    def set_exponent(self, *args):
        """
        set_exponent(ActuatorForceProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_exponent(ActuatorForceProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActuatorForceProbe_set_exponent(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ActuatorForceProbe self) -> ActuatorForceProbe
        __init__(OpenSim::ActuatorForceProbe self, ArrayStr actuator_names, bool const sum_forces_together, double const exponent) -> ActuatorForceProbe

        Parameters
        ----------
        actuator_names: OpenSim::Array< std::string > const &
        sum_forces_together: bool const
        exponent: double const

        """
        this = _simulation.new_ActuatorForceProbe(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getActuatorNames(self):
        """
        getActuatorNames(ActuatorForceProbe self) -> PropertyString

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_getActuatorNames(self)


    def getSumForcesTogether(self):
        """
        getSumForcesTogether(ActuatorForceProbe self) -> bool const

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_getSumForcesTogether(self)


    def getExponent(self):
        """
        getExponent(ActuatorForceProbe self) -> double const

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_getExponent(self)


    def setActuatorNames(self, actuatorNames):
        """
        setActuatorNames(ActuatorForceProbe self, ArrayStr actuatorNames)

        Parameters
        ----------
        actuatorNames: OpenSim::Array< std::string > const &

        """
        return _simulation.ActuatorForceProbe_setActuatorNames(self, actuatorNames)


    def setSumForcesTogether(self, sum_forces_together):
        """
        setSumForcesTogether(ActuatorForceProbe self, bool sum_forces_together)

        Parameters
        ----------
        sum_forces_together: bool

        """
        return _simulation.ActuatorForceProbe_setSumForcesTogether(self, sum_forces_together)


    def setExponent(self, exponent):
        """
        setExponent(ActuatorForceProbe self, double const exponent)

        Parameters
        ----------
        exponent: double const

        """
        return _simulation.ActuatorForceProbe_setExponent(self, exponent)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(ActuatorForceProbe self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ActuatorForceProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(ActuatorForceProbe self) -> int

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(ActuatorForceProbe self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ActuatorForceProbe const *

        """
        return _simulation.ActuatorForceProbe_getProbeOutputLabels(self)


    def extendConnectToModel(self, model):
        """
        extendConnectToModel(ActuatorForceProbe self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _simulation.ActuatorForceProbe_extendConnectToModel(self, model)

    __swig_destroy__ = _simulation.delete_ActuatorForceProbe
    __del__ = lambda self: None
ActuatorForceProbe_swigregister = _simulation.ActuatorForceProbe_swigregister
ActuatorForceProbe_swigregister(ActuatorForceProbe)

def ActuatorForceProbe_safeDownCast(obj):
    """
    ActuatorForceProbe_safeDownCast(OpenSimObject obj) -> ActuatorForceProbe

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ActuatorForceProbe_safeDownCast(obj)

def ActuatorForceProbe_getClassName():
    """ActuatorForceProbe_getClassName() -> std::string const &"""
    return _simulation.ActuatorForceProbe_getClassName()

class MuscleActiveFiberPowerProbe(Probe):
    """Proxy of C++ OpenSim::MuscleActiveFiberPowerProbe class."""

    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleActiveFiberPowerProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleActiveFiberPowerProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MuscleActiveFiberPowerProbe

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.MuscleActiveFiberPowerProbe_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MuscleActiveFiberPowerProbe self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.MuscleActiveFiberPowerProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.MuscleActiveFiberPowerProbe_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MuscleActiveFiberPowerProbe self) -> MuscleActiveFiberPowerProbe

        Parameters
        ----------
        self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _simulation.MuscleActiveFiberPowerProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleActiveFiberPowerProbe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _simulation.MuscleActiveFiberPowerProbe_getConcreteClassName(self)


    def copyProperty_muscle_names(self, source):
        """
        copyProperty_muscle_names(MuscleActiveFiberPowerProbe self, MuscleActiveFiberPowerProbe source)

        Parameters
        ----------
        source: OpenSim::MuscleActiveFiberPowerProbe::Self const &

        """
        return _simulation.MuscleActiveFiberPowerProbe_copyProperty_muscle_names(self, source)


    def get_muscle_names(self, i):
        """
        get_muscle_names(MuscleActiveFiberPowerProbe self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _simulation.MuscleActiveFiberPowerProbe_get_muscle_names(self, i)


    def upd_muscle_names(self, i):
        """
        upd_muscle_names(MuscleActiveFiberPowerProbe self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _simulation.MuscleActiveFiberPowerProbe_upd_muscle_names(self, i)


    def set_muscle_names(self, i, value):
        """
        set_muscle_names(MuscleActiveFiberPowerProbe self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _simulation.MuscleActiveFiberPowerProbe_set_muscle_names(self, i, value)


    def append_muscle_names(self, value):
        """
        append_muscle_names(MuscleActiveFiberPowerProbe self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.MuscleActiveFiberPowerProbe_append_muscle_names(self, value)


    def constructProperty_muscle_names(self):
        """
        constructProperty_muscle_names(MuscleActiveFiberPowerProbe self)

        Parameters
        ----------
        self: OpenSim::MuscleActiveFiberPowerProbe *

        """
        return _simulation.MuscleActiveFiberPowerProbe_constructProperty_muscle_names(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MuscleActiveFiberPowerProbe self) -> MuscleActiveFiberPowerProbe
        __init__(OpenSim::MuscleActiveFiberPowerProbe self, ArrayStr muscle_names) -> MuscleActiveFiberPowerProbe

        Parameters
        ----------
        muscle_names: OpenSim::Array< std::string > const

        """
        this = _simulation.new_MuscleActiveFiberPowerProbe(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMuscleNames(self):
        """
        getMuscleNames(MuscleActiveFiberPowerProbe self) -> PropertyString

        Parameters
        ----------
        self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _simulation.MuscleActiveFiberPowerProbe_getMuscleNames(self)


    def setMuscleNames(self, muscleNames):
        """
        setMuscleNames(MuscleActiveFiberPowerProbe self, ArrayStr muscleNames)

        Parameters
        ----------
        muscleNames: OpenSim::Array< std::string > const &

        """
        return _simulation.MuscleActiveFiberPowerProbe_setMuscleNames(self, muscleNames)


    def computeProbeInputs(self, state):
        """
        computeProbeInputs(MuscleActiveFiberPowerProbe self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.MuscleActiveFiberPowerProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(MuscleActiveFiberPowerProbe self) -> int

        Parameters
        ----------
        self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _simulation.MuscleActiveFiberPowerProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(MuscleActiveFiberPowerProbe self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::MuscleActiveFiberPowerProbe const *

        """
        return _simulation.MuscleActiveFiberPowerProbe_getProbeOutputLabels(self)

    __swig_destroy__ = _simulation.delete_MuscleActiveFiberPowerProbe
    __del__ = lambda self: None
MuscleActiveFiberPowerProbe_swigregister = _simulation.MuscleActiveFiberPowerProbe_swigregister
MuscleActiveFiberPowerProbe_swigregister(MuscleActiveFiberPowerProbe)

def MuscleActiveFiberPowerProbe_safeDownCast(obj):
    """
    MuscleActiveFiberPowerProbe_safeDownCast(OpenSimObject obj) -> MuscleActiveFiberPowerProbe

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.MuscleActiveFiberPowerProbe_safeDownCast(obj)

def MuscleActiveFiberPowerProbe_getClassName():
    """MuscleActiveFiberPowerProbe_getClassName() -> std::string const &"""
    return _simulation.MuscleActiveFiberPowerProbe_getClassName()

class Bhargava2004MuscleMetabolicsProbe(Probe):
    """Proxy of C++ OpenSim::Bhargava2004MuscleMetabolicsProbe class."""

    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bhargava2004MuscleMetabolicsProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bhargava2004MuscleMetabolicsProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Bhargava2004MuscleMetabolicsProbe self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Bhargava2004MuscleMetabolicsProbe self) -> Bhargava2004MuscleMetabolicsProbe

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Bhargava2004MuscleMetabolicsProbe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getConcreteClassName(self)


    def copyProperty_activation_rate_on(self, source):
        """
        copyProperty_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_activation_rate_on(self, source)


    def append_activation_rate_on(self, value):
        """
        append_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_activation_rate_on(self, value)


    def constructProperty_activation_rate_on(self, initValue):
        """
        constructProperty_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_activation_rate_on(self, initValue)


    def get_activation_rate_on(self, *args):
        """
        get_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_activation_rate_on(self, *args)


    def upd_activation_rate_on(self, *args):
        """
        upd_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_activation_rate_on(self, *args)


    def set_activation_rate_on(self, *args):
        """
        set_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_activation_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_activation_rate_on(self, *args)


    def copyProperty_maintenance_rate_on(self, source):
        """
        copyProperty_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_maintenance_rate_on(self, source)


    def append_maintenance_rate_on(self, value):
        """
        append_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_maintenance_rate_on(self, value)


    def constructProperty_maintenance_rate_on(self, initValue):
        """
        constructProperty_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_maintenance_rate_on(self, initValue)


    def get_maintenance_rate_on(self, *args):
        """
        get_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_maintenance_rate_on(self, *args)


    def upd_maintenance_rate_on(self, *args):
        """
        upd_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_maintenance_rate_on(self, *args)


    def set_maintenance_rate_on(self, *args):
        """
        set_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_maintenance_rate_on(self, *args)


    def copyProperty_shortening_rate_on(self, source):
        """
        copyProperty_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_shortening_rate_on(self, source)


    def append_shortening_rate_on(self, value):
        """
        append_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_shortening_rate_on(self, value)


    def constructProperty_shortening_rate_on(self, initValue):
        """
        constructProperty_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_shortening_rate_on(self, initValue)


    def get_shortening_rate_on(self, *args):
        """
        get_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_shortening_rate_on(self, *args)


    def upd_shortening_rate_on(self, *args):
        """
        upd_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_shortening_rate_on(self, *args)


    def set_shortening_rate_on(self, *args):
        """
        set_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_shortening_rate_on(self, *args)


    def copyProperty_basal_rate_on(self, source):
        """
        copyProperty_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_rate_on(self, source)


    def append_basal_rate_on(self, value):
        """
        append_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_basal_rate_on(self, value)


    def constructProperty_basal_rate_on(self, initValue):
        """
        constructProperty_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_rate_on(self, initValue)


    def get_basal_rate_on(self, *args):
        """
        get_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_basal_rate_on(self, *args)


    def upd_basal_rate_on(self, *args):
        """
        upd_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_basal_rate_on(self, *args)


    def set_basal_rate_on(self, *args):
        """
        set_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_basal_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_basal_rate_on(self, *args)


    def copyProperty_mechanical_work_rate_on(self, source):
        """
        copyProperty_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_mechanical_work_rate_on(self, source)


    def append_mechanical_work_rate_on(self, value):
        """
        append_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_mechanical_work_rate_on(self, value)


    def constructProperty_mechanical_work_rate_on(self, initValue):
        """
        constructProperty_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_mechanical_work_rate_on(self, initValue)


    def get_mechanical_work_rate_on(self, *args):
        """
        get_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_mechanical_work_rate_on(self, *args)


    def upd_mechanical_work_rate_on(self, *args):
        """
        upd_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_mechanical_work_rate_on(self, *args)


    def set_mechanical_work_rate_on(self, *args):
        """
        set_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_mechanical_work_rate_on(self, *args)


    def copyProperty_enforce_minimum_heat_rate_per_muscle(self, source):
        """
        copyProperty_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_enforce_minimum_heat_rate_per_muscle(self, source)


    def append_enforce_minimum_heat_rate_per_muscle(self, value):
        """
        append_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_enforce_minimum_heat_rate_per_muscle(self, value)


    def constructProperty_enforce_minimum_heat_rate_per_muscle(self, initValue):
        """
        constructProperty_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_enforce_minimum_heat_rate_per_muscle(self, initValue)


    def get_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        get_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_enforce_minimum_heat_rate_per_muscle(self, *args)


    def upd_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        upd_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_enforce_minimum_heat_rate_per_muscle(self, *args)


    def set_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        set_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_enforce_minimum_heat_rate_per_muscle(self, *args)


    def copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, source):
        """
        copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, source)


    def append_normalized_fiber_length_dependence_on_maintenance_rate(self, value):
        """
        append_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, PiecewiseLinearFunction value) -> int

        Parameters
        ----------
        value: OpenSim::PiecewiseLinearFunction const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_normalized_fiber_length_dependence_on_maintenance_rate(self, value)


    def constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, initValue):
        """
        constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, PiecewiseLinearFunction initValue)

        Parameters
        ----------
        initValue: OpenSim::PiecewiseLinearFunction const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, initValue)


    def get_normalized_fiber_length_dependence_on_maintenance_rate(self, *args):
        """
        get_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, int i) -> PiecewiseLinearFunction

        Parameters
        ----------
        i: int

        get_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self) -> PiecewiseLinearFunction

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_normalized_fiber_length_dependence_on_maintenance_rate(self, *args)


    def upd_normalized_fiber_length_dependence_on_maintenance_rate(self, *args):
        """
        upd_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, int i) -> PiecewiseLinearFunction

        Parameters
        ----------
        i: int

        upd_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self) -> PiecewiseLinearFunction

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_normalized_fiber_length_dependence_on_maintenance_rate(self, *args)


    def set_normalized_fiber_length_dependence_on_maintenance_rate(self, *args):
        """
        set_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, int i, PiecewiseLinearFunction value)

        Parameters
        ----------
        i: int
        value: OpenSim::PiecewiseLinearFunction const &

        set_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe self, PiecewiseLinearFunction value)

        Parameters
        ----------
        value: OpenSim::PiecewiseLinearFunction const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_normalized_fiber_length_dependence_on_maintenance_rate(self, *args)


    def copyProperty_use_force_dependent_shortening_prop_constant(self, source):
        """
        copyProperty_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_use_force_dependent_shortening_prop_constant(self, source)


    def append_use_force_dependent_shortening_prop_constant(self, value):
        """
        append_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_use_force_dependent_shortening_prop_constant(self, value)


    def constructProperty_use_force_dependent_shortening_prop_constant(self, initValue):
        """
        constructProperty_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_use_force_dependent_shortening_prop_constant(self, initValue)


    def get_use_force_dependent_shortening_prop_constant(self, *args):
        """
        get_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_use_force_dependent_shortening_prop_constant(self, *args)


    def upd_use_force_dependent_shortening_prop_constant(self, *args):
        """
        upd_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_use_force_dependent_shortening_prop_constant(self, *args)


    def set_use_force_dependent_shortening_prop_constant(self, *args):
        """
        set_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_use_force_dependent_shortening_prop_constant(self, *args)


    def copyProperty_basal_coefficient(self, source):
        """
        copyProperty_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_coefficient(self, source)


    def append_basal_coefficient(self, value):
        """
        append_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_basal_coefficient(self, value)


    def constructProperty_basal_coefficient(self, initValue):
        """
        constructProperty_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_coefficient(self, initValue)


    def get_basal_coefficient(self, *args):
        """
        get_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_basal_coefficient(self, *args)


    def upd_basal_coefficient(self, *args):
        """
        upd_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_basal_coefficient(self, *args)


    def set_basal_coefficient(self, *args):
        """
        set_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_basal_coefficient(Bhargava2004MuscleMetabolicsProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_basal_coefficient(self, *args)


    def copyProperty_basal_exponent(self, source):
        """
        copyProperty_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_exponent(self, source)


    def append_basal_exponent(self, value):
        """
        append_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_basal_exponent(self, value)


    def constructProperty_basal_exponent(self, initValue):
        """
        constructProperty_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_exponent(self, initValue)


    def get_basal_exponent(self, *args):
        """
        get_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_basal_exponent(Bhargava2004MuscleMetabolicsProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_basal_exponent(self, *args)


    def upd_basal_exponent(self, *args):
        """
        upd_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_basal_exponent(Bhargava2004MuscleMetabolicsProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_basal_exponent(self, *args)


    def set_basal_exponent(self, *args):
        """
        set_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_basal_exponent(Bhargava2004MuscleMetabolicsProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_basal_exponent(self, *args)


    def copyProperty_muscle_effort_scaling_factor(self, source):
        """
        copyProperty_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_muscle_effort_scaling_factor(self, source)


    def append_muscle_effort_scaling_factor(self, value):
        """
        append_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_muscle_effort_scaling_factor(self, value)


    def constructProperty_muscle_effort_scaling_factor(self, initValue):
        """
        constructProperty_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_muscle_effort_scaling_factor(self, initValue)


    def get_muscle_effort_scaling_factor(self, *args):
        """
        get_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_muscle_effort_scaling_factor(self, *args)


    def upd_muscle_effort_scaling_factor(self, *args):
        """
        upd_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_muscle_effort_scaling_factor(self, *args)


    def set_muscle_effort_scaling_factor(self, *args):
        """
        set_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_muscle_effort_scaling_factor(self, *args)


    def copyProperty_include_negative_mechanical_work(self, source):
        """
        copyProperty_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_include_negative_mechanical_work(self, source)


    def append_include_negative_mechanical_work(self, value):
        """
        append_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_include_negative_mechanical_work(self, value)


    def constructProperty_include_negative_mechanical_work(self, initValue):
        """
        constructProperty_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_include_negative_mechanical_work(self, initValue)


    def get_include_negative_mechanical_work(self, *args):
        """
        get_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_include_negative_mechanical_work(self, *args)


    def upd_include_negative_mechanical_work(self, *args):
        """
        upd_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_include_negative_mechanical_work(self, *args)


    def set_include_negative_mechanical_work(self, *args):
        """
        set_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_include_negative_mechanical_work(self, *args)


    def copyProperty_forbid_negative_total_power(self, source):
        """
        copyProperty_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_forbid_negative_total_power(self, source)


    def append_forbid_negative_total_power(self, value):
        """
        append_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_forbid_negative_total_power(self, value)


    def constructProperty_forbid_negative_total_power(self, initValue):
        """
        constructProperty_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_forbid_negative_total_power(self, initValue)


    def get_forbid_negative_total_power(self, *args):
        """
        get_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_forbid_negative_total_power(self, *args)


    def upd_forbid_negative_total_power(self, *args):
        """
        upd_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_forbid_negative_total_power(self, *args)


    def set_forbid_negative_total_power(self, *args):
        """
        set_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_forbid_negative_total_power(self, *args)


    def copyProperty_report_total_metabolics_only(self, source):
        """
        copyProperty_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_report_total_metabolics_only(self, source)


    def append_report_total_metabolics_only(self, value):
        """
        append_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_report_total_metabolics_only(self, value)


    def constructProperty_report_total_metabolics_only(self, initValue):
        """
        constructProperty_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_report_total_metabolics_only(self, initValue)


    def get_report_total_metabolics_only(self, *args):
        """
        get_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_report_total_metabolics_only(self, *args)


    def upd_report_total_metabolics_only(self, *args):
        """
        upd_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_report_total_metabolics_only(self, *args)


    def set_report_total_metabolics_only(self, *args):
        """
        set_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_report_total_metabolics_only(self, *args)


    def copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, source):
        """
        copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, source)


    def append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, value):
        """
        append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value) -> int

        Parameters
        ----------
        value: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, value)


    def constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, initValue):
        """
        constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet initValue)

        Parameters
        ----------
        initValue: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, initValue)


    def get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, int i) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        i: int

        get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, int i) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        i: int

        upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, int i, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value)

        Parameters
        ----------
        value: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe self) -> Bhargava2004MuscleMetabolicsProbe
        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe self, bool const activation_rate_on, bool const maintenance_rate_on, bool const shortening_rate_on, bool const basal_rate_on, bool const work_rate_on) -> Bhargava2004MuscleMetabolicsProbe

        Parameters
        ----------
        activation_rate_on: bool const
        maintenance_rate_on: bool const
        shortening_rate_on: bool const
        basal_rate_on: bool const
        work_rate_on: bool const

        """
        this = _simulation.new_Bhargava2004MuscleMetabolicsProbe(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def computeProbeInputs(self, state):
        """
        computeProbeInputs(Bhargava2004MuscleMetabolicsProbe self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(Bhargava2004MuscleMetabolicsProbe self) -> int

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(Bhargava2004MuscleMetabolicsProbe self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getProbeOutputLabels(self)


    def getNumMetabolicMuscles(self):
        """
        getNumMetabolicMuscles(Bhargava2004MuscleMetabolicsProbe self) -> int const

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getNumMetabolicMuscles(self)


    def addMuscle(self, *args):
        """
        addMuscle(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch)

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double
        activation_constant_slow_twitch: double
        activation_constant_fast_twitch: double
        maintenance_constant_slow_twitch: double
        maintenance_constant_fast_twitch: double

        addMuscle(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch, double muscle_mass)

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double
        activation_constant_slow_twitch: double
        activation_constant_fast_twitch: double
        maintenance_constant_slow_twitch: double
        maintenance_constant_fast_twitch: double
        muscle_mass: double

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_addMuscle(self, *args)


    def removeMuscle(self, muscleName):
        """
        removeMuscle(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName)

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_removeMuscle(self, muscleName)


    def useProvidedMass(self, muscleName, providedMass):
        """
        useProvidedMass(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double providedMass)

        Parameters
        ----------
        muscleName: std::string const &
        providedMass: double

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_useProvidedMass(self, muscleName, providedMass)


    def useCalculatedMass(self, muscleName):
        """
        useCalculatedMass(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName)

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_useCalculatedMass(self, muscleName)


    def isUsingProvidedMass(self, muscleName):
        """
        isUsingProvidedMass(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> bool

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_isUsingProvidedMass(self, muscleName)


    def getMuscleMass(self, muscleName):
        """
        getMuscleMass(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getMuscleMass(self, muscleName)


    def getRatioSlowTwitchFibers(self, muscleName):
        """
        getRatioSlowTwitchFibers(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getRatioSlowTwitchFibers(self, muscleName)


    def setRatioSlowTwitchFibers(self, muscleName, ratio):
        """
        setRatioSlowTwitchFibers(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & ratio)

        Parameters
        ----------
        muscleName: std::string const &
        ratio: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_setRatioSlowTwitchFibers(self, muscleName, ratio)


    def getDensity(self, muscleName):
        """
        getDensity(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getDensity(self, muscleName)


    def setDensity(self, muscleName, density):
        """
        setDensity(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & density)

        Parameters
        ----------
        muscleName: std::string const &
        density: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_setDensity(self, muscleName, density)


    def getSpecificTension(self, muscleName):
        """
        getSpecificTension(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getSpecificTension(self, muscleName)


    def setSpecificTension(self, muscleName, specificTension):
        """
        setSpecificTension(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & specificTension)

        Parameters
        ----------
        muscleName: std::string const &
        specificTension: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_setSpecificTension(self, muscleName, specificTension)


    def getActivationConstantSlowTwitch(self, muscleName):
        """
        getActivationConstantSlowTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getActivationConstantSlowTwitch(self, muscleName)


    def setActivationConstantSlowTwitch(self, muscleName, c):
        """
        setActivationConstantSlowTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & c)

        Parameters
        ----------
        muscleName: std::string const &
        c: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_setActivationConstantSlowTwitch(self, muscleName, c)


    def getActivationConstantFastTwitch(self, muscleName):
        """
        getActivationConstantFastTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getActivationConstantFastTwitch(self, muscleName)


    def setActivationConstantFastTwitch(self, muscleName, c):
        """
        setActivationConstantFastTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & c)

        Parameters
        ----------
        muscleName: std::string const &
        c: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_setActivationConstantFastTwitch(self, muscleName, c)


    def getMaintenanceConstantSlowTwitch(self, muscleName):
        """
        getMaintenanceConstantSlowTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getMaintenanceConstantSlowTwitch(self, muscleName)


    def setMaintenanceConstantSlowTwitch(self, muscleName, c):
        """
        setMaintenanceConstantSlowTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & c)

        Parameters
        ----------
        muscleName: std::string const &
        c: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_setMaintenanceConstantSlowTwitch(self, muscleName, c)


    def getMaintenanceConstantFastTwitch(self, muscleName):
        """
        getMaintenanceConstantFastTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_getMaintenanceConstantFastTwitch(self, muscleName)


    def setMaintenanceConstantFastTwitch(self, muscleName, c):
        """
        setMaintenanceConstantFastTwitch(Bhargava2004MuscleMetabolicsProbe self, std::string const & muscleName, double const & c)

        Parameters
        ----------
        muscleName: std::string const &
        c: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_setMaintenanceConstantFastTwitch(self, muscleName, c)

    __swig_destroy__ = _simulation.delete_Bhargava2004MuscleMetabolicsProbe
    __del__ = lambda self: None
Bhargava2004MuscleMetabolicsProbe_swigregister = _simulation.Bhargava2004MuscleMetabolicsProbe_swigregister
Bhargava2004MuscleMetabolicsProbe_swigregister(Bhargava2004MuscleMetabolicsProbe)

def Bhargava2004MuscleMetabolicsProbe_safeDownCast(obj):
    """
    Bhargava2004MuscleMetabolicsProbe_safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Bhargava2004MuscleMetabolicsProbe_safeDownCast(obj)

def Bhargava2004MuscleMetabolicsProbe_getClassName():
    """Bhargava2004MuscleMetabolicsProbe_getClassName() -> std::string const &"""
    return _simulation.Bhargava2004MuscleMetabolicsProbe_getClassName()

class Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getConcreteClassName(self)


    def copyProperty_specific_tension(self, source):
        """
        copyProperty_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_specific_tension(self, source)


    def append_specific_tension(self, value):
        """
        append_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_specific_tension(self, value)


    def constructProperty_specific_tension(self, initValue):
        """
        constructProperty_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_specific_tension(self, initValue)


    def get_specific_tension(self, *args):
        """
        get_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_specific_tension(self, *args)


    def upd_specific_tension(self, *args):
        """
        upd_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_specific_tension(self, *args)


    def set_specific_tension(self, *args):
        """
        set_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_specific_tension(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_specific_tension(self, *args)


    def copyProperty_density(self, source):
        """
        copyProperty_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_density(self, source)


    def append_density(self, value):
        """
        append_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_density(self, value)


    def constructProperty_density(self, initValue):
        """
        constructProperty_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_density(self, initValue)


    def get_density(self, *args):
        """
        get_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_density(self, *args)


    def upd_density(self, *args):
        """
        upd_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_density(self, *args)


    def set_density(self, *args):
        """
        set_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_density(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_density(self, *args)


    def copyProperty_ratio_slow_twitch_fibers(self, source):
        """
        copyProperty_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_ratio_slow_twitch_fibers(self, source)


    def append_ratio_slow_twitch_fibers(self, value):
        """
        append_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_ratio_slow_twitch_fibers(self, value)


    def constructProperty_ratio_slow_twitch_fibers(self, initValue):
        """
        constructProperty_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_ratio_slow_twitch_fibers(self, initValue)


    def get_ratio_slow_twitch_fibers(self, *args):
        """
        get_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_ratio_slow_twitch_fibers(self, *args)


    def upd_ratio_slow_twitch_fibers(self, *args):
        """
        upd_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_ratio_slow_twitch_fibers(self, *args)


    def set_ratio_slow_twitch_fibers(self, *args):
        """
        set_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ratio_slow_twitch_fibers(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_ratio_slow_twitch_fibers(self, *args)


    def copyProperty_use_provided_muscle_mass(self, source):
        """
        copyProperty_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_use_provided_muscle_mass(self, source)


    def append_use_provided_muscle_mass(self, value):
        """
        append_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_use_provided_muscle_mass(self, value)


    def constructProperty_use_provided_muscle_mass(self, *args):
        """
        constructProperty_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self)
        constructProperty_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_use_provided_muscle_mass(self, *args)


    def get_use_provided_muscle_mass(self, *args):
        """
        get_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_use_provided_muscle_mass(self, *args)


    def upd_use_provided_muscle_mass(self, *args):
        """
        upd_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> bool &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_use_provided_muscle_mass(self, *args)


    def set_use_provided_muscle_mass(self, *args):
        """
        set_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_use_provided_muscle_mass(self, *args)


    def copyProperty_provided_muscle_mass(self, source):
        """
        copyProperty_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_provided_muscle_mass(self, source)


    def append_provided_muscle_mass(self, value):
        """
        append_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_provided_muscle_mass(self, value)


    def constructProperty_provided_muscle_mass(self, *args):
        """
        constructProperty_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self)
        constructProperty_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_provided_muscle_mass(self, *args)


    def get_provided_muscle_mass(self, *args):
        """
        get_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_provided_muscle_mass(self, *args)


    def upd_provided_muscle_mass(self, *args):
        """
        upd_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_provided_muscle_mass(self, *args)


    def set_provided_muscle_mass(self, *args):
        """
        set_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_provided_muscle_mass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_provided_muscle_mass(self, *args)


    def copyProperty_activation_constant_slow_twitch(self, source):
        """
        copyProperty_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_activation_constant_slow_twitch(self, source)


    def append_activation_constant_slow_twitch(self, value):
        """
        append_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_activation_constant_slow_twitch(self, value)


    def constructProperty_activation_constant_slow_twitch(self, initValue):
        """
        constructProperty_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_activation_constant_slow_twitch(self, initValue)


    def get_activation_constant_slow_twitch(self, *args):
        """
        get_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_activation_constant_slow_twitch(self, *args)


    def upd_activation_constant_slow_twitch(self, *args):
        """
        upd_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_activation_constant_slow_twitch(self, *args)


    def set_activation_constant_slow_twitch(self, *args):
        """
        set_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_activation_constant_slow_twitch(self, *args)


    def copyProperty_activation_constant_fast_twitch(self, source):
        """
        copyProperty_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_activation_constant_fast_twitch(self, source)


    def append_activation_constant_fast_twitch(self, value):
        """
        append_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_activation_constant_fast_twitch(self, value)


    def constructProperty_activation_constant_fast_twitch(self, initValue):
        """
        constructProperty_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_activation_constant_fast_twitch(self, initValue)


    def get_activation_constant_fast_twitch(self, *args):
        """
        get_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_activation_constant_fast_twitch(self, *args)


    def upd_activation_constant_fast_twitch(self, *args):
        """
        upd_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_activation_constant_fast_twitch(self, *args)


    def set_activation_constant_fast_twitch(self, *args):
        """
        set_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_activation_constant_fast_twitch(self, *args)


    def copyProperty_maintenance_constant_slow_twitch(self, source):
        """
        copyProperty_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_maintenance_constant_slow_twitch(self, source)


    def append_maintenance_constant_slow_twitch(self, value):
        """
        append_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_maintenance_constant_slow_twitch(self, value)


    def constructProperty_maintenance_constant_slow_twitch(self, initValue):
        """
        constructProperty_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_maintenance_constant_slow_twitch(self, initValue)


    def get_maintenance_constant_slow_twitch(self, *args):
        """
        get_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_maintenance_constant_slow_twitch(self, *args)


    def upd_maintenance_constant_slow_twitch(self, *args):
        """
        upd_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_maintenance_constant_slow_twitch(self, *args)


    def set_maintenance_constant_slow_twitch(self, *args):
        """
        set_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_maintenance_constant_slow_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_maintenance_constant_slow_twitch(self, *args)


    def copyProperty_maintenance_constant_fast_twitch(self, source):
        """
        copyProperty_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_maintenance_constant_fast_twitch(self, source)


    def append_maintenance_constant_fast_twitch(self, value):
        """
        append_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_append_maintenance_constant_fast_twitch(self, value)


    def constructProperty_maintenance_constant_fast_twitch(self, initValue):
        """
        constructProperty_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_maintenance_constant_fast_twitch(self, initValue)


    def get_maintenance_constant_fast_twitch(self, *args):
        """
        get_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_get_maintenance_constant_fast_twitch(self, *args)


    def upd_maintenance_constant_fast_twitch(self, *args):
        """
        upd_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_maintenance_constant_fast_twitch(self, *args)


    def set_maintenance_constant_fast_twitch(self, *args):
        """
        set_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_maintenance_constant_fast_twitch(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_set_maintenance_constant_fast_twitch(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter
        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers, double muscle_mass) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double
        muscle_mass: double

        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double

        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch, double muscle_mass) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double
        activation_constant_slow_twitch: double
        activation_constant_fast_twitch: double
        maintenance_constant_slow_twitch: double
        maintenance_constant_fast_twitch: double
        muscle_mass: double

        __init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double
        activation_constant_slow_twitch: double
        activation_constant_fast_twitch: double
        maintenance_constant_slow_twitch: double
        maintenance_constant_fast_twitch: double

        """
        this = _simulation.new_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMuscleMass(self):
        """
        getMuscleMass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getMuscleMass(self)


    def setMuscleMass(self):
        """
        setMuscleMass(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self)

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_setMuscleMass(self)


    def getMuscle(self):
        """
        getMuscle(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Muscle

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getMuscle(self)


    def setMuscle(self, m):
        """
        setMuscle(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter self, Muscle m)

        Parameters
        ----------
        m: OpenSim::Muscle *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_setMuscle(self, m)

    __swig_destroy__ = _simulation.delete_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter
    __del__ = lambda self: None
Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister = _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister
Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter)

def Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj):
    """
    Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj)

def Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName():
    """Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName() -> std::string const &"""
    return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName()

class Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(_object):
    """Proxy of C++ OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet const *

        """
        return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet"""
        this = _simulation.new_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet
    __del__ = lambda self: None
Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister = _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister
Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet)

def Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj):
    """
    Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(OpenSimObject obj) -> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj)

def Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName():
    """Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName() -> std::string const &"""
    return _simulation.Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName()

class Umberger2010MuscleMetabolicsProbe(Probe):
    """Proxy of C++ OpenSim::Umberger2010MuscleMetabolicsProbe class."""

    __swig_setmethods__ = {}
    for _s in [Probe]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Umberger2010MuscleMetabolicsProbe, name, value)
    __swig_getmethods__ = {}
    for _s in [Probe]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Umberger2010MuscleMetabolicsProbe, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Umberger2010MuscleMetabolicsProbe self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Umberger2010MuscleMetabolicsProbe_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Umberger2010MuscleMetabolicsProbe self) -> Umberger2010MuscleMetabolicsProbe

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Umberger2010MuscleMetabolicsProbe self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_getConcreteClassName(self)


    def copyProperty_activation_maintenance_rate_on(self, source):
        """
        copyProperty_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_activation_maintenance_rate_on(self, source)


    def append_activation_maintenance_rate_on(self, value):
        """
        append_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_activation_maintenance_rate_on(self, value)


    def constructProperty_activation_maintenance_rate_on(self, initValue):
        """
        constructProperty_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_activation_maintenance_rate_on(self, initValue)


    def get_activation_maintenance_rate_on(self, *args):
        """
        get_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_activation_maintenance_rate_on(self, *args)


    def upd_activation_maintenance_rate_on(self, *args):
        """
        upd_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_activation_maintenance_rate_on(self, *args)


    def set_activation_maintenance_rate_on(self, *args):
        """
        set_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_activation_maintenance_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_activation_maintenance_rate_on(self, *args)


    def copyProperty_shortening_rate_on(self, source):
        """
        copyProperty_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_shortening_rate_on(self, source)


    def append_shortening_rate_on(self, value):
        """
        append_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_shortening_rate_on(self, value)


    def constructProperty_shortening_rate_on(self, initValue):
        """
        constructProperty_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_shortening_rate_on(self, initValue)


    def get_shortening_rate_on(self, *args):
        """
        get_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_shortening_rate_on(self, *args)


    def upd_shortening_rate_on(self, *args):
        """
        upd_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_shortening_rate_on(self, *args)


    def set_shortening_rate_on(self, *args):
        """
        set_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_shortening_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_shortening_rate_on(self, *args)


    def copyProperty_basal_rate_on(self, source):
        """
        copyProperty_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_basal_rate_on(self, source)


    def append_basal_rate_on(self, value):
        """
        append_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_basal_rate_on(self, value)


    def constructProperty_basal_rate_on(self, initValue):
        """
        constructProperty_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_basal_rate_on(self, initValue)


    def get_basal_rate_on(self, *args):
        """
        get_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_basal_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_basal_rate_on(self, *args)


    def upd_basal_rate_on(self, *args):
        """
        upd_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_basal_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_basal_rate_on(self, *args)


    def set_basal_rate_on(self, *args):
        """
        set_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_basal_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_basal_rate_on(self, *args)


    def copyProperty_mechanical_work_rate_on(self, source):
        """
        copyProperty_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_mechanical_work_rate_on(self, source)


    def append_mechanical_work_rate_on(self, value):
        """
        append_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_mechanical_work_rate_on(self, value)


    def constructProperty_mechanical_work_rate_on(self, initValue):
        """
        constructProperty_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_mechanical_work_rate_on(self, initValue)


    def get_mechanical_work_rate_on(self, *args):
        """
        get_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_mechanical_work_rate_on(self, *args)


    def upd_mechanical_work_rate_on(self, *args):
        """
        upd_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_mechanical_work_rate_on(self, *args)


    def set_mechanical_work_rate_on(self, *args):
        """
        set_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_mechanical_work_rate_on(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_mechanical_work_rate_on(self, *args)


    def copyProperty_enforce_minimum_heat_rate_per_muscle(self, source):
        """
        copyProperty_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_enforce_minimum_heat_rate_per_muscle(self, source)


    def append_enforce_minimum_heat_rate_per_muscle(self, value):
        """
        append_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_enforce_minimum_heat_rate_per_muscle(self, value)


    def constructProperty_enforce_minimum_heat_rate_per_muscle(self, initValue):
        """
        constructProperty_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_enforce_minimum_heat_rate_per_muscle(self, initValue)


    def get_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        get_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_enforce_minimum_heat_rate_per_muscle(self, *args)


    def upd_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        upd_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_enforce_minimum_heat_rate_per_muscle(self, *args)


    def set_enforce_minimum_heat_rate_per_muscle(self, *args):
        """
        set_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_enforce_minimum_heat_rate_per_muscle(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_enforce_minimum_heat_rate_per_muscle(self, *args)


    def copyProperty_aerobic_factor(self, source):
        """
        copyProperty_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_aerobic_factor(self, source)


    def append_aerobic_factor(self, value):
        """
        append_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_aerobic_factor(self, value)


    def constructProperty_aerobic_factor(self, initValue):
        """
        constructProperty_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_aerobic_factor(self, initValue)


    def get_aerobic_factor(self, *args):
        """
        get_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_aerobic_factor(Umberger2010MuscleMetabolicsProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_aerobic_factor(self, *args)


    def upd_aerobic_factor(self, *args):
        """
        upd_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_aerobic_factor(Umberger2010MuscleMetabolicsProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_aerobic_factor(self, *args)


    def set_aerobic_factor(self, *args):
        """
        set_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_aerobic_factor(Umberger2010MuscleMetabolicsProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_aerobic_factor(self, *args)


    def copyProperty_basal_coefficient(self, source):
        """
        copyProperty_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_basal_coefficient(self, source)


    def append_basal_coefficient(self, value):
        """
        append_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_basal_coefficient(self, value)


    def constructProperty_basal_coefficient(self, initValue):
        """
        constructProperty_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_basal_coefficient(self, initValue)


    def get_basal_coefficient(self, *args):
        """
        get_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_basal_coefficient(Umberger2010MuscleMetabolicsProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_basal_coefficient(self, *args)


    def upd_basal_coefficient(self, *args):
        """
        upd_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_basal_coefficient(Umberger2010MuscleMetabolicsProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_basal_coefficient(self, *args)


    def set_basal_coefficient(self, *args):
        """
        set_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_basal_coefficient(Umberger2010MuscleMetabolicsProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_basal_coefficient(self, *args)


    def copyProperty_basal_exponent(self, source):
        """
        copyProperty_basal_exponent(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_basal_exponent(self, source)


    def append_basal_exponent(self, value):
        """
        append_basal_exponent(Umberger2010MuscleMetabolicsProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_basal_exponent(self, value)


    def constructProperty_basal_exponent(self, initValue):
        """
        constructProperty_basal_exponent(Umberger2010MuscleMetabolicsProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_basal_exponent(self, initValue)


    def get_basal_exponent(self, *args):
        """
        get_basal_exponent(Umberger2010MuscleMetabolicsProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_basal_exponent(Umberger2010MuscleMetabolicsProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_basal_exponent(self, *args)


    def upd_basal_exponent(self, *args):
        """
        upd_basal_exponent(Umberger2010MuscleMetabolicsProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_basal_exponent(Umberger2010MuscleMetabolicsProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_basal_exponent(self, *args)


    def set_basal_exponent(self, *args):
        """
        set_basal_exponent(Umberger2010MuscleMetabolicsProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_basal_exponent(Umberger2010MuscleMetabolicsProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_basal_exponent(self, *args)


    def copyProperty_muscle_effort_scaling_factor(self, source):
        """
        copyProperty_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_muscle_effort_scaling_factor(self, source)


    def append_muscle_effort_scaling_factor(self, value):
        """
        append_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_muscle_effort_scaling_factor(self, value)


    def constructProperty_muscle_effort_scaling_factor(self, initValue):
        """
        constructProperty_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_muscle_effort_scaling_factor(self, initValue)


    def get_muscle_effort_scaling_factor(self, *args):
        """
        get_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, int i) -> double const

        Parameters
        ----------
        i: int

        get_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_muscle_effort_scaling_factor(self, *args)


    def upd_muscle_effort_scaling_factor(self, *args):
        """
        upd_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, int i) -> double

        Parameters
        ----------
        i: int

        upd_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self) -> double &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_muscle_effort_scaling_factor(self, *args)


    def set_muscle_effort_scaling_factor(self, *args):
        """
        set_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_muscle_effort_scaling_factor(Umberger2010MuscleMetabolicsProbe self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_muscle_effort_scaling_factor(self, *args)


    def copyProperty_use_Bhargava_recruitment_model(self, source):
        """
        copyProperty_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_use_Bhargava_recruitment_model(self, source)


    def append_use_Bhargava_recruitment_model(self, value):
        """
        append_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_use_Bhargava_recruitment_model(self, value)


    def constructProperty_use_Bhargava_recruitment_model(self, initValue):
        """
        constructProperty_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_use_Bhargava_recruitment_model(self, initValue)


    def get_use_Bhargava_recruitment_model(self, *args):
        """
        get_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_use_Bhargava_recruitment_model(self, *args)


    def upd_use_Bhargava_recruitment_model(self, *args):
        """
        upd_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_use_Bhargava_recruitment_model(self, *args)


    def set_use_Bhargava_recruitment_model(self, *args):
        """
        set_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_Bhargava_recruitment_model(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_use_Bhargava_recruitment_model(self, *args)


    def copyProperty_include_negative_mechanical_work(self, source):
        """
        copyProperty_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_include_negative_mechanical_work(self, source)


    def append_include_negative_mechanical_work(self, value):
        """
        append_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_include_negative_mechanical_work(self, value)


    def constructProperty_include_negative_mechanical_work(self, initValue):
        """
        constructProperty_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_include_negative_mechanical_work(self, initValue)


    def get_include_negative_mechanical_work(self, *args):
        """
        get_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_include_negative_mechanical_work(self, *args)


    def upd_include_negative_mechanical_work(self, *args):
        """
        upd_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_include_negative_mechanical_work(self, *args)


    def set_include_negative_mechanical_work(self, *args):
        """
        set_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_include_negative_mechanical_work(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_include_negative_mechanical_work(self, *args)


    def copyProperty_forbid_negative_total_power(self, source):
        """
        copyProperty_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_forbid_negative_total_power(self, source)


    def append_forbid_negative_total_power(self, value):
        """
        append_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_forbid_negative_total_power(self, value)


    def constructProperty_forbid_negative_total_power(self, initValue):
        """
        constructProperty_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_forbid_negative_total_power(self, initValue)


    def get_forbid_negative_total_power(self, *args):
        """
        get_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_forbid_negative_total_power(self, *args)


    def upd_forbid_negative_total_power(self, *args):
        """
        upd_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_forbid_negative_total_power(self, *args)


    def set_forbid_negative_total_power(self, *args):
        """
        set_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_forbid_negative_total_power(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_forbid_negative_total_power(self, *args)


    def copyProperty_report_total_metabolics_only(self, source):
        """
        copyProperty_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_report_total_metabolics_only(self, source)


    def append_report_total_metabolics_only(self, value):
        """
        append_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_report_total_metabolics_only(self, value)


    def constructProperty_report_total_metabolics_only(self, initValue):
        """
        constructProperty_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_report_total_metabolics_only(self, initValue)


    def get_report_total_metabolics_only(self, *args):
        """
        get_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_report_total_metabolics_only(self, *args)


    def upd_report_total_metabolics_only(self, *args):
        """
        upd_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_report_total_metabolics_only(self, *args)


    def set_report_total_metabolics_only(self, *args):
        """
        set_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_report_total_metabolics_only(Umberger2010MuscleMetabolicsProbe self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_report_total_metabolics_only(self, *args)


    def copyProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, source):
        """
        copyProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_copyProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, source)


    def append_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, value):
        """
        append_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet value) -> int

        Parameters
        ----------
        value: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_append_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, value)


    def constructProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, initValue):
        """
        constructProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet initValue)

        Parameters
        ----------
        initValue: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_constructProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, initValue)


    def get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, int i) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        i: int

        get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, int i) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        i: int

        upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args):
        """
        set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, int i, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Umberger2010MuscleMetabolicsProbe self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet value)

        Parameters
        ----------
        value: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe self) -> Umberger2010MuscleMetabolicsProbe
        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe self, bool const activation_maintenance_rate_on, bool const shortening_rate_on, bool const basal_rate_on, bool const work_rate_on) -> Umberger2010MuscleMetabolicsProbe

        Parameters
        ----------
        activation_maintenance_rate_on: bool const
        shortening_rate_on: bool const
        basal_rate_on: bool const
        work_rate_on: bool const

        """
        this = _simulation.new_Umberger2010MuscleMetabolicsProbe(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def computeProbeInputs(self, state):
        """
        computeProbeInputs(Umberger2010MuscleMetabolicsProbe self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_computeProbeInputs(self, state)


    def getNumProbeInputs(self):
        """
        getNumProbeInputs(Umberger2010MuscleMetabolicsProbe self) -> int

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_getNumProbeInputs(self)


    def getProbeOutputLabels(self):
        """
        getProbeOutputLabels(Umberger2010MuscleMetabolicsProbe self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_getProbeOutputLabels(self)


    def getNumMetabolicMuscles(self):
        """
        getNumMetabolicMuscles(Umberger2010MuscleMetabolicsProbe self) -> int const

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_getNumMetabolicMuscles(self)


    def addMuscle(self, *args):
        """
        addMuscle(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double ratio_slow_twitch_fibers)

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double

        addMuscle(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double ratio_slow_twitch_fibers, double muscle_mass)

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double
        muscle_mass: double

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_addMuscle(self, *args)


    def removeMuscle(self, muscleName):
        """
        removeMuscle(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName)

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_removeMuscle(self, muscleName)


    def useProvidedMass(self, muscleName, providedMass):
        """
        useProvidedMass(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double providedMass)

        Parameters
        ----------
        muscleName: std::string const &
        providedMass: double

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_useProvidedMass(self, muscleName, providedMass)


    def useCalculatedMass(self, muscleName):
        """
        useCalculatedMass(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName)

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_useCalculatedMass(self, muscleName)


    def isUsingProvidedMass(self, muscleName):
        """
        isUsingProvidedMass(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> bool

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_isUsingProvidedMass(self, muscleName)


    def getMuscleMass(self, muscleName):
        """
        getMuscleMass(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_getMuscleMass(self, muscleName)


    def getRatioSlowTwitchFibers(self, muscleName):
        """
        getRatioSlowTwitchFibers(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_getRatioSlowTwitchFibers(self, muscleName)


    def setRatioSlowTwitchFibers(self, muscleName, ratio):
        """
        setRatioSlowTwitchFibers(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double const & ratio)

        Parameters
        ----------
        muscleName: std::string const &
        ratio: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_setRatioSlowTwitchFibers(self, muscleName, ratio)


    def getDensity(self, muscleName):
        """
        getDensity(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_getDensity(self, muscleName)


    def setDensity(self, muscleName, density):
        """
        setDensity(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double const & density)

        Parameters
        ----------
        muscleName: std::string const &
        density: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_setDensity(self, muscleName, density)


    def getSpecificTension(self, muscleName):
        """
        getSpecificTension(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName) -> double const

        Parameters
        ----------
        muscleName: std::string const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_getSpecificTension(self, muscleName)


    def setSpecificTension(self, muscleName, specificTension):
        """
        setSpecificTension(Umberger2010MuscleMetabolicsProbe self, std::string const & muscleName, double const & specificTension)

        Parameters
        ----------
        muscleName: std::string const &
        specificTension: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_setSpecificTension(self, muscleName, specificTension)

    __swig_destroy__ = _simulation.delete_Umberger2010MuscleMetabolicsProbe
    __del__ = lambda self: None
Umberger2010MuscleMetabolicsProbe_swigregister = _simulation.Umberger2010MuscleMetabolicsProbe_swigregister
Umberger2010MuscleMetabolicsProbe_swigregister(Umberger2010MuscleMetabolicsProbe)

def Umberger2010MuscleMetabolicsProbe_safeDownCast(obj):
    """
    Umberger2010MuscleMetabolicsProbe_safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Umberger2010MuscleMetabolicsProbe_safeDownCast(obj)

def Umberger2010MuscleMetabolicsProbe_getClassName():
    """Umberger2010MuscleMetabolicsProbe_getClassName() -> std::string const &"""
    return _simulation.Umberger2010MuscleMetabolicsProbe_getClassName()

class Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getConcreteClassName(self)


    def copyProperty_specific_tension(self, source):
        """
        copyProperty_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_specific_tension(self, source)


    def append_specific_tension(self, value):
        """
        append_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_specific_tension(self, value)


    def constructProperty_specific_tension(self, initValue):
        """
        constructProperty_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_specific_tension(self, initValue)


    def get_specific_tension(self, *args):
        """
        get_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_specific_tension(self, *args)


    def upd_specific_tension(self, *args):
        """
        upd_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_specific_tension(self, *args)


    def set_specific_tension(self, *args):
        """
        set_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_specific_tension(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_specific_tension(self, *args)


    def copyProperty_density(self, source):
        """
        copyProperty_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_density(self, source)


    def append_density(self, value):
        """
        append_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_density(self, value)


    def constructProperty_density(self, initValue):
        """
        constructProperty_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_density(self, initValue)


    def get_density(self, *args):
        """
        get_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_density(self, *args)


    def upd_density(self, *args):
        """
        upd_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_density(self, *args)


    def set_density(self, *args):
        """
        set_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_density(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_density(self, *args)


    def copyProperty_ratio_slow_twitch_fibers(self, source):
        """
        copyProperty_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_ratio_slow_twitch_fibers(self, source)


    def append_ratio_slow_twitch_fibers(self, value):
        """
        append_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_ratio_slow_twitch_fibers(self, value)


    def constructProperty_ratio_slow_twitch_fibers(self, initValue):
        """
        constructProperty_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_ratio_slow_twitch_fibers(self, initValue)


    def get_ratio_slow_twitch_fibers(self, *args):
        """
        get_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_ratio_slow_twitch_fibers(self, *args)


    def upd_ratio_slow_twitch_fibers(self, *args):
        """
        upd_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_ratio_slow_twitch_fibers(self, *args)


    def set_ratio_slow_twitch_fibers(self, *args):
        """
        set_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_ratio_slow_twitch_fibers(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_ratio_slow_twitch_fibers(self, *args)


    def copyProperty_use_provided_muscle_mass(self, source):
        """
        copyProperty_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_use_provided_muscle_mass(self, source)


    def append_use_provided_muscle_mass(self, value):
        """
        append_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_use_provided_muscle_mass(self, value)


    def constructProperty_use_provided_muscle_mass(self, initValue):
        """
        constructProperty_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_use_provided_muscle_mass(self, initValue)


    def get_use_provided_muscle_mass(self, *args):
        """
        get_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_use_provided_muscle_mass(self, *args)


    def upd_use_provided_muscle_mass(self, *args):
        """
        upd_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> bool &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_use_provided_muscle_mass(self, *args)


    def set_use_provided_muscle_mass(self, *args):
        """
        set_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_use_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_use_provided_muscle_mass(self, *args)


    def copyProperty_provided_muscle_mass(self, source):
        """
        copyProperty_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter source)

        Parameters
        ----------
        source: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter::Self const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_copyProperty_provided_muscle_mass(self, source)


    def append_provided_muscle_mass(self, value):
        """
        append_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_append_provided_muscle_mass(self, value)


    def constructProperty_provided_muscle_mass(self, initValue):
        """
        constructProperty_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_constructProperty_provided_muscle_mass(self, initValue)


    def get_provided_muscle_mass(self, *args):
        """
        get_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_get_provided_muscle_mass(self, *args)


    def upd_provided_muscle_mass(self, *args):
        """
        upd_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_upd_provided_muscle_mass(self, *args)


    def set_provided_muscle_mass(self, *args):
        """
        set_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_provided_muscle_mass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_set_provided_muscle_mass(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter
        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers, double muscle_mass) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double
        muscle_mass: double

        __init__(OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, std::string const & muscleName, double ratio_slow_twitch_fibers) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

        Parameters
        ----------
        muscleName: std::string const &
        ratio_slow_twitch_fibers: double

        """
        this = _simulation.new_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMuscleMass(self):
        """
        getMuscleMass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> double const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getMuscleMass(self)


    def setMuscleMass(self):
        """
        setMuscleMass(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self)

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_setMuscleMass(self)


    def getMuscle(self):
        """
        getMuscle(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self) -> Muscle

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getMuscle(self)


    def setMuscle(self, m):
        """
        setMuscle(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter self, Muscle m)

        Parameters
        ----------
        m: OpenSim::Muscle *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_setMuscle(self, m)

    __swig_destroy__ = _simulation.delete_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter
    __del__ = lambda self: None
Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister = _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister
Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_swigregister(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter)

def Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj):
    """
    Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_safeDownCast(obj)

def Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName():
    """Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName() -> std::string const &"""
    return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter_getClassName()

class Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(_object):
    """Proxy of C++ OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet const *

        """
        return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet self) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet"""
        this = _simulation.new_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet
    __del__ = lambda self: None
Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister = _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister
Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_swigregister(Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet)

def Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj):
    """
    Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(OpenSimObject obj) -> Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_safeDownCast(obj)

def Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName():
    """Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName() -> std::string const &"""
    return _simulation.Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet_getClassName()

class ModelVisualPreferences(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::ModelVisualPreferences class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelVisualPreferences, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelVisualPreferences, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ModelVisualPreferences

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ModelVisualPreferences_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ModelVisualPreferences self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ModelVisualPreferences_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ModelVisualPreferences_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ModelVisualPreferences self) -> ModelVisualPreferences

        Parameters
        ----------
        self: OpenSim::ModelVisualPreferences const *

        """
        return _simulation.ModelVisualPreferences_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelVisualPreferences self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ModelVisualPreferences const *

        """
        return _simulation.ModelVisualPreferences_getConcreteClassName(self)


    def copyProperty_ModelDisplayHints(self, source):
        """
        copyProperty_ModelDisplayHints(ModelVisualPreferences self, ModelVisualPreferences source)

        Parameters
        ----------
        source: OpenSim::ModelVisualPreferences::Self const &

        """
        return _simulation.ModelVisualPreferences_copyProperty_ModelDisplayHints(self, source)


    def append_ModelDisplayHints(self, value):
        """
        append_ModelDisplayHints(ModelVisualPreferences self, ModelDisplayHints value) -> int

        Parameters
        ----------
        value: OpenSim::ModelDisplayHints const &

        """
        return _simulation.ModelVisualPreferences_append_ModelDisplayHints(self, value)


    def constructProperty_ModelDisplayHints(self, initValue):
        """
        constructProperty_ModelDisplayHints(ModelVisualPreferences self, ModelDisplayHints initValue)

        Parameters
        ----------
        initValue: OpenSim::ModelDisplayHints const &

        """
        return _simulation.ModelVisualPreferences_constructProperty_ModelDisplayHints(self, initValue)


    def get_ModelDisplayHints(self, *args):
        """
        get_ModelDisplayHints(ModelVisualPreferences self, int i) -> ModelDisplayHints

        Parameters
        ----------
        i: int

        get_ModelDisplayHints(ModelVisualPreferences self) -> ModelDisplayHints

        Parameters
        ----------
        self: OpenSim::ModelVisualPreferences const *

        """
        return _simulation.ModelVisualPreferences_get_ModelDisplayHints(self, *args)


    def upd_ModelDisplayHints(self, *args):
        """
        upd_ModelDisplayHints(ModelVisualPreferences self, int i) -> ModelDisplayHints

        Parameters
        ----------
        i: int

        upd_ModelDisplayHints(ModelVisualPreferences self) -> ModelDisplayHints

        Parameters
        ----------
        self: OpenSim::ModelVisualPreferences *

        """
        return _simulation.ModelVisualPreferences_upd_ModelDisplayHints(self, *args)


    def set_ModelDisplayHints(self, *args):
        """
        set_ModelDisplayHints(ModelVisualPreferences self, int i, ModelDisplayHints value)

        Parameters
        ----------
        i: int
        value: OpenSim::ModelDisplayHints const &

        set_ModelDisplayHints(ModelVisualPreferences self, ModelDisplayHints value)

        Parameters
        ----------
        value: OpenSim::ModelDisplayHints const &

        """
        return _simulation.ModelVisualPreferences_set_ModelDisplayHints(self, *args)


    def __init__(self):
        """__init__(OpenSim::ModelVisualPreferences self) -> ModelVisualPreferences"""
        this = _simulation.new_ModelVisualPreferences()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelVisualPreferences
    __del__ = lambda self: None
ModelVisualPreferences_swigregister = _simulation.ModelVisualPreferences_swigregister
ModelVisualPreferences_swigregister(ModelVisualPreferences)

def ModelVisualPreferences_safeDownCast(obj):
    """
    ModelVisualPreferences_safeDownCast(OpenSimObject obj) -> ModelVisualPreferences

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ModelVisualPreferences_safeDownCast(obj)

def ModelVisualPreferences_getClassName():
    """ModelVisualPreferences_getClassName() -> std::string const &"""
    return _simulation.ModelVisualPreferences_getClassName()

class ModelVisualizer(_object):
    """Proxy of C++ OpenSim::ModelVisualizer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelVisualizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelVisualizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _simulation.delete_ModelVisualizer
    __del__ = lambda self: None

    def show(self, state):
        """
        show(ModelVisualizer self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ModelVisualizer_show(self, state)


    def getInputSilo(self):
        """
        getInputSilo(ModelVisualizer self) -> SimTKVisualizerInputSilo

        Parameters
        ----------
        self: OpenSim::ModelVisualizer const *

        """
        return _simulation.ModelVisualizer_getInputSilo(self)


    def updInputSilo(self):
        """
        updInputSilo(ModelVisualizer self) -> SimTKVisualizerInputSilo

        Parameters
        ----------
        self: OpenSim::ModelVisualizer *

        """
        return _simulation.ModelVisualizer_updInputSilo(self)


    def getSimbodyVisualizer(self):
        """
        getSimbodyVisualizer(ModelVisualizer self) -> SimTKVisualizer

        Parameters
        ----------
        self: OpenSim::ModelVisualizer const *

        """
        return _simulation.ModelVisualizer_getSimbodyVisualizer(self)


    def updSimbodyVisualizer(self):
        """
        updSimbodyVisualizer(ModelVisualizer self) -> SimTKVisualizer

        Parameters
        ----------
        self: OpenSim::ModelVisualizer *

        """
        return _simulation.ModelVisualizer_updSimbodyVisualizer(self)


    def getGeometryDecorationGenerator(self):
        """
        getGeometryDecorationGenerator(ModelVisualizer self) -> SimTK::DefaultGeometry *

        Parameters
        ----------
        self: OpenSim::ModelVisualizer *

        """
        return _simulation.ModelVisualizer_getGeometryDecorationGenerator(self)


    def getModel(self):
        """
        getModel(ModelVisualizer self) -> Model

        Parameters
        ----------
        self: OpenSim::ModelVisualizer const *

        """
        return _simulation.ModelVisualizer_getModel(self)


    def updModel(self):
        """
        updModel(ModelVisualizer self) -> Model

        Parameters
        ----------
        self: OpenSim::ModelVisualizer *

        """
        return _simulation.ModelVisualizer_updModel(self)


    def findGeometryFile(model, geoFile, isAbsolute, attempts):
        """
        findGeometryFile(Model model, std::string const & geoFile, bool & isAbsolute, SimTKArrayString attempts) -> bool

        Parameters
        ----------
        model: OpenSim::Model const &
        geoFile: std::string const &
        isAbsolute: bool &
        attempts: SimTK::Array_< std::string,unsigned int > &

        """
        return _simulation.ModelVisualizer_findGeometryFile(model, geoFile, isAbsolute, attempts)

    findGeometryFile = staticmethod(findGeometryFile)

    def addDirToGeometrySearchPaths(dir):
        """
        addDirToGeometrySearchPaths(std::string const & dir)

        Parameters
        ----------
        dir: std::string const &

        """
        return _simulation.ModelVisualizer_addDirToGeometrySearchPaths(dir)

    addDirToGeometrySearchPaths = staticmethod(addDirToGeometrySearchPaths)
ModelVisualizer_swigregister = _simulation.ModelVisualizer_swigregister
ModelVisualizer_swigregister(ModelVisualizer)

def ModelVisualizer_findGeometryFile(model, geoFile, isAbsolute, attempts):
    """
    ModelVisualizer_findGeometryFile(Model model, std::string const & geoFile, bool & isAbsolute, SimTKArrayString attempts) -> bool

    Parameters
    ----------
    model: OpenSim::Model const &
    geoFile: std::string const &
    isAbsolute: bool &
    attempts: SimTK::Array_< std::string,unsigned int > &

    """
    return _simulation.ModelVisualizer_findGeometryFile(model, geoFile, isAbsolute, attempts)

def ModelVisualizer_addDirToGeometrySearchPaths(dir):
    """
    ModelVisualizer_addDirToGeometrySearchPaths(std::string const & dir)

    Parameters
    ----------
    dir: std::string const &

    """
    return _simulation.ModelVisualizer_addDirToGeometrySearchPaths(dir)

class ModelHasNoSystem(opensim.common.OpenSimException):
    """Proxy of C++ OpenSim::ModelHasNoSystem class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHasNoSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHasNoSystem, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, modelName):
        """
        __init__(OpenSim::ModelHasNoSystem self, std::string const & file, size_t line, std::string const & func, std::string const & modelName) -> ModelHasNoSystem

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        modelName: std::string const &

        """
        this = _simulation.new_ModelHasNoSystem(file, line, func, modelName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelHasNoSystem
    __del__ = lambda self: None
ModelHasNoSystem_swigregister = _simulation.ModelHasNoSystem_swigregister
ModelHasNoSystem_swigregister(ModelHasNoSystem)

class PhysicalOffsetFramesFormLoop(opensim.common.OpenSimException):
    """Proxy of C++ OpenSim::PhysicalOffsetFramesFormLoop class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicalOffsetFramesFormLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicalOffsetFramesFormLoop, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, obj, frameName):
        """
        __init__(OpenSim::PhysicalOffsetFramesFormLoop self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & frameName) -> PhysicalOffsetFramesFormLoop

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        frameName: std::string const &

        """
        this = _simulation.new_PhysicalOffsetFramesFormLoop(file, line, func, obj, frameName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PhysicalOffsetFramesFormLoop
    __del__ = lambda self: None
PhysicalOffsetFramesFormLoop_swigregister = _simulation.PhysicalOffsetFramesFormLoop_swigregister
PhysicalOffsetFramesFormLoop_swigregister(PhysicalOffsetFramesFormLoop)

class JointFramesHaveSameBaseFrame(opensim.common.OpenSimException):
    """Proxy of C++ OpenSim::JointFramesHaveSameBaseFrame class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointFramesHaveSameBaseFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointFramesHaveSameBaseFrame, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, thisName, parentName, childName, baseName):
        """
        __init__(OpenSim::JointFramesHaveSameBaseFrame self, std::string const & file, size_t line, std::string const & func, std::string const & thisName, std::string const & parentName, std::string const & childName, std::string const & baseName) -> JointFramesHaveSameBaseFrame

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        thisName: std::string const &
        parentName: std::string const &
        childName: std::string const &
        baseName: std::string const &

        """
        this = _simulation.new_JointFramesHaveSameBaseFrame(file, line, func, thisName, parentName, childName, baseName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_JointFramesHaveSameBaseFrame
    __del__ = lambda self: None
JointFramesHaveSameBaseFrame_swigregister = _simulation.JointFramesHaveSameBaseFrame_swigregister
JointFramesHaveSameBaseFrame_swigregister(JointFramesHaveSameBaseFrame)

class Model(ModelComponent):
    """Proxy of C++ OpenSim::Model class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Model

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Model_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Model self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Model_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Model_getClassName()

    getClassName = staticmethod(getClassName)

    def copyProperty_credits(self, source):
        """
        copyProperty_credits(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_credits(self, source)


    def append_credits(self, value):
        """
        append_credits(Model self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Model_append_credits(self, value)


    def constructProperty_credits(self, initValue):
        """
        constructProperty_credits(Model self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.Model_constructProperty_credits(self, initValue)


    def get_credits(self, *args):
        """
        get_credits(Model self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_credits(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_credits(self, *args)


    def upd_credits(self, *args):
        """
        upd_credits(Model self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_credits(Model self) -> std::string &

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_credits(self, *args)


    def set_credits(self, *args):
        """
        set_credits(Model self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_credits(Model self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Model_set_credits(self, *args)


    def copyProperty_publications(self, source):
        """
        copyProperty_publications(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_publications(self, source)


    def append_publications(self, value):
        """
        append_publications(Model self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Model_append_publications(self, value)


    def constructProperty_publications(self, initValue):
        """
        constructProperty_publications(Model self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.Model_constructProperty_publications(self, initValue)


    def get_publications(self, *args):
        """
        get_publications(Model self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_publications(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_publications(self, *args)


    def upd_publications(self, *args):
        """
        upd_publications(Model self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_publications(Model self) -> std::string &

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_publications(self, *args)


    def set_publications(self, *args):
        """
        set_publications(Model self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_publications(Model self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Model_set_publications(self, *args)


    def copyProperty_length_units(self, source):
        """
        copyProperty_length_units(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_length_units(self, source)


    def append_length_units(self, value):
        """
        append_length_units(Model self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Model_append_length_units(self, value)


    def constructProperty_length_units(self, initValue):
        """
        constructProperty_length_units(Model self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.Model_constructProperty_length_units(self, initValue)


    def get_length_units(self, *args):
        """
        get_length_units(Model self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_length_units(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_length_units(self, *args)


    def upd_length_units(self, *args):
        """
        upd_length_units(Model self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_length_units(Model self) -> std::string &

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_length_units(self, *args)


    def set_length_units(self, *args):
        """
        set_length_units(Model self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_length_units(Model self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Model_set_length_units(self, *args)


    def copyProperty_force_units(self, source):
        """
        copyProperty_force_units(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_force_units(self, source)


    def append_force_units(self, value):
        """
        append_force_units(Model self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Model_append_force_units(self, value)


    def constructProperty_force_units(self, initValue):
        """
        constructProperty_force_units(Model self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.Model_constructProperty_force_units(self, initValue)


    def get_force_units(self, *args):
        """
        get_force_units(Model self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_force_units(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_force_units(self, *args)


    def upd_force_units(self, *args):
        """
        upd_force_units(Model self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_force_units(Model self) -> std::string &

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_force_units(self, *args)


    def set_force_units(self, *args):
        """
        set_force_units(Model self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_force_units(Model self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.Model_set_force_units(self, *args)


    def copyProperty_assembly_accuracy(self, source):
        """
        copyProperty_assembly_accuracy(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_assembly_accuracy(self, source)


    def append_assembly_accuracy(self, value):
        """
        append_assembly_accuracy(Model self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Model_append_assembly_accuracy(self, value)


    def constructProperty_assembly_accuracy(self, initValue):
        """
        constructProperty_assembly_accuracy(Model self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Model_constructProperty_assembly_accuracy(self, initValue)


    def get_assembly_accuracy(self, *args):
        """
        get_assembly_accuracy(Model self, int i) -> double const

        Parameters
        ----------
        i: int

        get_assembly_accuracy(Model self) -> double const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_assembly_accuracy(self, *args)


    def upd_assembly_accuracy(self, *args):
        """
        upd_assembly_accuracy(Model self, int i) -> double

        Parameters
        ----------
        i: int

        upd_assembly_accuracy(Model self) -> double &

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_assembly_accuracy(self, *args)


    def set_assembly_accuracy(self, *args):
        """
        set_assembly_accuracy(Model self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_assembly_accuracy(Model self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Model_set_assembly_accuracy(self, *args)


    def copyProperty_gravity(self, source):
        """
        copyProperty_gravity(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_gravity(self, source)


    def append_gravity(self, value):
        """
        append_gravity(Model self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Model_append_gravity(self, value)


    def constructProperty_gravity(self, initValue):
        """
        constructProperty_gravity(Model self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.Model_constructProperty_gravity(self, initValue)


    def get_gravity(self, *args):
        """
        get_gravity(Model self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_gravity(Model self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_gravity(self, *args)


    def upd_gravity(self, *args):
        """
        upd_gravity(Model self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_gravity(Model self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_gravity(self, *args)


    def set_gravity(self, *args):
        """
        set_gravity(Model self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_gravity(Model self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.Model_set_gravity(self, *args)


    def copyProperty_ground(self, source):
        """
        copyProperty_ground(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_ground(self, source)


    def append_ground(self, value):
        """
        append_ground(Model self, Ground value) -> int

        Parameters
        ----------
        value: OpenSim::Ground const &

        """
        return _simulation.Model_append_ground(self, value)


    def constructProperty_ground(self, initValue):
        """
        constructProperty_ground(Model self, Ground initValue)

        Parameters
        ----------
        initValue: OpenSim::Ground const &

        """
        return _simulation.Model_constructProperty_ground(self, initValue)


    def get_ground(self, *args):
        """
        get_ground(Model self, int i) -> Ground

        Parameters
        ----------
        i: int

        get_ground(Model self) -> Ground

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_ground(self, *args)


    def upd_ground(self, *args):
        """
        upd_ground(Model self, int i) -> Ground

        Parameters
        ----------
        i: int

        upd_ground(Model self) -> Ground

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_ground(self, *args)


    def set_ground(self, *args):
        """
        set_ground(Model self, int i, Ground value)

        Parameters
        ----------
        i: int
        value: OpenSim::Ground const &

        set_ground(Model self, Ground value)

        Parameters
        ----------
        value: OpenSim::Ground const &

        """
        return _simulation.Model_set_ground(self, *args)


    def copyProperty_BodySet(self, source):
        """
        copyProperty_BodySet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_BodySet(self, source)


    def append_BodySet(self, value):
        """
        append_BodySet(Model self, BodySet value) -> int

        Parameters
        ----------
        value: OpenSim::BodySet const &

        """
        return _simulation.Model_append_BodySet(self, value)


    def constructProperty_BodySet(self, initValue):
        """
        constructProperty_BodySet(Model self, BodySet initValue)

        Parameters
        ----------
        initValue: OpenSim::BodySet const &

        """
        return _simulation.Model_constructProperty_BodySet(self, initValue)


    def get_BodySet(self, *args):
        """
        get_BodySet(Model self, int i) -> BodySet

        Parameters
        ----------
        i: int

        get_BodySet(Model self) -> BodySet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_BodySet(self, *args)


    def upd_BodySet(self, *args):
        """
        upd_BodySet(Model self, int i) -> BodySet

        Parameters
        ----------
        i: int

        upd_BodySet(Model self) -> BodySet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_BodySet(self, *args)


    def set_BodySet(self, *args):
        """
        set_BodySet(Model self, int i, BodySet value)

        Parameters
        ----------
        i: int
        value: OpenSim::BodySet const &

        set_BodySet(Model self, BodySet value)

        Parameters
        ----------
        value: OpenSim::BodySet const &

        """
        return _simulation.Model_set_BodySet(self, *args)


    def copyProperty_JointSet(self, source):
        """
        copyProperty_JointSet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_JointSet(self, source)


    def append_JointSet(self, value):
        """
        append_JointSet(Model self, JointSet value) -> int

        Parameters
        ----------
        value: OpenSim::JointSet const &

        """
        return _simulation.Model_append_JointSet(self, value)


    def constructProperty_JointSet(self, initValue):
        """
        constructProperty_JointSet(Model self, JointSet initValue)

        Parameters
        ----------
        initValue: OpenSim::JointSet const &

        """
        return _simulation.Model_constructProperty_JointSet(self, initValue)


    def get_JointSet(self, *args):
        """
        get_JointSet(Model self, int i) -> JointSet

        Parameters
        ----------
        i: int

        get_JointSet(Model self) -> JointSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_JointSet(self, *args)


    def upd_JointSet(self, *args):
        """
        upd_JointSet(Model self, int i) -> JointSet

        Parameters
        ----------
        i: int

        upd_JointSet(Model self) -> JointSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_JointSet(self, *args)


    def set_JointSet(self, *args):
        """
        set_JointSet(Model self, int i, JointSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::JointSet const &

        set_JointSet(Model self, JointSet value)

        Parameters
        ----------
        value: OpenSim::JointSet const &

        """
        return _simulation.Model_set_JointSet(self, *args)


    def copyProperty_ConstraintSet(self, source):
        """
        copyProperty_ConstraintSet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_ConstraintSet(self, source)


    def append_ConstraintSet(self, value):
        """
        append_ConstraintSet(Model self, ConstraintSet value) -> int

        Parameters
        ----------
        value: OpenSim::ConstraintSet const &

        """
        return _simulation.Model_append_ConstraintSet(self, value)


    def constructProperty_ConstraintSet(self, initValue):
        """
        constructProperty_ConstraintSet(Model self, ConstraintSet initValue)

        Parameters
        ----------
        initValue: OpenSim::ConstraintSet const &

        """
        return _simulation.Model_constructProperty_ConstraintSet(self, initValue)


    def get_ConstraintSet(self, *args):
        """
        get_ConstraintSet(Model self, int i) -> ConstraintSet

        Parameters
        ----------
        i: int

        get_ConstraintSet(Model self) -> ConstraintSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_ConstraintSet(self, *args)


    def upd_ConstraintSet(self, *args):
        """
        upd_ConstraintSet(Model self, int i) -> ConstraintSet

        Parameters
        ----------
        i: int

        upd_ConstraintSet(Model self) -> ConstraintSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_ConstraintSet(self, *args)


    def set_ConstraintSet(self, *args):
        """
        set_ConstraintSet(Model self, int i, ConstraintSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::ConstraintSet const &

        set_ConstraintSet(Model self, ConstraintSet value)

        Parameters
        ----------
        value: OpenSim::ConstraintSet const &

        """
        return _simulation.Model_set_ConstraintSet(self, *args)


    def copyProperty_MarkerSet(self, source):
        """
        copyProperty_MarkerSet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_MarkerSet(self, source)


    def append_MarkerSet(self, value):
        """
        append_MarkerSet(Model self, MarkerSet value) -> int

        Parameters
        ----------
        value: OpenSim::MarkerSet const &

        """
        return _simulation.Model_append_MarkerSet(self, value)


    def constructProperty_MarkerSet(self, initValue):
        """
        constructProperty_MarkerSet(Model self, MarkerSet initValue)

        Parameters
        ----------
        initValue: OpenSim::MarkerSet const &

        """
        return _simulation.Model_constructProperty_MarkerSet(self, initValue)


    def get_MarkerSet(self, *args):
        """
        get_MarkerSet(Model self, int i) -> MarkerSet

        Parameters
        ----------
        i: int

        get_MarkerSet(Model self) -> MarkerSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_MarkerSet(self, *args)


    def upd_MarkerSet(self, *args):
        """
        upd_MarkerSet(Model self, int i) -> MarkerSet

        Parameters
        ----------
        i: int

        upd_MarkerSet(Model self) -> MarkerSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_MarkerSet(self, *args)


    def set_MarkerSet(self, *args):
        """
        set_MarkerSet(Model self, int i, MarkerSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::MarkerSet const &

        set_MarkerSet(Model self, MarkerSet value)

        Parameters
        ----------
        value: OpenSim::MarkerSet const &

        """
        return _simulation.Model_set_MarkerSet(self, *args)


    def copyProperty_ForceSet(self, source):
        """
        copyProperty_ForceSet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_ForceSet(self, source)


    def append_ForceSet(self, value):
        """
        append_ForceSet(Model self, ForceSet value) -> int

        Parameters
        ----------
        value: OpenSim::ForceSet const &

        """
        return _simulation.Model_append_ForceSet(self, value)


    def constructProperty_ForceSet(self, initValue):
        """
        constructProperty_ForceSet(Model self, ForceSet initValue)

        Parameters
        ----------
        initValue: OpenSim::ForceSet const &

        """
        return _simulation.Model_constructProperty_ForceSet(self, initValue)


    def get_ForceSet(self, *args):
        """
        get_ForceSet(Model self, int i) -> ForceSet

        Parameters
        ----------
        i: int

        get_ForceSet(Model self) -> ForceSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_ForceSet(self, *args)


    def upd_ForceSet(self, *args):
        """
        upd_ForceSet(Model self, int i) -> ForceSet

        Parameters
        ----------
        i: int

        upd_ForceSet(Model self) -> ForceSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_ForceSet(self, *args)


    def set_ForceSet(self, *args):
        """
        set_ForceSet(Model self, int i, ForceSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::ForceSet const &

        set_ForceSet(Model self, ForceSet value)

        Parameters
        ----------
        value: OpenSim::ForceSet const &

        """
        return _simulation.Model_set_ForceSet(self, *args)


    def copyProperty_ControllerSet(self, source):
        """
        copyProperty_ControllerSet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_ControllerSet(self, source)


    def append_ControllerSet(self, value):
        """
        append_ControllerSet(Model self, ControllerSet value) -> int

        Parameters
        ----------
        value: OpenSim::ControllerSet const &

        """
        return _simulation.Model_append_ControllerSet(self, value)


    def constructProperty_ControllerSet(self, initValue):
        """
        constructProperty_ControllerSet(Model self, ControllerSet initValue)

        Parameters
        ----------
        initValue: OpenSim::ControllerSet const &

        """
        return _simulation.Model_constructProperty_ControllerSet(self, initValue)


    def get_ControllerSet(self, *args):
        """
        get_ControllerSet(Model self, int i) -> ControllerSet

        Parameters
        ----------
        i: int

        get_ControllerSet(Model self) -> ControllerSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_ControllerSet(self, *args)


    def upd_ControllerSet(self, *args):
        """
        upd_ControllerSet(Model self, int i) -> ControllerSet

        Parameters
        ----------
        i: int

        upd_ControllerSet(Model self) -> ControllerSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_ControllerSet(self, *args)


    def set_ControllerSet(self, *args):
        """
        set_ControllerSet(Model self, int i, ControllerSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::ControllerSet const &

        set_ControllerSet(Model self, ControllerSet value)

        Parameters
        ----------
        value: OpenSim::ControllerSet const &

        """
        return _simulation.Model_set_ControllerSet(self, *args)


    def copyProperty_ContactGeometrySet(self, source):
        """
        copyProperty_ContactGeometrySet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_ContactGeometrySet(self, source)


    def append_ContactGeometrySet(self, value):
        """
        append_ContactGeometrySet(Model self, ContactGeometrySet value) -> int

        Parameters
        ----------
        value: OpenSim::ContactGeometrySet const &

        """
        return _simulation.Model_append_ContactGeometrySet(self, value)


    def constructProperty_ContactGeometrySet(self, initValue):
        """
        constructProperty_ContactGeometrySet(Model self, ContactGeometrySet initValue)

        Parameters
        ----------
        initValue: OpenSim::ContactGeometrySet const &

        """
        return _simulation.Model_constructProperty_ContactGeometrySet(self, initValue)


    def get_ContactGeometrySet(self, *args):
        """
        get_ContactGeometrySet(Model self, int i) -> ContactGeometrySet

        Parameters
        ----------
        i: int

        get_ContactGeometrySet(Model self) -> ContactGeometrySet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_ContactGeometrySet(self, *args)


    def upd_ContactGeometrySet(self, *args):
        """
        upd_ContactGeometrySet(Model self, int i) -> ContactGeometrySet

        Parameters
        ----------
        i: int

        upd_ContactGeometrySet(Model self) -> ContactGeometrySet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_ContactGeometrySet(self, *args)


    def set_ContactGeometrySet(self, *args):
        """
        set_ContactGeometrySet(Model self, int i, ContactGeometrySet value)

        Parameters
        ----------
        i: int
        value: OpenSim::ContactGeometrySet const &

        set_ContactGeometrySet(Model self, ContactGeometrySet value)

        Parameters
        ----------
        value: OpenSim::ContactGeometrySet const &

        """
        return _simulation.Model_set_ContactGeometrySet(self, *args)


    def copyProperty_ProbeSet(self, source):
        """
        copyProperty_ProbeSet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_ProbeSet(self, source)


    def append_ProbeSet(self, value):
        """
        append_ProbeSet(Model self, ProbeSet value) -> int

        Parameters
        ----------
        value: OpenSim::ProbeSet const &

        """
        return _simulation.Model_append_ProbeSet(self, value)


    def constructProperty_ProbeSet(self, initValue):
        """
        constructProperty_ProbeSet(Model self, ProbeSet initValue)

        Parameters
        ----------
        initValue: OpenSim::ProbeSet const &

        """
        return _simulation.Model_constructProperty_ProbeSet(self, initValue)


    def get_ProbeSet(self, *args):
        """
        get_ProbeSet(Model self, int i) -> ProbeSet

        Parameters
        ----------
        i: int

        get_ProbeSet(Model self) -> ProbeSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_ProbeSet(self, *args)


    def upd_ProbeSet(self, *args):
        """
        upd_ProbeSet(Model self, int i) -> ProbeSet

        Parameters
        ----------
        i: int

        upd_ProbeSet(Model self) -> ProbeSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_ProbeSet(self, *args)


    def set_ProbeSet(self, *args):
        """
        set_ProbeSet(Model self, int i, ProbeSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::ProbeSet const &

        set_ProbeSet(Model self, ProbeSet value)

        Parameters
        ----------
        value: OpenSim::ProbeSet const &

        """
        return _simulation.Model_set_ProbeSet(self, *args)


    def copyProperty_ComponentSet(self, source):
        """
        copyProperty_ComponentSet(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_ComponentSet(self, source)


    def append_ComponentSet(self, value):
        """
        append_ComponentSet(Model self, ComponentSet value) -> int

        Parameters
        ----------
        value: OpenSim::ComponentSet const &

        """
        return _simulation.Model_append_ComponentSet(self, value)


    def constructProperty_ComponentSet(self, initValue):
        """
        constructProperty_ComponentSet(Model self, ComponentSet initValue)

        Parameters
        ----------
        initValue: OpenSim::ComponentSet const &

        """
        return _simulation.Model_constructProperty_ComponentSet(self, initValue)


    def get_ComponentSet(self, *args):
        """
        get_ComponentSet(Model self, int i) -> ComponentSet

        Parameters
        ----------
        i: int

        get_ComponentSet(Model self) -> ComponentSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_ComponentSet(self, *args)


    def upd_ComponentSet(self, *args):
        """
        upd_ComponentSet(Model self, int i) -> ComponentSet

        Parameters
        ----------
        i: int

        upd_ComponentSet(Model self) -> ComponentSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_ComponentSet(self, *args)


    def set_ComponentSet(self, *args):
        """
        set_ComponentSet(Model self, int i, ComponentSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::ComponentSet const &

        set_ComponentSet(Model self, ComponentSet value)

        Parameters
        ----------
        value: OpenSim::ComponentSet const &

        """
        return _simulation.Model_set_ComponentSet(self, *args)


    def copyProperty_ModelVisualPreferences(self, source):
        """
        copyProperty_ModelVisualPreferences(Model self, Model source)

        Parameters
        ----------
        source: OpenSim::Model::Self const &

        """
        return _simulation.Model_copyProperty_ModelVisualPreferences(self, source)


    def append_ModelVisualPreferences(self, value):
        """
        append_ModelVisualPreferences(Model self, ModelVisualPreferences value) -> int

        Parameters
        ----------
        value: OpenSim::ModelVisualPreferences const &

        """
        return _simulation.Model_append_ModelVisualPreferences(self, value)


    def constructProperty_ModelVisualPreferences(self, initValue):
        """
        constructProperty_ModelVisualPreferences(Model self, ModelVisualPreferences initValue)

        Parameters
        ----------
        initValue: OpenSim::ModelVisualPreferences const &

        """
        return _simulation.Model_constructProperty_ModelVisualPreferences(self, initValue)


    def get_ModelVisualPreferences(self, *args):
        """
        get_ModelVisualPreferences(Model self, int i) -> ModelVisualPreferences

        Parameters
        ----------
        i: int

        get_ModelVisualPreferences(Model self) -> ModelVisualPreferences

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_get_ModelVisualPreferences(self, *args)


    def upd_ModelVisualPreferences(self, *args):
        """
        upd_ModelVisualPreferences(Model self, int i) -> ModelVisualPreferences

        Parameters
        ----------
        i: int

        upd_ModelVisualPreferences(Model self) -> ModelVisualPreferences

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_upd_ModelVisualPreferences(self, *args)


    def set_ModelVisualPreferences(self, *args):
        """
        set_ModelVisualPreferences(Model self, int i, ModelVisualPreferences value)

        Parameters
        ----------
        i: int
        value: OpenSim::ModelVisualPreferences const &

        set_ModelVisualPreferences(Model self, ModelVisualPreferences value)

        Parameters
        ----------
        value: OpenSim::ModelVisualPreferences const &

        """
        return _simulation.Model_set_ModelVisualPreferences(self, *args)

    __swig_setmethods__["_has_output_com_position"] = _simulation.Model__has_output_com_position_set
    __swig_getmethods__["_has_output_com_position"] = _simulation.Model__has_output_com_position_get
    if _newclass:
        _has_output_com_position = _swig_property(_simulation.Model__has_output_com_position_get, _simulation.Model__has_output_com_position_set)
    __swig_setmethods__["_has_output_com_velocity"] = _simulation.Model__has_output_com_velocity_set
    __swig_getmethods__["_has_output_com_velocity"] = _simulation.Model__has_output_com_velocity_get
    if _newclass:
        _has_output_com_velocity = _swig_property(_simulation.Model__has_output_com_velocity_get, _simulation.Model__has_output_com_velocity_set)
    __swig_setmethods__["_has_output_com_acceleration"] = _simulation.Model__has_output_com_acceleration_set
    __swig_getmethods__["_has_output_com_acceleration"] = _simulation.Model__has_output_com_acceleration_get
    if _newclass:
        _has_output_com_acceleration = _swig_property(_simulation.Model__has_output_com_acceleration_get, _simulation.Model__has_output_com_acceleration_set)
    __swig_setmethods__["_has_output_kinetic_energy"] = _simulation.Model__has_output_kinetic_energy_set
    __swig_getmethods__["_has_output_kinetic_energy"] = _simulation.Model__has_output_kinetic_energy_get
    if _newclass:
        _has_output_kinetic_energy = _swig_property(_simulation.Model__has_output_kinetic_energy_get, _simulation.Model__has_output_kinetic_energy_set)
    __swig_setmethods__["_has_output_potential_energy"] = _simulation.Model__has_output_potential_energy_set
    __swig_getmethods__["_has_output_potential_energy"] = _simulation.Model__has_output_potential_energy_get
    if _newclass:
        _has_output_potential_energy = _swig_property(_simulation.Model__has_output_potential_energy_get, _simulation.Model__has_output_potential_energy_set)

    def finalizeConnections(self, *args):
        """
        finalizeConnections(Model self)
        finalizeConnections(Model self, Component root)

        Parameters
        ----------
        root: OpenSim::Component &

        """
        return _simulation.Model_finalizeConnections(self, *args)


    def setup(self):
        """
        setup(Model self)

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_setup(self)


    def cleanup(self):
        """
        cleanup(Model self)

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_cleanup(self)


    def clone(self):
        """
        clone(Model self) -> Model

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getConcreteClassName(self)


    def getDisplayHints(self):
        """
        getDisplayHints(Model self) -> ModelDisplayHints

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getDisplayHints(self)


    def updDisplayHints(self):
        """
        updDisplayHints(Model self) -> ModelDisplayHints

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updDisplayHints(self)


    def setUseVisualizer(self, visualize):
        """
        setUseVisualizer(Model self, bool visualize)

        Parameters
        ----------
        visualize: bool

        """
        return _simulation.Model_setUseVisualizer(self, visualize)


    def getUseVisualizer(self):
        """
        getUseVisualizer(Model self) -> bool

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getUseVisualizer(self)


    def hasVisualizer(self):
        """
        hasVisualizer(Model self) -> bool

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_hasVisualizer(self)


    def getVisualizer(self):
        """
        getVisualizer(Model self) -> ModelVisualizer

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getVisualizer(self)


    def updVisualizer(self):
        """
        updVisualizer(Model self) -> ModelVisualizer

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updVisualizer(self)


    def buildSystem(self):
        """
        buildSystem(Model self)

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_buildSystem(self)


    def initializeState(self):
        """
        initializeState(Model self) -> State

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_initializeState(self)


    def initSystem(self):
        """
        initSystem(Model self) -> State

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_initSystem(self)


    def getWorkingState(self):
        """
        getWorkingState(Model self) -> State

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getWorkingState(self)


    def updWorkingState(self):
        """
        updWorkingState(Model self) -> State

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updWorkingState(self)


    def initStateWithoutRecreatingSystem(self, state):
        """
        initStateWithoutRecreatingSystem(Model self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.Model_initStateWithoutRecreatingSystem(self, state)


    def invalidateSystem(self):
        """
        invalidateSystem(Model self)

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_invalidateSystem(self)


    def isValidSystem(self):
        """
        isValidSystem(Model self) -> bool

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_isValidSystem(self)


    def formStateStorage(self, originalStorage, statesStorage, warnUnspecifiedStates=True):
        """
        formStateStorage(Model self, Storage originalStorage, Storage statesStorage, bool warnUnspecifiedStates=True)

        Parameters
        ----------
        originalStorage: OpenSim::Storage const &
        statesStorage: OpenSim::Storage &
        warnUnspecifiedStates: bool

        formStateStorage(Model self, Storage originalStorage, Storage statesStorage)

        Parameters
        ----------
        originalStorage: OpenSim::Storage const &
        statesStorage: OpenSim::Storage &

        """
        return _simulation.Model_formStateStorage(self, originalStorage, statesStorage, warnUnspecifiedStates)


    def formQStorage(self, originalStorage, qStorage):
        """
        formQStorage(Model self, Storage originalStorage, Storage qStorage)

        Parameters
        ----------
        originalStorage: OpenSim::Storage const &
        qStorage: OpenSim::Storage &

        """
        return _simulation.Model_formQStorage(self, originalStorage, qStorage)


    def updateAssemblyConditions(self, s):
        """
        updateAssemblyConditions(Model self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Model_updateAssemblyConditions(self, s)


    def assemble(self, state, coord=None, weight=10):
        """
        assemble(Model self, State state, Coordinate coord=None, double weight=10)

        Parameters
        ----------
        state: SimTK::State &
        coord: OpenSim::Coordinate const *
        weight: double

        assemble(Model self, State state, Coordinate coord=None)

        Parameters
        ----------
        state: SimTK::State &
        coord: OpenSim::Coordinate const *

        assemble(Model self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.Model_assemble(self, state, coord, weight)


    def equilibrateMuscles(self, state):
        """
        equilibrateMuscles(Model self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.Model_equilibrateMuscles(self, state)


    def getMultibodySystem(self):
        """
        getMultibodySystem(Model self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getMultibodySystem(self)


    def updMultibodySystem(self):
        """
        updMultibodySystem(Model self) -> SimTK::MultibodySystem &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_updMultibodySystem(self)


    def getDefaultSubsystem(self):
        """
        getDefaultSubsystem(Model self) -> SimTK::DefaultSystemSubsystem const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getDefaultSubsystem(self)


    def updDefaultSubsystem(self):
        """
        updDefaultSubsystem(Model self) -> SimTK::DefaultSystemSubsystem &

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updDefaultSubsystem(self)


    def getMatterSubsystem(self):
        """
        getMatterSubsystem(Model self) -> SimbodyMatterSubsystem

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getMatterSubsystem(self)


    def updMatterSubsystem(self):
        """
        updMatterSubsystem(Model self) -> SimbodyMatterSubsystem

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updMatterSubsystem(self)


    def getGravityForce(self):
        """
        getGravityForce(Model self) -> SimTK::Force::Gravity const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getGravityForce(self)


    def updGravityForce(self):
        """
        updGravityForce(Model self) -> SimTK::Force::Gravity &

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updGravityForce(self)


    def getForceSubsystem(self):
        """
        getForceSubsystem(Model self) -> SimTK::GeneralForceSubsystem const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getForceSubsystem(self)


    def updForceSubsystem(self):
        """
        updForceSubsystem(Model self) -> SimTK::GeneralForceSubsystem &

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updForceSubsystem(self)


    def realizeTime(self, state):
        """
        realizeTime(Model self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Model_realizeTime(self, state)


    def realizePosition(self, state):
        """
        realizePosition(Model self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Model_realizePosition(self, state)


    def realizeVelocity(self, state):
        """
        realizeVelocity(Model self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Model_realizeVelocity(self, state)


    def realizeDynamics(self, state):
        """
        realizeDynamics(Model self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Model_realizeDynamics(self, state)


    def realizeAcceleration(self, state):
        """
        realizeAcceleration(Model self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Model_realizeAcceleration(self, state)


    def realizeReport(self, state):
        """
        realizeReport(Model self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Model_realizeReport(self, state)


    def addModelComponent(self, adoptee):
        """
        addModelComponent(Model self, ModelComponent adoptee)

        Parameters
        ----------
        adoptee: OpenSim::ModelComponent *

        """
        val = _simulation.Model_addModelComponent(self, adoptee)

        adoptee._markAdopted()


        return val


    def addBody(self, adoptee):
        """
        addBody(Model self, Body adoptee)

        Parameters
        ----------
        adoptee: OpenSim::Body *

        """
        val = _simulation.Model_addBody(self, adoptee)

        adoptee._markAdopted()


        return val


    def addJoint(self, adoptee):
        """
        addJoint(Model self, Joint adoptee)

        Parameters
        ----------
        adoptee: OpenSim::Joint *

        """
        val = _simulation.Model_addJoint(self, adoptee)

        adoptee._markAdopted()


        return val


    def addConstraint(self, adoptee):
        """
        addConstraint(Model self, Constraint adoptee)

        Parameters
        ----------
        adoptee: OpenSim::Constraint *

        """
        val = _simulation.Model_addConstraint(self, adoptee)

        adoptee._markAdopted()


        return val


    def addForce(self, adoptee):
        """
        addForce(Model self, Force adoptee)

        Parameters
        ----------
        adoptee: OpenSim::Force *

        """
        val = _simulation.Model_addForce(self, adoptee)

        adoptee._markAdopted()


        return val


    def addProbe(self, adoptee):
        """
        addProbe(Model self, Probe adoptee)

        Parameters
        ----------
        adoptee: OpenSim::Probe *

        """
        val = _simulation.Model_addProbe(self, adoptee)

        adoptee._markAdopted()


        return val


    def addContactGeometry(self, adoptee):
        """
        addContactGeometry(Model self, ContactGeometry adoptee)

        Parameters
        ----------
        adoptee: OpenSim::ContactGeometry *

        """
        val = _simulation.Model_addContactGeometry(self, adoptee)

        adoptee._markAdopted()


        return val


    def addMarker(self, adoptee):
        """
        addMarker(Model self, Marker adoptee)

        Parameters
        ----------
        adoptee: OpenSim::Marker *

        """
        val = _simulation.Model_addMarker(self, adoptee)

        adoptee._markAdopted()


        return val


    def removeProbe(self, probe):
        """
        removeProbe(Model self, Probe probe)

        Parameters
        ----------
        probe: OpenSim::Probe *

        """
        return _simulation.Model_removeProbe(self, probe)


    def getInputFileName(self):
        """
        getInputFileName(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getInputFileName(self)


    def setInputFileName(self, fileName):
        """
        setInputFileName(Model self, std::string const & fileName)

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.Model_setInputFileName(self, fileName)


    def getCredits(self):
        """
        getCredits(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getCredits(self)


    def setAuthors(self, aCredits):
        """
        setAuthors(Model self, std::string const & aCredits)

        Parameters
        ----------
        aCredits: std::string const &

        """
        return _simulation.Model_setAuthors(self, aCredits)


    def getPublications(self):
        """
        getPublications(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getPublications(self)


    def setPublications(self, aPublications):
        """
        setPublications(Model self, std::string const & aPublications)

        Parameters
        ----------
        aPublications: std::string const &

        """
        return _simulation.Model_setPublications(self, aPublications)


    def getLengthUnits(self):
        """
        getLengthUnits(Model self) -> Units

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getLengthUnits(self)


    def getForceUnits(self):
        """
        getForceUnits(Model self) -> Units

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getForceUnits(self)


    def getGravity(self):
        """
        getGravity(Model self) -> Vec3

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getGravity(self)


    def setGravity(self, aGrav):
        """
        setGravity(Model self, Vec3 aGrav) -> bool

        Parameters
        ----------
        aGrav: SimTK::Vec3 const &

        """
        return _simulation.Model_setGravity(self, aGrav)


    def getNumMarkers(self):
        """
        getNumMarkers(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumMarkers(self)


    def getNumContactGeometries(self):
        """
        getNumContactGeometries(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumContactGeometries(self)


    def getNumBodies(self):
        """
        getNumBodies(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumBodies(self)


    def getNumJoints(self):
        """
        getNumJoints(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumJoints(self)


    def getNumCoordinates(self):
        """
        getNumCoordinates(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumCoordinates(self)


    def getNumSpeeds(self):
        """
        getNumSpeeds(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumSpeeds(self)


    def getNumConstraints(self):
        """
        getNumConstraints(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumConstraints(self)


    def getNumProbes(self):
        """
        getNumProbes(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumProbes(self)


    def getActuators(self):
        """
        getActuators(Model self) -> SetActuators

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getActuators(self)


    def updActuators(self):
        """
        updActuators(Model self) -> SetActuators

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updActuators(self)


    def getMuscles(self):
        """
        getMuscles(Model self) -> SetMuscles

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getMuscles(self)


    def updMuscles(self):
        """
        updMuscles(Model self) -> SetMuscles

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updMuscles(self)


    def getForceSet(self):
        """
        getForceSet(Model self) -> ForceSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getForceSet(self)


    def updForceSet(self):
        """
        updForceSet(Model self) -> ForceSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updForceSet(self)


    def getProbeSet(self):
        """
        getProbeSet(Model self) -> ProbeSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getProbeSet(self)


    def updProbeSet(self):
        """
        updProbeSet(Model self) -> ProbeSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updProbeSet(self)


    def getMiscModelComponentSet(self):
        """
        getMiscModelComponentSet(Model self) -> ComponentSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getMiscModelComponentSet(self)


    def updMiscModelComponentSet(self):
        """
        updMiscModelComponentSet(Model self) -> ComponentSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updMiscModelComponentSet(self)


    def getNumAnalyses(self):
        """
        getNumAnalyses(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumAnalyses(self)


    def getNumControls(self):
        """
        getNumControls(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumControls(self)


    def updDefaultControls(self):
        """
        updDefaultControls(Model self) -> Vector

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_updDefaultControls(self)


    def setDefaultControls(self, controls):
        """
        setDefaultControls(Model self, Vector controls)

        Parameters
        ----------
        controls: SimTK::Vector const &

        """
        return _simulation.Model_setDefaultControls(self, controls)


    def getDefaultControls(self):
        """
        getDefaultControls(Model self) -> Vector

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getDefaultControls(self)


    def updControls(self, s):
        """
        updControls(Model self, State s) -> Vector

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_updControls(self, s)


    def markControlsAsValid(self, s):
        """
        markControlsAsValid(Model self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_markControlsAsValid(self, s)


    def setControls(self, s, controls):
        """
        setControls(Model self, State s, Vector controls)

        Parameters
        ----------
        s: SimTK::State const &
        controls: SimTK::Vector const &

        """
        return _simulation.Model_setControls(self, s, controls)


    def getControls(self, s):
        """
        getControls(Model self, State s) -> Vector

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_getControls(self, s)


    def computeControls(self, state, controls):
        """
        computeControls(Model self, State state, Vector controls)

        Parameters
        ----------
        state: SimTK::State const &
        controls: SimTK::Vector &

        """
        return _simulation.Model_computeControls(self, state, controls)


    def isControlled(self):
        """
        isControlled(Model self) -> bool

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_isControlled(self)


    def storeControls(self, s, step):
        """
        storeControls(Model self, State s, int step)

        Parameters
        ----------
        s: SimTK::State const &
        step: int

        """
        return _simulation.Model_storeControls(self, s, step)


    def printControlStorage(self, fileName):
        """
        printControlStorage(Model self, std::string const & fileName)

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.Model_printControlStorage(self, fileName)


    def getControlsTable(self):
        """
        getControlsTable(Model self) -> TimeSeriesTable

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getControlsTable(self)


    def getControllerSet(self):
        """
        getControllerSet(Model self) -> ControllerSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getControllerSet(self)


    def updControllerSet(self):
        """
        updControllerSet(Model self) -> ControllerSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updControllerSet(self)


    def getAllControllersEnabled(self):
        """
        getAllControllersEnabled(Model self) -> bool

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getAllControllersEnabled(self)


    def setAllControllersEnabled(self, enabled):
        """
        setAllControllersEnabled(Model self, bool enabled)

        Parameters
        ----------
        enabled: bool

        """
        return _simulation.Model_setAllControllersEnabled(self, enabled)


    def applyDefaultConfiguration(self, s):
        """
        applyDefaultConfiguration(Model self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Model_applyDefaultConfiguration(self, s)


    def getSimbodyEngine(self):
        """
        getSimbodyEngine(Model self) -> SimbodyEngine

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getSimbodyEngine(self)


    def updSimbodyEngine(self):
        """
        updSimbodyEngine(Model self) -> SimbodyEngine

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updSimbodyEngine(self)


    def computeStateVariableDerivatives(self, s):
        """
        computeStateVariableDerivatives(Model self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_computeStateVariableDerivatives(self, s)


    def getTotalMass(self, s):
        """
        getTotalMass(Model self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_getTotalMass(self, s)


    def getInertiaAboutMassCenter(self, s):
        """
        getInertiaAboutMassCenter(Model self, State s) -> Inertia

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_getInertiaAboutMassCenter(self, s)


    def calcMassCenterPosition(self, s):
        """
        calcMassCenterPosition(Model self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_calcMassCenterPosition(self, s)


    def calcMassCenterVelocity(self, s):
        """
        calcMassCenterVelocity(Model self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_calcMassCenterVelocity(self, s)


    def calcMassCenterAcceleration(self, s):
        """
        calcMassCenterAcceleration(Model self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_calcMassCenterAcceleration(self, s)


    def calcKineticEnergy(self, s):
        """
        calcKineticEnergy(Model self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_calcKineticEnergy(self, s)


    def calcPotentialEnergy(self, s):
        """
        calcPotentialEnergy(Model self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_calcPotentialEnergy(self, s)


    def getNumMuscleStates(self):
        """
        getNumMuscleStates(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumMuscleStates(self)


    def getNumProbeStates(self):
        """
        getNumProbeStates(Model self) -> int

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getNumProbeStates(self)


    def updCoordinateSet(self):
        """
        updCoordinateSet(Model self) -> CoordinateSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updCoordinateSet(self)


    def getCoordinateSet(self):
        """
        getCoordinateSet(Model self) -> CoordinateSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getCoordinateSet(self)


    def getCoordinatesInMultibodyTreeOrder(self):
        """
        getCoordinatesInMultibodyTreeOrder(Model self) -> std::vector< SimTK::ReferencePtr< OpenSim::Coordinate const >,std::allocator< SimTK::ReferencePtr< OpenSim::Coordinate const > > >

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getCoordinatesInMultibodyTreeOrder(self)


    def getWarningMesssageForMotionTypeInconsistency(self):
        """
        getWarningMesssageForMotionTypeInconsistency(Model self) -> std::string

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getWarningMesssageForMotionTypeInconsistency(self)


    def updBodySet(self):
        """
        updBodySet(Model self) -> BodySet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updBodySet(self)


    def getBodySet(self):
        """
        getBodySet(Model self) -> BodySet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getBodySet(self)


    def updJointSet(self):
        """
        updJointSet(Model self) -> JointSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updJointSet(self)


    def getJointSet(self):
        """
        getJointSet(Model self) -> JointSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getJointSet(self)


    def updAnalysisSet(self):
        """
        updAnalysisSet(Model self) -> AnalysisSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updAnalysisSet(self)


    def getAnalysisSet(self):
        """
        getAnalysisSet(Model self) -> AnalysisSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getAnalysisSet(self)


    def updContactGeometrySet(self):
        """
        updContactGeometrySet(Model self) -> ContactGeometrySet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updContactGeometrySet(self)


    def getContactGeometrySet(self):
        """
        getContactGeometrySet(Model self) -> ContactGeometrySet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getContactGeometrySet(self)


    def getGround(self):
        """
        getGround(Model self) -> Ground

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getGround(self)


    def updGround(self):
        """
        updGround(Model self) -> Ground

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updGround(self)


    def updConstraintSet(self):
        """
        updConstraintSet(Model self) -> ConstraintSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updConstraintSet(self)


    def getConstraintSet(self):
        """
        getConstraintSet(Model self) -> ConstraintSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getConstraintSet(self)


    def updMarkerSet(self):
        """
        updMarkerSet(Model self) -> MarkerSet

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_updMarkerSet(self)


    def getMarkerSet(self):
        """
        getMarkerSet(Model self) -> MarkerSet

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getMarkerSet(self)


    def writeMarkerFile(self, aFileName):
        """
        writeMarkerFile(Model self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _simulation.Model_writeMarkerFile(self, aFileName)


    def updateMarkerSet(self, newMarkerSet):
        """
        updateMarkerSet(Model self, MarkerSet newMarkerSet)

        Parameters
        ----------
        newMarkerSet: OpenSim::MarkerSet &

        """
        return _simulation.Model_updateMarkerSet(self, newMarkerSet)


    def deleteUnusedMarkers(self, aMarkerNames):
        """
        deleteUnusedMarkers(Model self, ArrayStr aMarkerNames) -> int

        Parameters
        ----------
        aMarkerNames: OpenSim::Array< std::string > const &

        """
        return _simulation.Model_deleteUnusedMarkers(self, aMarkerNames)


    def addAnalysis(self, adoptee):
        """
        addAnalysis(Model self, Analysis adoptee)

        Parameters
        ----------
        adoptee: OpenSim::Analysis *

        """
        val = _simulation.Model_addAnalysis(self, adoptee)

        adoptee._markAdopted()


        return val


    def addController(self, adoptee):
        """
        addController(Model self, Controller adoptee)

        Parameters
        ----------
        adoptee: OpenSim::Controller *

        """
        val = _simulation.Model_addController(self, adoptee)

        adoptee._markAdopted()


        return val


    def removeAnalysis(self, analysis, deleteIt=True):
        """
        removeAnalysis(Model self, Analysis analysis, bool deleteIt=True)

        Parameters
        ----------
        analysis: OpenSim::Analysis *
        deleteIt: bool

        removeAnalysis(Model self, Analysis analysis)

        Parameters
        ----------
        analysis: OpenSim::Analysis *

        """
        return _simulation.Model_removeAnalysis(self, analysis, deleteIt)


    def removeController(self, aController):
        """
        removeController(Model self, Controller aController)

        Parameters
        ----------
        aController: OpenSim::Controller *

        """
        return _simulation.Model_removeController(self, aController)


    def scale(self, state, scaleSet, preserveMassDist, finalMass=-1.0):
        """
        scale(Model self, State state, ScaleSet scaleSet, bool preserveMassDist, double finalMass=-1.0) -> bool

        Parameters
        ----------
        state: SimTK::State &
        scaleSet: OpenSim::ScaleSet const &
        preserveMassDist: bool
        finalMass: double

        scale(Model self, State state, ScaleSet scaleSet, bool preserveMassDist) -> bool

        Parameters
        ----------
        state: SimTK::State &
        scaleSet: OpenSim::ScaleSet const &
        preserveMassDist: bool

        """
        return _simulation.Model_scale(self, state, scaleSet, preserveMassDist, finalMass)


    def printBasicInfo(self, *args):
        """
        printBasicInfo(Model self, std::ostream & aOStream)

        Parameters
        ----------
        aOStream: std::ostream &

        printBasicInfo(Model self)

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_printBasicInfo(self, *args)


    def printDetailedInfo(self, *args):
        """
        printDetailedInfo(Model self, State s, std::ostream & aOStream)

        Parameters
        ----------
        s: SimTK::State const &
        aOStream: std::ostream &

        printDetailedInfo(Model self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Model_printDetailedInfo(self, *args)


    def disownAllComponents(self):
        """
        disownAllComponents(Model self)

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_disownAllComponents(self)


    def overrideAllActuators(self, s, flag):
        """
        overrideAllActuators(Model self, State s, bool flag)

        Parameters
        ----------
        s: SimTK::State &
        flag: bool

        """
        return _simulation.Model_overrideAllActuators(self, s, flag)


    def getValidationLog(self):
        """
        getValidationLog(Model self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getValidationLog(self)


    def appendToValidationLog(self, note):
        """
        appendToValidationLog(Model self, std::string const & note)

        Parameters
        ----------
        note: std::string const &

        """
        return _simulation.Model_appendToValidationLog(self, note)


    def clearValidationLog(self):
        """
        clearValidationLog(Model self)

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_clearValidationLog(self)


    def getObjectByTypeAndName(self, typeString, nameString):
        """
        getObjectByTypeAndName(Model self, std::string const & typeString, std::string const & nameString) -> OpenSimObject

        Parameters
        ----------
        typeString: std::string const &
        nameString: std::string const &

        """
        return _simulation.Model_getObjectByTypeAndName(self, typeString, nameString)

    __swig_destroy__ = _simulation.delete_Model
    __del__ = lambda self: None

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        """
        updateFromXMLNode(Model self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        updateFromXMLNode(Model self, SimTK::Xml::Element & aNode)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &

        """
        return _simulation.Model_updateFromXMLNode(self, aNode, versionNumber)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(Model self)

        Parameters
        ----------
        self: OpenSim::Model *

        """
        return _simulation.Model_extendFinalizeFromProperties(self)


    def extendConnectToModel(self, model):
        """
        extendConnectToModel(Model self, Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _simulation.Model_extendConnectToModel(self, model)


    def extendAddToSystem(self, system):
        """
        extendAddToSystem(Model self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.Model_extendAddToSystem(self, system)


    def extendInitStateFromProperties(self, state):
        """
        extendInitStateFromProperties(Model self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.Model_extendInitStateFromProperties(self, state)


    def extendSetPropertiesFromState(self, state):
        """
        extendSetPropertiesFromState(Model self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Model_extendSetPropertiesFromState(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(Model self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.Model_generateDecorations(self, fixed, hints, state, appendToThis)


    def getFrameList(self):
        """
        getFrameList(Model self) -> FrameList

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getFrameList(self)


    def getBodyList(self):
        """
        getBodyList(Model self) -> BodyList

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getBodyList(self)


    def getMuscleList(self):
        """
        getMuscleList(Model self) -> MuscleList

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getMuscleList(self)


    def getModelComponentList(self):
        """
        getModelComponentList(Model self) -> ModelComponentList

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getModelComponentList(self)


    def getJointList(self):
        """
        getJointList(Model self) -> JointList

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getJointList(self)


    def getActuatorList(self):
        """
        getActuatorList(Model self) -> ActuatorList

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getActuatorList(self)


    def getThelen2003MuscleList(self):
        """
        getThelen2003MuscleList(Model self) -> Thelen2003MuscleList

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getThelen2003MuscleList(self)


    def getMillard2012EquilibriumMuscleList(self):
        """
        getMillard2012EquilibriumMuscleList(Model self) -> Millard2012EquilibriumMuscleList

        Parameters
        ----------
        self: OpenSim::Model const *

        """
        return _simulation.Model_getMillard2012EquilibriumMuscleList(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::Model self) -> Model
        __init__(OpenSim::Model self, std::string const & filename) -> Model

        Parameters
        ----------
        filename: std::string const &

        __init__(OpenSim::Model self, Model other) -> Model

        Parameters
        ----------
        other: OpenSim::Model const &

        """
        this = _simulation.new_Model(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Model_swigregister = _simulation.Model_swigregister
Model_swigregister(Model)

def Model_safeDownCast(obj):
    """
    Model_safeDownCast(OpenSimObject obj) -> Model

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Model_safeDownCast(obj)

def Model_getClassName():
    """Model_getClassName() -> std::string const &"""
    return _simulation.Model_getClassName()

class AbstractPathPoint(Point):
    """Proxy of C++ OpenSim::AbstractPathPoint class."""

    __swig_setmethods__ = {}
    for _s in [Point]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractPathPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Point]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractPathPoint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AbstractPathPoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.AbstractPathPoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(AbstractPathPoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.AbstractPathPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.AbstractPathPoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(AbstractPathPoint self) -> AbstractPathPoint

        Parameters
        ----------
        self: OpenSim::AbstractPathPoint const *

        """
        return _simulation.AbstractPathPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AbstractPathPoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractPathPoint const *

        """
        return _simulation.AbstractPathPoint_getConcreteClassName(self)

    __swig_setmethods__["PropertyIndex_socket_parent_frame"] = _simulation.AbstractPathPoint_PropertyIndex_socket_parent_frame_set
    __swig_getmethods__["PropertyIndex_socket_parent_frame"] = _simulation.AbstractPathPoint_PropertyIndex_socket_parent_frame_get
    if _newclass:
        PropertyIndex_socket_parent_frame = _swig_property(_simulation.AbstractPathPoint_PropertyIndex_socket_parent_frame_get, _simulation.AbstractPathPoint_PropertyIndex_socket_parent_frame_set)

    def connectSocket_parent_frame(self, object):
        """
        connectSocket_parent_frame(AbstractPathPoint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.AbstractPathPoint_connectSocket_parent_frame(self, object)

    __swig_destroy__ = _simulation.delete_AbstractPathPoint
    __del__ = lambda self: None

    def getLocation(self, s):
        """
        getLocation(AbstractPathPoint self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.AbstractPathPoint_getLocation(self, s)


    def getParentFrame(self):
        """
        getParentFrame(AbstractPathPoint self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::AbstractPathPoint const *

        """
        return _simulation.AbstractPathPoint_getParentFrame(self)


    def setParentFrame(self, aFrame):
        """
        setParentFrame(AbstractPathPoint self, PhysicalFrame aFrame)

        Parameters
        ----------
        aFrame: OpenSim::PhysicalFrame const &

        """
        return _simulation.AbstractPathPoint_setParentFrame(self, aFrame)


    def getBody(self):
        """
        getBody(AbstractPathPoint self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::AbstractPathPoint const *

        """
        return _simulation.AbstractPathPoint_getBody(self)


    def setBody(self, body):
        """
        setBody(AbstractPathPoint self, PhysicalFrame body)

        Parameters
        ----------
        body: OpenSim::PhysicalFrame const &

        """
        return _simulation.AbstractPathPoint_setBody(self, body)


    def getBodyName(self):
        """
        getBodyName(AbstractPathPoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AbstractPathPoint const *

        """
        return _simulation.AbstractPathPoint_getBodyName(self)


    def getWrapObject(self):
        """
        getWrapObject(AbstractPathPoint self) -> WrapObject

        Parameters
        ----------
        self: OpenSim::AbstractPathPoint const *

        """
        return _simulation.AbstractPathPoint_getWrapObject(self)


    def isActive(self, s):
        """
        isActive(AbstractPathPoint self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.AbstractPathPoint_isActive(self, s)


    def getdPointdQ(self, s):
        """
        getdPointdQ(AbstractPathPoint self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.AbstractPathPoint_getdPointdQ(self, s)


    def deletePathPoint(aPoint):
        """
        deletePathPoint(AbstractPathPoint aPoint)

        Parameters
        ----------
        aPoint: OpenSim::AbstractPathPoint *

        """
        return _simulation.AbstractPathPoint_deletePathPoint(aPoint)

    deletePathPoint = staticmethod(deletePathPoint)

    def updateFromXMLNode(self, aNode, versionNumber):
        """
        updateFromXMLNode(AbstractPathPoint self, SimTK::Xml::Element & aNode, int versionNumber)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _simulation.AbstractPathPoint_updateFromXMLNode(self, aNode, versionNumber)

AbstractPathPoint_swigregister = _simulation.AbstractPathPoint_swigregister
AbstractPathPoint_swigregister(AbstractPathPoint)

def AbstractPathPoint_safeDownCast(obj):
    """
    AbstractPathPoint_safeDownCast(OpenSimObject obj) -> AbstractPathPoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.AbstractPathPoint_safeDownCast(obj)

def AbstractPathPoint_getClassName():
    """AbstractPathPoint_getClassName() -> std::string const &"""
    return _simulation.AbstractPathPoint_getClassName()

def AbstractPathPoint_deletePathPoint(aPoint):
    """
    AbstractPathPoint_deletePathPoint(AbstractPathPoint aPoint)

    Parameters
    ----------
    aPoint: OpenSim::AbstractPathPoint *

    """
    return _simulation.AbstractPathPoint_deletePathPoint(aPoint)

class PathPoint(AbstractPathPoint):
    """Proxy of C++ OpenSim::PathPoint class."""

    __swig_setmethods__ = {}
    for _s in [AbstractPathPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractPathPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathPoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PathPoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PathPoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PathPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PathPoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PathPoint self) -> PathPoint

        Parameters
        ----------
        self: OpenSim::PathPoint const *

        """
        return _simulation.PathPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathPoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathPoint const *

        """
        return _simulation.PathPoint_getConcreteClassName(self)


    def copyProperty_location(self, source):
        """
        copyProperty_location(PathPoint self, PathPoint source)

        Parameters
        ----------
        source: OpenSim::PathPoint::Self const &

        """
        return _simulation.PathPoint_copyProperty_location(self, source)


    def append_location(self, value):
        """
        append_location(PathPoint self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PathPoint_append_location(self, value)


    def constructProperty_location(self, initValue):
        """
        constructProperty_location(PathPoint self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PathPoint_constructProperty_location(self, initValue)


    def get_location(self, *args):
        """
        get_location(PathPoint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_location(PathPoint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PathPoint const *

        """
        return _simulation.PathPoint_get_location(self, *args)


    def upd_location(self, *args):
        """
        upd_location(PathPoint self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_location(PathPoint self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PathPoint *

        """
        return _simulation.PathPoint_upd_location(self, *args)


    def set_location(self, *args):
        """
        set_location(PathPoint self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_location(PathPoint self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PathPoint_set_location(self, *args)


    def __init__(self):
        """__init__(OpenSim::PathPoint self) -> PathPoint"""
        this = _simulation.new_PathPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setLocationCoord(self, s, aXYZ, aValue):
        """
        setLocationCoord(PathPoint self, State s, int aXYZ, double aValue)

        Parameters
        ----------
        s: SimTK::State const &
        aXYZ: int
        aValue: double

        """
        return _simulation.PathPoint_setLocationCoord(self, s, aXYZ, aValue)


    def getLocation(self, s):
        """
        getLocation(PathPoint self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathPoint_getLocation(self, s)


    def setLocation(self, location):
        """
        setLocation(PathPoint self, Vec3 location)

        Parameters
        ----------
        location: SimTK::Vec3 const &

        """
        return _simulation.PathPoint_setLocation(self, location)


    def changeBodyPreserveLocation(self, s, body):
        """
        changeBodyPreserveLocation(PathPoint self, State s, PhysicalFrame body)

        Parameters
        ----------
        s: SimTK::State const &
        body: OpenSim::PhysicalFrame const &

        """
        return _simulation.PathPoint_changeBodyPreserveLocation(self, s, body)


    def extendScale(self, s, scaleSet):
        """
        extendScale(PathPoint self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.PathPoint_extendScale(self, s, scaleSet)


    def getdPointdQ(self, s):
        """
        getdPointdQ(PathPoint self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathPoint_getdPointdQ(self, s)

    __swig_destroy__ = _simulation.delete_PathPoint
    __del__ = lambda self: None
PathPoint_swigregister = _simulation.PathPoint_swigregister
PathPoint_swigregister(PathPoint)

def PathPoint_safeDownCast(obj):
    """
    PathPoint_safeDownCast(OpenSimObject obj) -> PathPoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PathPoint_safeDownCast(obj)

def PathPoint_getClassName():
    """PathPoint_getClassName() -> std::string const &"""
    return _simulation.PathPoint_getClassName()

class PathWrapPoint(PathPoint):
    """Proxy of C++ OpenSim::PathWrapPoint class."""

    __swig_setmethods__ = {}
    for _s in [PathPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathWrapPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [PathPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathWrapPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathWrapPoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PathWrapPoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PathWrapPoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PathWrapPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PathWrapPoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PathWrapPoint self) -> PathWrapPoint

        Parameters
        ----------
        self: OpenSim::PathWrapPoint const *

        """
        return _simulation.PathWrapPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathWrapPoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathWrapPoint const *

        """
        return _simulation.PathWrapPoint_getConcreteClassName(self)


    def __init__(self):
        """__init__(OpenSim::PathWrapPoint self) -> PathWrapPoint"""
        this = _simulation.new_PathWrapPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_PathWrapPoint
    __del__ = lambda self: None

    def getWrapPath(self):
        """
        getWrapPath(PathWrapPoint self) -> ArrayVec3

        Parameters
        ----------
        self: OpenSim::PathWrapPoint *

        """
        return _simulation.PathWrapPoint_getWrapPath(self)


    def getWrapLength(self):
        """
        getWrapLength(PathWrapPoint self) -> double

        Parameters
        ----------
        self: OpenSim::PathWrapPoint const *

        """
        return _simulation.PathWrapPoint_getWrapLength(self)


    def setWrapLength(self, aLength):
        """
        setWrapLength(PathWrapPoint self, double aLength)

        Parameters
        ----------
        aLength: double

        """
        return _simulation.PathWrapPoint_setWrapLength(self, aLength)


    def getWrapObject(self):
        """
        getWrapObject(PathWrapPoint self) -> WrapObject

        Parameters
        ----------
        self: OpenSim::PathWrapPoint const *

        """
        return _simulation.PathWrapPoint_getWrapObject(self)


    def setWrapObject(self, wrapObject):
        """
        setWrapObject(PathWrapPoint self, WrapObject wrapObject)

        Parameters
        ----------
        wrapObject: OpenSim::WrapObject const *

        """
        return _simulation.PathWrapPoint_setWrapObject(self, wrapObject)

PathWrapPoint_swigregister = _simulation.PathWrapPoint_swigregister
PathWrapPoint_swigregister(PathWrapPoint)

def PathWrapPoint_safeDownCast(obj):
    """
    PathWrapPoint_safeDownCast(OpenSimObject obj) -> PathWrapPoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PathWrapPoint_safeDownCast(obj)

def PathWrapPoint_getClassName():
    """PathWrapPoint_getClassName() -> std::string const &"""
    return _simulation.PathWrapPoint_getClassName()

class ConditionalPathPoint(PathPoint):
    """Proxy of C++ OpenSim::ConditionalPathPoint class."""

    __swig_setmethods__ = {}
    for _s in [PathPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConditionalPathPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [PathPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConditionalPathPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ConditionalPathPoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ConditionalPathPoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ConditionalPathPoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ConditionalPathPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ConditionalPathPoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ConditionalPathPoint self) -> ConditionalPathPoint

        Parameters
        ----------
        self: OpenSim::ConditionalPathPoint const *

        """
        return _simulation.ConditionalPathPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ConditionalPathPoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ConditionalPathPoint const *

        """
        return _simulation.ConditionalPathPoint_getConcreteClassName(self)


    def copyProperty_range(self, source):
        """
        copyProperty_range(ConditionalPathPoint self, ConditionalPathPoint source)

        Parameters
        ----------
        source: OpenSim::ConditionalPathPoint::Self const &

        """
        return _simulation.ConditionalPathPoint_copyProperty_range(self, source)


    def get_range(self, i):
        """
        get_range(ConditionalPathPoint self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _simulation.ConditionalPathPoint_get_range(self, i)


    def upd_range(self, i):
        """
        upd_range(ConditionalPathPoint self, int i) -> double &

        Parameters
        ----------
        i: int

        """
        return _simulation.ConditionalPathPoint_upd_range(self, i)


    def set_range(self, i, value):
        """
        set_range(ConditionalPathPoint self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        """
        return _simulation.ConditionalPathPoint_set_range(self, i, value)


    def append_range(self, value):
        """
        append_range(ConditionalPathPoint self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ConditionalPathPoint_append_range(self, value)

    __swig_setmethods__["PropertyIndex_socket_coordinate"] = _simulation.ConditionalPathPoint_PropertyIndex_socket_coordinate_set
    __swig_getmethods__["PropertyIndex_socket_coordinate"] = _simulation.ConditionalPathPoint_PropertyIndex_socket_coordinate_get
    if _newclass:
        PropertyIndex_socket_coordinate = _swig_property(_simulation.ConditionalPathPoint_PropertyIndex_socket_coordinate_get, _simulation.ConditionalPathPoint_PropertyIndex_socket_coordinate_set)

    def connectSocket_coordinate(self, object):
        """
        connectSocket_coordinate(ConditionalPathPoint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.ConditionalPathPoint_connectSocket_coordinate(self, object)


    def __init__(self):
        """__init__(OpenSim::ConditionalPathPoint self) -> ConditionalPathPoint"""
        this = _simulation.new_ConditionalPathPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ConditionalPathPoint
    __del__ = lambda self: None

    def setRangeMin(self, minVal):
        """
        setRangeMin(ConditionalPathPoint self, double minVal)

        Parameters
        ----------
        minVal: double

        """
        return _simulation.ConditionalPathPoint_setRangeMin(self, minVal)


    def setRangeMax(self, maxVal):
        """
        setRangeMax(ConditionalPathPoint self, double maxVal)

        Parameters
        ----------
        maxVal: double

        """
        return _simulation.ConditionalPathPoint_setRangeMax(self, maxVal)


    def setCoordinate(self, coordinate):
        """
        setCoordinate(ConditionalPathPoint self, Coordinate coordinate)

        Parameters
        ----------
        coordinate: OpenSim::Coordinate const &

        """
        return _simulation.ConditionalPathPoint_setCoordinate(self, coordinate)


    def hasCoordinate(self):
        """
        hasCoordinate(ConditionalPathPoint self) -> bool

        Parameters
        ----------
        self: OpenSim::ConditionalPathPoint const *

        """
        return _simulation.ConditionalPathPoint_hasCoordinate(self)


    def getCoordinate(self):
        """
        getCoordinate(ConditionalPathPoint self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::ConditionalPathPoint const *

        """
        return _simulation.ConditionalPathPoint_getCoordinate(self)


    def isActive(self, s):
        """
        isActive(ConditionalPathPoint self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ConditionalPathPoint_isActive(self, s)

ConditionalPathPoint_swigregister = _simulation.ConditionalPathPoint_swigregister
ConditionalPathPoint_swigregister(ConditionalPathPoint)

def ConditionalPathPoint_safeDownCast(obj):
    """
    ConditionalPathPoint_safeDownCast(OpenSimObject obj) -> ConditionalPathPoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ConditionalPathPoint_safeDownCast(obj)

def ConditionalPathPoint_getClassName():
    """ConditionalPathPoint_getClassName() -> std::string const &"""
    return _simulation.ConditionalPathPoint_getClassName()

class MovingPathPoint(AbstractPathPoint):
    """Proxy of C++ OpenSim::MovingPathPoint class."""

    __swig_setmethods__ = {}
    for _s in [AbstractPathPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MovingPathPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractPathPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MovingPathPoint, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MovingPathPoint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.MovingPathPoint_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MovingPathPoint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.MovingPathPoint_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.MovingPathPoint_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MovingPathPoint self) -> MovingPathPoint

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MovingPathPoint self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_getConcreteClassName(self)


    def copyProperty_x_location(self, source):
        """
        copyProperty_x_location(MovingPathPoint self, MovingPathPoint source)

        Parameters
        ----------
        source: OpenSim::MovingPathPoint::Self const &

        """
        return _simulation.MovingPathPoint_copyProperty_x_location(self, source)


    def append_x_location(self, value):
        """
        append_x_location(MovingPathPoint self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_append_x_location(self, value)


    def constructProperty_x_location(self, *args):
        """
        constructProperty_x_location(MovingPathPoint self)
        constructProperty_x_location(MovingPathPoint self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_constructProperty_x_location(self, *args)


    def get_x_location(self, *args):
        """
        get_x_location(MovingPathPoint self, int i) -> Function

        Parameters
        ----------
        i: int

        get_x_location(MovingPathPoint self) -> Function

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_get_x_location(self, *args)


    def upd_x_location(self, *args):
        """
        upd_x_location(MovingPathPoint self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_x_location(MovingPathPoint self) -> Function

        Parameters
        ----------
        self: OpenSim::MovingPathPoint *

        """
        return _simulation.MovingPathPoint_upd_x_location(self, *args)


    def set_x_location(self, *args):
        """
        set_x_location(MovingPathPoint self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_x_location(MovingPathPoint self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_set_x_location(self, *args)


    def copyProperty_y_location(self, source):
        """
        copyProperty_y_location(MovingPathPoint self, MovingPathPoint source)

        Parameters
        ----------
        source: OpenSim::MovingPathPoint::Self const &

        """
        return _simulation.MovingPathPoint_copyProperty_y_location(self, source)


    def append_y_location(self, value):
        """
        append_y_location(MovingPathPoint self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_append_y_location(self, value)


    def constructProperty_y_location(self, *args):
        """
        constructProperty_y_location(MovingPathPoint self)
        constructProperty_y_location(MovingPathPoint self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_constructProperty_y_location(self, *args)


    def get_y_location(self, *args):
        """
        get_y_location(MovingPathPoint self, int i) -> Function

        Parameters
        ----------
        i: int

        get_y_location(MovingPathPoint self) -> Function

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_get_y_location(self, *args)


    def upd_y_location(self, *args):
        """
        upd_y_location(MovingPathPoint self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_y_location(MovingPathPoint self) -> Function

        Parameters
        ----------
        self: OpenSim::MovingPathPoint *

        """
        return _simulation.MovingPathPoint_upd_y_location(self, *args)


    def set_y_location(self, *args):
        """
        set_y_location(MovingPathPoint self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_y_location(MovingPathPoint self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_set_y_location(self, *args)


    def copyProperty_z_location(self, source):
        """
        copyProperty_z_location(MovingPathPoint self, MovingPathPoint source)

        Parameters
        ----------
        source: OpenSim::MovingPathPoint::Self const &

        """
        return _simulation.MovingPathPoint_copyProperty_z_location(self, source)


    def append_z_location(self, value):
        """
        append_z_location(MovingPathPoint self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_append_z_location(self, value)


    def constructProperty_z_location(self, *args):
        """
        constructProperty_z_location(MovingPathPoint self)
        constructProperty_z_location(MovingPathPoint self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_constructProperty_z_location(self, *args)


    def get_z_location(self, *args):
        """
        get_z_location(MovingPathPoint self, int i) -> Function

        Parameters
        ----------
        i: int

        get_z_location(MovingPathPoint self) -> Function

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_get_z_location(self, *args)


    def upd_z_location(self, *args):
        """
        upd_z_location(MovingPathPoint self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_z_location(MovingPathPoint self) -> Function

        Parameters
        ----------
        self: OpenSim::MovingPathPoint *

        """
        return _simulation.MovingPathPoint_upd_z_location(self, *args)


    def set_z_location(self, *args):
        """
        set_z_location(MovingPathPoint self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_z_location(MovingPathPoint self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.MovingPathPoint_set_z_location(self, *args)

    __swig_setmethods__["PropertyIndex_socket_x_coordinate"] = _simulation.MovingPathPoint_PropertyIndex_socket_x_coordinate_set
    __swig_getmethods__["PropertyIndex_socket_x_coordinate"] = _simulation.MovingPathPoint_PropertyIndex_socket_x_coordinate_get
    if _newclass:
        PropertyIndex_socket_x_coordinate = _swig_property(_simulation.MovingPathPoint_PropertyIndex_socket_x_coordinate_get, _simulation.MovingPathPoint_PropertyIndex_socket_x_coordinate_set)

    def connectSocket_x_coordinate(self, object):
        """
        connectSocket_x_coordinate(MovingPathPoint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.MovingPathPoint_connectSocket_x_coordinate(self, object)

    __swig_setmethods__["PropertyIndex_socket_y_coordinate"] = _simulation.MovingPathPoint_PropertyIndex_socket_y_coordinate_set
    __swig_getmethods__["PropertyIndex_socket_y_coordinate"] = _simulation.MovingPathPoint_PropertyIndex_socket_y_coordinate_get
    if _newclass:
        PropertyIndex_socket_y_coordinate = _swig_property(_simulation.MovingPathPoint_PropertyIndex_socket_y_coordinate_get, _simulation.MovingPathPoint_PropertyIndex_socket_y_coordinate_set)

    def connectSocket_y_coordinate(self, object):
        """
        connectSocket_y_coordinate(MovingPathPoint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.MovingPathPoint_connectSocket_y_coordinate(self, object)

    __swig_setmethods__["PropertyIndex_socket_z_coordinate"] = _simulation.MovingPathPoint_PropertyIndex_socket_z_coordinate_set
    __swig_getmethods__["PropertyIndex_socket_z_coordinate"] = _simulation.MovingPathPoint_PropertyIndex_socket_z_coordinate_get
    if _newclass:
        PropertyIndex_socket_z_coordinate = _swig_property(_simulation.MovingPathPoint_PropertyIndex_socket_z_coordinate_get, _simulation.MovingPathPoint_PropertyIndex_socket_z_coordinate_set)

    def connectSocket_z_coordinate(self, object):
        """
        connectSocket_z_coordinate(MovingPathPoint self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.MovingPathPoint_connectSocket_z_coordinate(self, object)


    def __init__(self):
        """__init__(OpenSim::MovingPathPoint self) -> MovingPathPoint"""
        this = _simulation.new_MovingPathPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_MovingPathPoint
    __del__ = lambda self: None

    def updateFromXMLNode(self, aNode, versionNumber):
        """
        updateFromXMLNode(MovingPathPoint self, SimTK::Xml::Element & aNode, int versionNumber)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _simulation.MovingPathPoint_updateFromXMLNode(self, aNode, versionNumber)


    def hasXCoordinate(self):
        """
        hasXCoordinate(MovingPathPoint self) -> bool

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_hasXCoordinate(self)


    def hasYCoordinate(self):
        """
        hasYCoordinate(MovingPathPoint self) -> bool

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_hasYCoordinate(self)


    def hasZCoordinate(self):
        """
        hasZCoordinate(MovingPathPoint self) -> bool

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_hasZCoordinate(self)


    def getXCoordinate(self):
        """
        getXCoordinate(MovingPathPoint self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_getXCoordinate(self)


    def getYCoordinate(self):
        """
        getYCoordinate(MovingPathPoint self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_getYCoordinate(self)


    def getZCoordinate(self):
        """
        getZCoordinate(MovingPathPoint self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::MovingPathPoint const *

        """
        return _simulation.MovingPathPoint_getZCoordinate(self)


    def setXCoordinate(self, coordinate):
        """
        setXCoordinate(MovingPathPoint self, Coordinate coordinate)

        Parameters
        ----------
        coordinate: OpenSim::Coordinate const &

        """
        return _simulation.MovingPathPoint_setXCoordinate(self, coordinate)


    def setYCoordinate(self, coordinate):
        """
        setYCoordinate(MovingPathPoint self, Coordinate coordinate)

        Parameters
        ----------
        coordinate: OpenSim::Coordinate const &

        """
        return _simulation.MovingPathPoint_setYCoordinate(self, coordinate)


    def setZCoordinate(self, coordinate):
        """
        setZCoordinate(MovingPathPoint self, Coordinate coordinate)

        Parameters
        ----------
        coordinate: OpenSim::Coordinate const &

        """
        return _simulation.MovingPathPoint_setZCoordinate(self, coordinate)


    def isActive(self, s):
        """
        isActive(MovingPathPoint self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MovingPathPoint_isActive(self, s)


    def getLocation(self, s):
        """
        getLocation(MovingPathPoint self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MovingPathPoint_getLocation(self, s)


    def getVelocity(self, s):
        """
        getVelocity(MovingPathPoint self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MovingPathPoint_getVelocity(self, s)


    def getdPointdQ(self, s):
        """
        getdPointdQ(MovingPathPoint self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MovingPathPoint_getdPointdQ(self, s)


    def extendScale(self, s, scaleSet):
        """
        extendScale(MovingPathPoint self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.MovingPathPoint_extendScale(self, s, scaleSet)

MovingPathPoint_swigregister = _simulation.MovingPathPoint_swigregister
MovingPathPoint_swigregister(MovingPathPoint)

def MovingPathPoint_safeDownCast(obj):
    """
    MovingPathPoint_safeDownCast(OpenSimObject obj) -> MovingPathPoint

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.MovingPathPoint_safeDownCast(obj)

def MovingPathPoint_getClassName():
    """MovingPathPoint_getClassName() -> std::string const &"""
    return _simulation.MovingPathPoint_getClassName()

class SetOfPathPoints(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OpenSim::AbstractPathPoint)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetOfPathPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetOfPathPoints, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetOfPathPoints

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetOfPathPoints_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetOfPathPoints self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetOfPathPoints_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetOfPathPoints_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetOfPathPoints self) -> SetOfPathPoints

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::AbstractPathPoint > const *

        """
        return _simulation.SetOfPathPoints_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetOfPathPoints self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::AbstractPathPoint > const *

        """
        return _simulation.SetOfPathPoints_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetOfPathPoints
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OpenSim::AbstractPathPoint)> self) -> SetOfPathPoints
        __init__(OpenSim::Set<(OpenSim::AbstractPathPoint)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetOfPathPoints

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OpenSim::AbstractPathPoint)> self, std::string const & aFileName) -> SetOfPathPoints

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OpenSim::AbstractPathPoint)> self, SetOfPathPoints aSet) -> SetOfPathPoints

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::AbstractPathPoint,OpenSim::Object > const &

        """
        this = _simulation.new_SetOfPathPoints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetOfPathPoints self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::AbstractPathPoint > *

        """
        return _simulation.SetOfPathPoints_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetOfPathPoints self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetOfPathPoints_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetOfPathPoints self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetOfPathPoints_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetOfPathPoints self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::AbstractPathPoint > const *

        """
        return _simulation.SetOfPathPoints_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetOfPathPoints self, AbstractPathPoint aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::AbstractPathPoint const *
        aStartIndex: int

        getIndex(SetOfPathPoints self, AbstractPathPoint aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::AbstractPathPoint const *

        getIndex(SetOfPathPoints self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetOfPathPoints self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetOfPathPoints_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetOfPathPoints self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetOfPathPoints_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetOfPathPoints self, AbstractPathPoint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::AbstractPathPoint *

        """
        return _simulation.SetOfPathPoints_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetOfPathPoints self, AbstractPathPoint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::AbstractPathPoint const &

        """
        return _simulation.SetOfPathPoints_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetOfPathPoints self, int aIndex, AbstractPathPoint aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::AbstractPathPoint *

        """
        return _simulation.SetOfPathPoints_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetOfPathPoints self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetOfPathPoints self, AbstractPathPoint aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::AbstractPathPoint const *

        """
        return _simulation.SetOfPathPoints_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetOfPathPoints self)

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::AbstractPathPoint > *

        """
        return _simulation.SetOfPathPoints_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetOfPathPoints self, int aIndex, AbstractPathPoint aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::AbstractPathPoint *
        preserveGroups: bool

        set(SetOfPathPoints self, int aIndex, AbstractPathPoint aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::AbstractPathPoint *

        """
        return _simulation.SetOfPathPoints_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetOfPathPoints self, int aIndex) -> AbstractPathPoint

        Parameters
        ----------
        aIndex: int

        get(SetOfPathPoints self, std::string const & aName) -> AbstractPathPoint

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetOfPathPoints_get(self, *args)


    def contains(self, aName):
        """
        contains(SetOfPathPoints self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetOfPathPoints_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetOfPathPoints self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetOfPathPoints_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetOfPathPoints self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OpenSim::AbstractPathPoint > const *

        """
        return _simulation.SetOfPathPoints_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetOfPathPoints self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetOfPathPoints_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetOfPathPoints self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetOfPathPoints_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetOfPathPoints self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetOfPathPoints_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetOfPathPoints self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetOfPathPoints_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetOfPathPoints self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetOfPathPoints_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetOfPathPoints self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetOfPathPoints self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetOfPathPoints_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetOfPathPoints_swigregister = _simulation.SetOfPathPoints_swigregister
SetOfPathPoints_swigregister(SetOfPathPoints)

def SetOfPathPoints_safeDownCast(obj):
    """
    SetOfPathPoints_safeDownCast(OpenSimObject obj) -> SetOfPathPoints

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetOfPathPoints_safeDownCast(obj)

def SetOfPathPoints_getClassName():
    """SetOfPathPoints_getClassName() -> std::string const &"""
    return _simulation.SetOfPathPoints_getClassName()

class ArrayPathPoint(_object):
    """Proxy of C++ OpenSim::Array<(p.OpenSim::AbstractPathPoint)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPathPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPathPoint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _simulation.delete_ArrayPathPoint
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(p.OpenSim::AbstractPathPoint)> self, AbstractPathPoint aDefaultValue, int aSize=0, int aCapacity) -> ArrayPathPoint

        Parameters
        ----------
        aDefaultValue: OpenSim::AbstractPathPoint *const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(p.OpenSim::AbstractPathPoint)> self, AbstractPathPoint aDefaultValue, int aSize=0) -> ArrayPathPoint

        Parameters
        ----------
        aDefaultValue: OpenSim::AbstractPathPoint *const &
        aSize: int

        __init__(OpenSim::Array<(p.OpenSim::AbstractPathPoint)> self, AbstractPathPoint aDefaultValue) -> ArrayPathPoint

        Parameters
        ----------
        aDefaultValue: OpenSim::AbstractPathPoint *const &

        __init__(OpenSim::Array<(p.OpenSim::AbstractPathPoint)> self) -> ArrayPathPoint
        __init__(OpenSim::Array<(p.OpenSim::AbstractPathPoint)> self, ArrayPathPoint aArray) -> ArrayPathPoint

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::AbstractPathPoint * > const &

        """
        this = _simulation.new_ArrayPathPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayPathPoint self, ArrayPathPoint aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::AbstractPathPoint * > const &

        """
        return _simulation.ArrayPathPoint_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayPathPoint self)

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::AbstractPathPoint * > *

        """
        return _simulation.ArrayPathPoint_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPathPoint self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.ArrayPathPoint_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPathPoint self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::AbstractPathPoint * > const *

        """
        return _simulation.ArrayPathPoint_getSize(self)


    def size(self):
        """
        size(ArrayPathPoint self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::AbstractPathPoint * > const *

        """
        return _simulation.ArrayPathPoint_size(self)


    def append(self, *args):
        """
        append(ArrayPathPoint self, AbstractPathPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::AbstractPathPoint *const &

        append(ArrayPathPoint self, ArrayPathPoint aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::AbstractPathPoint * > const &

        """
        return _simulation.ArrayPathPoint_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayPathPoint self, int aIndex, AbstractPathPoint aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::AbstractPathPoint *const &

        """
        return _simulation.ArrayPathPoint_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayPathPoint self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.ArrayPathPoint_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayPathPoint self, int aIndex, AbstractPathPoint aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::AbstractPathPoint *const &

        """
        return _simulation.ArrayPathPoint_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayPathPoint self, int aIndex) -> AbstractPathPoint

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.ArrayPathPoint_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayPathPoint self, int index) -> AbstractPathPoint

        Parameters
        ----------
        index: int

        """
        return _simulation.ArrayPathPoint_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayPathPoint self, int index, AbstractPathPoint val)

        Parameters
        ----------
        index: int
        val: OpenSim::AbstractPathPoint *

        """
        return _simulation.ArrayPathPoint_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayPathPoint self) -> AbstractPathPoint

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::AbstractPathPoint * > const *

        """
        return _simulation.ArrayPathPoint_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayPathPoint self, AbstractPathPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::AbstractPathPoint *const &

        """
        return _simulation.ArrayPathPoint_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayPathPoint self, AbstractPathPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::AbstractPathPoint *const &

        """
        return _simulation.ArrayPathPoint_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPathPoint self, AbstractPathPoint aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::AbstractPathPoint *const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayPathPoint self, AbstractPathPoint aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::AbstractPathPoint *const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayPathPoint self, AbstractPathPoint aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: OpenSim::AbstractPathPoint *const &
        aFindFirst: bool

        searchBinary(ArrayPathPoint self, AbstractPathPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::AbstractPathPoint *const &

        """
        return _simulation.ArrayPathPoint_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayPathPoint_swigregister = _simulation.ArrayPathPoint_swigregister
ArrayPathPoint_swigregister(ArrayPathPoint)

class PathPointSet(SetOfPathPoints):
    """Proxy of C++ OpenSim::PathPointSet class."""

    __swig_setmethods__ = {}
    for _s in [SetOfPathPoints]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathPointSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SetOfPathPoints]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathPointSet, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathPointSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PathPointSet_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PathPointSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PathPointSet_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PathPointSet_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PathPointSet self) -> PathPointSet

        Parameters
        ----------
        self: OpenSim::PathPointSet const *

        """
        return _simulation.PathPointSet_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathPointSet self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathPointSet const *

        """
        return _simulation.PathPointSet_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::PathPointSet self) -> PathPointSet
        __init__(OpenSim::PathPointSet self, std::string const & file, bool updateFromXML=True) -> PathPointSet

        Parameters
        ----------
        file: std::string const &
        updateFromXML: bool

        __init__(OpenSim::PathPointSet self, std::string const & file) -> PathPointSet

        Parameters
        ----------
        file: std::string const &

        """
        this = _simulation.new_PathPointSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def adoptAndAppend(self, aPathPoint):
        aPathPoint._markAdopted()
        return super(PathPointSet, self).adoptAndAppend(aPathPoint)

    __swig_destroy__ = _simulation.delete_PathPointSet
    __del__ = lambda self: None
PathPointSet_swigregister = _simulation.PathPointSet_swigregister
PathPointSet_swigregister(PathPointSet)

def PathPointSet_safeDownCast(obj):
    """
    PathPointSet_safeDownCast(OpenSimObject obj) -> PathPointSet

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PathPointSet_safeDownCast(obj)

def PathPointSet_getClassName():
    """PathPointSet_getClassName() -> std::string const &"""
    return _simulation.PathPointSet_getClassName()

class PointForceDirection(_object):
    """Proxy of C++ OpenSim::PointForceDirection class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointForceDirection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointForceDirection, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _simulation.delete_PointForceDirection
    __del__ = lambda self: None

    def __init__(self, point, frame, direction, scale=1):
        """
        __init__(OpenSim::PointForceDirection self, Vec3 point, PhysicalFrame frame, Vec3 direction, double scale=1) -> PointForceDirection

        Parameters
        ----------
        point: SimTK::Vec3
        frame: OpenSim::PhysicalFrame const &
        direction: SimTK::Vec3
        scale: double

        __init__(OpenSim::PointForceDirection self, Vec3 point, PhysicalFrame frame, Vec3 direction) -> PointForceDirection

        Parameters
        ----------
        point: SimTK::Vec3
        frame: OpenSim::PhysicalFrame const &
        direction: SimTK::Vec3

        """
        this = _simulation.new_PointForceDirection(point, frame, direction, scale)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def point(self):
        """
        point(PointForceDirection self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointForceDirection *

        """
        return _simulation.PointForceDirection_point(self)


    def frame(self):
        """
        frame(PointForceDirection self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::PointForceDirection *

        """
        return _simulation.PointForceDirection_frame(self)


    def direction(self):
        """
        direction(PointForceDirection self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointForceDirection *

        """
        return _simulation.PointForceDirection_direction(self)


    def scale(self):
        """
        scale(PointForceDirection self) -> double

        Parameters
        ----------
        self: OpenSim::PointForceDirection *

        """
        return _simulation.PointForceDirection_scale(self)


    def addToDirection(self, newDirection):
        """
        addToDirection(PointForceDirection self, Vec3 newDirection)

        Parameters
        ----------
        newDirection: SimTK::Vec3

        """
        return _simulation.PointForceDirection_addToDirection(self, newDirection)

PointForceDirection_swigregister = _simulation.PointForceDirection_swigregister
PointForceDirection_swigregister(PointForceDirection)

class ArrayPointForceDirection(_object):
    """Proxy of C++ OpenSim::Array<(p.OpenSim::PointForceDirection)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPointForceDirection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPointForceDirection, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _simulation.delete_ArrayPointForceDirection
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self, PointForceDirection aDefaultValue, int aSize=0, int aCapacity) -> ArrayPointForceDirection

        Parameters
        ----------
        aDefaultValue: OpenSim::PointForceDirection *const &
        aSize: int
        aCapacity: int

        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self, PointForceDirection aDefaultValue, int aSize=0) -> ArrayPointForceDirection

        Parameters
        ----------
        aDefaultValue: OpenSim::PointForceDirection *const &
        aSize: int

        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self, PointForceDirection aDefaultValue) -> ArrayPointForceDirection

        Parameters
        ----------
        aDefaultValue: OpenSim::PointForceDirection *const &

        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self) -> ArrayPointForceDirection
        __init__(OpenSim::Array<(p.OpenSim::PointForceDirection)> self, ArrayPointForceDirection aArray) -> ArrayPointForceDirection

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::PointForceDirection * > const &

        """
        this = _simulation.new_ArrayPointForceDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def arrayEquals(self, aArray):
        """
        arrayEquals(ArrayPointForceDirection self, ArrayPointForceDirection aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::PointForceDirection * > const &

        """
        return _simulation.ArrayPointForceDirection_arrayEquals(self, aArray)


    def trim(self):
        """
        trim(ArrayPointForceDirection self)

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::PointForceDirection * > *

        """
        return _simulation.ArrayPointForceDirection_trim(self)


    def setSize(self, aSize):
        """
        setSize(ArrayPointForceDirection self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.ArrayPointForceDirection_setSize(self, aSize)


    def getSize(self):
        """
        getSize(ArrayPointForceDirection self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::PointForceDirection * > const *

        """
        return _simulation.ArrayPointForceDirection_getSize(self)


    def size(self):
        """
        size(ArrayPointForceDirection self) -> int

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::PointForceDirection * > const *

        """
        return _simulation.ArrayPointForceDirection_size(self)


    def append(self, *args):
        """
        append(ArrayPointForceDirection self, PointForceDirection aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::PointForceDirection *const &

        append(ArrayPointForceDirection self, ArrayPointForceDirection aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::PointForceDirection * > const &

        """
        return _simulation.ArrayPointForceDirection_append(self, *args)


    def insert(self, aIndex, aValue):
        """
        insert(ArrayPointForceDirection self, int aIndex, PointForceDirection aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::PointForceDirection *const &

        """
        return _simulation.ArrayPointForceDirection_insert(self, aIndex, aValue)


    def remove(self, aIndex):
        """
        remove(ArrayPointForceDirection self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.ArrayPointForceDirection_remove(self, aIndex)


    def set(self, aIndex, aValue):
        """
        set(ArrayPointForceDirection self, int aIndex, PointForceDirection aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::PointForceDirection *const &

        """
        return _simulation.ArrayPointForceDirection_set(self, aIndex, aValue)


    def get(self, aIndex):
        """
        get(ArrayPointForceDirection self, int aIndex) -> PointForceDirection

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.ArrayPointForceDirection_get(self, aIndex)


    def getitem(self, index):
        """
        getitem(ArrayPointForceDirection self, int index) -> PointForceDirection

        Parameters
        ----------
        index: int

        """
        return _simulation.ArrayPointForceDirection_getitem(self, index)


    def setitem(self, index, val):
        """
        setitem(ArrayPointForceDirection self, int index, PointForceDirection val)

        Parameters
        ----------
        index: int
        val: OpenSim::PointForceDirection *

        """
        return _simulation.ArrayPointForceDirection_setitem(self, index, val)


    def getLast(self):
        """
        getLast(ArrayPointForceDirection self) -> PointForceDirection

        Parameters
        ----------
        self: OpenSim::Array< OpenSim::PointForceDirection * > const *

        """
        return _simulation.ArrayPointForceDirection_getLast(self)


    def findIndex(self, aValue):
        """
        findIndex(ArrayPointForceDirection self, PointForceDirection aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::PointForceDirection *const &

        """
        return _simulation.ArrayPointForceDirection_findIndex(self, aValue)


    def rfindIndex(self, aValue):
        """
        rfindIndex(ArrayPointForceDirection self, PointForceDirection aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::PointForceDirection *const &

        """
        return _simulation.ArrayPointForceDirection_rfindIndex(self, aValue)


    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        """
        searchBinary(ArrayPointForceDirection self, PointForceDirection aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::PointForceDirection *const &
        aFindFirst: bool
        aLo: int
        aHi: int

        searchBinary(ArrayPointForceDirection self, PointForceDirection aValue, bool aFindFirst=False, int aLo=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::PointForceDirection *const &
        aFindFirst: bool
        aLo: int

        searchBinary(ArrayPointForceDirection self, PointForceDirection aValue, bool aFindFirst=False) -> int

        Parameters
        ----------
        aValue: OpenSim::PointForceDirection *const &
        aFindFirst: bool

        searchBinary(ArrayPointForceDirection self, PointForceDirection aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::PointForceDirection *const &

        """
        return _simulation.ArrayPointForceDirection_searchBinary(self, aValue, aFindFirst, aLo, aHi)

ArrayPointForceDirection_swigregister = _simulation.ArrayPointForceDirection_swigregister
ArrayPointForceDirection_swigregister(ArrayPointForceDirection)

class GeometryPath(ModelComponent):
    """Proxy of C++ OpenSim::GeometryPath class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPath, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPath, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> GeometryPath

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.GeometryPath_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(GeometryPath self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.GeometryPath_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.GeometryPath_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(GeometryPath self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::GeometryPath const *

        """
        return _simulation.GeometryPath_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(GeometryPath self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::GeometryPath const *

        """
        return _simulation.GeometryPath_getConcreteClassName(self)


    def copyProperty_Appearance(self, source):
        """
        copyProperty_Appearance(GeometryPath self, GeometryPath source)

        Parameters
        ----------
        source: OpenSim::GeometryPath::Self const &

        """
        return _simulation.GeometryPath_copyProperty_Appearance(self, source)


    def append_Appearance(self, value):
        """
        append_Appearance(GeometryPath self, Appearance value) -> int

        Parameters
        ----------
        value: OpenSim::Appearance const &

        """
        return _simulation.GeometryPath_append_Appearance(self, value)


    def constructProperty_Appearance(self, initValue):
        """
        constructProperty_Appearance(GeometryPath self, Appearance initValue)

        Parameters
        ----------
        initValue: OpenSim::Appearance const &

        """
        return _simulation.GeometryPath_constructProperty_Appearance(self, initValue)


    def get_Appearance(self, *args):
        """
        get_Appearance(GeometryPath self, int i) -> Appearance

        Parameters
        ----------
        i: int

        get_Appearance(GeometryPath self) -> Appearance

        Parameters
        ----------
        self: OpenSim::GeometryPath const *

        """
        return _simulation.GeometryPath_get_Appearance(self, *args)


    def upd_Appearance(self, *args):
        """
        upd_Appearance(GeometryPath self, int i) -> Appearance

        Parameters
        ----------
        i: int

        upd_Appearance(GeometryPath self) -> Appearance

        Parameters
        ----------
        self: OpenSim::GeometryPath *

        """
        return _simulation.GeometryPath_upd_Appearance(self, *args)


    def set_Appearance(self, *args):
        """
        set_Appearance(GeometryPath self, int i, Appearance value)

        Parameters
        ----------
        i: int
        value: OpenSim::Appearance const &

        set_Appearance(GeometryPath self, Appearance value)

        Parameters
        ----------
        value: OpenSim::Appearance const &

        """
        return _simulation.GeometryPath_set_Appearance(self, *args)


    def __init__(self):
        """__init__(OpenSim::GeometryPath self) -> GeometryPath"""
        this = _simulation.new_GeometryPath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_GeometryPath
    __del__ = lambda self: None

    def getPathPointSet(self):
        """
        getPathPointSet(GeometryPath self) -> PathPointSet

        Parameters
        ----------
        self: OpenSim::GeometryPath const *

        """
        return _simulation.GeometryPath_getPathPointSet(self)


    def updPathPointSet(self):
        """
        updPathPointSet(GeometryPath self) -> PathPointSet

        Parameters
        ----------
        self: OpenSim::GeometryPath *

        """
        return _simulation.GeometryPath_updPathPointSet(self)


    def getWrapSet(self):
        """
        getWrapSet(GeometryPath self) -> PathWrapSet

        Parameters
        ----------
        self: OpenSim::GeometryPath const *

        """
        return _simulation.GeometryPath_getWrapSet(self)


    def addPathWrap(self, aWrapObject):
        """
        addPathWrap(GeometryPath self, WrapObject aWrapObject)

        Parameters
        ----------
        aWrapObject: OpenSim::WrapObject &

        """
        return _simulation.GeometryPath_addPathWrap(self, aWrapObject)


    def addPathPoint(self, s, index, frame):
        """
        addPathPoint(GeometryPath self, State s, int index, PhysicalFrame frame) -> AbstractPathPoint

        Parameters
        ----------
        s: SimTK::State const &
        index: int
        frame: OpenSim::PhysicalFrame const &

        """
        return _simulation.GeometryPath_addPathPoint(self, s, index, frame)


    def appendNewPathPoint(self, proposedName, frame, locationOnFrame):
        """
        appendNewPathPoint(GeometryPath self, std::string const & proposedName, PhysicalFrame frame, Vec3 locationOnFrame) -> AbstractPathPoint

        Parameters
        ----------
        proposedName: std::string const &
        frame: OpenSim::PhysicalFrame const &
        locationOnFrame: SimTK::Vec3 const &

        """
        return _simulation.GeometryPath_appendNewPathPoint(self, proposedName, frame, locationOnFrame)


    def canDeletePathPoint(self, index):
        """
        canDeletePathPoint(GeometryPath self, int index) -> bool

        Parameters
        ----------
        index: int

        """
        return _simulation.GeometryPath_canDeletePathPoint(self, index)


    def deletePathPoint(self, s, index):
        """
        deletePathPoint(GeometryPath self, State s, int index) -> bool

        Parameters
        ----------
        s: SimTK::State const &
        index: int

        """
        return _simulation.GeometryPath_deletePathPoint(self, s, index)


    def moveUpPathWrap(self, s, index):
        """
        moveUpPathWrap(GeometryPath self, State s, int index)

        Parameters
        ----------
        s: SimTK::State const &
        index: int

        """
        return _simulation.GeometryPath_moveUpPathWrap(self, s, index)


    def moveDownPathWrap(self, s, index):
        """
        moveDownPathWrap(GeometryPath self, State s, int index)

        Parameters
        ----------
        s: SimTK::State const &
        index: int

        """
        return _simulation.GeometryPath_moveDownPathWrap(self, s, index)


    def deletePathWrap(self, s, index):
        """
        deletePathWrap(GeometryPath self, State s, int index)

        Parameters
        ----------
        s: SimTK::State const &
        index: int

        """
        return _simulation.GeometryPath_deletePathWrap(self, s, index)


    def replacePathPoint(self, s, oldPathPoint, newPathPoint):
        """
        replacePathPoint(GeometryPath self, State s, AbstractPathPoint oldPathPoint, AbstractPathPoint newPathPoint) -> bool

        Parameters
        ----------
        s: SimTK::State const &
        oldPathPoint: OpenSim::AbstractPathPoint *
        newPathPoint: OpenSim::AbstractPathPoint *

        """
        return _simulation.GeometryPath_replacePathPoint(self, s, oldPathPoint, newPathPoint)


    def setDefaultColor(self, color):
        """
        setDefaultColor(GeometryPath self, Vec3 color)

        Parameters
        ----------
        color: SimTK::Vec3 const &

        """
        return _simulation.GeometryPath_setDefaultColor(self, color)


    def getDefaultColor(self):
        """
        getDefaultColor(GeometryPath self) -> Vec3

        Parameters
        ----------
        self: OpenSim::GeometryPath const *

        """
        return _simulation.GeometryPath_getDefaultColor(self)


    def setColor(self, s, color):
        """
        setColor(GeometryPath self, State s, Vec3 color)

        Parameters
        ----------
        s: SimTK::State const &
        color: SimTK::Vec3 const &

        """
        return _simulation.GeometryPath_setColor(self, s, color)


    def getColor(self, s):
        """
        getColor(GeometryPath self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.GeometryPath_getColor(self, s)


    def getLength(self, s):
        """
        getLength(GeometryPath self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.GeometryPath_getLength(self, s)


    def setLength(self, s, length):
        """
        setLength(GeometryPath self, State s, double length)

        Parameters
        ----------
        s: SimTK::State const &
        length: double

        """
        return _simulation.GeometryPath_setLength(self, s, length)


    def getPreScaleLength(self, s):
        """
        getPreScaleLength(GeometryPath self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.GeometryPath_getPreScaleLength(self, s)


    def setPreScaleLength(self, s, preScaleLength):
        """
        setPreScaleLength(GeometryPath self, State s, double preScaleLength)

        Parameters
        ----------
        s: SimTK::State const &
        preScaleLength: double

        """
        return _simulation.GeometryPath_setPreScaleLength(self, s, preScaleLength)


    def getCurrentPath(self, s):
        """
        getCurrentPath(GeometryPath self, State s) -> ArrayPathPoint

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.GeometryPath_getCurrentPath(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(GeometryPath self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.GeometryPath_getLengtheningSpeed(self, s)


    def setLengtheningSpeed(self, s, speed):
        """
        setLengtheningSpeed(GeometryPath self, State s, double speed)

        Parameters
        ----------
        s: SimTK::State const &
        speed: double

        """
        return _simulation.GeometryPath_setLengtheningSpeed(self, s, speed)


    def getPointForceDirections(self, s, rPFDs):
        """
        getPointForceDirections(GeometryPath self, State s, ArrayPointForceDirection rPFDs)

        Parameters
        ----------
        s: SimTK::State const &
        rPFDs: OpenSim::Array< OpenSim::PointForceDirection * > *

        """
        return _simulation.GeometryPath_getPointForceDirections(self, s, rPFDs)


    def addInEquivalentForces(self, state, tension, bodyForces, mobilityForces):
        """
        addInEquivalentForces(GeometryPath self, State state, double const & tension, VectorOfSpatialVec bodyForces, Vector mobilityForces)

        Parameters
        ----------
        state: SimTK::State const &
        tension: double const &
        bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
        mobilityForces: SimTK::Vector &

        """
        return _simulation.GeometryPath_addInEquivalentForces(self, state, tension, bodyForces, mobilityForces)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(GeometryPath self, State s, Coordinate aCoord) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aCoord: OpenSim::Coordinate const &

        """
        return _simulation.GeometryPath_computeMomentArm(self, s, aCoord)


    def extendPreScale(self, s, scaleSet):
        """
        extendPreScale(GeometryPath self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.GeometryPath_extendPreScale(self, s, scaleSet)


    def extendPostScale(self, s, scaleSet):
        """
        extendPostScale(GeometryPath self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.GeometryPath_extendPostScale(self, s, scaleSet)


    def updateGeometry(self, s):
        """
        updateGeometry(GeometryPath self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.GeometryPath_updateGeometry(self, s)

GeometryPath_swigregister = _simulation.GeometryPath_swigregister
GeometryPath_swigregister(GeometryPath)

def GeometryPath_safeDownCast(obj):
    """
    GeometryPath_safeDownCast(OpenSimObject obj) -> GeometryPath

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.GeometryPath_safeDownCast(obj)

def GeometryPath_getClassName():
    """GeometryPath_getClassName() -> std::string const &"""
    return _simulation.GeometryPath_getClassName()

class Ligament(Force):
    """Proxy of C++ OpenSim::Ligament class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ligament, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ligament, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Ligament

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Ligament_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Ligament self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Ligament_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Ligament_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Ligament self) -> Ligament

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Ligament self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_getConcreteClassName(self)


    def copyProperty_GeometryPath(self, source):
        """
        copyProperty_GeometryPath(Ligament self, Ligament source)

        Parameters
        ----------
        source: OpenSim::Ligament::Self const &

        """
        return _simulation.Ligament_copyProperty_GeometryPath(self, source)


    def append_GeometryPath(self, value):
        """
        append_GeometryPath(Ligament self, GeometryPath value) -> int

        Parameters
        ----------
        value: OpenSim::GeometryPath const &

        """
        return _simulation.Ligament_append_GeometryPath(self, value)


    def constructProperty_GeometryPath(self, initValue):
        """
        constructProperty_GeometryPath(Ligament self, GeometryPath initValue)

        Parameters
        ----------
        initValue: OpenSim::GeometryPath const &

        """
        return _simulation.Ligament_constructProperty_GeometryPath(self, initValue)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(Ligament self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        get_GeometryPath(Ligament self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_get_GeometryPath(self, *args)


    def upd_GeometryPath(self, *args):
        """
        upd_GeometryPath(Ligament self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        upd_GeometryPath(Ligament self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::Ligament *

        """
        return _simulation.Ligament_upd_GeometryPath(self, *args)


    def set_GeometryPath(self, *args):
        """
        set_GeometryPath(Ligament self, int i, GeometryPath value)

        Parameters
        ----------
        i: int
        value: OpenSim::GeometryPath const &

        set_GeometryPath(Ligament self, GeometryPath value)

        Parameters
        ----------
        value: OpenSim::GeometryPath const &

        """
        return _simulation.Ligament_set_GeometryPath(self, *args)


    def copyProperty_resting_length(self, source):
        """
        copyProperty_resting_length(Ligament self, Ligament source)

        Parameters
        ----------
        source: OpenSim::Ligament::Self const &

        """
        return _simulation.Ligament_copyProperty_resting_length(self, source)


    def append_resting_length(self, value):
        """
        append_resting_length(Ligament self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Ligament_append_resting_length(self, value)


    def constructProperty_resting_length(self, initValue):
        """
        constructProperty_resting_length(Ligament self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Ligament_constructProperty_resting_length(self, initValue)


    def get_resting_length(self, *args):
        """
        get_resting_length(Ligament self, int i) -> double const

        Parameters
        ----------
        i: int

        get_resting_length(Ligament self) -> double const &

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_get_resting_length(self, *args)


    def upd_resting_length(self, *args):
        """
        upd_resting_length(Ligament self, int i) -> double

        Parameters
        ----------
        i: int

        upd_resting_length(Ligament self) -> double &

        Parameters
        ----------
        self: OpenSim::Ligament *

        """
        return _simulation.Ligament_upd_resting_length(self, *args)


    def set_resting_length(self, *args):
        """
        set_resting_length(Ligament self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_resting_length(Ligament self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Ligament_set_resting_length(self, *args)


    def copyProperty_pcsa_force(self, source):
        """
        copyProperty_pcsa_force(Ligament self, Ligament source)

        Parameters
        ----------
        source: OpenSim::Ligament::Self const &

        """
        return _simulation.Ligament_copyProperty_pcsa_force(self, source)


    def append_pcsa_force(self, value):
        """
        append_pcsa_force(Ligament self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Ligament_append_pcsa_force(self, value)


    def constructProperty_pcsa_force(self, initValue):
        """
        constructProperty_pcsa_force(Ligament self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Ligament_constructProperty_pcsa_force(self, initValue)


    def get_pcsa_force(self, *args):
        """
        get_pcsa_force(Ligament self, int i) -> double const

        Parameters
        ----------
        i: int

        get_pcsa_force(Ligament self) -> double const &

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_get_pcsa_force(self, *args)


    def upd_pcsa_force(self, *args):
        """
        upd_pcsa_force(Ligament self, int i) -> double

        Parameters
        ----------
        i: int

        upd_pcsa_force(Ligament self) -> double &

        Parameters
        ----------
        self: OpenSim::Ligament *

        """
        return _simulation.Ligament_upd_pcsa_force(self, *args)


    def set_pcsa_force(self, *args):
        """
        set_pcsa_force(Ligament self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_pcsa_force(Ligament self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Ligament_set_pcsa_force(self, *args)


    def copyProperty_force_length_curve(self, source):
        """
        copyProperty_force_length_curve(Ligament self, Ligament source)

        Parameters
        ----------
        source: OpenSim::Ligament::Self const &

        """
        return _simulation.Ligament_copyProperty_force_length_curve(self, source)


    def append_force_length_curve(self, value):
        """
        append_force_length_curve(Ligament self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.Ligament_append_force_length_curve(self, value)


    def constructProperty_force_length_curve(self, initValue):
        """
        constructProperty_force_length_curve(Ligament self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.Ligament_constructProperty_force_length_curve(self, initValue)


    def get_force_length_curve(self, *args):
        """
        get_force_length_curve(Ligament self, int i) -> Function

        Parameters
        ----------
        i: int

        get_force_length_curve(Ligament self) -> Function

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_get_force_length_curve(self, *args)


    def upd_force_length_curve(self, *args):
        """
        upd_force_length_curve(Ligament self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_force_length_curve(Ligament self) -> Function

        Parameters
        ----------
        self: OpenSim::Ligament *

        """
        return _simulation.Ligament_upd_force_length_curve(self, *args)


    def set_force_length_curve(self, *args):
        """
        set_force_length_curve(Ligament self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_force_length_curve(Ligament self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.Ligament_set_force_length_curve(self, *args)


    def __init__(self):
        """__init__(OpenSim::Ligament self) -> Ligament"""
        this = _simulation.new_Ligament()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getGeometryPath(self):
        """
        getGeometryPath(Ligament self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_getGeometryPath(self)


    def updGeometryPath(self):
        """
        updGeometryPath(Ligament self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::Ligament *

        """
        return _simulation.Ligament_updGeometryPath(self)


    def hasGeometryPath(self):
        """
        hasGeometryPath(Ligament self) -> bool

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_hasGeometryPath(self)


    def getLength(self, s):
        """
        getLength(Ligament self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Ligament_getLength(self, s)


    def getRestingLength(self):
        """
        getRestingLength(Ligament self) -> double

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_getRestingLength(self)


    def setRestingLength(self, aRestingLength):
        """
        setRestingLength(Ligament self, double aRestingLength) -> bool

        Parameters
        ----------
        aRestingLength: double

        """
        return _simulation.Ligament_setRestingLength(self, aRestingLength)


    def getMaxIsometricForce(self):
        """
        getMaxIsometricForce(Ligament self) -> double

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_getMaxIsometricForce(self)


    def setMaxIsometricForce(self, aMaxIsometricForce):
        """
        setMaxIsometricForce(Ligament self, double aMaxIsometricForce) -> bool

        Parameters
        ----------
        aMaxIsometricForce: double

        """
        return _simulation.Ligament_setMaxIsometricForce(self, aMaxIsometricForce)


    def getForceLengthCurve(self):
        """
        getForceLengthCurve(Ligament self) -> Function

        Parameters
        ----------
        self: OpenSim::Ligament const *

        """
        return _simulation.Ligament_getForceLengthCurve(self)


    def setForceLengthCurve(self, aForceLengthCurve):
        """
        setForceLengthCurve(Ligament self, Function aForceLengthCurve) -> bool

        Parameters
        ----------
        aForceLengthCurve: OpenSim::Function const &

        """
        return _simulation.Ligament_setForceLengthCurve(self, aForceLengthCurve)


    def getTension(self, s):
        """
        getTension(Ligament self, State s) -> double const &

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Ligament_getTension(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(Ligament self, State s, Coordinate aCoord) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aCoord: OpenSim::Coordinate &

        """
        return _simulation.Ligament_computeMomentArm(self, s, aCoord)


    def computeForce(self, s, bodyForces, generalizedForces):
        """
        computeForce(Ligament self, State s, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters
        ----------
        s: SimTK::State const &
        bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
        generalizedForces: SimTK::Vector &

        """
        return _simulation.Ligament_computeForce(self, s, bodyForces, generalizedForces)


    def extendPostScale(self, s, scaleSet):
        """
        extendPostScale(Ligament self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.Ligament_extendPostScale(self, s, scaleSet)

    __swig_destroy__ = _simulation.delete_Ligament
    __del__ = lambda self: None
Ligament_swigregister = _simulation.Ligament_swigregister
Ligament_swigregister(Ligament)

def Ligament_safeDownCast(obj):
    """
    Ligament_safeDownCast(OpenSimObject obj) -> Ligament

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Ligament_safeDownCast(obj)

def Ligament_getClassName():
    """Ligament_getClassName() -> std::string const &"""
    return _simulation.Ligament_getClassName()

class PathActuator(ScalarActuator):
    """Proxy of C++ OpenSim::PathActuator class."""

    __swig_setmethods__ = {}
    for _s in [ScalarActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathActuator, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathActuator, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PathActuator_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PathActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PathActuator_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PathActuator_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PathActuator self) -> PathActuator

        Parameters
        ----------
        self: OpenSim::PathActuator const *

        """
        return _simulation.PathActuator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathActuator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathActuator const *

        """
        return _simulation.PathActuator_getConcreteClassName(self)


    def copyProperty_GeometryPath(self, source):
        """
        copyProperty_GeometryPath(PathActuator self, PathActuator source)

        Parameters
        ----------
        source: OpenSim::PathActuator::Self const &

        """
        return _simulation.PathActuator_copyProperty_GeometryPath(self, source)


    def append_GeometryPath(self, value):
        """
        append_GeometryPath(PathActuator self, GeometryPath value) -> int

        Parameters
        ----------
        value: OpenSim::GeometryPath const &

        """
        return _simulation.PathActuator_append_GeometryPath(self, value)


    def constructProperty_GeometryPath(self, initValue):
        """
        constructProperty_GeometryPath(PathActuator self, GeometryPath initValue)

        Parameters
        ----------
        initValue: OpenSim::GeometryPath const &

        """
        return _simulation.PathActuator_constructProperty_GeometryPath(self, initValue)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(PathActuator self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        get_GeometryPath(PathActuator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::PathActuator const *

        """
        return _simulation.PathActuator_get_GeometryPath(self, *args)


    def upd_GeometryPath(self, *args):
        """
        upd_GeometryPath(PathActuator self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        upd_GeometryPath(PathActuator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::PathActuator *

        """
        return _simulation.PathActuator_upd_GeometryPath(self, *args)


    def set_GeometryPath(self, *args):
        """
        set_GeometryPath(PathActuator self, int i, GeometryPath value)

        Parameters
        ----------
        i: int
        value: OpenSim::GeometryPath const &

        set_GeometryPath(PathActuator self, GeometryPath value)

        Parameters
        ----------
        value: OpenSim::GeometryPath const &

        """
        return _simulation.PathActuator_set_GeometryPath(self, *args)


    def copyProperty_optimal_force(self, source):
        """
        copyProperty_optimal_force(PathActuator self, PathActuator source)

        Parameters
        ----------
        source: OpenSim::PathActuator::Self const &

        """
        return _simulation.PathActuator_copyProperty_optimal_force(self, source)


    def append_optimal_force(self, value):
        """
        append_optimal_force(PathActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PathActuator_append_optimal_force(self, value)


    def constructProperty_optimal_force(self, initValue):
        """
        constructProperty_optimal_force(PathActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.PathActuator_constructProperty_optimal_force(self, initValue)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(PathActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(PathActuator self) -> double const &

        Parameters
        ----------
        self: OpenSim::PathActuator const *

        """
        return _simulation.PathActuator_get_optimal_force(self, *args)


    def upd_optimal_force(self, *args):
        """
        upd_optimal_force(PathActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(PathActuator self) -> double &

        Parameters
        ----------
        self: OpenSim::PathActuator *

        """
        return _simulation.PathActuator_upd_optimal_force(self, *args)


    def set_optimal_force(self, *args):
        """
        set_optimal_force(PathActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(PathActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PathActuator_set_optimal_force(self, *args)

    __swig_setmethods__["_has_output_tension"] = _simulation.PathActuator__has_output_tension_set
    __swig_getmethods__["_has_output_tension"] = _simulation.PathActuator__has_output_tension_get
    if _newclass:
        _has_output_tension = _swig_property(_simulation.PathActuator__has_output_tension_get, _simulation.PathActuator__has_output_tension_set)

    def __init__(self):
        """__init__(OpenSim::PathActuator self) -> PathActuator"""
        this = _simulation.new_PathActuator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def updGeometryPath(self):
        """
        updGeometryPath(PathActuator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::PathActuator *

        """
        return _simulation.PathActuator_updGeometryPath(self)


    def getGeometryPath(self):
        """
        getGeometryPath(PathActuator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::PathActuator const *

        """
        return _simulation.PathActuator_getGeometryPath(self)


    def hasGeometryPath(self):
        """
        hasGeometryPath(PathActuator self) -> bool

        Parameters
        ----------
        self: OpenSim::PathActuator const *

        """
        return _simulation.PathActuator_hasGeometryPath(self)


    def setOptimalForce(self, aOptimalForce):
        """
        setOptimalForce(PathActuator self, double aOptimalForce)

        Parameters
        ----------
        aOptimalForce: double

        """
        return _simulation.PathActuator_setOptimalForce(self, aOptimalForce)


    def getOptimalForce(self):
        """
        getOptimalForce(PathActuator self) -> double

        Parameters
        ----------
        self: OpenSim::PathActuator const *

        """
        return _simulation.PathActuator_getOptimalForce(self)


    def getLength(self, s):
        """
        getLength(PathActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathActuator_getLength(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(PathActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathActuator_getLengtheningSpeed(self, s)


    def getPower(self, s):
        """
        getPower(PathActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathActuator_getPower(self, s)


    def getStress(self, s):
        """
        getStress(PathActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathActuator_getStress(self, s)


    def addNewPathPoint(self, proposedName, aBody, aPositionOnBody):
        """
        addNewPathPoint(PathActuator self, std::string const & proposedName, PhysicalFrame aBody, Vec3 aPositionOnBody)

        Parameters
        ----------
        proposedName: std::string const &
        aBody: OpenSim::PhysicalFrame const &
        aPositionOnBody: SimTK::Vec3 const &

        """
        return _simulation.PathActuator_addNewPathPoint(self, proposedName, aBody, aPositionOnBody)


    def computeForce(self, state, bodyForces, mobilityForces):
        """
        computeForce(PathActuator self, State state, VectorOfSpatialVec bodyForces, Vector mobilityForces)

        Parameters
        ----------
        state: SimTK::State const &
        bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
        mobilityForces: SimTK::Vector &

        """
        return _simulation.PathActuator_computeForce(self, state, bodyForces, mobilityForces)


    def computeActuation(self, s):
        """
        computeActuation(PathActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathActuator_computeActuation(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(PathActuator self, State s, Coordinate aCoord) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aCoord: OpenSim::Coordinate &

        """
        return _simulation.PathActuator_computeMomentArm(self, s, aCoord)

    __swig_destroy__ = _simulation.delete_PathActuator
    __del__ = lambda self: None
PathActuator_swigregister = _simulation.PathActuator_swigregister
PathActuator_swigregister(PathActuator)

def PathActuator_safeDownCast(obj):
    """
    PathActuator_safeDownCast(OpenSimObject obj) -> PathActuator

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PathActuator_safeDownCast(obj)

def PathActuator_getClassName():
    """PathActuator_getClassName() -> std::string const &"""
    return _simulation.PathActuator_getClassName()

class MuscleCannotEquilibrate(opensim.common.OpenSimException):
    """Proxy of C++ OpenSim::MuscleCannotEquilibrate class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleCannotEquilibrate, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleCannotEquilibrate, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, obj, detail):
        """
        __init__(OpenSim::MuscleCannotEquilibrate self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & detail) -> MuscleCannotEquilibrate

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        detail: std::string const &

        """
        this = _simulation.new_MuscleCannotEquilibrate(file, line, func, obj, detail)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_MuscleCannotEquilibrate
    __del__ = lambda self: None
MuscleCannotEquilibrate_swigregister = _simulation.MuscleCannotEquilibrate_swigregister
MuscleCannotEquilibrate_swigregister(MuscleCannotEquilibrate)

class Muscle(PathActuator):
    """Proxy of C++ OpenSim::Muscle class."""

    __swig_setmethods__ = {}
    for _s in [PathActuator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Muscle, name, value)
    __swig_getmethods__ = {}
    for _s in [PathActuator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Muscle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Muscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Muscle_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Muscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Muscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Muscle_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Muscle self) -> Muscle

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Muscle self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_getConcreteClassName(self)


    def copyProperty_max_isometric_force(self, source):
        """
        copyProperty_max_isometric_force(Muscle self, Muscle source)

        Parameters
        ----------
        source: OpenSim::Muscle::Self const &

        """
        return _simulation.Muscle_copyProperty_max_isometric_force(self, source)


    def append_max_isometric_force(self, value):
        """
        append_max_isometric_force(Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_append_max_isometric_force(self, value)


    def constructProperty_max_isometric_force(self, initValue):
        """
        constructProperty_max_isometric_force(Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Muscle_constructProperty_max_isometric_force(self, initValue)


    def get_max_isometric_force(self, *args):
        """
        get_max_isometric_force(Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_isometric_force(Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_get_max_isometric_force(self, *args)


    def upd_max_isometric_force(self, *args):
        """
        upd_max_isometric_force(Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_max_isometric_force(Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Muscle *

        """
        return _simulation.Muscle_upd_max_isometric_force(self, *args)


    def set_max_isometric_force(self, *args):
        """
        set_max_isometric_force(Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_max_isometric_force(Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_set_max_isometric_force(self, *args)


    def copyProperty_optimal_fiber_length(self, source):
        """
        copyProperty_optimal_fiber_length(Muscle self, Muscle source)

        Parameters
        ----------
        source: OpenSim::Muscle::Self const &

        """
        return _simulation.Muscle_copyProperty_optimal_fiber_length(self, source)


    def append_optimal_fiber_length(self, value):
        """
        append_optimal_fiber_length(Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_append_optimal_fiber_length(self, value)


    def constructProperty_optimal_fiber_length(self, initValue):
        """
        constructProperty_optimal_fiber_length(Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Muscle_constructProperty_optimal_fiber_length(self, initValue)


    def get_optimal_fiber_length(self, *args):
        """
        get_optimal_fiber_length(Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_fiber_length(Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_get_optimal_fiber_length(self, *args)


    def upd_optimal_fiber_length(self, *args):
        """
        upd_optimal_fiber_length(Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_fiber_length(Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Muscle *

        """
        return _simulation.Muscle_upd_optimal_fiber_length(self, *args)


    def set_optimal_fiber_length(self, *args):
        """
        set_optimal_fiber_length(Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_fiber_length(Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_set_optimal_fiber_length(self, *args)


    def copyProperty_tendon_slack_length(self, source):
        """
        copyProperty_tendon_slack_length(Muscle self, Muscle source)

        Parameters
        ----------
        source: OpenSim::Muscle::Self const &

        """
        return _simulation.Muscle_copyProperty_tendon_slack_length(self, source)


    def append_tendon_slack_length(self, value):
        """
        append_tendon_slack_length(Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_append_tendon_slack_length(self, value)


    def constructProperty_tendon_slack_length(self, initValue):
        """
        constructProperty_tendon_slack_length(Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Muscle_constructProperty_tendon_slack_length(self, initValue)


    def get_tendon_slack_length(self, *args):
        """
        get_tendon_slack_length(Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_tendon_slack_length(Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_get_tendon_slack_length(self, *args)


    def upd_tendon_slack_length(self, *args):
        """
        upd_tendon_slack_length(Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_tendon_slack_length(Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Muscle *

        """
        return _simulation.Muscle_upd_tendon_slack_length(self, *args)


    def set_tendon_slack_length(self, *args):
        """
        set_tendon_slack_length(Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_tendon_slack_length(Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_set_tendon_slack_length(self, *args)


    def copyProperty_pennation_angle_at_optimal(self, source):
        """
        copyProperty_pennation_angle_at_optimal(Muscle self, Muscle source)

        Parameters
        ----------
        source: OpenSim::Muscle::Self const &

        """
        return _simulation.Muscle_copyProperty_pennation_angle_at_optimal(self, source)


    def append_pennation_angle_at_optimal(self, value):
        """
        append_pennation_angle_at_optimal(Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_append_pennation_angle_at_optimal(self, value)


    def constructProperty_pennation_angle_at_optimal(self, initValue):
        """
        constructProperty_pennation_angle_at_optimal(Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Muscle_constructProperty_pennation_angle_at_optimal(self, initValue)


    def get_pennation_angle_at_optimal(self, *args):
        """
        get_pennation_angle_at_optimal(Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_pennation_angle_at_optimal(Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_get_pennation_angle_at_optimal(self, *args)


    def upd_pennation_angle_at_optimal(self, *args):
        """
        upd_pennation_angle_at_optimal(Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_pennation_angle_at_optimal(Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Muscle *

        """
        return _simulation.Muscle_upd_pennation_angle_at_optimal(self, *args)


    def set_pennation_angle_at_optimal(self, *args):
        """
        set_pennation_angle_at_optimal(Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_pennation_angle_at_optimal(Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_set_pennation_angle_at_optimal(self, *args)


    def copyProperty_max_contraction_velocity(self, source):
        """
        copyProperty_max_contraction_velocity(Muscle self, Muscle source)

        Parameters
        ----------
        source: OpenSim::Muscle::Self const &

        """
        return _simulation.Muscle_copyProperty_max_contraction_velocity(self, source)


    def append_max_contraction_velocity(self, value):
        """
        append_max_contraction_velocity(Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_append_max_contraction_velocity(self, value)


    def constructProperty_max_contraction_velocity(self, initValue):
        """
        constructProperty_max_contraction_velocity(Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Muscle_constructProperty_max_contraction_velocity(self, initValue)


    def get_max_contraction_velocity(self, *args):
        """
        get_max_contraction_velocity(Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_contraction_velocity(Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_get_max_contraction_velocity(self, *args)


    def upd_max_contraction_velocity(self, *args):
        """
        upd_max_contraction_velocity(Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_max_contraction_velocity(Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Muscle *

        """
        return _simulation.Muscle_upd_max_contraction_velocity(self, *args)


    def set_max_contraction_velocity(self, *args):
        """
        set_max_contraction_velocity(Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_max_contraction_velocity(Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Muscle_set_max_contraction_velocity(self, *args)


    def copyProperty_ignore_tendon_compliance(self, source):
        """
        copyProperty_ignore_tendon_compliance(Muscle self, Muscle source)

        Parameters
        ----------
        source: OpenSim::Muscle::Self const &

        """
        return _simulation.Muscle_copyProperty_ignore_tendon_compliance(self, source)


    def append_ignore_tendon_compliance(self, value):
        """
        append_ignore_tendon_compliance(Muscle self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Muscle_append_ignore_tendon_compliance(self, value)


    def constructProperty_ignore_tendon_compliance(self, initValue):
        """
        constructProperty_ignore_tendon_compliance(Muscle self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Muscle_constructProperty_ignore_tendon_compliance(self, initValue)


    def get_ignore_tendon_compliance(self, *args):
        """
        get_ignore_tendon_compliance(Muscle self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_tendon_compliance(Muscle self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_get_ignore_tendon_compliance(self, *args)


    def upd_ignore_tendon_compliance(self, *args):
        """
        upd_ignore_tendon_compliance(Muscle self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_ignore_tendon_compliance(Muscle self) -> bool &

        Parameters
        ----------
        self: OpenSim::Muscle *

        """
        return _simulation.Muscle_upd_ignore_tendon_compliance(self, *args)


    def set_ignore_tendon_compliance(self, *args):
        """
        set_ignore_tendon_compliance(Muscle self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_ignore_tendon_compliance(Muscle self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Muscle_set_ignore_tendon_compliance(self, *args)


    def copyProperty_ignore_activation_dynamics(self, source):
        """
        copyProperty_ignore_activation_dynamics(Muscle self, Muscle source)

        Parameters
        ----------
        source: OpenSim::Muscle::Self const &

        """
        return _simulation.Muscle_copyProperty_ignore_activation_dynamics(self, source)


    def append_ignore_activation_dynamics(self, value):
        """
        append_ignore_activation_dynamics(Muscle self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Muscle_append_ignore_activation_dynamics(self, value)


    def constructProperty_ignore_activation_dynamics(self, initValue):
        """
        constructProperty_ignore_activation_dynamics(Muscle self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _simulation.Muscle_constructProperty_ignore_activation_dynamics(self, initValue)


    def get_ignore_activation_dynamics(self, *args):
        """
        get_ignore_activation_dynamics(Muscle self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_activation_dynamics(Muscle self) -> bool const &

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_get_ignore_activation_dynamics(self, *args)


    def upd_ignore_activation_dynamics(self, *args):
        """
        upd_ignore_activation_dynamics(Muscle self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_ignore_activation_dynamics(Muscle self) -> bool &

        Parameters
        ----------
        self: OpenSim::Muscle *

        """
        return _simulation.Muscle_upd_ignore_activation_dynamics(self, *args)


    def set_ignore_activation_dynamics(self, *args):
        """
        set_ignore_activation_dynamics(Muscle self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_ignore_activation_dynamics(Muscle self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _simulation.Muscle_set_ignore_activation_dynamics(self, *args)

    __swig_setmethods__["_has_output_excitation"] = _simulation.Muscle__has_output_excitation_set
    __swig_getmethods__["_has_output_excitation"] = _simulation.Muscle__has_output_excitation_get
    if _newclass:
        _has_output_excitation = _swig_property(_simulation.Muscle__has_output_excitation_get, _simulation.Muscle__has_output_excitation_set)
    __swig_setmethods__["_has_output_activation"] = _simulation.Muscle__has_output_activation_set
    __swig_getmethods__["_has_output_activation"] = _simulation.Muscle__has_output_activation_get
    if _newclass:
        _has_output_activation = _swig_property(_simulation.Muscle__has_output_activation_get, _simulation.Muscle__has_output_activation_set)
    __swig_setmethods__["_has_output_fiber_length"] = _simulation.Muscle__has_output_fiber_length_set
    __swig_getmethods__["_has_output_fiber_length"] = _simulation.Muscle__has_output_fiber_length_get
    if _newclass:
        _has_output_fiber_length = _swig_property(_simulation.Muscle__has_output_fiber_length_get, _simulation.Muscle__has_output_fiber_length_set)
    __swig_setmethods__["_has_output_pennation_angle"] = _simulation.Muscle__has_output_pennation_angle_set
    __swig_getmethods__["_has_output_pennation_angle"] = _simulation.Muscle__has_output_pennation_angle_get
    if _newclass:
        _has_output_pennation_angle = _swig_property(_simulation.Muscle__has_output_pennation_angle_get, _simulation.Muscle__has_output_pennation_angle_set)
    __swig_setmethods__["_has_output_cos_pennation_angle"] = _simulation.Muscle__has_output_cos_pennation_angle_set
    __swig_getmethods__["_has_output_cos_pennation_angle"] = _simulation.Muscle__has_output_cos_pennation_angle_get
    if _newclass:
        _has_output_cos_pennation_angle = _swig_property(_simulation.Muscle__has_output_cos_pennation_angle_get, _simulation.Muscle__has_output_cos_pennation_angle_set)
    __swig_setmethods__["_has_output_tendon_length"] = _simulation.Muscle__has_output_tendon_length_set
    __swig_getmethods__["_has_output_tendon_length"] = _simulation.Muscle__has_output_tendon_length_get
    if _newclass:
        _has_output_tendon_length = _swig_property(_simulation.Muscle__has_output_tendon_length_get, _simulation.Muscle__has_output_tendon_length_set)
    __swig_setmethods__["_has_output_normalized_fiber_length"] = _simulation.Muscle__has_output_normalized_fiber_length_set
    __swig_getmethods__["_has_output_normalized_fiber_length"] = _simulation.Muscle__has_output_normalized_fiber_length_get
    if _newclass:
        _has_output_normalized_fiber_length = _swig_property(_simulation.Muscle__has_output_normalized_fiber_length_get, _simulation.Muscle__has_output_normalized_fiber_length_set)
    __swig_setmethods__["_has_output_fiber_length_along_tendon"] = _simulation.Muscle__has_output_fiber_length_along_tendon_set
    __swig_getmethods__["_has_output_fiber_length_along_tendon"] = _simulation.Muscle__has_output_fiber_length_along_tendon_get
    if _newclass:
        _has_output_fiber_length_along_tendon = _swig_property(_simulation.Muscle__has_output_fiber_length_along_tendon_get, _simulation.Muscle__has_output_fiber_length_along_tendon_set)
    __swig_setmethods__["_has_output_tendon_strain"] = _simulation.Muscle__has_output_tendon_strain_set
    __swig_getmethods__["_has_output_tendon_strain"] = _simulation.Muscle__has_output_tendon_strain_get
    if _newclass:
        _has_output_tendon_strain = _swig_property(_simulation.Muscle__has_output_tendon_strain_get, _simulation.Muscle__has_output_tendon_strain_set)
    __swig_setmethods__["_has_output_passive_force_multiplier"] = _simulation.Muscle__has_output_passive_force_multiplier_set
    __swig_getmethods__["_has_output_passive_force_multiplier"] = _simulation.Muscle__has_output_passive_force_multiplier_get
    if _newclass:
        _has_output_passive_force_multiplier = _swig_property(_simulation.Muscle__has_output_passive_force_multiplier_get, _simulation.Muscle__has_output_passive_force_multiplier_set)
    __swig_setmethods__["_has_output_active_force_length_multiplier"] = _simulation.Muscle__has_output_active_force_length_multiplier_set
    __swig_getmethods__["_has_output_active_force_length_multiplier"] = _simulation.Muscle__has_output_active_force_length_multiplier_get
    if _newclass:
        _has_output_active_force_length_multiplier = _swig_property(_simulation.Muscle__has_output_active_force_length_multiplier_get, _simulation.Muscle__has_output_active_force_length_multiplier_set)
    __swig_setmethods__["_has_output_fiber_velocity"] = _simulation.Muscle__has_output_fiber_velocity_set
    __swig_getmethods__["_has_output_fiber_velocity"] = _simulation.Muscle__has_output_fiber_velocity_get
    if _newclass:
        _has_output_fiber_velocity = _swig_property(_simulation.Muscle__has_output_fiber_velocity_get, _simulation.Muscle__has_output_fiber_velocity_set)
    __swig_setmethods__["_has_output_normalized_fiber_velocity"] = _simulation.Muscle__has_output_normalized_fiber_velocity_set
    __swig_getmethods__["_has_output_normalized_fiber_velocity"] = _simulation.Muscle__has_output_normalized_fiber_velocity_get
    if _newclass:
        _has_output_normalized_fiber_velocity = _swig_property(_simulation.Muscle__has_output_normalized_fiber_velocity_get, _simulation.Muscle__has_output_normalized_fiber_velocity_set)
    __swig_setmethods__["_has_output_fiber_velocity_along_tendon"] = _simulation.Muscle__has_output_fiber_velocity_along_tendon_set
    __swig_getmethods__["_has_output_fiber_velocity_along_tendon"] = _simulation.Muscle__has_output_fiber_velocity_along_tendon_get
    if _newclass:
        _has_output_fiber_velocity_along_tendon = _swig_property(_simulation.Muscle__has_output_fiber_velocity_along_tendon_get, _simulation.Muscle__has_output_fiber_velocity_along_tendon_set)
    __swig_setmethods__["_has_output_tendon_velocity"] = _simulation.Muscle__has_output_tendon_velocity_set
    __swig_getmethods__["_has_output_tendon_velocity"] = _simulation.Muscle__has_output_tendon_velocity_get
    if _newclass:
        _has_output_tendon_velocity = _swig_property(_simulation.Muscle__has_output_tendon_velocity_get, _simulation.Muscle__has_output_tendon_velocity_set)
    __swig_setmethods__["_has_output_force_velocity_multiplier"] = _simulation.Muscle__has_output_force_velocity_multiplier_set
    __swig_getmethods__["_has_output_force_velocity_multiplier"] = _simulation.Muscle__has_output_force_velocity_multiplier_get
    if _newclass:
        _has_output_force_velocity_multiplier = _swig_property(_simulation.Muscle__has_output_force_velocity_multiplier_get, _simulation.Muscle__has_output_force_velocity_multiplier_set)
    __swig_setmethods__["_has_output_pennation_angular_velocity"] = _simulation.Muscle__has_output_pennation_angular_velocity_set
    __swig_getmethods__["_has_output_pennation_angular_velocity"] = _simulation.Muscle__has_output_pennation_angular_velocity_get
    if _newclass:
        _has_output_pennation_angular_velocity = _swig_property(_simulation.Muscle__has_output_pennation_angular_velocity_get, _simulation.Muscle__has_output_pennation_angular_velocity_set)
    __swig_setmethods__["_has_output_fiber_force"] = _simulation.Muscle__has_output_fiber_force_set
    __swig_getmethods__["_has_output_fiber_force"] = _simulation.Muscle__has_output_fiber_force_get
    if _newclass:
        _has_output_fiber_force = _swig_property(_simulation.Muscle__has_output_fiber_force_get, _simulation.Muscle__has_output_fiber_force_set)
    __swig_setmethods__["_has_output_fiber_force_along_tendon"] = _simulation.Muscle__has_output_fiber_force_along_tendon_set
    __swig_getmethods__["_has_output_fiber_force_along_tendon"] = _simulation.Muscle__has_output_fiber_force_along_tendon_get
    if _newclass:
        _has_output_fiber_force_along_tendon = _swig_property(_simulation.Muscle__has_output_fiber_force_along_tendon_get, _simulation.Muscle__has_output_fiber_force_along_tendon_set)
    __swig_setmethods__["_has_output_active_fiber_force"] = _simulation.Muscle__has_output_active_fiber_force_set
    __swig_getmethods__["_has_output_active_fiber_force"] = _simulation.Muscle__has_output_active_fiber_force_get
    if _newclass:
        _has_output_active_fiber_force = _swig_property(_simulation.Muscle__has_output_active_fiber_force_get, _simulation.Muscle__has_output_active_fiber_force_set)
    __swig_setmethods__["_has_output_passive_fiber_force"] = _simulation.Muscle__has_output_passive_fiber_force_set
    __swig_getmethods__["_has_output_passive_fiber_force"] = _simulation.Muscle__has_output_passive_fiber_force_get
    if _newclass:
        _has_output_passive_fiber_force = _swig_property(_simulation.Muscle__has_output_passive_fiber_force_get, _simulation.Muscle__has_output_passive_fiber_force_set)
    __swig_setmethods__["_has_output_active_fiber_force_along_tendon"] = _simulation.Muscle__has_output_active_fiber_force_along_tendon_set
    __swig_getmethods__["_has_output_active_fiber_force_along_tendon"] = _simulation.Muscle__has_output_active_fiber_force_along_tendon_get
    if _newclass:
        _has_output_active_fiber_force_along_tendon = _swig_property(_simulation.Muscle__has_output_active_fiber_force_along_tendon_get, _simulation.Muscle__has_output_active_fiber_force_along_tendon_set)
    __swig_setmethods__["_has_output_passive_fiber_force_along_tendon"] = _simulation.Muscle__has_output_passive_fiber_force_along_tendon_set
    __swig_getmethods__["_has_output_passive_fiber_force_along_tendon"] = _simulation.Muscle__has_output_passive_fiber_force_along_tendon_get
    if _newclass:
        _has_output_passive_fiber_force_along_tendon = _swig_property(_simulation.Muscle__has_output_passive_fiber_force_along_tendon_get, _simulation.Muscle__has_output_passive_fiber_force_along_tendon_set)
    __swig_setmethods__["_has_output_tendon_force"] = _simulation.Muscle__has_output_tendon_force_set
    __swig_getmethods__["_has_output_tendon_force"] = _simulation.Muscle__has_output_tendon_force_get
    if _newclass:
        _has_output_tendon_force = _swig_property(_simulation.Muscle__has_output_tendon_force_get, _simulation.Muscle__has_output_tendon_force_set)
    __swig_setmethods__["_has_output_fiber_stiffness"] = _simulation.Muscle__has_output_fiber_stiffness_set
    __swig_getmethods__["_has_output_fiber_stiffness"] = _simulation.Muscle__has_output_fiber_stiffness_get
    if _newclass:
        _has_output_fiber_stiffness = _swig_property(_simulation.Muscle__has_output_fiber_stiffness_get, _simulation.Muscle__has_output_fiber_stiffness_set)
    __swig_setmethods__["_has_output_fiber_stiffness_along_tendon"] = _simulation.Muscle__has_output_fiber_stiffness_along_tendon_set
    __swig_getmethods__["_has_output_fiber_stiffness_along_tendon"] = _simulation.Muscle__has_output_fiber_stiffness_along_tendon_get
    if _newclass:
        _has_output_fiber_stiffness_along_tendon = _swig_property(_simulation.Muscle__has_output_fiber_stiffness_along_tendon_get, _simulation.Muscle__has_output_fiber_stiffness_along_tendon_set)
    __swig_setmethods__["_has_output_tendon_stiffness"] = _simulation.Muscle__has_output_tendon_stiffness_set
    __swig_getmethods__["_has_output_tendon_stiffness"] = _simulation.Muscle__has_output_tendon_stiffness_get
    if _newclass:
        _has_output_tendon_stiffness = _swig_property(_simulation.Muscle__has_output_tendon_stiffness_get, _simulation.Muscle__has_output_tendon_stiffness_set)
    __swig_setmethods__["_has_output_muscle_stiffness"] = _simulation.Muscle__has_output_muscle_stiffness_set
    __swig_getmethods__["_has_output_muscle_stiffness"] = _simulation.Muscle__has_output_muscle_stiffness_get
    if _newclass:
        _has_output_muscle_stiffness = _swig_property(_simulation.Muscle__has_output_muscle_stiffness_get, _simulation.Muscle__has_output_muscle_stiffness_set)
    __swig_setmethods__["_has_output_fiber_active_power"] = _simulation.Muscle__has_output_fiber_active_power_set
    __swig_getmethods__["_has_output_fiber_active_power"] = _simulation.Muscle__has_output_fiber_active_power_get
    if _newclass:
        _has_output_fiber_active_power = _swig_property(_simulation.Muscle__has_output_fiber_active_power_get, _simulation.Muscle__has_output_fiber_active_power_set)
    __swig_setmethods__["_has_output_fiber_passive_power"] = _simulation.Muscle__has_output_fiber_passive_power_set
    __swig_getmethods__["_has_output_fiber_passive_power"] = _simulation.Muscle__has_output_fiber_passive_power_get
    if _newclass:
        _has_output_fiber_passive_power = _swig_property(_simulation.Muscle__has_output_fiber_passive_power_get, _simulation.Muscle__has_output_fiber_passive_power_set)
    __swig_setmethods__["_has_output_tendon_power"] = _simulation.Muscle__has_output_tendon_power_set
    __swig_getmethods__["_has_output_tendon_power"] = _simulation.Muscle__has_output_tendon_power_get
    if _newclass:
        _has_output_tendon_power = _swig_property(_simulation.Muscle__has_output_tendon_power_get, _simulation.Muscle__has_output_tendon_power_set)
    __swig_setmethods__["_has_output_muscle_power"] = _simulation.Muscle__has_output_muscle_power_set
    __swig_getmethods__["_has_output_muscle_power"] = _simulation.Muscle__has_output_muscle_power_get
    if _newclass:
        _has_output_muscle_power = _swig_property(_simulation.Muscle__has_output_muscle_power_get, _simulation.Muscle__has_output_muscle_power_set)

    def getMaxIsometricForce(self):
        """
        getMaxIsometricForce(Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_getMaxIsometricForce(self)


    def setMaxIsometricForce(self, maxIsometricForce):
        """
        setMaxIsometricForce(Muscle self, double maxIsometricForce)

        Parameters
        ----------
        maxIsometricForce: double

        """
        return _simulation.Muscle_setMaxIsometricForce(self, maxIsometricForce)


    def getOptimalFiberLength(self):
        """
        getOptimalFiberLength(Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_getOptimalFiberLength(self)


    def setOptimalFiberLength(self, optimalFiberLength):
        """
        setOptimalFiberLength(Muscle self, double optimalFiberLength)

        Parameters
        ----------
        optimalFiberLength: double

        """
        return _simulation.Muscle_setOptimalFiberLength(self, optimalFiberLength)


    def getTendonSlackLength(self):
        """
        getTendonSlackLength(Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_getTendonSlackLength(self)


    def setTendonSlackLength(self, tendonSlackLength):
        """
        setTendonSlackLength(Muscle self, double tendonSlackLength)

        Parameters
        ----------
        tendonSlackLength: double

        """
        return _simulation.Muscle_setTendonSlackLength(self, tendonSlackLength)


    def getPennationAngleAtOptimalFiberLength(self):
        """
        getPennationAngleAtOptimalFiberLength(Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_getPennationAngleAtOptimalFiberLength(self)


    def setPennationAngleAtOptimalFiberLength(self, pennationAngle):
        """
        setPennationAngleAtOptimalFiberLength(Muscle self, double pennationAngle)

        Parameters
        ----------
        pennationAngle: double

        """
        return _simulation.Muscle_setPennationAngleAtOptimalFiberLength(self, pennationAngle)


    def getMaxContractionVelocity(self):
        """
        getMaxContractionVelocity(Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Muscle const *

        """
        return _simulation.Muscle_getMaxContractionVelocity(self)


    def setMaxContractionVelocity(self, maxContractionVelocity):
        """
        setMaxContractionVelocity(Muscle self, double maxContractionVelocity)

        Parameters
        ----------
        maxContractionVelocity: double

        """
        return _simulation.Muscle_setMaxContractionVelocity(self, maxContractionVelocity)


    def getIgnoreTendonCompliance(self, s):
        """
        getIgnoreTendonCompliance(Muscle self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getIgnoreTendonCompliance(self, s)


    def setIgnoreTendonCompliance(self, s, ignore):
        """
        setIgnoreTendonCompliance(Muscle self, State s, bool ignore)

        Parameters
        ----------
        s: SimTK::State &
        ignore: bool

        """
        return _simulation.Muscle_setIgnoreTendonCompliance(self, s, ignore)


    def getIgnoreActivationDynamics(self, s):
        """
        getIgnoreActivationDynamics(Muscle self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getIgnoreActivationDynamics(self, s)


    def setIgnoreActivationDynamics(self, s, ignore):
        """
        setIgnoreActivationDynamics(Muscle self, State s, bool ignore)

        Parameters
        ----------
        s: SimTK::State &
        ignore: bool

        """
        return _simulation.Muscle_setIgnoreActivationDynamics(self, s, ignore)


    def getActivation(self, s):
        """
        getActivation(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getActivation(self, s)


    def getFiberLength(self, s):
        """
        getFiberLength(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberLength(self, s)


    def getPennationAngle(self, s):
        """
        getPennationAngle(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getPennationAngle(self, s)


    def getCosPennationAngle(self, s):
        """
        getCosPennationAngle(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getCosPennationAngle(self, s)


    def getTendonLength(self, s):
        """
        getTendonLength(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getTendonLength(self, s)


    def getNormalizedFiberLength(self, s):
        """
        getNormalizedFiberLength(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getNormalizedFiberLength(self, s)


    def getFiberLengthAlongTendon(self, s):
        """
        getFiberLengthAlongTendon(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberLengthAlongTendon(self, s)


    def getTendonStrain(self, s):
        """
        getTendonStrain(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getTendonStrain(self, s)


    def getFiberPotentialEnergy(self, s):
        """
        getFiberPotentialEnergy(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberPotentialEnergy(self, s)


    def getTendonPotentialEnergy(self, s):
        """
        getTendonPotentialEnergy(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getTendonPotentialEnergy(self, s)


    def getMusclePotentialEnergy(self, s):
        """
        getMusclePotentialEnergy(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getMusclePotentialEnergy(self, s)


    def getPassiveForceMultiplier(self, s):
        """
        getPassiveForceMultiplier(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getPassiveForceMultiplier(self, s)


    def getActiveForceLengthMultiplier(self, s):
        """
        getActiveForceLengthMultiplier(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getActiveForceLengthMultiplier(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberVelocity(self, s)


    def getNormalizedFiberVelocity(self, s):
        """
        getNormalizedFiberVelocity(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getNormalizedFiberVelocity(self, s)


    def getFiberVelocityAlongTendon(self, s):
        """
        getFiberVelocityAlongTendon(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberVelocityAlongTendon(self, s)


    def getPennationAngularVelocity(self, s):
        """
        getPennationAngularVelocity(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getPennationAngularVelocity(self, s)


    def getTendonVelocity(self, s):
        """
        getTendonVelocity(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getTendonVelocity(self, s)


    def getForceVelocityMultiplier(self, s):
        """
        getForceVelocityMultiplier(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getForceVelocityMultiplier(self, s)


    def getFiberForce(self, s):
        """
        getFiberForce(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberForce(self, s)


    def getFiberForceAlongTendon(self, s):
        """
        getFiberForceAlongTendon(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberForceAlongTendon(self, s)


    def getActiveFiberForce(self, s):
        """
        getActiveFiberForce(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getActiveFiberForce(self, s)


    def getPassiveFiberForce(self, s):
        """
        getPassiveFiberForce(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getPassiveFiberForce(self, s)


    def getActiveFiberForceAlongTendon(self, s):
        """
        getActiveFiberForceAlongTendon(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getActiveFiberForceAlongTendon(self, s)


    def getPassiveFiberForceAlongTendon(self, s):
        """
        getPassiveFiberForceAlongTendon(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getPassiveFiberForceAlongTendon(self, s)


    def getTendonForce(self, s):
        """
        getTendonForce(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getTendonForce(self, s)


    def getFiberStiffness(self, s):
        """
        getFiberStiffness(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberStiffness(self, s)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberStiffnessAlongTendon(self, s)


    def getTendonStiffness(self, s):
        """
        getTendonStiffness(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getTendonStiffness(self, s)


    def getMuscleStiffness(self, s):
        """
        getMuscleStiffness(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getMuscleStiffness(self, s)


    def getFiberActivePower(self, s):
        """
        getFiberActivePower(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberActivePower(self, s)


    def getFiberPassivePower(self, s):
        """
        getFiberPassivePower(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getFiberPassivePower(self, s)


    def getTendonPower(self, s):
        """
        getTendonPower(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getTendonPower(self, s)


    def getMusclePower(self, s):
        """
        getMusclePower(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getMusclePower(self, s)


    def getStress(self, s):
        """
        getStress(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getStress(self, s)


    def setExcitation(self, s, excitation):
        """
        setExcitation(Muscle self, State s, double excitation)

        Parameters
        ----------
        s: SimTK::State &
        excitation: double

        """
        return _simulation.Muscle_setExcitation(self, s, excitation)


    def getExcitation(self, s):
        """
        getExcitation(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_getExcitation(self, s)


    def setActivation(self, s, activation):
        """
        setActivation(Muscle self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _simulation.Muscle_setActivation(self, s, activation)


    def computeActuation(self, s):
        """
        computeActuation(Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Muscle_computeActuation(self, s)


    def computeEquilibrium(self, s):
        """
        computeEquilibrium(Muscle self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Muscle_computeEquilibrium(self, s)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Muscle self, State s, double aActivation) -> double

        Parameters
        ----------
        s: SimTK::State &
        aActivation: double

        """
        return _simulation.Muscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)

    __swig_destroy__ = _simulation.delete_Muscle
    __del__ = lambda self: None
Muscle_swigregister = _simulation.Muscle_swigregister
Muscle_swigregister(Muscle)

def Muscle_safeDownCast(obj):
    """
    Muscle_safeDownCast(OpenSimObject obj) -> Muscle

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Muscle_safeDownCast(obj)

def Muscle_getClassName():
    """Muscle_getClassName() -> std::string const &"""
    return _simulation.Muscle_getClassName()

class ActivationFiberLengthMuscle(Muscle):
    """Proxy of C++ OpenSim::ActivationFiberLengthMuscle class."""

    __swig_setmethods__ = {}
    for _s in [Muscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActivationFiberLengthMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [Muscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActivationFiberLengthMuscle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ActivationFiberLengthMuscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ActivationFiberLengthMuscle_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ActivationFiberLengthMuscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ActivationFiberLengthMuscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ActivationFiberLengthMuscle_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ActivationFiberLengthMuscle self) -> ActivationFiberLengthMuscle

        Parameters
        ----------
        self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _simulation.ActivationFiberLengthMuscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActivationFiberLengthMuscle self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _simulation.ActivationFiberLengthMuscle_getConcreteClassName(self)


    def copyProperty_default_activation(self, source):
        """
        copyProperty_default_activation(ActivationFiberLengthMuscle self, ActivationFiberLengthMuscle source)

        Parameters
        ----------
        source: OpenSim::ActivationFiberLengthMuscle::Self const &

        """
        return _simulation.ActivationFiberLengthMuscle_copyProperty_default_activation(self, source)


    def append_default_activation(self, value):
        """
        append_default_activation(ActivationFiberLengthMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActivationFiberLengthMuscle_append_default_activation(self, value)


    def constructProperty_default_activation(self, initValue):
        """
        constructProperty_default_activation(ActivationFiberLengthMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActivationFiberLengthMuscle_constructProperty_default_activation(self, initValue)


    def get_default_activation(self, *args):
        """
        get_default_activation(ActivationFiberLengthMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_activation(ActivationFiberLengthMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _simulation.ActivationFiberLengthMuscle_get_default_activation(self, *args)


    def upd_default_activation(self, *args):
        """
        upd_default_activation(ActivationFiberLengthMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_activation(ActivationFiberLengthMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::ActivationFiberLengthMuscle *

        """
        return _simulation.ActivationFiberLengthMuscle_upd_default_activation(self, *args)


    def set_default_activation(self, *args):
        """
        set_default_activation(ActivationFiberLengthMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_activation(ActivationFiberLengthMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActivationFiberLengthMuscle_set_default_activation(self, *args)


    def copyProperty_default_fiber_length(self, source):
        """
        copyProperty_default_fiber_length(ActivationFiberLengthMuscle self, ActivationFiberLengthMuscle source)

        Parameters
        ----------
        source: OpenSim::ActivationFiberLengthMuscle::Self const &

        """
        return _simulation.ActivationFiberLengthMuscle_copyProperty_default_fiber_length(self, source)


    def append_default_fiber_length(self, value):
        """
        append_default_fiber_length(ActivationFiberLengthMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActivationFiberLengthMuscle_append_default_fiber_length(self, value)


    def constructProperty_default_fiber_length(self, initValue):
        """
        constructProperty_default_fiber_length(ActivationFiberLengthMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActivationFiberLengthMuscle_constructProperty_default_fiber_length(self, initValue)


    def get_default_fiber_length(self, *args):
        """
        get_default_fiber_length(ActivationFiberLengthMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_fiber_length(ActivationFiberLengthMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _simulation.ActivationFiberLengthMuscle_get_default_fiber_length(self, *args)


    def upd_default_fiber_length(self, *args):
        """
        upd_default_fiber_length(ActivationFiberLengthMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_fiber_length(ActivationFiberLengthMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::ActivationFiberLengthMuscle *

        """
        return _simulation.ActivationFiberLengthMuscle_upd_default_fiber_length(self, *args)


    def set_default_fiber_length(self, *args):
        """
        set_default_fiber_length(ActivationFiberLengthMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_fiber_length(ActivationFiberLengthMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActivationFiberLengthMuscle_set_default_fiber_length(self, *args)


    def getDefaultActivation(self):
        """
        getDefaultActivation(ActivationFiberLengthMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _simulation.ActivationFiberLengthMuscle_getDefaultActivation(self)


    def setDefaultActivation(self, activation):
        """
        setDefaultActivation(ActivationFiberLengthMuscle self, double activation)

        Parameters
        ----------
        activation: double

        """
        return _simulation.ActivationFiberLengthMuscle_setDefaultActivation(self, activation)


    def getDefaultFiberLength(self):
        """
        getDefaultFiberLength(ActivationFiberLengthMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::ActivationFiberLengthMuscle const *

        """
        return _simulation.ActivationFiberLengthMuscle_getDefaultFiberLength(self)


    def setDefaultFiberLength(self, length):
        """
        setDefaultFiberLength(ActivationFiberLengthMuscle self, double length)

        Parameters
        ----------
        length: double

        """
        return _simulation.ActivationFiberLengthMuscle_setDefaultFiberLength(self, length)


    def setActivation(self, s, activation):
        """
        setActivation(ActivationFiberLengthMuscle self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _simulation.ActivationFiberLengthMuscle_setActivation(self, s, activation)


    def setFiberLength(self, s, fiberLength):
        """
        setFiberLength(ActivationFiberLengthMuscle self, State s, double fiberLength)

        Parameters
        ----------
        s: SimTK::State &
        fiberLength: double

        """
        return _simulation.ActivationFiberLengthMuscle_setFiberLength(self, s, fiberLength)


    def getActivationRate(self, s):
        """
        getActivationRate(ActivationFiberLengthMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ActivationFiberLengthMuscle_getActivationRate(self, s)


    def extendPostScale(self, s, scaleSet):
        """
        extendPostScale(ActivationFiberLengthMuscle self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.ActivationFiberLengthMuscle_extendPostScale(self, s, scaleSet)

    __swig_destroy__ = _simulation.delete_ActivationFiberLengthMuscle
    __del__ = lambda self: None
ActivationFiberLengthMuscle_swigregister = _simulation.ActivationFiberLengthMuscle_swigregister
ActivationFiberLengthMuscle_swigregister(ActivationFiberLengthMuscle)

def ActivationFiberLengthMuscle_safeDownCast(obj):
    """
    ActivationFiberLengthMuscle_safeDownCast(OpenSimObject obj) -> ActivationFiberLengthMuscle

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ActivationFiberLengthMuscle_safeDownCast(obj)

def ActivationFiberLengthMuscle_getClassName():
    """ActivationFiberLengthMuscle_getClassName() -> std::string const &"""
    return _simulation.ActivationFiberLengthMuscle_getClassName()

class PointToPointSpring(Force):
    """Proxy of C++ OpenSim::PointToPointSpring class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointToPointSpring, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointToPointSpring, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PointToPointSpring

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PointToPointSpring_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PointToPointSpring self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PointToPointSpring_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PointToPointSpring_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PointToPointSpring self) -> PointToPointSpring

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PointToPointSpring self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_getConcreteClassName(self)


    def copyProperty_point1(self, source):
        """
        copyProperty_point1(PointToPointSpring self, PointToPointSpring source)

        Parameters
        ----------
        source: OpenSim::PointToPointSpring::Self const &

        """
        return _simulation.PointToPointSpring_copyProperty_point1(self, source)


    def append_point1(self, value):
        """
        append_point1(PointToPointSpring self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointToPointSpring_append_point1(self, value)


    def constructProperty_point1(self, initValue):
        """
        constructProperty_point1(PointToPointSpring self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PointToPointSpring_constructProperty_point1(self, initValue)


    def get_point1(self, *args):
        """
        get_point1(PointToPointSpring self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point1(PointToPointSpring self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_get_point1(self, *args)


    def upd_point1(self, *args):
        """
        upd_point1(PointToPointSpring self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point1(PointToPointSpring self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointSpring *

        """
        return _simulation.PointToPointSpring_upd_point1(self, *args)


    def set_point1(self, *args):
        """
        set_point1(PointToPointSpring self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point1(PointToPointSpring self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointToPointSpring_set_point1(self, *args)


    def copyProperty_point2(self, source):
        """
        copyProperty_point2(PointToPointSpring self, PointToPointSpring source)

        Parameters
        ----------
        source: OpenSim::PointToPointSpring::Self const &

        """
        return _simulation.PointToPointSpring_copyProperty_point2(self, source)


    def append_point2(self, value):
        """
        append_point2(PointToPointSpring self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointToPointSpring_append_point2(self, value)


    def constructProperty_point2(self, initValue):
        """
        constructProperty_point2(PointToPointSpring self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.PointToPointSpring_constructProperty_point2(self, initValue)


    def get_point2(self, *args):
        """
        get_point2(PointToPointSpring self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point2(PointToPointSpring self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_get_point2(self, *args)


    def upd_point2(self, *args):
        """
        upd_point2(PointToPointSpring self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point2(PointToPointSpring self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointSpring *

        """
        return _simulation.PointToPointSpring_upd_point2(self, *args)


    def set_point2(self, *args):
        """
        set_point2(PointToPointSpring self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point2(PointToPointSpring self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.PointToPointSpring_set_point2(self, *args)


    def copyProperty_stiffness(self, source):
        """
        copyProperty_stiffness(PointToPointSpring self, PointToPointSpring source)

        Parameters
        ----------
        source: OpenSim::PointToPointSpring::Self const &

        """
        return _simulation.PointToPointSpring_copyProperty_stiffness(self, source)


    def append_stiffness(self, value):
        """
        append_stiffness(PointToPointSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PointToPointSpring_append_stiffness(self, value)


    def constructProperty_stiffness(self, initValue):
        """
        constructProperty_stiffness(PointToPointSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.PointToPointSpring_constructProperty_stiffness(self, initValue)


    def get_stiffness(self, *args):
        """
        get_stiffness(PointToPointSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness(PointToPointSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_get_stiffness(self, *args)


    def upd_stiffness(self, *args):
        """
        upd_stiffness(PointToPointSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness(PointToPointSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::PointToPointSpring *

        """
        return _simulation.PointToPointSpring_upd_stiffness(self, *args)


    def set_stiffness(self, *args):
        """
        set_stiffness(PointToPointSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness(PointToPointSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PointToPointSpring_set_stiffness(self, *args)


    def copyProperty_rest_length(self, source):
        """
        copyProperty_rest_length(PointToPointSpring self, PointToPointSpring source)

        Parameters
        ----------
        source: OpenSim::PointToPointSpring::Self const &

        """
        return _simulation.PointToPointSpring_copyProperty_rest_length(self, source)


    def append_rest_length(self, value):
        """
        append_rest_length(PointToPointSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PointToPointSpring_append_rest_length(self, value)


    def constructProperty_rest_length(self, initValue):
        """
        constructProperty_rest_length(PointToPointSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.PointToPointSpring_constructProperty_rest_length(self, initValue)


    def get_rest_length(self, *args):
        """
        get_rest_length(PointToPointSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_rest_length(PointToPointSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_get_rest_length(self, *args)


    def upd_rest_length(self, *args):
        """
        upd_rest_length(PointToPointSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_rest_length(PointToPointSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::PointToPointSpring *

        """
        return _simulation.PointToPointSpring_upd_rest_length(self, *args)


    def set_rest_length(self, *args):
        """
        set_rest_length(PointToPointSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_rest_length(PointToPointSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PointToPointSpring_set_rest_length(self, *args)

    __swig_setmethods__["PropertyIndex_socket_body1"] = _simulation.PointToPointSpring_PropertyIndex_socket_body1_set
    __swig_getmethods__["PropertyIndex_socket_body1"] = _simulation.PointToPointSpring_PropertyIndex_socket_body1_get
    if _newclass:
        PropertyIndex_socket_body1 = _swig_property(_simulation.PointToPointSpring_PropertyIndex_socket_body1_get, _simulation.PointToPointSpring_PropertyIndex_socket_body1_set)

    def connectSocket_body1(self, object):
        """
        connectSocket_body1(PointToPointSpring self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.PointToPointSpring_connectSocket_body1(self, object)

    __swig_setmethods__["PropertyIndex_socket_body2"] = _simulation.PointToPointSpring_PropertyIndex_socket_body2_set
    __swig_getmethods__["PropertyIndex_socket_body2"] = _simulation.PointToPointSpring_PropertyIndex_socket_body2_get
    if _newclass:
        PropertyIndex_socket_body2 = _swig_property(_simulation.PointToPointSpring_PropertyIndex_socket_body2_get, _simulation.PointToPointSpring_PropertyIndex_socket_body2_set)

    def connectSocket_body2(self, object):
        """
        connectSocket_body2(PointToPointSpring self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _simulation.PointToPointSpring_connectSocket_body2(self, object)


    def __init__(self, *args):
        """
        __init__(OpenSim::PointToPointSpring self) -> PointToPointSpring
        __init__(OpenSim::PointToPointSpring self, PhysicalFrame body1, Vec3 point1, PhysicalFrame body2, Vec3 point2, double stiffness, double restlength) -> PointToPointSpring

        Parameters
        ----------
        body1: OpenSim::PhysicalFrame const &
        point1: SimTK::Vec3
        body2: OpenSim::PhysicalFrame const &
        point2: SimTK::Vec3
        stiffness: double
        restlength: double

        """
        this = _simulation.new_PointToPointSpring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBody1(self, body):
        """
        setBody1(PointToPointSpring self, PhysicalFrame body)

        Parameters
        ----------
        body: OpenSim::PhysicalFrame const &

        """
        return _simulation.PointToPointSpring_setBody1(self, body)


    def setBody2(self, body):
        """
        setBody2(PointToPointSpring self, PhysicalFrame body)

        Parameters
        ----------
        body: OpenSim::PhysicalFrame const &

        """
        return _simulation.PointToPointSpring_setBody2(self, body)


    def getBody1(self):
        """
        getBody1(PointToPointSpring self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_getBody1(self)


    def getBody2(self):
        """
        getBody2(PointToPointSpring self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_getBody2(self)


    def setPoint1(self, aPosition):
        """
        setPoint1(PointToPointSpring self, Vec3 aPosition)

        Parameters
        ----------
        aPosition: SimTK::Vec3

        """
        return _simulation.PointToPointSpring_setPoint1(self, aPosition)


    def getPoint1(self):
        """
        getPoint1(PointToPointSpring self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_getPoint1(self)


    def setPoint2(self, aPosition):
        """
        setPoint2(PointToPointSpring self, Vec3 aPosition)

        Parameters
        ----------
        aPosition: SimTK::Vec3

        """
        return _simulation.PointToPointSpring_setPoint2(self, aPosition)


    def getPoint2(self):
        """
        getPoint2(PointToPointSpring self) -> Vec3

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_getPoint2(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(PointToPointSpring self, double stiffness)

        Parameters
        ----------
        stiffness: double

        """
        return _simulation.PointToPointSpring_setStiffness(self, stiffness)


    def getStiffness(self):
        """
        getStiffness(PointToPointSpring self) -> double

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_getStiffness(self)


    def setRestlength(self, restLength):
        """
        setRestlength(PointToPointSpring self, double restLength)

        Parameters
        ----------
        restLength: double

        """
        return _simulation.PointToPointSpring_setRestlength(self, restLength)


    def getRestlength(self):
        """
        getRestlength(PointToPointSpring self) -> double

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_getRestlength(self)


    def getRecordLabels(self):
        """
        getRecordLabels(PointToPointSpring self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::PointToPointSpring const *

        """
        return _simulation.PointToPointSpring_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(PointToPointSpring self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.PointToPointSpring_getRecordValues(self, state)

    __swig_destroy__ = _simulation.delete_PointToPointSpring
    __del__ = lambda self: None
PointToPointSpring_swigregister = _simulation.PointToPointSpring_swigregister
PointToPointSpring_swigregister(PointToPointSpring)

def PointToPointSpring_safeDownCast(obj):
    """
    PointToPointSpring_safeDownCast(OpenSimObject obj) -> PointToPointSpring

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PointToPointSpring_safeDownCast(obj)

def PointToPointSpring_getClassName():
    """PointToPointSpring_getClassName() -> std::string const &"""
    return _simulation.PointToPointSpring_getClassName()

class ExpressionBasedPointToPointForce(Force):
    """Proxy of C++ OpenSim::ExpressionBasedPointToPointForce class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionBasedPointToPointForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionBasedPointToPointForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExpressionBasedPointToPointForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ExpressionBasedPointToPointForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ExpressionBasedPointToPointForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ExpressionBasedPointToPointForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ExpressionBasedPointToPointForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ExpressionBasedPointToPointForce self) -> ExpressionBasedPointToPointForce

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_getConcreteClassName(self)


    def copyProperty_body1(self, source):
        """
        copyProperty_body1(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _simulation.ExpressionBasedPointToPointForce_copyProperty_body1(self, source)


    def append_body1(self, value):
        """
        append_body1(ExpressionBasedPointToPointForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_append_body1(self, value)


    def constructProperty_body1(self, *args):
        """
        constructProperty_body1(ExpressionBasedPointToPointForce self)
        constructProperty_body1(ExpressionBasedPointToPointForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_constructProperty_body1(self, *args)


    def get_body1(self, *args):
        """
        get_body1(ExpressionBasedPointToPointForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_body1(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_get_body1(self, *args)


    def upd_body1(self, *args):
        """
        upd_body1(ExpressionBasedPointToPointForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_body1(ExpressionBasedPointToPointForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _simulation.ExpressionBasedPointToPointForce_upd_body1(self, *args)


    def set_body1(self, *args):
        """
        set_body1(ExpressionBasedPointToPointForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_body1(ExpressionBasedPointToPointForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_set_body1(self, *args)


    def copyProperty_body2(self, source):
        """
        copyProperty_body2(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _simulation.ExpressionBasedPointToPointForce_copyProperty_body2(self, source)


    def append_body2(self, value):
        """
        append_body2(ExpressionBasedPointToPointForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_append_body2(self, value)


    def constructProperty_body2(self, *args):
        """
        constructProperty_body2(ExpressionBasedPointToPointForce self)
        constructProperty_body2(ExpressionBasedPointToPointForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_constructProperty_body2(self, *args)


    def get_body2(self, *args):
        """
        get_body2(ExpressionBasedPointToPointForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_body2(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_get_body2(self, *args)


    def upd_body2(self, *args):
        """
        upd_body2(ExpressionBasedPointToPointForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_body2(ExpressionBasedPointToPointForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _simulation.ExpressionBasedPointToPointForce_upd_body2(self, *args)


    def set_body2(self, *args):
        """
        set_body2(ExpressionBasedPointToPointForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_body2(ExpressionBasedPointToPointForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_set_body2(self, *args)


    def copyProperty_point1(self, source):
        """
        copyProperty_point1(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _simulation.ExpressionBasedPointToPointForce_copyProperty_point1(self, source)


    def append_point1(self, value):
        """
        append_point1(ExpressionBasedPointToPointForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedPointToPointForce_append_point1(self, value)


    def constructProperty_point1(self, initValue):
        """
        constructProperty_point1(ExpressionBasedPointToPointForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedPointToPointForce_constructProperty_point1(self, initValue)


    def get_point1(self, *args):
        """
        get_point1(ExpressionBasedPointToPointForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point1(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_get_point1(self, *args)


    def upd_point1(self, *args):
        """
        upd_point1(ExpressionBasedPointToPointForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point1(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _simulation.ExpressionBasedPointToPointForce_upd_point1(self, *args)


    def set_point1(self, *args):
        """
        set_point1(ExpressionBasedPointToPointForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point1(ExpressionBasedPointToPointForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedPointToPointForce_set_point1(self, *args)


    def copyProperty_point2(self, source):
        """
        copyProperty_point2(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _simulation.ExpressionBasedPointToPointForce_copyProperty_point2(self, source)


    def append_point2(self, value):
        """
        append_point2(ExpressionBasedPointToPointForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedPointToPointForce_append_point2(self, value)


    def constructProperty_point2(self, initValue):
        """
        constructProperty_point2(ExpressionBasedPointToPointForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedPointToPointForce_constructProperty_point2(self, initValue)


    def get_point2(self, *args):
        """
        get_point2(ExpressionBasedPointToPointForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point2(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_get_point2(self, *args)


    def upd_point2(self, *args):
        """
        upd_point2(ExpressionBasedPointToPointForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point2(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _simulation.ExpressionBasedPointToPointForce_upd_point2(self, *args)


    def set_point2(self, *args):
        """
        set_point2(ExpressionBasedPointToPointForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point2(ExpressionBasedPointToPointForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedPointToPointForce_set_point2(self, *args)


    def copyProperty_expression(self, source):
        """
        copyProperty_expression(ExpressionBasedPointToPointForce self, ExpressionBasedPointToPointForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedPointToPointForce::Self const &

        """
        return _simulation.ExpressionBasedPointToPointForce_copyProperty_expression(self, source)


    def append_expression(self, value):
        """
        append_expression(ExpressionBasedPointToPointForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_append_expression(self, value)


    def constructProperty_expression(self, initValue):
        """
        constructProperty_expression(ExpressionBasedPointToPointForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_constructProperty_expression(self, initValue)


    def get_expression(self, *args):
        """
        get_expression(ExpressionBasedPointToPointForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_expression(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_get_expression(self, *args)


    def upd_expression(self, *args):
        """
        upd_expression(ExpressionBasedPointToPointForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_expression(ExpressionBasedPointToPointForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce *

        """
        return _simulation.ExpressionBasedPointToPointForce_upd_expression(self, *args)


    def set_expression(self, *args):
        """
        set_expression(ExpressionBasedPointToPointForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_expression(ExpressionBasedPointToPointForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_set_expression(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExpressionBasedPointToPointForce self) -> ExpressionBasedPointToPointForce
        __init__(OpenSim::ExpressionBasedPointToPointForce self, std::string const & body1Name, Vec3 point1, std::string const & body2Name, Vec3 point2, std::string const & expression) -> ExpressionBasedPointToPointForce

        Parameters
        ----------
        body1Name: std::string const &
        point1: SimTK::Vec3 const &
        body2Name: std::string const &
        point2: SimTK::Vec3 const &
        expression: std::string const &

        """
        this = _simulation.new_ExpressionBasedPointToPointForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setBody1Name(self, body1Name):
        """
        setBody1Name(ExpressionBasedPointToPointForce self, std::string const & body1Name)

        Parameters
        ----------
        body1Name: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_setBody1Name(self, body1Name)


    def setBody2Name(self, body2Name):
        """
        setBody2Name(ExpressionBasedPointToPointForce self, std::string const & body2Name)

        Parameters
        ----------
        body2Name: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_setBody2Name(self, body2Name)


    def getBody1Name(self):
        """
        getBody1Name(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_getBody1Name(self)


    def getBody2Name(self):
        """
        getBody2Name(ExpressionBasedPointToPointForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_getBody2Name(self)


    def setPoint1(self, aPosition):
        """
        setPoint1(ExpressionBasedPointToPointForce self, Vec3 aPosition)

        Parameters
        ----------
        aPosition: SimTK::Vec3

        """
        return _simulation.ExpressionBasedPointToPointForce_setPoint1(self, aPosition)


    def getPoint1(self):
        """
        getPoint1(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_getPoint1(self)


    def setPoint2(self, aPosition):
        """
        setPoint2(ExpressionBasedPointToPointForce self, Vec3 aPosition)

        Parameters
        ----------
        aPosition: SimTK::Vec3

        """
        return _simulation.ExpressionBasedPointToPointForce_setPoint2(self, aPosition)


    def getPoint2(self):
        """
        getPoint2(ExpressionBasedPointToPointForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_getPoint2(self)


    def setExpression(self, expression):
        """
        setExpression(ExpressionBasedPointToPointForce self, std::string const & expression)

        Parameters
        ----------
        expression: std::string const &

        """
        return _simulation.ExpressionBasedPointToPointForce_setExpression(self, expression)


    def getForceMagnitude(self, state):
        """
        getForceMagnitude(ExpressionBasedPointToPointForce self, State state) -> double const &

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ExpressionBasedPointToPointForce_getForceMagnitude(self, state)


    def computeForce(self, state, bodyForces, generalizedForces):
        """
        computeForce(ExpressionBasedPointToPointForce self, State state, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters
        ----------
        state: SimTK::State const &
        bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
        generalizedForces: SimTK::Vector &

        """
        return _simulation.ExpressionBasedPointToPointForce_computeForce(self, state, bodyForces, generalizedForces)


    def getRecordLabels(self):
        """
        getRecordLabels(ExpressionBasedPointToPointForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ExpressionBasedPointToPointForce const *

        """
        return _simulation.ExpressionBasedPointToPointForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ExpressionBasedPointToPointForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ExpressionBasedPointToPointForce_getRecordValues(self, state)

    __swig_destroy__ = _simulation.delete_ExpressionBasedPointToPointForce
    __del__ = lambda self: None
ExpressionBasedPointToPointForce_swigregister = _simulation.ExpressionBasedPointToPointForce_swigregister
ExpressionBasedPointToPointForce_swigregister(ExpressionBasedPointToPointForce)

def ExpressionBasedPointToPointForce_safeDownCast(obj):
    """
    ExpressionBasedPointToPointForce_safeDownCast(OpenSimObject obj) -> ExpressionBasedPointToPointForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ExpressionBasedPointToPointForce_safeDownCast(obj)

def ExpressionBasedPointToPointForce_getClassName():
    """ExpressionBasedPointToPointForce_getClassName() -> std::string const &"""
    return _simulation.ExpressionBasedPointToPointForce_getClassName()

class ExpressionBasedCoordinateForce(Force):
    """Proxy of C++ OpenSim::ExpressionBasedCoordinateForce class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionBasedCoordinateForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionBasedCoordinateForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExpressionBasedCoordinateForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ExpressionBasedCoordinateForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ExpressionBasedCoordinateForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ExpressionBasedCoordinateForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ExpressionBasedCoordinateForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ExpressionBasedCoordinateForce self) -> ExpressionBasedCoordinateForce

        Parameters
        ----------
        self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _simulation.ExpressionBasedCoordinateForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExpressionBasedCoordinateForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _simulation.ExpressionBasedCoordinateForce_getConcreteClassName(self)


    def copyProperty_coordinate(self, source):
        """
        copyProperty_coordinate(ExpressionBasedCoordinateForce self, ExpressionBasedCoordinateForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedCoordinateForce::Self const &

        """
        return _simulation.ExpressionBasedCoordinateForce_copyProperty_coordinate(self, source)


    def append_coordinate(self, value):
        """
        append_coordinate(ExpressionBasedCoordinateForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedCoordinateForce_append_coordinate(self, value)


    def constructProperty_coordinate(self, initValue):
        """
        constructProperty_coordinate(ExpressionBasedCoordinateForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedCoordinateForce_constructProperty_coordinate(self, initValue)


    def get_coordinate(self, *args):
        """
        get_coordinate(ExpressionBasedCoordinateForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate(ExpressionBasedCoordinateForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _simulation.ExpressionBasedCoordinateForce_get_coordinate(self, *args)


    def upd_coordinate(self, *args):
        """
        upd_coordinate(ExpressionBasedCoordinateForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate(ExpressionBasedCoordinateForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedCoordinateForce *

        """
        return _simulation.ExpressionBasedCoordinateForce_upd_coordinate(self, *args)


    def set_coordinate(self, *args):
        """
        set_coordinate(ExpressionBasedCoordinateForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate(ExpressionBasedCoordinateForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedCoordinateForce_set_coordinate(self, *args)


    def copyProperty_expression(self, source):
        """
        copyProperty_expression(ExpressionBasedCoordinateForce self, ExpressionBasedCoordinateForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedCoordinateForce::Self const &

        """
        return _simulation.ExpressionBasedCoordinateForce_copyProperty_expression(self, source)


    def append_expression(self, value):
        """
        append_expression(ExpressionBasedCoordinateForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedCoordinateForce_append_expression(self, value)


    def constructProperty_expression(self, initValue):
        """
        constructProperty_expression(ExpressionBasedCoordinateForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedCoordinateForce_constructProperty_expression(self, initValue)


    def get_expression(self, *args):
        """
        get_expression(ExpressionBasedCoordinateForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_expression(ExpressionBasedCoordinateForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _simulation.ExpressionBasedCoordinateForce_get_expression(self, *args)


    def upd_expression(self, *args):
        """
        upd_expression(ExpressionBasedCoordinateForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_expression(ExpressionBasedCoordinateForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedCoordinateForce *

        """
        return _simulation.ExpressionBasedCoordinateForce_upd_expression(self, *args)


    def set_expression(self, *args):
        """
        set_expression(ExpressionBasedCoordinateForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_expression(ExpressionBasedCoordinateForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedCoordinateForce_set_expression(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExpressionBasedCoordinateForce self) -> ExpressionBasedCoordinateForce
        __init__(OpenSim::ExpressionBasedCoordinateForce self, std::string const & coordinate, std::string const & expression) -> ExpressionBasedCoordinateForce

        Parameters
        ----------
        coordinate: std::string const &
        expression: std::string const &

        """
        this = _simulation.new_ExpressionBasedCoordinateForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setCoordinateName(self, coord):
        """
        setCoordinateName(ExpressionBasedCoordinateForce self, std::string const & coord)

        Parameters
        ----------
        coord: std::string const &

        """
        return _simulation.ExpressionBasedCoordinateForce_setCoordinateName(self, coord)


    def getCoordinateName(self):
        """
        getCoordinateName(ExpressionBasedCoordinateForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _simulation.ExpressionBasedCoordinateForce_getCoordinateName(self)


    def setExpression(self, expression):
        """
        setExpression(ExpressionBasedCoordinateForce self, std::string const & expression)

        Parameters
        ----------
        expression: std::string const &

        """
        return _simulation.ExpressionBasedCoordinateForce_setExpression(self, expression)


    def getForceMagnitude(self, state):
        """
        getForceMagnitude(ExpressionBasedCoordinateForce self, State state) -> double const &

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ExpressionBasedCoordinateForce_getForceMagnitude(self, state)


    def computeForce(self, state, bodyForces, generalizedForces):
        """
        computeForce(ExpressionBasedCoordinateForce self, State state, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters
        ----------
        state: SimTK::State const &
        bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
        generalizedForces: SimTK::Vector &

        """
        return _simulation.ExpressionBasedCoordinateForce_computeForce(self, state, bodyForces, generalizedForces)


    def calcExpressionForce(self, s):
        """
        calcExpressionForce(ExpressionBasedCoordinateForce self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ExpressionBasedCoordinateForce_calcExpressionForce(self, s)


    def getRecordLabels(self):
        """
        getRecordLabels(ExpressionBasedCoordinateForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ExpressionBasedCoordinateForce const *

        """
        return _simulation.ExpressionBasedCoordinateForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ExpressionBasedCoordinateForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ExpressionBasedCoordinateForce_getRecordValues(self, state)

    __swig_destroy__ = _simulation.delete_ExpressionBasedCoordinateForce
    __del__ = lambda self: None
ExpressionBasedCoordinateForce_swigregister = _simulation.ExpressionBasedCoordinateForce_swigregister
ExpressionBasedCoordinateForce_swigregister(ExpressionBasedCoordinateForce)

def ExpressionBasedCoordinateForce_safeDownCast(obj):
    """
    ExpressionBasedCoordinateForce_safeDownCast(OpenSimObject obj) -> ExpressionBasedCoordinateForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ExpressionBasedCoordinateForce_safeDownCast(obj)

def ExpressionBasedCoordinateForce_getClassName():
    """ExpressionBasedCoordinateForce_getClassName() -> std::string const &"""
    return _simulation.ExpressionBasedCoordinateForce_getClassName()

class PathSpring(Force):
    """Proxy of C++ OpenSim::PathSpring class."""

    __swig_setmethods__ = {}
    for _s in [Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSpring, name, value)
    __swig_getmethods__ = {}
    for _s in [Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathSpring, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> PathSpring

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.PathSpring_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(PathSpring self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.PathSpring_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.PathSpring_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(PathSpring self) -> PathSpring

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(PathSpring self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_getConcreteClassName(self)


    def copyProperty_resting_length(self, source):
        """
        copyProperty_resting_length(PathSpring self, PathSpring source)

        Parameters
        ----------
        source: OpenSim::PathSpring::Self const &

        """
        return _simulation.PathSpring_copyProperty_resting_length(self, source)


    def append_resting_length(self, value):
        """
        append_resting_length(PathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PathSpring_append_resting_length(self, value)


    def constructProperty_resting_length(self, initValue):
        """
        constructProperty_resting_length(PathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.PathSpring_constructProperty_resting_length(self, initValue)


    def get_resting_length(self, *args):
        """
        get_resting_length(PathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_resting_length(PathSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_get_resting_length(self, *args)


    def upd_resting_length(self, *args):
        """
        upd_resting_length(PathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_resting_length(PathSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::PathSpring *

        """
        return _simulation.PathSpring_upd_resting_length(self, *args)


    def set_resting_length(self, *args):
        """
        set_resting_length(PathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_resting_length(PathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PathSpring_set_resting_length(self, *args)


    def copyProperty_stiffness(self, source):
        """
        copyProperty_stiffness(PathSpring self, PathSpring source)

        Parameters
        ----------
        source: OpenSim::PathSpring::Self const &

        """
        return _simulation.PathSpring_copyProperty_stiffness(self, source)


    def append_stiffness(self, value):
        """
        append_stiffness(PathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PathSpring_append_stiffness(self, value)


    def constructProperty_stiffness(self, initValue):
        """
        constructProperty_stiffness(PathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.PathSpring_constructProperty_stiffness(self, initValue)


    def get_stiffness(self, *args):
        """
        get_stiffness(PathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness(PathSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_get_stiffness(self, *args)


    def upd_stiffness(self, *args):
        """
        upd_stiffness(PathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness(PathSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::PathSpring *

        """
        return _simulation.PathSpring_upd_stiffness(self, *args)


    def set_stiffness(self, *args):
        """
        set_stiffness(PathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness(PathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PathSpring_set_stiffness(self, *args)


    def copyProperty_dissipation(self, source):
        """
        copyProperty_dissipation(PathSpring self, PathSpring source)

        Parameters
        ----------
        source: OpenSim::PathSpring::Self const &

        """
        return _simulation.PathSpring_copyProperty_dissipation(self, source)


    def append_dissipation(self, value):
        """
        append_dissipation(PathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PathSpring_append_dissipation(self, value)


    def constructProperty_dissipation(self, initValue):
        """
        constructProperty_dissipation(PathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.PathSpring_constructProperty_dissipation(self, initValue)


    def get_dissipation(self, *args):
        """
        get_dissipation(PathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_dissipation(PathSpring self) -> double const &

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_get_dissipation(self, *args)


    def upd_dissipation(self, *args):
        """
        upd_dissipation(PathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_dissipation(PathSpring self) -> double &

        Parameters
        ----------
        self: OpenSim::PathSpring *

        """
        return _simulation.PathSpring_upd_dissipation(self, *args)


    def set_dissipation(self, *args):
        """
        set_dissipation(PathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_dissipation(PathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.PathSpring_set_dissipation(self, *args)


    def copyProperty_GeometryPath(self, source):
        """
        copyProperty_GeometryPath(PathSpring self, PathSpring source)

        Parameters
        ----------
        source: OpenSim::PathSpring::Self const &

        """
        return _simulation.PathSpring_copyProperty_GeometryPath(self, source)


    def append_GeometryPath(self, value):
        """
        append_GeometryPath(PathSpring self, GeometryPath value) -> int

        Parameters
        ----------
        value: OpenSim::GeometryPath const &

        """
        return _simulation.PathSpring_append_GeometryPath(self, value)


    def constructProperty_GeometryPath(self, initValue):
        """
        constructProperty_GeometryPath(PathSpring self, GeometryPath initValue)

        Parameters
        ----------
        initValue: OpenSim::GeometryPath const &

        """
        return _simulation.PathSpring_constructProperty_GeometryPath(self, initValue)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(PathSpring self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        get_GeometryPath(PathSpring self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_get_GeometryPath(self, *args)


    def upd_GeometryPath(self, *args):
        """
        upd_GeometryPath(PathSpring self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        upd_GeometryPath(PathSpring self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::PathSpring *

        """
        return _simulation.PathSpring_upd_GeometryPath(self, *args)


    def set_GeometryPath(self, *args):
        """
        set_GeometryPath(PathSpring self, int i, GeometryPath value)

        Parameters
        ----------
        i: int
        value: OpenSim::GeometryPath const &

        set_GeometryPath(PathSpring self, GeometryPath value)

        Parameters
        ----------
        value: OpenSim::GeometryPath const &

        """
        return _simulation.PathSpring_set_GeometryPath(self, *args)

    __swig_setmethods__["_has_output_length"] = _simulation.PathSpring__has_output_length_set
    __swig_getmethods__["_has_output_length"] = _simulation.PathSpring__has_output_length_get
    if _newclass:
        _has_output_length = _swig_property(_simulation.PathSpring__has_output_length_get, _simulation.PathSpring__has_output_length_set)
    __swig_setmethods__["_has_output_stretch"] = _simulation.PathSpring__has_output_stretch_set
    __swig_getmethods__["_has_output_stretch"] = _simulation.PathSpring__has_output_stretch_get
    if _newclass:
        _has_output_stretch = _swig_property(_simulation.PathSpring__has_output_stretch_get, _simulation.PathSpring__has_output_stretch_set)
    __swig_setmethods__["_has_output_lengthening_speed"] = _simulation.PathSpring__has_output_lengthening_speed_set
    __swig_getmethods__["_has_output_lengthening_speed"] = _simulation.PathSpring__has_output_lengthening_speed_get
    if _newclass:
        _has_output_lengthening_speed = _swig_property(_simulation.PathSpring__has_output_lengthening_speed_get, _simulation.PathSpring__has_output_lengthening_speed_set)
    __swig_setmethods__["_has_output_tension"] = _simulation.PathSpring__has_output_tension_set
    __swig_getmethods__["_has_output_tension"] = _simulation.PathSpring__has_output_tension_get
    if _newclass:
        _has_output_tension = _swig_property(_simulation.PathSpring__has_output_tension_get, _simulation.PathSpring__has_output_tension_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::PathSpring self) -> PathSpring
        __init__(OpenSim::PathSpring self, std::string const & name, double restLength, double stiffness, double dissipation) -> PathSpring

        Parameters
        ----------
        name: std::string const &
        restLength: double
        stiffness: double
        dissipation: double

        """
        this = _simulation.new_PathSpring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getRestingLength(self):
        """
        getRestingLength(PathSpring self) -> double

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_getRestingLength(self)


    def setRestingLength(self, restingLength):
        """
        setRestingLength(PathSpring self, double restingLength)

        Parameters
        ----------
        restingLength: double

        """
        return _simulation.PathSpring_setRestingLength(self, restingLength)


    def getStiffness(self):
        """
        getStiffness(PathSpring self) -> double

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_getStiffness(self)


    def setStiffness(self, stiffness):
        """
        setStiffness(PathSpring self, double stiffness)

        Parameters
        ----------
        stiffness: double

        """
        return _simulation.PathSpring_setStiffness(self, stiffness)


    def getDissipation(self):
        """
        getDissipation(PathSpring self) -> double

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_getDissipation(self)


    def setDissipation(self, dissipation):
        """
        setDissipation(PathSpring self, double dissipation)

        Parameters
        ----------
        dissipation: double

        """
        return _simulation.PathSpring_setDissipation(self, dissipation)


    def getGeometryPath(self):
        """
        getGeometryPath(PathSpring self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::PathSpring const *

        """
        return _simulation.PathSpring_getGeometryPath(self)


    def updGeometryPath(self):
        """
        updGeometryPath(PathSpring self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::PathSpring *

        """
        return _simulation.PathSpring_updGeometryPath(self)


    def getLength(self, s):
        """
        getLength(PathSpring self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathSpring_getLength(self, s)


    def getStretch(self, s):
        """
        getStretch(PathSpring self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathSpring_getStretch(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(PathSpring self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathSpring_getLengtheningSpeed(self, s)


    def getTension(self, s):
        """
        getTension(PathSpring self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.PathSpring_getTension(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(PathSpring self, State s, Coordinate aCoord) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aCoord: OpenSim::Coordinate &

        """
        return _simulation.PathSpring_computeMomentArm(self, s, aCoord)


    def extendPostScale(self, s, scaleSet):
        """
        extendPostScale(PathSpring self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.PathSpring_extendPostScale(self, s, scaleSet)

    __swig_destroy__ = _simulation.delete_PathSpring
    __del__ = lambda self: None
PathSpring_swigregister = _simulation.PathSpring_swigregister
PathSpring_swigregister(PathSpring)

def PathSpring_safeDownCast(obj):
    """
    PathSpring_safeDownCast(OpenSimObject obj) -> PathSpring

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.PathSpring_safeDownCast(obj)

def PathSpring_getClassName():
    """PathSpring_getClassName() -> std::string const &"""
    return _simulation.PathSpring_getClassName()

class BushingForce(TwoFrameLinkerForce):
    """Proxy of C++ OpenSim::BushingForce class."""

    __swig_setmethods__ = {}
    for _s in [TwoFrameLinkerForce]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BushingForce, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoFrameLinkerForce]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BushingForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> BushingForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.BushingForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(BushingForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.BushingForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.BushingForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(BushingForce self) -> BushingForce

        Parameters
        ----------
        self: OpenSim::BushingForce const *

        """
        return _simulation.BushingForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::BushingForce const *

        """
        return _simulation.BushingForce_getConcreteClassName(self)


    def copyProperty_rotational_stiffness(self, source):
        """
        copyProperty_rotational_stiffness(BushingForce self, BushingForce source)

        Parameters
        ----------
        source: OpenSim::BushingForce::Self const &

        """
        return _simulation.BushingForce_copyProperty_rotational_stiffness(self, source)


    def append_rotational_stiffness(self, value):
        """
        append_rotational_stiffness(BushingForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_append_rotational_stiffness(self, value)


    def constructProperty_rotational_stiffness(self, initValue):
        """
        constructProperty_rotational_stiffness(BushingForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_constructProperty_rotational_stiffness(self, initValue)


    def get_rotational_stiffness(self, *args):
        """
        get_rotational_stiffness(BushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_rotational_stiffness(BushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BushingForce const *

        """
        return _simulation.BushingForce_get_rotational_stiffness(self, *args)


    def upd_rotational_stiffness(self, *args):
        """
        upd_rotational_stiffness(BushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_rotational_stiffness(BushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BushingForce *

        """
        return _simulation.BushingForce_upd_rotational_stiffness(self, *args)


    def set_rotational_stiffness(self, *args):
        """
        set_rotational_stiffness(BushingForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_rotational_stiffness(BushingForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_set_rotational_stiffness(self, *args)


    def copyProperty_translational_stiffness(self, source):
        """
        copyProperty_translational_stiffness(BushingForce self, BushingForce source)

        Parameters
        ----------
        source: OpenSim::BushingForce::Self const &

        """
        return _simulation.BushingForce_copyProperty_translational_stiffness(self, source)


    def append_translational_stiffness(self, value):
        """
        append_translational_stiffness(BushingForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_append_translational_stiffness(self, value)


    def constructProperty_translational_stiffness(self, initValue):
        """
        constructProperty_translational_stiffness(BushingForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_constructProperty_translational_stiffness(self, initValue)


    def get_translational_stiffness(self, *args):
        """
        get_translational_stiffness(BushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_translational_stiffness(BushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BushingForce const *

        """
        return _simulation.BushingForce_get_translational_stiffness(self, *args)


    def upd_translational_stiffness(self, *args):
        """
        upd_translational_stiffness(BushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_translational_stiffness(BushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BushingForce *

        """
        return _simulation.BushingForce_upd_translational_stiffness(self, *args)


    def set_translational_stiffness(self, *args):
        """
        set_translational_stiffness(BushingForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_translational_stiffness(BushingForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_set_translational_stiffness(self, *args)


    def copyProperty_rotational_damping(self, source):
        """
        copyProperty_rotational_damping(BushingForce self, BushingForce source)

        Parameters
        ----------
        source: OpenSim::BushingForce::Self const &

        """
        return _simulation.BushingForce_copyProperty_rotational_damping(self, source)


    def append_rotational_damping(self, value):
        """
        append_rotational_damping(BushingForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_append_rotational_damping(self, value)


    def constructProperty_rotational_damping(self, initValue):
        """
        constructProperty_rotational_damping(BushingForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_constructProperty_rotational_damping(self, initValue)


    def get_rotational_damping(self, *args):
        """
        get_rotational_damping(BushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_rotational_damping(BushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BushingForce const *

        """
        return _simulation.BushingForce_get_rotational_damping(self, *args)


    def upd_rotational_damping(self, *args):
        """
        upd_rotational_damping(BushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_rotational_damping(BushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BushingForce *

        """
        return _simulation.BushingForce_upd_rotational_damping(self, *args)


    def set_rotational_damping(self, *args):
        """
        set_rotational_damping(BushingForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_rotational_damping(BushingForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_set_rotational_damping(self, *args)


    def copyProperty_translational_damping(self, source):
        """
        copyProperty_translational_damping(BushingForce self, BushingForce source)

        Parameters
        ----------
        source: OpenSim::BushingForce::Self const &

        """
        return _simulation.BushingForce_copyProperty_translational_damping(self, source)


    def append_translational_damping(self, value):
        """
        append_translational_damping(BushingForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_append_translational_damping(self, value)


    def constructProperty_translational_damping(self, initValue):
        """
        constructProperty_translational_damping(BushingForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_constructProperty_translational_damping(self, initValue)


    def get_translational_damping(self, *args):
        """
        get_translational_damping(BushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_translational_damping(BushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BushingForce const *

        """
        return _simulation.BushingForce_get_translational_damping(self, *args)


    def upd_translational_damping(self, *args):
        """
        upd_translational_damping(BushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_translational_damping(BushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::BushingForce *

        """
        return _simulation.BushingForce_upd_translational_damping(self, *args)


    def set_translational_damping(self, *args):
        """
        set_translational_damping(BushingForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_translational_damping(BushingForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.BushingForce_set_translational_damping(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::BushingForce self) -> BushingForce
        __init__(OpenSim::BushingForce self, std::string const & name, PhysicalFrame frame1, PhysicalFrame frame2) -> BushingForce

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        frame2: OpenSim::PhysicalFrame const &

        __init__(OpenSim::BushingForce self, std::string const & name, std::string const & frame1Name, std::string const & frame2Name) -> BushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        frame2Name: std::string const &

        __init__(OpenSim::BushingForce self, std::string const & name, PhysicalFrame frame1, PhysicalFrame frame2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> BushingForce

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        frame2: OpenSim::PhysicalFrame const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        __init__(OpenSim::BushingForce self, std::string const & name, std::string const & frame1Name, std::string const & frame2Name, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> BushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        frame2Name: std::string const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        __init__(OpenSim::BushingForce self, std::string const & name, PhysicalFrame frame1, Transform transformInFrame1, PhysicalFrame frame2, Transform transformInFrame2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> BushingForce

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        transformInFrame1: SimTK::Transform const &
        frame2: OpenSim::PhysicalFrame const &
        transformInFrame2: SimTK::Transform const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        __init__(OpenSim::BushingForce self, std::string const & name, std::string const & frame1Name, Transform transformInFrame1, std::string const & frame2Name, Transform transformInFrame2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> BushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        transformInFrame1: SimTK::Transform const &
        frame2Name: std::string const &
        transformInFrame2: SimTK::Transform const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        __init__(OpenSim::BushingForce self, std::string const & name, std::string const & frame1Name, Vec3 locationInFrame1, Vec3 orientationInFrame1, std::string const & frame2Name, Vec3 locationInFrame2, Vec3 orientationInFrame2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> BushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        locationInFrame1: SimTK::Vec3 const &
        orientationInFrame1: SimTK::Vec3 const &
        frame2Name: std::string const &
        locationInFrame2: SimTK::Vec3 const &
        orientationInFrame2: SimTK::Vec3 const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        """
        this = _simulation.new_BushingForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def computePotentialEnergy(self, s):
        """
        computePotentialEnergy(BushingForce self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.BushingForce_computePotentialEnergy(self, s)


    def getRecordLabels(self):
        """
        getRecordLabels(BushingForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::BushingForce const *

        """
        return _simulation.BushingForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(BushingForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BushingForce_getRecordValues(self, state)

    __swig_destroy__ = _simulation.delete_BushingForce
    __del__ = lambda self: None
BushingForce_swigregister = _simulation.BushingForce_swigregister
BushingForce_swigregister(BushingForce)

def BushingForce_safeDownCast(obj):
    """
    BushingForce_safeDownCast(OpenSimObject obj) -> BushingForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.BushingForce_safeDownCast(obj)

def BushingForce_getClassName():
    """BushingForce_getClassName() -> std::string const &"""
    return _simulation.BushingForce_getClassName()

class FunctionBasedBushingForce(TwoFrameLinkerForce):
    """Proxy of C++ OpenSim::FunctionBasedBushingForce class."""

    __swig_setmethods__ = {}
    for _s in [TwoFrameLinkerForce]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionBasedBushingForce, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoFrameLinkerForce]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionBasedBushingForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FunctionBasedBushingForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.FunctionBasedBushingForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(FunctionBasedBushingForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.FunctionBasedBushingForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.FunctionBasedBushingForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(FunctionBasedBushingForce self) -> FunctionBasedBushingForce

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FunctionBasedBushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_getConcreteClassName(self)


    def copyProperty_m_x_theta_x_function(self, source):
        """
        copyProperty_m_x_theta_x_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_m_x_theta_x_function(self, source)


    def append_m_x_theta_x_function(self, value):
        """
        append_m_x_theta_x_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_append_m_x_theta_x_function(self, value)


    def constructProperty_m_x_theta_x_function(self, *args):
        """
        constructProperty_m_x_theta_x_function(FunctionBasedBushingForce self)
        constructProperty_m_x_theta_x_function(FunctionBasedBushingForce self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_m_x_theta_x_function(self, *args)


    def get_m_x_theta_x_function(self, *args):
        """
        get_m_x_theta_x_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        get_m_x_theta_x_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_m_x_theta_x_function(self, *args)


    def upd_m_x_theta_x_function(self, *args):
        """
        upd_m_x_theta_x_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_m_x_theta_x_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_m_x_theta_x_function(self, *args)


    def set_m_x_theta_x_function(self, *args):
        """
        set_m_x_theta_x_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_m_x_theta_x_function(FunctionBasedBushingForce self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_set_m_x_theta_x_function(self, *args)


    def copyProperty_m_y_theta_y_function(self, source):
        """
        copyProperty_m_y_theta_y_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_m_y_theta_y_function(self, source)


    def append_m_y_theta_y_function(self, value):
        """
        append_m_y_theta_y_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_append_m_y_theta_y_function(self, value)


    def constructProperty_m_y_theta_y_function(self, *args):
        """
        constructProperty_m_y_theta_y_function(FunctionBasedBushingForce self)
        constructProperty_m_y_theta_y_function(FunctionBasedBushingForce self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_m_y_theta_y_function(self, *args)


    def get_m_y_theta_y_function(self, *args):
        """
        get_m_y_theta_y_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        get_m_y_theta_y_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_m_y_theta_y_function(self, *args)


    def upd_m_y_theta_y_function(self, *args):
        """
        upd_m_y_theta_y_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_m_y_theta_y_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_m_y_theta_y_function(self, *args)


    def set_m_y_theta_y_function(self, *args):
        """
        set_m_y_theta_y_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_m_y_theta_y_function(FunctionBasedBushingForce self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_set_m_y_theta_y_function(self, *args)


    def copyProperty_m_z_theta_z_function(self, source):
        """
        copyProperty_m_z_theta_z_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_m_z_theta_z_function(self, source)


    def append_m_z_theta_z_function(self, value):
        """
        append_m_z_theta_z_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_append_m_z_theta_z_function(self, value)


    def constructProperty_m_z_theta_z_function(self, *args):
        """
        constructProperty_m_z_theta_z_function(FunctionBasedBushingForce self)
        constructProperty_m_z_theta_z_function(FunctionBasedBushingForce self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_m_z_theta_z_function(self, *args)


    def get_m_z_theta_z_function(self, *args):
        """
        get_m_z_theta_z_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        get_m_z_theta_z_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_m_z_theta_z_function(self, *args)


    def upd_m_z_theta_z_function(self, *args):
        """
        upd_m_z_theta_z_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_m_z_theta_z_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_m_z_theta_z_function(self, *args)


    def set_m_z_theta_z_function(self, *args):
        """
        set_m_z_theta_z_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_m_z_theta_z_function(FunctionBasedBushingForce self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_set_m_z_theta_z_function(self, *args)


    def copyProperty_f_x_delta_x_function(self, source):
        """
        copyProperty_f_x_delta_x_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_f_x_delta_x_function(self, source)


    def append_f_x_delta_x_function(self, value):
        """
        append_f_x_delta_x_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_append_f_x_delta_x_function(self, value)


    def constructProperty_f_x_delta_x_function(self, *args):
        """
        constructProperty_f_x_delta_x_function(FunctionBasedBushingForce self)
        constructProperty_f_x_delta_x_function(FunctionBasedBushingForce self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_f_x_delta_x_function(self, *args)


    def get_f_x_delta_x_function(self, *args):
        """
        get_f_x_delta_x_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        get_f_x_delta_x_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_f_x_delta_x_function(self, *args)


    def upd_f_x_delta_x_function(self, *args):
        """
        upd_f_x_delta_x_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_f_x_delta_x_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_f_x_delta_x_function(self, *args)


    def set_f_x_delta_x_function(self, *args):
        """
        set_f_x_delta_x_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_f_x_delta_x_function(FunctionBasedBushingForce self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_set_f_x_delta_x_function(self, *args)


    def copyProperty_f_y_delta_y_function(self, source):
        """
        copyProperty_f_y_delta_y_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_f_y_delta_y_function(self, source)


    def append_f_y_delta_y_function(self, value):
        """
        append_f_y_delta_y_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_append_f_y_delta_y_function(self, value)


    def constructProperty_f_y_delta_y_function(self, *args):
        """
        constructProperty_f_y_delta_y_function(FunctionBasedBushingForce self)
        constructProperty_f_y_delta_y_function(FunctionBasedBushingForce self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_f_y_delta_y_function(self, *args)


    def get_f_y_delta_y_function(self, *args):
        """
        get_f_y_delta_y_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        get_f_y_delta_y_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_f_y_delta_y_function(self, *args)


    def upd_f_y_delta_y_function(self, *args):
        """
        upd_f_y_delta_y_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_f_y_delta_y_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_f_y_delta_y_function(self, *args)


    def set_f_y_delta_y_function(self, *args):
        """
        set_f_y_delta_y_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_f_y_delta_y_function(FunctionBasedBushingForce self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_set_f_y_delta_y_function(self, *args)


    def copyProperty_f_z_delta_z_function(self, source):
        """
        copyProperty_f_z_delta_z_function(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_f_z_delta_z_function(self, source)


    def append_f_z_delta_z_function(self, value):
        """
        append_f_z_delta_z_function(FunctionBasedBushingForce self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_append_f_z_delta_z_function(self, value)


    def constructProperty_f_z_delta_z_function(self, *args):
        """
        constructProperty_f_z_delta_z_function(FunctionBasedBushingForce self)
        constructProperty_f_z_delta_z_function(FunctionBasedBushingForce self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_f_z_delta_z_function(self, *args)


    def get_f_z_delta_z_function(self, *args):
        """
        get_f_z_delta_z_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        get_f_z_delta_z_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_f_z_delta_z_function(self, *args)


    def upd_f_z_delta_z_function(self, *args):
        """
        upd_f_z_delta_z_function(FunctionBasedBushingForce self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_f_z_delta_z_function(FunctionBasedBushingForce self) -> Function

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_f_z_delta_z_function(self, *args)


    def set_f_z_delta_z_function(self, *args):
        """
        set_f_z_delta_z_function(FunctionBasedBushingForce self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_f_z_delta_z_function(FunctionBasedBushingForce self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _simulation.FunctionBasedBushingForce_set_f_z_delta_z_function(self, *args)


    def copyProperty_visual_aspect_ratio(self, source):
        """
        copyProperty_visual_aspect_ratio(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_visual_aspect_ratio(self, source)


    def append_visual_aspect_ratio(self, value):
        """
        append_visual_aspect_ratio(FunctionBasedBushingForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FunctionBasedBushingForce_append_visual_aspect_ratio(self, value)


    def constructProperty_visual_aspect_ratio(self, *args):
        """
        constructProperty_visual_aspect_ratio(FunctionBasedBushingForce self)
        constructProperty_visual_aspect_ratio(FunctionBasedBushingForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_visual_aspect_ratio(self, *args)


    def get_visual_aspect_ratio(self, *args):
        """
        get_visual_aspect_ratio(FunctionBasedBushingForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_visual_aspect_ratio(FunctionBasedBushingForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_visual_aspect_ratio(self, *args)


    def upd_visual_aspect_ratio(self, *args):
        """
        upd_visual_aspect_ratio(FunctionBasedBushingForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_visual_aspect_ratio(FunctionBasedBushingForce self) -> double &

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_visual_aspect_ratio(self, *args)


    def set_visual_aspect_ratio(self, *args):
        """
        set_visual_aspect_ratio(FunctionBasedBushingForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_visual_aspect_ratio(FunctionBasedBushingForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FunctionBasedBushingForce_set_visual_aspect_ratio(self, *args)


    def copyProperty_moment_visual_scale(self, source):
        """
        copyProperty_moment_visual_scale(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_moment_visual_scale(self, source)


    def append_moment_visual_scale(self, value):
        """
        append_moment_visual_scale(FunctionBasedBushingForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FunctionBasedBushingForce_append_moment_visual_scale(self, value)


    def constructProperty_moment_visual_scale(self, *args):
        """
        constructProperty_moment_visual_scale(FunctionBasedBushingForce self)
        constructProperty_moment_visual_scale(FunctionBasedBushingForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_moment_visual_scale(self, *args)


    def get_moment_visual_scale(self, *args):
        """
        get_moment_visual_scale(FunctionBasedBushingForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_moment_visual_scale(FunctionBasedBushingForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_moment_visual_scale(self, *args)


    def upd_moment_visual_scale(self, *args):
        """
        upd_moment_visual_scale(FunctionBasedBushingForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_moment_visual_scale(FunctionBasedBushingForce self) -> double &

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_moment_visual_scale(self, *args)


    def set_moment_visual_scale(self, *args):
        """
        set_moment_visual_scale(FunctionBasedBushingForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_moment_visual_scale(FunctionBasedBushingForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FunctionBasedBushingForce_set_moment_visual_scale(self, *args)


    def copyProperty_force_visual_scale(self, source):
        """
        copyProperty_force_visual_scale(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_force_visual_scale(self, source)


    def append_force_visual_scale(self, value):
        """
        append_force_visual_scale(FunctionBasedBushingForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FunctionBasedBushingForce_append_force_visual_scale(self, value)


    def constructProperty_force_visual_scale(self, *args):
        """
        constructProperty_force_visual_scale(FunctionBasedBushingForce self)
        constructProperty_force_visual_scale(FunctionBasedBushingForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_force_visual_scale(self, *args)


    def get_force_visual_scale(self, *args):
        """
        get_force_visual_scale(FunctionBasedBushingForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_force_visual_scale(FunctionBasedBushingForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_force_visual_scale(self, *args)


    def upd_force_visual_scale(self, *args):
        """
        upd_force_visual_scale(FunctionBasedBushingForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_force_visual_scale(FunctionBasedBushingForce self) -> double &

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_force_visual_scale(self, *args)


    def set_force_visual_scale(self, *args):
        """
        set_force_visual_scale(FunctionBasedBushingForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_force_visual_scale(FunctionBasedBushingForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FunctionBasedBushingForce_set_force_visual_scale(self, *args)


    def copyProperty_rotational_damping(self, source):
        """
        copyProperty_rotational_damping(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_rotational_damping(self, source)


    def append_rotational_damping(self, value):
        """
        append_rotational_damping(FunctionBasedBushingForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.FunctionBasedBushingForce_append_rotational_damping(self, value)


    def constructProperty_rotational_damping(self, initValue):
        """
        constructProperty_rotational_damping(FunctionBasedBushingForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_rotational_damping(self, initValue)


    def get_rotational_damping(self, *args):
        """
        get_rotational_damping(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_rotational_damping(FunctionBasedBushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_rotational_damping(self, *args)


    def upd_rotational_damping(self, *args):
        """
        upd_rotational_damping(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_rotational_damping(FunctionBasedBushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_rotational_damping(self, *args)


    def set_rotational_damping(self, *args):
        """
        set_rotational_damping(FunctionBasedBushingForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_rotational_damping(FunctionBasedBushingForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.FunctionBasedBushingForce_set_rotational_damping(self, *args)


    def copyProperty_translational_damping(self, source):
        """
        copyProperty_translational_damping(FunctionBasedBushingForce self, FunctionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::FunctionBasedBushingForce::Self const &

        """
        return _simulation.FunctionBasedBushingForce_copyProperty_translational_damping(self, source)


    def append_translational_damping(self, value):
        """
        append_translational_damping(FunctionBasedBushingForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.FunctionBasedBushingForce_append_translational_damping(self, value)


    def constructProperty_translational_damping(self, initValue):
        """
        constructProperty_translational_damping(FunctionBasedBushingForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.FunctionBasedBushingForce_constructProperty_translational_damping(self, initValue)


    def get_translational_damping(self, *args):
        """
        get_translational_damping(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_translational_damping(FunctionBasedBushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_get_translational_damping(self, *args)


    def upd_translational_damping(self, *args):
        """
        upd_translational_damping(FunctionBasedBushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_translational_damping(FunctionBasedBushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_upd_translational_damping(self, *args)


    def set_translational_damping(self, *args):
        """
        set_translational_damping(FunctionBasedBushingForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_translational_damping(FunctionBasedBushingForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.FunctionBasedBushingForce_set_translational_damping(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FunctionBasedBushingForce self) -> FunctionBasedBushingForce
        __init__(OpenSim::FunctionBasedBushingForce self, std::string const & name, PhysicalFrame frame1, Vec3 point1, Vec3 orientation1, PhysicalFrame frame2, Vec3 point2, Vec3 orientation2) -> FunctionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        point1: SimTK::Vec3 const &
        orientation1: SimTK::Vec3 const &
        frame2: OpenSim::PhysicalFrame const &
        point2: SimTK::Vec3 const &
        orientation2: SimTK::Vec3 const &

        __init__(OpenSim::FunctionBasedBushingForce self, std::string const & name, std::string const & frame1Name, Vec3 point1, Vec3 orientation1, std::string const & frame2Name, Vec3 point2, Vec3 orientation2) -> FunctionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        point1: SimTK::Vec3 const &
        orientation1: SimTK::Vec3 const &
        frame2Name: std::string const &
        point2: SimTK::Vec3 const &
        orientation2: SimTK::Vec3 const &

        __init__(OpenSim::FunctionBasedBushingForce self, std::string const & name, PhysicalFrame frame1, Vec3 point1, Vec3 orientation1, PhysicalFrame frame2, Vec3 point2, Vec3 orientation2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> FunctionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        point1: SimTK::Vec3 const &
        orientation1: SimTK::Vec3 const &
        frame2: OpenSim::PhysicalFrame const &
        point2: SimTK::Vec3 const &
        orientation2: SimTK::Vec3 const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        __init__(OpenSim::FunctionBasedBushingForce self, std::string const & name, std::string const & frame1Name, Vec3 point1, Vec3 orientation1, std::string const & frame2Name, Vec3 point2, Vec3 orientation2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> FunctionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        point1: SimTK::Vec3 const &
        orientation1: SimTK::Vec3 const &
        frame2Name: std::string const &
        point2: SimTK::Vec3 const &
        orientation2: SimTK::Vec3 const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        """
        this = _simulation.new_FunctionBasedBushingForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setMomentVisualScale(self, scale):
        """
        setMomentVisualScale(FunctionBasedBushingForce self, double scale)

        Parameters
        ----------
        scale: double

        """
        return _simulation.FunctionBasedBushingForce_setMomentVisualScale(self, scale)


    def setForceVisualScale(self, scale):
        """
        setForceVisualScale(FunctionBasedBushingForce self, double scale)

        Parameters
        ----------
        scale: double

        """
        return _simulation.FunctionBasedBushingForce_setForceVisualScale(self, scale)


    def setVisualAspectRatio(self, ratio):
        """
        setVisualAspectRatio(FunctionBasedBushingForce self, double ratio)

        Parameters
        ----------
        ratio: double

        """
        return _simulation.FunctionBasedBushingForce_setVisualAspectRatio(self, ratio)


    def extendFinalizeFromProperties(self):
        """
        extendFinalizeFromProperties(FunctionBasedBushingForce self)

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce *

        """
        return _simulation.FunctionBasedBushingForce_extendFinalizeFromProperties(self)


    def calcStiffnessForce(self, state):
        """
        calcStiffnessForce(FunctionBasedBushingForce self, State state) -> Vec6

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FunctionBasedBushingForce_calcStiffnessForce(self, state)


    def calcDampingForce(self, state):
        """
        calcDampingForce(FunctionBasedBushingForce self, State state) -> Vec6

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FunctionBasedBushingForce_calcDampingForce(self, state)


    def computeForce(self, s, bodyForces, generalizedForces):
        """
        computeForce(FunctionBasedBushingForce self, State s, VectorOfSpatialVec bodyForces, Vector generalizedForces)

        Parameters
        ----------
        s: SimTK::State const &
        bodyForces: SimTK::Vector_< SimTK::SpatialVec > &
        generalizedForces: SimTK::Vector &

        """
        return _simulation.FunctionBasedBushingForce_computeForce(self, s, bodyForces, generalizedForces)


    def getRecordLabels(self):
        """
        getRecordLabels(FunctionBasedBushingForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::FunctionBasedBushingForce const *

        """
        return _simulation.FunctionBasedBushingForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(FunctionBasedBushingForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FunctionBasedBushingForce_getRecordValues(self, state)

    __swig_destroy__ = _simulation.delete_FunctionBasedBushingForce
    __del__ = lambda self: None
FunctionBasedBushingForce_swigregister = _simulation.FunctionBasedBushingForce_swigregister
FunctionBasedBushingForce_swigregister(FunctionBasedBushingForce)

def FunctionBasedBushingForce_safeDownCast(obj):
    """
    FunctionBasedBushingForce_safeDownCast(OpenSimObject obj) -> FunctionBasedBushingForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.FunctionBasedBushingForce_safeDownCast(obj)

def FunctionBasedBushingForce_getClassName():
    """FunctionBasedBushingForce_getClassName() -> std::string const &"""
    return _simulation.FunctionBasedBushingForce_getClassName()

class ExpressionBasedBushingForce(TwoFrameLinkerForce):
    """Proxy of C++ OpenSim::ExpressionBasedBushingForce class."""

    __swig_setmethods__ = {}
    for _s in [TwoFrameLinkerForce]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionBasedBushingForce, name, value)
    __swig_getmethods__ = {}
    for _s in [TwoFrameLinkerForce]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionBasedBushingForce, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ExpressionBasedBushingForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ExpressionBasedBushingForce_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ExpressionBasedBushingForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ExpressionBasedBushingForce_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ExpressionBasedBushingForce_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ExpressionBasedBushingForce self) -> ExpressionBasedBushingForce

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ExpressionBasedBushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_getConcreteClassName(self)


    def copyProperty_Mx_expression(self, source):
        """
        copyProperty_Mx_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_Mx_expression(self, source)


    def append_Mx_expression(self, value):
        """
        append_Mx_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_append_Mx_expression(self, value)


    def constructProperty_Mx_expression(self, initValue):
        """
        constructProperty_Mx_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_Mx_expression(self, initValue)


    def get_Mx_expression(self, *args):
        """
        get_Mx_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_Mx_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_Mx_expression(self, *args)


    def upd_Mx_expression(self, *args):
        """
        upd_Mx_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_Mx_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_Mx_expression(self, *args)


    def set_Mx_expression(self, *args):
        """
        set_Mx_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_Mx_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_set_Mx_expression(self, *args)


    def copyProperty_My_expression(self, source):
        """
        copyProperty_My_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_My_expression(self, source)


    def append_My_expression(self, value):
        """
        append_My_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_append_My_expression(self, value)


    def constructProperty_My_expression(self, initValue):
        """
        constructProperty_My_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_My_expression(self, initValue)


    def get_My_expression(self, *args):
        """
        get_My_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_My_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_My_expression(self, *args)


    def upd_My_expression(self, *args):
        """
        upd_My_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_My_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_My_expression(self, *args)


    def set_My_expression(self, *args):
        """
        set_My_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_My_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_set_My_expression(self, *args)


    def copyProperty_Mz_expression(self, source):
        """
        copyProperty_Mz_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_Mz_expression(self, source)


    def append_Mz_expression(self, value):
        """
        append_Mz_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_append_Mz_expression(self, value)


    def constructProperty_Mz_expression(self, initValue):
        """
        constructProperty_Mz_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_Mz_expression(self, initValue)


    def get_Mz_expression(self, *args):
        """
        get_Mz_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_Mz_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_Mz_expression(self, *args)


    def upd_Mz_expression(self, *args):
        """
        upd_Mz_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_Mz_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_Mz_expression(self, *args)


    def set_Mz_expression(self, *args):
        """
        set_Mz_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_Mz_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_set_Mz_expression(self, *args)


    def copyProperty_Fx_expression(self, source):
        """
        copyProperty_Fx_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_Fx_expression(self, source)


    def append_Fx_expression(self, value):
        """
        append_Fx_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_append_Fx_expression(self, value)


    def constructProperty_Fx_expression(self, initValue):
        """
        constructProperty_Fx_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_Fx_expression(self, initValue)


    def get_Fx_expression(self, *args):
        """
        get_Fx_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_Fx_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_Fx_expression(self, *args)


    def upd_Fx_expression(self, *args):
        """
        upd_Fx_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_Fx_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_Fx_expression(self, *args)


    def set_Fx_expression(self, *args):
        """
        set_Fx_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_Fx_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_set_Fx_expression(self, *args)


    def copyProperty_Fy_expression(self, source):
        """
        copyProperty_Fy_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_Fy_expression(self, source)


    def append_Fy_expression(self, value):
        """
        append_Fy_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_append_Fy_expression(self, value)


    def constructProperty_Fy_expression(self, initValue):
        """
        constructProperty_Fy_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_Fy_expression(self, initValue)


    def get_Fy_expression(self, *args):
        """
        get_Fy_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_Fy_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_Fy_expression(self, *args)


    def upd_Fy_expression(self, *args):
        """
        upd_Fy_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_Fy_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_Fy_expression(self, *args)


    def set_Fy_expression(self, *args):
        """
        set_Fy_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_Fy_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_set_Fy_expression(self, *args)


    def copyProperty_Fz_expression(self, source):
        """
        copyProperty_Fz_expression(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_Fz_expression(self, source)


    def append_Fz_expression(self, value):
        """
        append_Fz_expression(ExpressionBasedBushingForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_append_Fz_expression(self, value)


    def constructProperty_Fz_expression(self, initValue):
        """
        constructProperty_Fz_expression(ExpressionBasedBushingForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_Fz_expression(self, initValue)


    def get_Fz_expression(self, *args):
        """
        get_Fz_expression(ExpressionBasedBushingForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_Fz_expression(ExpressionBasedBushingForce self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_Fz_expression(self, *args)


    def upd_Fz_expression(self, *args):
        """
        upd_Fz_expression(ExpressionBasedBushingForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_Fz_expression(ExpressionBasedBushingForce self) -> std::string &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_Fz_expression(self, *args)


    def set_Fz_expression(self, *args):
        """
        set_Fz_expression(ExpressionBasedBushingForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_Fz_expression(ExpressionBasedBushingForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.ExpressionBasedBushingForce_set_Fz_expression(self, *args)


    def copyProperty_visual_aspect_ratio(self, source):
        """
        copyProperty_visual_aspect_ratio(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_visual_aspect_ratio(self, source)


    def append_visual_aspect_ratio(self, value):
        """
        append_visual_aspect_ratio(ExpressionBasedBushingForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ExpressionBasedBushingForce_append_visual_aspect_ratio(self, value)


    def constructProperty_visual_aspect_ratio(self, *args):
        """
        constructProperty_visual_aspect_ratio(ExpressionBasedBushingForce self)
        constructProperty_visual_aspect_ratio(ExpressionBasedBushingForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_visual_aspect_ratio(self, *args)


    def get_visual_aspect_ratio(self, *args):
        """
        get_visual_aspect_ratio(ExpressionBasedBushingForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_visual_aspect_ratio(ExpressionBasedBushingForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_visual_aspect_ratio(self, *args)


    def upd_visual_aspect_ratio(self, *args):
        """
        upd_visual_aspect_ratio(ExpressionBasedBushingForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_visual_aspect_ratio(ExpressionBasedBushingForce self) -> double &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_visual_aspect_ratio(self, *args)


    def set_visual_aspect_ratio(self, *args):
        """
        set_visual_aspect_ratio(ExpressionBasedBushingForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_visual_aspect_ratio(ExpressionBasedBushingForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ExpressionBasedBushingForce_set_visual_aspect_ratio(self, *args)


    def copyProperty_moment_visual_scale(self, source):
        """
        copyProperty_moment_visual_scale(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_moment_visual_scale(self, source)


    def append_moment_visual_scale(self, value):
        """
        append_moment_visual_scale(ExpressionBasedBushingForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ExpressionBasedBushingForce_append_moment_visual_scale(self, value)


    def constructProperty_moment_visual_scale(self, *args):
        """
        constructProperty_moment_visual_scale(ExpressionBasedBushingForce self)
        constructProperty_moment_visual_scale(ExpressionBasedBushingForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_moment_visual_scale(self, *args)


    def get_moment_visual_scale(self, *args):
        """
        get_moment_visual_scale(ExpressionBasedBushingForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_moment_visual_scale(ExpressionBasedBushingForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_moment_visual_scale(self, *args)


    def upd_moment_visual_scale(self, *args):
        """
        upd_moment_visual_scale(ExpressionBasedBushingForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_moment_visual_scale(ExpressionBasedBushingForce self) -> double &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_moment_visual_scale(self, *args)


    def set_moment_visual_scale(self, *args):
        """
        set_moment_visual_scale(ExpressionBasedBushingForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_moment_visual_scale(ExpressionBasedBushingForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ExpressionBasedBushingForce_set_moment_visual_scale(self, *args)


    def copyProperty_force_visual_scale(self, source):
        """
        copyProperty_force_visual_scale(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_force_visual_scale(self, source)


    def append_force_visual_scale(self, value):
        """
        append_force_visual_scale(ExpressionBasedBushingForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ExpressionBasedBushingForce_append_force_visual_scale(self, value)


    def constructProperty_force_visual_scale(self, *args):
        """
        constructProperty_force_visual_scale(ExpressionBasedBushingForce self)
        constructProperty_force_visual_scale(ExpressionBasedBushingForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_force_visual_scale(self, *args)


    def get_force_visual_scale(self, *args):
        """
        get_force_visual_scale(ExpressionBasedBushingForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_force_visual_scale(ExpressionBasedBushingForce self) -> double const &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_force_visual_scale(self, *args)


    def upd_force_visual_scale(self, *args):
        """
        upd_force_visual_scale(ExpressionBasedBushingForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_force_visual_scale(ExpressionBasedBushingForce self) -> double &

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_force_visual_scale(self, *args)


    def set_force_visual_scale(self, *args):
        """
        set_force_visual_scale(ExpressionBasedBushingForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_force_visual_scale(ExpressionBasedBushingForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ExpressionBasedBushingForce_set_force_visual_scale(self, *args)


    def copyProperty_rotational_damping(self, source):
        """
        copyProperty_rotational_damping(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_rotational_damping(self, source)


    def append_rotational_damping(self, value):
        """
        append_rotational_damping(ExpressionBasedBushingForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedBushingForce_append_rotational_damping(self, value)


    def constructProperty_rotational_damping(self, initValue):
        """
        constructProperty_rotational_damping(ExpressionBasedBushingForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_rotational_damping(self, initValue)


    def get_rotational_damping(self, *args):
        """
        get_rotational_damping(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_rotational_damping(ExpressionBasedBushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_rotational_damping(self, *args)


    def upd_rotational_damping(self, *args):
        """
        upd_rotational_damping(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_rotational_damping(ExpressionBasedBushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_rotational_damping(self, *args)


    def set_rotational_damping(self, *args):
        """
        set_rotational_damping(ExpressionBasedBushingForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_rotational_damping(ExpressionBasedBushingForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedBushingForce_set_rotational_damping(self, *args)


    def copyProperty_translational_damping(self, source):
        """
        copyProperty_translational_damping(ExpressionBasedBushingForce self, ExpressionBasedBushingForce source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedBushingForce::Self const &

        """
        return _simulation.ExpressionBasedBushingForce_copyProperty_translational_damping(self, source)


    def append_translational_damping(self, value):
        """
        append_translational_damping(ExpressionBasedBushingForce self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedBushingForce_append_translational_damping(self, value)


    def constructProperty_translational_damping(self, initValue):
        """
        constructProperty_translational_damping(ExpressionBasedBushingForce self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedBushingForce_constructProperty_translational_damping(self, initValue)


    def get_translational_damping(self, *args):
        """
        get_translational_damping(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_translational_damping(ExpressionBasedBushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_get_translational_damping(self, *args)


    def upd_translational_damping(self, *args):
        """
        upd_translational_damping(ExpressionBasedBushingForce self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_translational_damping(ExpressionBasedBushingForce self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_upd_translational_damping(self, *args)


    def set_translational_damping(self, *args):
        """
        set_translational_damping(ExpressionBasedBushingForce self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_translational_damping(ExpressionBasedBushingForce self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.ExpressionBasedBushingForce_set_translational_damping(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ExpressionBasedBushingForce self) -> ExpressionBasedBushingForce
        __init__(OpenSim::ExpressionBasedBushingForce self, std::string const & name, PhysicalFrame frame1, PhysicalFrame frame2) -> ExpressionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        frame2: OpenSim::PhysicalFrame const &

        __init__(OpenSim::ExpressionBasedBushingForce self, std::string const & name, std::string const & frame1Name, std::string const & frame2Name) -> ExpressionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        frame2Name: std::string const &

        __init__(OpenSim::ExpressionBasedBushingForce self, std::string const & name, PhysicalFrame frame1, Vec3 point1, Vec3 orientation1, PhysicalFrame frame2, Vec3 point2, Vec3 orientation2) -> ExpressionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        point1: SimTK::Vec3 const &
        orientation1: SimTK::Vec3 const &
        frame2: OpenSim::PhysicalFrame const &
        point2: SimTK::Vec3 const &
        orientation2: SimTK::Vec3 const &

        __init__(OpenSim::ExpressionBasedBushingForce self, std::string const & name, std::string const & frame1Name, Vec3 point1, Vec3 orientation1, std::string const & frame2Name, Vec3 point2, Vec3 orientation2) -> ExpressionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        point1: SimTK::Vec3 const &
        orientation1: SimTK::Vec3 const &
        frame2Name: std::string const &
        point2: SimTK::Vec3 const &
        orientation2: SimTK::Vec3 const &

        __init__(OpenSim::ExpressionBasedBushingForce self, std::string const & name, PhysicalFrame frame1, Vec3 point1, Vec3 orientation1, PhysicalFrame frame2, Vec3 point2, Vec3 orientation2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> ExpressionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1: OpenSim::PhysicalFrame const &
        point1: SimTK::Vec3 const &
        orientation1: SimTK::Vec3 const &
        frame2: OpenSim::PhysicalFrame const &
        point2: SimTK::Vec3 const &
        orientation2: SimTK::Vec3 const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        __init__(OpenSim::ExpressionBasedBushingForce self, std::string const & name, std::string const & frame1Name, Vec3 point1, Vec3 orientation1, std::string const & frame2Name, Vec3 point2, Vec3 orientation2, Vec3 transStiffness, Vec3 rotStiffness, Vec3 transDamping, Vec3 rotDamping) -> ExpressionBasedBushingForce

        Parameters
        ----------
        name: std::string const &
        frame1Name: std::string const &
        point1: SimTK::Vec3 const &
        orientation1: SimTK::Vec3 const &
        frame2Name: std::string const &
        point2: SimTK::Vec3 const &
        orientation2: SimTK::Vec3 const &
        transStiffness: SimTK::Vec3 const &
        rotStiffness: SimTK::Vec3 const &
        transDamping: SimTK::Vec3 const &
        rotDamping: SimTK::Vec3 const &

        """
        this = _simulation.new_ExpressionBasedBushingForce(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setMomentVisualScale(self, scale):
        """
        setMomentVisualScale(ExpressionBasedBushingForce self, double scale)

        Parameters
        ----------
        scale: double

        """
        return _simulation.ExpressionBasedBushingForce_setMomentVisualScale(self, scale)


    def setForceVisualScale(self, scale):
        """
        setForceVisualScale(ExpressionBasedBushingForce self, double scale)

        Parameters
        ----------
        scale: double

        """
        return _simulation.ExpressionBasedBushingForce_setForceVisualScale(self, scale)


    def setVisualAspectRatio(self, ratio):
        """
        setVisualAspectRatio(ExpressionBasedBushingForce self, double ratio)

        Parameters
        ----------
        ratio: double

        """
        return _simulation.ExpressionBasedBushingForce_setVisualAspectRatio(self, ratio)


    def setMxExpression(self, expression):
        """
        setMxExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters
        ----------
        expression: std::string

        """
        return _simulation.ExpressionBasedBushingForce_setMxExpression(self, expression)


    def setMyExpression(self, expression):
        """
        setMyExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters
        ----------
        expression: std::string

        """
        return _simulation.ExpressionBasedBushingForce_setMyExpression(self, expression)


    def setMzExpression(self, expression):
        """
        setMzExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters
        ----------
        expression: std::string

        """
        return _simulation.ExpressionBasedBushingForce_setMzExpression(self, expression)


    def setFxExpression(self, expression):
        """
        setFxExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters
        ----------
        expression: std::string

        """
        return _simulation.ExpressionBasedBushingForce_setFxExpression(self, expression)


    def setFyExpression(self, expression):
        """
        setFyExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters
        ----------
        expression: std::string

        """
        return _simulation.ExpressionBasedBushingForce_setFyExpression(self, expression)


    def setFzExpression(self, expression):
        """
        setFzExpression(ExpressionBasedBushingForce self, std::string expression)

        Parameters
        ----------
        expression: std::string

        """
        return _simulation.ExpressionBasedBushingForce_setFzExpression(self, expression)


    def getMxExpression(self):
        """
        getMxExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_getMxExpression(self)


    def getMyExpression(self):
        """
        getMyExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_getMyExpression(self)


    def getMzExpression(self):
        """
        getMzExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_getMzExpression(self)


    def getFxExpression(self):
        """
        getFxExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_getFxExpression(self)


    def getFyExpression(self):
        """
        getFyExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_getFyExpression(self)


    def getFzExpression(self):
        """
        getFzExpression(ExpressionBasedBushingForce self) -> std::string

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce *

        """
        return _simulation.ExpressionBasedBushingForce_getFzExpression(self)


    def calcStiffnessForce(self, state):
        """
        calcStiffnessForce(ExpressionBasedBushingForce self, State state) -> Vec6

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ExpressionBasedBushingForce_calcStiffnessForce(self, state)


    def calcDampingForce(self, state):
        """
        calcDampingForce(ExpressionBasedBushingForce self, State state) -> Vec6

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ExpressionBasedBushingForce_calcDampingForce(self, state)


    def getRecordLabels(self):
        """
        getRecordLabels(ExpressionBasedBushingForce self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ExpressionBasedBushingForce const *

        """
        return _simulation.ExpressionBasedBushingForce_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ExpressionBasedBushingForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ExpressionBasedBushingForce_getRecordValues(self, state)

    __swig_destroy__ = _simulation.delete_ExpressionBasedBushingForce
    __del__ = lambda self: None
ExpressionBasedBushingForce_swigregister = _simulation.ExpressionBasedBushingForce_swigregister
ExpressionBasedBushingForce_swigregister(ExpressionBasedBushingForce)

def ExpressionBasedBushingForce_safeDownCast(obj):
    """
    ExpressionBasedBushingForce_safeDownCast(OpenSimObject obj) -> ExpressionBasedBushingForce

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ExpressionBasedBushingForce_safeDownCast(obj)

def ExpressionBasedBushingForce_getClassName():
    """ExpressionBasedBushingForce_getClassName() -> std::string const &"""
    return _simulation.ExpressionBasedBushingForce_getClassName()

class ReferenceVec3(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Reference_<(SimTK::Vec3)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceVec3, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceVec3, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ReferenceVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ReferenceVec3_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ReferenceVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ReferenceVec3_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ReferenceVec3_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ReferenceVec3 self) -> ReferenceVec3

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _simulation.ReferenceVec3_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ReferenceVec3 self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _simulation.ReferenceVec3_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_ReferenceVec3
    __del__ = lambda self: None

    def getNumRefs(self):
        """
        getNumRefs(ReferenceVec3 self) -> int

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _simulation.ReferenceVec3_getNumRefs(self)


    def getValidTimeRange(self):
        """
        getValidTimeRange(ReferenceVec3 self) -> Vec2

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _simulation.ReferenceVec3_getValidTimeRange(self)


    def getNames(self):
        """
        getNames(ReferenceVec3 self) -> SimTKArrayString

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Vec3 > const *

        """
        return _simulation.ReferenceVec3_getNames(self)


    def getValues(self, *args):
        """
        getValues(ReferenceVec3 self, State s, SimTKArrayVec3 values)

        Parameters
        ----------
        s: SimTK::State const &
        values: SimTK::Array_< SimTK::Vec< 3,double,1 >,unsigned int > &

        getValues(ReferenceVec3 self, State s) -> SimTKArrayVec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ReferenceVec3_getValues(self, *args)


    def getWeights(self, *args):
        """
        getWeights(ReferenceVec3 self, State s, SimTKArrayDouble weights)

        Parameters
        ----------
        s: SimTK::State const &
        weights: SimTK::Array_< double,unsigned int > &

        getWeights(ReferenceVec3 self, State s) -> SimTKArrayDouble

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ReferenceVec3_getWeights(self, *args)

ReferenceVec3_swigregister = _simulation.ReferenceVec3_swigregister
ReferenceVec3_swigregister(ReferenceVec3)

def ReferenceVec3_safeDownCast(obj):
    """
    ReferenceVec3_safeDownCast(OpenSimObject obj) -> ReferenceVec3

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ReferenceVec3_safeDownCast(obj)

def ReferenceVec3_getClassName():
    """ReferenceVec3_getClassName() -> std::string const &"""
    return _simulation.ReferenceVec3_getClassName()

class ReferenceDouble(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Reference_<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceDouble, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ReferenceDouble

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ReferenceDouble_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ReferenceDouble self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ReferenceDouble_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ReferenceDouble_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ReferenceDouble self) -> ReferenceDouble

        Parameters
        ----------
        self: OpenSim::Reference_< double > const *

        """
        return _simulation.ReferenceDouble_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ReferenceDouble self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Reference_< double > const *

        """
        return _simulation.ReferenceDouble_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_ReferenceDouble
    __del__ = lambda self: None

    def getNumRefs(self):
        """
        getNumRefs(ReferenceDouble self) -> int

        Parameters
        ----------
        self: OpenSim::Reference_< double > const *

        """
        return _simulation.ReferenceDouble_getNumRefs(self)


    def getValidTimeRange(self):
        """
        getValidTimeRange(ReferenceDouble self) -> Vec2

        Parameters
        ----------
        self: OpenSim::Reference_< double > const *

        """
        return _simulation.ReferenceDouble_getValidTimeRange(self)


    def getNames(self):
        """
        getNames(ReferenceDouble self) -> SimTKArrayString

        Parameters
        ----------
        self: OpenSim::Reference_< double > const *

        """
        return _simulation.ReferenceDouble_getNames(self)


    def getValues(self, *args):
        """
        getValues(ReferenceDouble self, State s, SimTKArrayDouble values)

        Parameters
        ----------
        s: SimTK::State const &
        values: SimTK::Array_< double,unsigned int > &

        getValues(ReferenceDouble self, State s) -> SimTKArrayDouble

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ReferenceDouble_getValues(self, *args)


    def getWeights(self, *args):
        """
        getWeights(ReferenceDouble self, State s, SimTKArrayDouble weights)

        Parameters
        ----------
        s: SimTK::State const &
        weights: SimTK::Array_< double,unsigned int > &

        getWeights(ReferenceDouble self, State s) -> SimTKArrayDouble

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ReferenceDouble_getWeights(self, *args)

ReferenceDouble_swigregister = _simulation.ReferenceDouble_swigregister
ReferenceDouble_swigregister(ReferenceDouble)

def ReferenceDouble_safeDownCast(obj):
    """
    ReferenceDouble_safeDownCast(OpenSimObject obj) -> ReferenceDouble

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ReferenceDouble_safeDownCast(obj)

def ReferenceDouble_getClassName():
    """ReferenceDouble_getClassName() -> std::string const &"""
    return _simulation.ReferenceDouble_getClassName()

class ReferenceRotation(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Reference_<(SimTK::Rotation_<(double)>)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceRotation, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceRotation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ReferenceRotation

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ReferenceRotation_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ReferenceRotation self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ReferenceRotation_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ReferenceRotation_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ReferenceRotation self) -> ReferenceRotation

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Rotation_< double > > const *

        """
        return _simulation.ReferenceRotation_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ReferenceRotation self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Rotation_< double > > const *

        """
        return _simulation.ReferenceRotation_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_ReferenceRotation
    __del__ = lambda self: None

    def getNumRefs(self):
        """
        getNumRefs(ReferenceRotation self) -> int

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Rotation_< double > > const *

        """
        return _simulation.ReferenceRotation_getNumRefs(self)


    def getValidTimeRange(self):
        """
        getValidTimeRange(ReferenceRotation self) -> Vec2

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Rotation_< double > > const *

        """
        return _simulation.ReferenceRotation_getValidTimeRange(self)


    def getNames(self):
        """
        getNames(ReferenceRotation self) -> SimTKArrayString

        Parameters
        ----------
        self: OpenSim::Reference_< SimTK::Rotation_< double > > const *

        """
        return _simulation.ReferenceRotation_getNames(self)


    def getValues(self, *args):
        """
        getValues(ReferenceRotation self, State s, SimTKArrayRotation values)

        Parameters
        ----------
        s: SimTK::State const &
        values: SimTK::Array_< SimTK::Rotation_< double >,unsigned int > &

        getValues(ReferenceRotation self, State s) -> SimTKArrayRotation

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ReferenceRotation_getValues(self, *args)


    def getWeights(self, *args):
        """
        getWeights(ReferenceRotation self, State s, SimTKArrayDouble weights)

        Parameters
        ----------
        s: SimTK::State const &
        weights: SimTK::Array_< double,unsigned int > &

        getWeights(ReferenceRotation self, State s) -> SimTKArrayDouble

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ReferenceRotation_getWeights(self, *args)

ReferenceRotation_swigregister = _simulation.ReferenceRotation_swigregister
ReferenceRotation_swigregister(ReferenceRotation)

def ReferenceRotation_safeDownCast(obj):
    """
    ReferenceRotation_safeDownCast(OpenSimObject obj) -> ReferenceRotation

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ReferenceRotation_safeDownCast(obj)

def ReferenceRotation_getClassName():
    """ReferenceRotation_getClassName() -> std::string const &"""
    return _simulation.ReferenceRotation_getClassName()

class SimTKArrayCoordinateReference(_object):
    """Proxy of C++ SimTK::Array_<(OpenSim::CoordinateReference)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimTKArrayCoordinateReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimTKArrayCoordinateReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self) -> SimTKArrayCoordinateReference
        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        n: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n, CoordinateReference initVal) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        n: SimTK::Array_< OpenSim::CoordinateReference >::size_type
        initVal: OpenSim::CoordinateReference const &

        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self, SimTKArrayCoordinateReference src) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        src: SimTK::Array_< OpenSim::CoordinateReference > const &

        __init__(SimTK::Array_<(OpenSim::CoordinateReference)> self, CoordinateReference first, CoordinateReference last1, DontCopy arg4) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        first: OpenSim::CoordinateReference *
        last1: OpenSim::CoordinateReference const *
        arg4: SimTK::DontCopy const &

        """
        this = _simulation.new_SimTKArrayCoordinateReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_SimTKArrayCoordinateReference
    __del__ = lambda self: None

    def deallocate(self):
        """
        deallocate(SimTKArrayCoordinateReference self) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_deallocate(self)


    def assign(self, n, fillValue):
        """
        assign(SimTKArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n, CoordinateReference fillValue)

        Parameters
        ----------
        n: SimTK::Array_< OpenSim::CoordinateReference >::size_type
        fillValue: OpenSim::CoordinateReference const &

        """
        return _simulation.SimTKArrayCoordinateReference_assign(self, n, fillValue)


    def fill(self, fillValue):
        """
        fill(SimTKArrayCoordinateReference self, CoordinateReference fillValue)

        Parameters
        ----------
        fillValue: OpenSim::CoordinateReference const &

        """
        return _simulation.SimTKArrayCoordinateReference_fill(self, fillValue)


    def swap(self, other):
        """
        swap(SimTKArrayCoordinateReference self, SimTKArrayCoordinateReference other)

        Parameters
        ----------
        other: SimTK::Array_< OpenSim::CoordinateReference > &

        """
        return _simulation.SimTKArrayCoordinateReference_swap(self, other)


    def adoptData(self, *args):
        """
        adoptData(SimTKArrayCoordinateReference self, CoordinateReference newData, SimTK::Array_< OpenSim::CoordinateReference >::size_type dataSize, SimTK::Array_< OpenSim::CoordinateReference >::size_type dataCapacity) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        newData: OpenSim::CoordinateReference *
        dataSize: SimTK::Array_< OpenSim::CoordinateReference >::size_type
        dataCapacity: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        adoptData(SimTKArrayCoordinateReference self, CoordinateReference newData, SimTK::Array_< OpenSim::CoordinateReference >::size_type dataSize) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        newData: OpenSim::CoordinateReference *
        dataSize: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        """
        return _simulation.SimTKArrayCoordinateReference_adoptData(self, *args)


    def shareData(self, *args):
        """
        shareData(SimTKArrayCoordinateReference self, CoordinateReference newData, SimTK::Array_< OpenSim::CoordinateReference >::size_type dataSize) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        newData: OpenSim::CoordinateReference *
        dataSize: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        shareData(SimTKArrayCoordinateReference self, CoordinateReference first, CoordinateReference last1) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        first: OpenSim::CoordinateReference *
        last1: OpenSim::CoordinateReference const *

        """
        return _simulation.SimTKArrayCoordinateReference_shareData(self, *args)


    def size(self):
        """
        size(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::size_type

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_size(self)


    def max_size(self):
        """
        max_size(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::size_type

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_max_size(self)


    def empty(self):
        """
        empty(SimTKArrayCoordinateReference self) -> bool

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_empty(self)


    def capacity(self):
        """
        capacity(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::size_type

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_capacity(self)


    def resize(self, *args):
        """
        resize(SimTKArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        resize(SimTKArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n, CoordinateReference initVal)

        Parameters
        ----------
        n: SimTK::Array_< OpenSim::CoordinateReference >::size_type
        initVal: OpenSim::CoordinateReference const &

        """
        return _simulation.SimTKArrayCoordinateReference_resize(self, *args)


    def reserve(self, n):
        """
        reserve(SimTKArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< OpenSim::CoordinateReference >::size_type

        """
        return _simulation.SimTKArrayCoordinateReference_reserve(self, n)


    def shrink_to_fit(self):
        """
        shrink_to_fit(SimTKArrayCoordinateReference self)

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_shrink_to_fit(self)


    def allocated(self):
        """
        allocated(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::size_type

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_allocated(self)


    def isOwner(self):
        """
        isOwner(SimTKArrayCoordinateReference self) -> bool

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_isOwner(self)


    def cbegin(self):
        """
        cbegin(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_cbegin(self)


    def begin(self, *args):
        """
        begin(SimTKArrayCoordinateReference self) -> CoordinateReference
        begin(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_begin(self, *args)


    def cend(self):
        """
        cend(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_cend(self)


    def end(self, *args):
        """
        end(SimTKArrayCoordinateReference self) -> CoordinateReference
        end(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_end(self, *args)


    def crbegin(self):
        """
        crbegin(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::const_reverse_iterator

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_crbegin(self)


    def rbegin(self, *args):
        """
        rbegin(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::const_reverse_iterator
        rbegin(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::reverse_iterator

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_rbegin(self, *args)


    def crend(self):
        """
        crend(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::const_reverse_iterator

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_crend(self)


    def rend(self, *args):
        """
        rend(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::const_reverse_iterator
        rend(SimTKArrayCoordinateReference self) -> SimTK::Array_< OpenSim::CoordinateReference >::reverse_iterator

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_rend(self, *args)


    def cdata(self):
        """
        cdata(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > const *

        """
        return _simulation.SimTKArrayCoordinateReference_cdata(self)


    def data(self, *args):
        """
        data(SimTKArrayCoordinateReference self) -> CoordinateReference
        data(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_data(self, *args)


    def at(self, *args):
        """
        at(SimTKArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::index_type i) -> CoordinateReference

        Parameters
        ----------
        i: SimTK::Array_< OpenSim::CoordinateReference >::index_type

        at(SimTKArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::index_type i) -> CoordinateReference

        Parameters
        ----------
        i: SimTK::Array_< OpenSim::CoordinateReference >::index_type

        """
        return _simulation.SimTKArrayCoordinateReference_at(self, *args)


    def getElt(self, i):
        """
        getElt(SimTKArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::index_type i) -> CoordinateReference

        Parameters
        ----------
        i: SimTK::Array_< OpenSim::CoordinateReference >::index_type

        """
        return _simulation.SimTKArrayCoordinateReference_getElt(self, i)


    def updElt(self, i):
        """
        updElt(SimTKArrayCoordinateReference self, SimTK::Array_< OpenSim::CoordinateReference >::index_type i) -> CoordinateReference

        Parameters
        ----------
        i: SimTK::Array_< OpenSim::CoordinateReference >::index_type

        """
        return _simulation.SimTKArrayCoordinateReference_updElt(self, i)


    def front(self, *args):
        """
        front(SimTKArrayCoordinateReference self) -> CoordinateReference
        front(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_front(self, *args)


    def back(self, *args):
        """
        back(SimTKArrayCoordinateReference self) -> CoordinateReference
        back(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_back(self, *args)


    def push_back(self, *args):
        """
        push_back(SimTKArrayCoordinateReference self, CoordinateReference value)

        Parameters
        ----------
        value: OpenSim::CoordinateReference const &

        push_back(SimTKArrayCoordinateReference self)

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_push_back(self, *args)


    def raw_push_back(self):
        """
        raw_push_back(SimTKArrayCoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_raw_push_back(self)


    def pop_back(self):
        """
        pop_back(SimTKArrayCoordinateReference self)

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_pop_back(self)


    def erase(self, *args):
        """
        erase(SimTKArrayCoordinateReference self, CoordinateReference first, CoordinateReference last1) -> CoordinateReference

        Parameters
        ----------
        first: OpenSim::CoordinateReference *
        last1: OpenSim::CoordinateReference const *

        erase(SimTKArrayCoordinateReference self, CoordinateReference p) -> CoordinateReference

        Parameters
        ----------
        p: OpenSim::CoordinateReference *

        """
        return _simulation.SimTKArrayCoordinateReference_erase(self, *args)


    def eraseFast(self, p):
        """
        eraseFast(SimTKArrayCoordinateReference self, CoordinateReference p) -> CoordinateReference

        Parameters
        ----------
        p: OpenSim::CoordinateReference *

        """
        return _simulation.SimTKArrayCoordinateReference_eraseFast(self, p)


    def clear(self):
        """
        clear(SimTKArrayCoordinateReference self)

        Parameters
        ----------
        self: SimTK::Array_< OpenSim::CoordinateReference > *

        """
        return _simulation.SimTKArrayCoordinateReference_clear(self)


    def insert(self, *args):
        """
        insert(SimTKArrayCoordinateReference self, CoordinateReference p, SimTK::Array_< OpenSim::CoordinateReference >::size_type n, CoordinateReference value) -> CoordinateReference

        Parameters
        ----------
        p: OpenSim::CoordinateReference *
        n: SimTK::Array_< OpenSim::CoordinateReference >::size_type
        value: OpenSim::CoordinateReference const &

        insert(SimTKArrayCoordinateReference self, CoordinateReference p, CoordinateReference value) -> CoordinateReference

        Parameters
        ----------
        p: OpenSim::CoordinateReference *
        value: OpenSim::CoordinateReference const &

        """
        return _simulation.SimTKArrayCoordinateReference_insert(self, *args)

SimTKArrayCoordinateReference_swigregister = _simulation.SimTKArrayCoordinateReference_swigregister
SimTKArrayCoordinateReference_swigregister(SimTKArrayCoordinateReference)

class UnsupportedFileType(opensim.common.OpenSimException):
    """Proxy of C++ OpenSim::UnsupportedFileType class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsupportedFileType, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnsupportedFileType, name)
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, msg):
        """
        __init__(OpenSim::UnsupportedFileType self, std::string const & file, size_t line, std::string const & func, std::string const & filename, std::string const & msg) -> UnsupportedFileType

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        msg: std::string const &

        """
        this = _simulation.new_UnsupportedFileType(file, line, func, filename, msg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_UnsupportedFileType
    __del__ = lambda self: None
UnsupportedFileType_swigregister = _simulation.UnsupportedFileType_swigregister
UnsupportedFileType_swigregister(UnsupportedFileType)

class MarkerWeight(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::MarkerWeight class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkerWeight, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkerWeight, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkerWeight

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.MarkerWeight_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MarkerWeight self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.MarkerWeight_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.MarkerWeight_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MarkerWeight self) -> MarkerWeight

        Parameters
        ----------
        self: OpenSim::MarkerWeight const *

        """
        return _simulation.MarkerWeight_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkerWeight self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkerWeight const *

        """
        return _simulation.MarkerWeight_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkerWeight self) -> MarkerWeight
        __init__(OpenSim::MarkerWeight self, std::string name, double weight) -> MarkerWeight

        Parameters
        ----------
        name: std::string
        weight: double

        """
        this = _simulation.new_MarkerWeight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setWeight(self, weight):
        """
        setWeight(MarkerWeight self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _simulation.MarkerWeight_setWeight(self, weight)


    def getWeight(self):
        """
        getWeight(MarkerWeight self) -> double

        Parameters
        ----------
        self: OpenSim::MarkerWeight const *

        """
        return _simulation.MarkerWeight_getWeight(self)

    __swig_destroy__ = _simulation.delete_MarkerWeight
    __del__ = lambda self: None
MarkerWeight_swigregister = _simulation.MarkerWeight_swigregister
MarkerWeight_swigregister(MarkerWeight)

def MarkerWeight_safeDownCast(obj):
    """
    MarkerWeight_safeDownCast(OpenSimObject obj) -> MarkerWeight

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.MarkerWeight_safeDownCast(obj)

def MarkerWeight_getClassName():
    """MarkerWeight_getClassName() -> std::string const &"""
    return _simulation.MarkerWeight_getClassName()

class MarkersReference(ReferenceVec3):
    """Proxy of C++ OpenSim::MarkersReference class."""

    __swig_setmethods__ = {}
    for _s in [ReferenceVec3]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkersReference, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceVec3]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkersReference, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MarkersReference

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.MarkersReference_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MarkersReference self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.MarkersReference_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.MarkersReference_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MarkersReference self) -> MarkersReference

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MarkersReference self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_getConcreteClassName(self)


    def copyProperty_marker_file(self, source):
        """
        copyProperty_marker_file(MarkersReference self, MarkersReference source)

        Parameters
        ----------
        source: OpenSim::MarkersReference::Self const &

        """
        return _simulation.MarkersReference_copyProperty_marker_file(self, source)


    def append_marker_file(self, value):
        """
        append_marker_file(MarkersReference self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.MarkersReference_append_marker_file(self, value)


    def constructProperty_marker_file(self, initValue):
        """
        constructProperty_marker_file(MarkersReference self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.MarkersReference_constructProperty_marker_file(self, initValue)


    def get_marker_file(self, *args):
        """
        get_marker_file(MarkersReference self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_marker_file(MarkersReference self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_get_marker_file(self, *args)


    def upd_marker_file(self, *args):
        """
        upd_marker_file(MarkersReference self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_marker_file(MarkersReference self) -> std::string &

        Parameters
        ----------
        self: OpenSim::MarkersReference *

        """
        return _simulation.MarkersReference_upd_marker_file(self, *args)


    def set_marker_file(self, *args):
        """
        set_marker_file(MarkersReference self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_marker_file(MarkersReference self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.MarkersReference_set_marker_file(self, *args)


    def copyProperty_marker_weights(self, source):
        """
        copyProperty_marker_weights(MarkersReference self, MarkersReference source)

        Parameters
        ----------
        source: OpenSim::MarkersReference::Self const &

        """
        return _simulation.MarkersReference_copyProperty_marker_weights(self, source)


    def append_marker_weights(self, value):
        """
        append_marker_weights(MarkersReference self, SetMarkerWeights value) -> int

        Parameters
        ----------
        value: OpenSim::Set< OpenSim::MarkerWeight > const &

        """
        return _simulation.MarkersReference_append_marker_weights(self, value)


    def constructProperty_marker_weights(self, initValue):
        """
        constructProperty_marker_weights(MarkersReference self, SetMarkerWeights initValue)

        Parameters
        ----------
        initValue: OpenSim::Set< OpenSim::MarkerWeight > const &

        """
        return _simulation.MarkersReference_constructProperty_marker_weights(self, initValue)


    def get_marker_weights(self, *args):
        """
        get_marker_weights(MarkersReference self, int i) -> SetMarkerWeights

        Parameters
        ----------
        i: int

        get_marker_weights(MarkersReference self) -> SetMarkerWeights

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_get_marker_weights(self, *args)


    def upd_marker_weights(self, *args):
        """
        upd_marker_weights(MarkersReference self, int i) -> SetMarkerWeights

        Parameters
        ----------
        i: int

        upd_marker_weights(MarkersReference self) -> SetMarkerWeights

        Parameters
        ----------
        self: OpenSim::MarkersReference *

        """
        return _simulation.MarkersReference_upd_marker_weights(self, *args)


    def set_marker_weights(self, *args):
        """
        set_marker_weights(MarkersReference self, int i, SetMarkerWeights value)

        Parameters
        ----------
        i: int
        value: OpenSim::Set< OpenSim::MarkerWeight > const &

        set_marker_weights(MarkersReference self, SetMarkerWeights value)

        Parameters
        ----------
        value: OpenSim::Set< OpenSim::MarkerWeight > const &

        """
        return _simulation.MarkersReference_set_marker_weights(self, *args)


    def copyProperty_default_weight(self, source):
        """
        copyProperty_default_weight(MarkersReference self, MarkersReference source)

        Parameters
        ----------
        source: OpenSim::MarkersReference::Self const &

        """
        return _simulation.MarkersReference_copyProperty_default_weight(self, source)


    def append_default_weight(self, value):
        """
        append_default_weight(MarkersReference self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MarkersReference_append_default_weight(self, value)


    def constructProperty_default_weight(self, initValue):
        """
        constructProperty_default_weight(MarkersReference self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.MarkersReference_constructProperty_default_weight(self, initValue)


    def get_default_weight(self, *args):
        """
        get_default_weight(MarkersReference self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_weight(MarkersReference self) -> double const &

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_get_default_weight(self, *args)


    def upd_default_weight(self, *args):
        """
        upd_default_weight(MarkersReference self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_weight(MarkersReference self) -> double &

        Parameters
        ----------
        self: OpenSim::MarkersReference *

        """
        return _simulation.MarkersReference_upd_default_weight(self, *args)


    def set_default_weight(self, *args):
        """
        set_default_weight(MarkersReference self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_weight(MarkersReference self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MarkersReference_set_default_weight(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::MarkersReference self) -> MarkersReference
        __init__(OpenSim::MarkersReference self, std::string const & markerFileName, SetMarkerWeights markerWeightSet, Units modelUnits) -> MarkersReference

        Parameters
        ----------
        markerFileName: std::string const &
        markerWeightSet: OpenSim::Set< OpenSim::MarkerWeight > const &
        modelUnits: OpenSim::Units

        __init__(OpenSim::MarkersReference self, std::string const & markerFileName, SetMarkerWeights markerWeightSet) -> MarkersReference

        Parameters
        ----------
        markerFileName: std::string const &
        markerWeightSet: OpenSim::Set< OpenSim::MarkerWeight > const &

        __init__(OpenSim::MarkersReference self, TimeSeriesTableVec3 markerData, SetMarkerWeights markerWeightSet, Units units) -> MarkersReference

        Parameters
        ----------
        markerData: OpenSim::TimeSeriesTable_< SimTK::Vec3 > const &
        markerWeightSet: OpenSim::Set< OpenSim::MarkerWeight > const &
        units: OpenSim::Units

        __init__(OpenSim::MarkersReference self, TimeSeriesTableVec3 markerData, SetMarkerWeights markerWeightSet) -> MarkersReference

        Parameters
        ----------
        markerData: OpenSim::TimeSeriesTable_< SimTK::Vec3 > const &
        markerWeightSet: OpenSim::Set< OpenSim::MarkerWeight > const &

        """
        this = _simulation.new_MarkersReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_MarkersReference
    __del__ = lambda self: None

    def initializeFromMarkersFile(self, *args):
        """
        initializeFromMarkersFile(MarkersReference self, std::string const & markerFile, SetMarkerWeights markerWeightSet, Units modelUnits)

        Parameters
        ----------
        markerFile: std::string const &
        markerWeightSet: OpenSim::Set< OpenSim::MarkerWeight > const &
        modelUnits: OpenSim::Units

        initializeFromMarkersFile(MarkersReference self, std::string const & markerFile, SetMarkerWeights markerWeightSet)

        Parameters
        ----------
        markerFile: std::string const &
        markerWeightSet: OpenSim::Set< OpenSim::MarkerWeight > const &

        """
        return _simulation.MarkersReference_initializeFromMarkersFile(self, *args)


    def getNumRefs(self):
        """
        getNumRefs(MarkersReference self) -> int

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_getNumRefs(self)


    def getValidTimeRange(self):
        """
        getValidTimeRange(MarkersReference self) -> Vec2

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_getValidTimeRange(self)


    def getNames(self):
        """
        getNames(MarkersReference self) -> SimTKArrayString

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_getNames(self)


    def getValues(self, s, values):
        """
        getValues(MarkersReference self, State s, SimTKArrayVec3 values)

        Parameters
        ----------
        s: SimTK::State const &
        values: SimTK::Array_< SimTK::Vec3,unsigned int > &

        """
        return _simulation.MarkersReference_getValues(self, s, values)


    def getWeights(self, s, weights):
        """
        getWeights(MarkersReference self, State s, SimTKArrayDouble weights)

        Parameters
        ----------
        s: SimTK::State const &
        weights: SimTK::Array_< double,unsigned int > &

        """
        return _simulation.MarkersReference_getWeights(self, s, weights)


    def getMarkerTable(self):
        """
        getMarkerTable(MarkersReference self) -> TimeSeriesTableVec3

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_getMarkerTable(self)


    def getSamplingFrequency(self):
        """
        getSamplingFrequency(MarkersReference self) -> double

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_getSamplingFrequency(self)


    def getMarkerWeightSet(self):
        """
        getMarkerWeightSet(MarkersReference self) -> SetMarkerWeights

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_getMarkerWeightSet(self)


    def updMarkerWeightSet(self):
        """
        updMarkerWeightSet(MarkersReference self) -> SetMarkerWeights

        Parameters
        ----------
        self: OpenSim::MarkersReference *

        """
        return _simulation.MarkersReference_updMarkerWeightSet(self)


    def setMarkerWeightSet(self, markerWeights):
        """
        setMarkerWeightSet(MarkersReference self, SetMarkerWeights markerWeights)

        Parameters
        ----------
        markerWeights: OpenSim::Set< OpenSim::MarkerWeight > const &

        """
        return _simulation.MarkersReference_setMarkerWeightSet(self, markerWeights)


    def setDefaultWeight(self, weight):
        """
        setDefaultWeight(MarkersReference self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _simulation.MarkersReference_setDefaultWeight(self, weight)


    def getNumFrames(self):
        """
        getNumFrames(MarkersReference self) -> size_t

        Parameters
        ----------
        self: OpenSim::MarkersReference const *

        """
        return _simulation.MarkersReference_getNumFrames(self)

MarkersReference_swigregister = _simulation.MarkersReference_swigregister
MarkersReference_swigregister(MarkersReference)

def MarkersReference_safeDownCast(obj):
    """
    MarkersReference_safeDownCast(OpenSimObject obj) -> MarkersReference

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.MarkersReference_safeDownCast(obj)

def MarkersReference_getClassName():
    """MarkersReference_getClassName() -> std::string const &"""
    return _simulation.MarkersReference_getClassName()

class SetMarkerWeights(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(MarkerWeight,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetMarkerWeights, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetMarkerWeights, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetMarkerWeights

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetMarkerWeights_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetMarkerWeights self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetMarkerWeights_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetMarkerWeights_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetMarkerWeights self) -> SetMarkerWeights

        Parameters
        ----------
        self: OpenSim::Set< MarkerWeight,OpenSim::Object > const *

        """
        return _simulation.SetMarkerWeights_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetMarkerWeights self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< MarkerWeight,OpenSim::Object > const *

        """
        return _simulation.SetMarkerWeights_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetMarkerWeights
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(MarkerWeight,OpenSim::Object)> self) -> SetMarkerWeights
        __init__(OpenSim::Set<(MarkerWeight,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetMarkerWeights

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(MarkerWeight,OpenSim::Object)> self, std::string const & aFileName) -> SetMarkerWeights

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(MarkerWeight,OpenSim::Object)> self, SetMarkerWeights aSet) -> SetMarkerWeights

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::MarkerWeight,OpenSim::Object > const &

        """
        this = _simulation.new_SetMarkerWeights(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetMarkerWeights self)

        Parameters
        ----------
        self: OpenSim::Set< MarkerWeight,OpenSim::Object > *

        """
        return _simulation.SetMarkerWeights_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetMarkerWeights self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetMarkerWeights_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetMarkerWeights self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetMarkerWeights_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetMarkerWeights self) -> int

        Parameters
        ----------
        self: OpenSim::Set< MarkerWeight,OpenSim::Object > const *

        """
        return _simulation.SetMarkerWeights_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetMarkerWeights self, MarkerWeight aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::MarkerWeight const *
        aStartIndex: int

        getIndex(SetMarkerWeights self, MarkerWeight aObject) -> int

        Parameters
        ----------
        aObject: OpenSim::MarkerWeight const *

        getIndex(SetMarkerWeights self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetMarkerWeights self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMarkerWeights_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetMarkerWeights self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMarkerWeights_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetMarkerWeights self, MarkerWeight aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MarkerWeight *

        """
        return _simulation.SetMarkerWeights_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetMarkerWeights self, MarkerWeight aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MarkerWeight const &

        """
        return _simulation.SetMarkerWeights_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetMarkerWeights self, int aIndex, MarkerWeight aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::MarkerWeight *

        """
        return _simulation.SetMarkerWeights_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetMarkerWeights self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetMarkerWeights self, MarkerWeight aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::MarkerWeight const *

        """
        return _simulation.SetMarkerWeights_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetMarkerWeights self)

        Parameters
        ----------
        self: OpenSim::Set< MarkerWeight,OpenSim::Object > *

        """
        return _simulation.SetMarkerWeights_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetMarkerWeights self, int aIndex, MarkerWeight aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::MarkerWeight *
        preserveGroups: bool

        set(SetMarkerWeights self, int aIndex, MarkerWeight aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::MarkerWeight *

        """
        return _simulation.SetMarkerWeights_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetMarkerWeights self, int aIndex) -> MarkerWeight

        Parameters
        ----------
        aIndex: int

        get(SetMarkerWeights self, std::string const & aName) -> MarkerWeight

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMarkerWeights_get(self, *args)


    def contains(self, aName):
        """
        contains(SetMarkerWeights self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetMarkerWeights_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetMarkerWeights self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMarkerWeights_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetMarkerWeights self) -> int

        Parameters
        ----------
        self: OpenSim::Set< MarkerWeight,OpenSim::Object > const *

        """
        return _simulation.SetMarkerWeights_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetMarkerWeights self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetMarkerWeights_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetMarkerWeights self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetMarkerWeights_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetMarkerWeights self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetMarkerWeights_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetMarkerWeights self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetMarkerWeights_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetMarkerWeights self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetMarkerWeights_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetMarkerWeights self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetMarkerWeights self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetMarkerWeights_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetMarkerWeights_swigregister = _simulation.SetMarkerWeights_swigregister
SetMarkerWeights_swigregister(SetMarkerWeights)

def SetMarkerWeights_safeDownCast(obj):
    """
    SetMarkerWeights_safeDownCast(OpenSimObject obj) -> SetMarkerWeights

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetMarkerWeights_safeDownCast(obj)

def SetMarkerWeights_getClassName():
    """SetMarkerWeights_getClassName() -> std::string const &"""
    return _simulation.SetMarkerWeights_getClassName()

class CoordinateReference(ReferenceDouble):
    """Proxy of C++ OpenSim::CoordinateReference class."""

    __swig_setmethods__ = {}
    for _s in [ReferenceDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateReference, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateReference, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> CoordinateReference

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.CoordinateReference_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(CoordinateReference self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.CoordinateReference_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.CoordinateReference_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(CoordinateReference self) -> CoordinateReference

        Parameters
        ----------
        self: OpenSim::CoordinateReference const *

        """
        return _simulation.CoordinateReference_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(CoordinateReference self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::CoordinateReference const *

        """
        return _simulation.CoordinateReference_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::CoordinateReference self) -> CoordinateReference
        __init__(OpenSim::CoordinateReference self, std::string const name, Function ReferenceFunction) -> CoordinateReference

        Parameters
        ----------
        name: std::string const
        ReferenceFunction: OpenSim::Function const &

        __init__(OpenSim::CoordinateReference self, CoordinateReference source) -> CoordinateReference

        Parameters
        ----------
        source: OpenSim::CoordinateReference const &

        """
        this = _simulation.new_CoordinateReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_CoordinateReference
    __del__ = lambda self: None

    def getNumRefs(self):
        """
        getNumRefs(CoordinateReference self) -> int

        Parameters
        ----------
        self: OpenSim::CoordinateReference const *

        """
        return _simulation.CoordinateReference_getNumRefs(self)


    def getNames(self):
        """
        getNames(CoordinateReference self) -> SimTKArrayString

        Parameters
        ----------
        self: OpenSim::CoordinateReference const *

        """
        return _simulation.CoordinateReference_getNames(self)


    def getValues(self, s, values):
        """
        getValues(CoordinateReference self, State s, SimTKArrayDouble values)

        Parameters
        ----------
        s: SimTK::State const &
        values: SimTK::Array_< double,unsigned int > &

        """
        return _simulation.CoordinateReference_getValues(self, s, values)


    def getWeights(self, s, weights):
        """
        getWeights(CoordinateReference self, State s, SimTKArrayDouble weights)

        Parameters
        ----------
        s: SimTK::State const &
        weights: SimTK::Array_< double,unsigned int > &

        """
        return _simulation.CoordinateReference_getWeights(self, s, weights)


    def getValue(self, s):
        """
        getValue(CoordinateReference self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.CoordinateReference_getValue(self, s)


    def getSpeedValue(self, s):
        """
        getSpeedValue(CoordinateReference self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.CoordinateReference_getSpeedValue(self, s)


    def getAccelerationValue(self, s):
        """
        getAccelerationValue(CoordinateReference self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.CoordinateReference_getAccelerationValue(self, s)


    def getWeight(self, s):
        """
        getWeight(CoordinateReference self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.CoordinateReference_getWeight(self, s)


    def setWeight(self, weight):
        """
        setWeight(CoordinateReference self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _simulation.CoordinateReference_setWeight(self, weight)


    def setValueFunction(self, function):
        """
        setValueFunction(CoordinateReference self, Function function)

        Parameters
        ----------
        function: OpenSim::Function const &

        """
        return _simulation.CoordinateReference_setValueFunction(self, function)

CoordinateReference_swigregister = _simulation.CoordinateReference_swigregister
CoordinateReference_swigregister(CoordinateReference)

def CoordinateReference_safeDownCast(obj):
    """
    CoordinateReference_safeDownCast(OpenSimObject obj) -> CoordinateReference

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.CoordinateReference_safeDownCast(obj)

def CoordinateReference_getClassName():
    """CoordinateReference_getClassName() -> std::string const &"""
    return _simulation.CoordinateReference_getClassName()

class SetOientationWeights(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::Set<(OrientationWeight,OpenSim::Object)> class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetOientationWeights, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetOientationWeights, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> SetOientationWeights

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.SetOientationWeights_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(SetOientationWeights self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.SetOientationWeights_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.SetOientationWeights_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(SetOientationWeights self) -> SetOientationWeights

        Parameters
        ----------
        self: OpenSim::Set< OrientationWeight,OpenSim::Object > const *

        """
        return _simulation.SetOientationWeights_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(SetOientationWeights self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Set< OrientationWeight,OpenSim::Object > const *

        """
        return _simulation.SetOientationWeights_getConcreteClassName(self)

    __swig_destroy__ = _simulation.delete_SetOientationWeights
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::Set<(OrientationWeight,OpenSim::Object)> self) -> SetOientationWeights
        __init__(OpenSim::Set<(OrientationWeight,OpenSim::Object)> self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetOientationWeights

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSim::Set<(OrientationWeight,OpenSim::Object)> self, std::string const & aFileName) -> SetOientationWeights

        Parameters
        ----------
        aFileName: std::string const &

        __init__(OpenSim::Set<(OrientationWeight,OpenSim::Object)> self, SetOientationWeights aSet) -> SetOientationWeights

        Parameters
        ----------
        aSet: OpenSim::Set< OrientationWeight,OpenSim::Object > const &

        """
        this = _simulation.new_SetOientationWeights(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupGroups(self):
        """
        setupGroups(SetOientationWeights self)

        Parameters
        ----------
        self: OpenSim::Set< OrientationWeight,OpenSim::Object > *

        """
        return _simulation.SetOientationWeights_setupGroups(self)


    def setMemoryOwner(self, aTrueFalse):
        """
        setMemoryOwner(SetOientationWeights self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _simulation.SetOientationWeights_setMemoryOwner(self, aTrueFalse)


    def setSize(self, aSize):
        """
        setSize(SetOientationWeights self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _simulation.SetOientationWeights_setSize(self, aSize)


    def getSize(self):
        """
        getSize(SetOientationWeights self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OrientationWeight,OpenSim::Object > const *

        """
        return _simulation.SetOientationWeights_getSize(self)


    def getIndex(self, *args):
        """
        getIndex(SetOientationWeights self, OrientationWeight const * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OrientationWeight const *
        aStartIndex: int

        getIndex(SetOientationWeights self, OrientationWeight const * aObject) -> int

        Parameters
        ----------
        aObject: OrientationWeight const *

        getIndex(SetOientationWeights self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        getIndex(SetOientationWeights self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetOientationWeights_getIndex(self, *args)


    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        """
        getGroupNamesContaining(SetOientationWeights self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetOientationWeights_getGroupNamesContaining(self, aObjectName, rGroupNames)


    def adoptAndAppend(self, aObject):
        """
        adoptAndAppend(SetOientationWeights self, OrientationWeight * aObject) -> bool

        Parameters
        ----------
        aObject: OrientationWeight *

        """
        return _simulation.SetOientationWeights_adoptAndAppend(self, aObject)


    def cloneAndAppend(self, aObject):
        """
        cloneAndAppend(SetOientationWeights self, OrientationWeight const & aObject) -> bool

        Parameters
        ----------
        aObject: OrientationWeight const &

        """
        return _simulation.SetOientationWeights_cloneAndAppend(self, aObject)


    def insert(self, aIndex, aObject):
        """
        insert(SetOientationWeights self, int aIndex, OrientationWeight * aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OrientationWeight *

        """
        return _simulation.SetOientationWeights_insert(self, aIndex, aObject)


    def remove(self, *args):
        """
        remove(SetOientationWeights self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetOientationWeights self, OrientationWeight const * aObject) -> bool

        Parameters
        ----------
        aObject: OrientationWeight const *

        """
        return _simulation.SetOientationWeights_remove(self, *args)


    def clearAndDestroy(self):
        """
        clearAndDestroy(SetOientationWeights self)

        Parameters
        ----------
        self: OpenSim::Set< OrientationWeight,OpenSim::Object > *

        """
        return _simulation.SetOientationWeights_clearAndDestroy(self)


    def set(self, aIndex, aObject, preserveGroups=False):
        """
        set(SetOientationWeights self, int aIndex, OrientationWeight * aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OrientationWeight *
        preserveGroups: bool

        set(SetOientationWeights self, int aIndex, OrientationWeight * aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OrientationWeight *

        """
        return _simulation.SetOientationWeights_set(self, aIndex, aObject, preserveGroups)


    def get(self, *args):
        """
        get(SetOientationWeights self, int aIndex) -> OrientationWeight

        Parameters
        ----------
        aIndex: int

        get(SetOientationWeights self, std::string const & aName) -> OrientationWeight &

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetOientationWeights_get(self, *args)


    def contains(self, aName):
        """
        contains(SetOientationWeights self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.SetOientationWeights_contains(self, aName)


    def getNames(self, rNames):
        """
        getNames(SetOientationWeights self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetOientationWeights_getNames(self, rNames)


    def getNumGroups(self):
        """
        getNumGroups(SetOientationWeights self) -> int

        Parameters
        ----------
        self: OpenSim::Set< OrientationWeight,OpenSim::Object > const *

        """
        return _simulation.SetOientationWeights_getNumGroups(self)


    def addGroup(self, aGroupName):
        """
        addGroup(SetOientationWeights self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetOientationWeights_addGroup(self, aGroupName)


    def removeGroup(self, aGroupName):
        """
        removeGroup(SetOientationWeights self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _simulation.SetOientationWeights_removeGroup(self, aGroupName)


    def renameGroup(self, oldGroupName, newGroupName):
        """
        renameGroup(SetOientationWeights self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _simulation.SetOientationWeights_renameGroup(self, oldGroupName, newGroupName)


    def addObjectToGroup(self, aGroupName, aObjectName):
        """
        addObjectToGroup(SetOientationWeights self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _simulation.SetOientationWeights_addObjectToGroup(self, aGroupName, aObjectName)


    def getGroupNames(self, rGroupNames):
        """
        getGroupNames(SetOientationWeights self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _simulation.SetOientationWeights_getGroupNames(self, rGroupNames)


    def getGroup(self, *args):
        """
        getGroup(SetOientationWeights self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetOientationWeights self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _simulation.SetOientationWeights_getGroup(self, *args)


    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1

SetOientationWeights_swigregister = _simulation.SetOientationWeights_swigregister
SetOientationWeights_swigregister(SetOientationWeights)

def SetOientationWeights_safeDownCast(obj):
    """
    SetOientationWeights_safeDownCast(OpenSimObject obj) -> SetOientationWeights

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.SetOientationWeights_safeDownCast(obj)

def SetOientationWeights_getClassName():
    """SetOientationWeights_getClassName() -> std::string const &"""
    return _simulation.SetOientationWeights_getClassName()

class OrientationWeight(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::OrientationWeight class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrientationWeight, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrientationWeight, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> OrientationWeight

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.OrientationWeight_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(OrientationWeight self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.OrientationWeight_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.OrientationWeight_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(OrientationWeight self) -> OrientationWeight

        Parameters
        ----------
        self: OpenSim::OrientationWeight const *

        """
        return _simulation.OrientationWeight_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(OrientationWeight self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::OrientationWeight const *

        """
        return _simulation.OrientationWeight_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::OrientationWeight self) -> OrientationWeight
        __init__(OpenSim::OrientationWeight self, std::string name, double weight) -> OrientationWeight

        Parameters
        ----------
        name: std::string
        weight: double

        """
        this = _simulation.new_OrientationWeight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setWeight(self, weight):
        """
        setWeight(OrientationWeight self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _simulation.OrientationWeight_setWeight(self, weight)


    def getWeight(self):
        """
        getWeight(OrientationWeight self) -> double

        Parameters
        ----------
        self: OpenSim::OrientationWeight const *

        """
        return _simulation.OrientationWeight_getWeight(self)

    __swig_destroy__ = _simulation.delete_OrientationWeight
    __del__ = lambda self: None
OrientationWeight_swigregister = _simulation.OrientationWeight_swigregister
OrientationWeight_swigregister(OrientationWeight)

def OrientationWeight_safeDownCast(obj):
    """
    OrientationWeight_safeDownCast(OpenSimObject obj) -> OrientationWeight

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.OrientationWeight_safeDownCast(obj)

def OrientationWeight_getClassName():
    """OrientationWeight_getClassName() -> std::string const &"""
    return _simulation.OrientationWeight_getClassName()

class OrientationsReference(ReferenceRotation):
    """Proxy of C++ OpenSim::OrientationsReference class."""

    __swig_setmethods__ = {}
    for _s in [ReferenceRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrientationsReference, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrientationsReference, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> OrientationsReference

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.OrientationsReference_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(OrientationsReference self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.OrientationsReference_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.OrientationsReference_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(OrientationsReference self) -> OrientationsReference

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(OrientationsReference self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_getConcreteClassName(self)


    def copyProperty_orientation_file(self, source):
        """
        copyProperty_orientation_file(OrientationsReference self, OrientationsReference source)

        Parameters
        ----------
        source: OpenSim::OrientationsReference::Self const &

        """
        return _simulation.OrientationsReference_copyProperty_orientation_file(self, source)


    def append_orientation_file(self, value):
        """
        append_orientation_file(OrientationsReference self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.OrientationsReference_append_orientation_file(self, value)


    def constructProperty_orientation_file(self, initValue):
        """
        constructProperty_orientation_file(OrientationsReference self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.OrientationsReference_constructProperty_orientation_file(self, initValue)


    def get_orientation_file(self, *args):
        """
        get_orientation_file(OrientationsReference self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_orientation_file(OrientationsReference self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_get_orientation_file(self, *args)


    def upd_orientation_file(self, *args):
        """
        upd_orientation_file(OrientationsReference self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_orientation_file(OrientationsReference self) -> std::string &

        Parameters
        ----------
        self: OpenSim::OrientationsReference *

        """
        return _simulation.OrientationsReference_upd_orientation_file(self, *args)


    def set_orientation_file(self, *args):
        """
        set_orientation_file(OrientationsReference self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_orientation_file(OrientationsReference self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.OrientationsReference_set_orientation_file(self, *args)


    def copyProperty_orientation_weights(self, source):
        """
        copyProperty_orientation_weights(OrientationsReference self, OrientationsReference source)

        Parameters
        ----------
        source: OpenSim::OrientationsReference::Self const &

        """
        return _simulation.OrientationsReference_copyProperty_orientation_weights(self, source)


    def append_orientation_weights(self, value):
        """
        append_orientation_weights(OrientationsReference self, OpenSim::Set< OpenSim::OrientationWeight > const & value) -> int

        Parameters
        ----------
        value: OpenSim::Set< OpenSim::OrientationWeight > const &

        """
        return _simulation.OrientationsReference_append_orientation_weights(self, value)


    def constructProperty_orientation_weights(self, initValue):
        """
        constructProperty_orientation_weights(OrientationsReference self, OpenSim::Set< OpenSim::OrientationWeight > const & initValue)

        Parameters
        ----------
        initValue: OpenSim::Set< OpenSim::OrientationWeight > const &

        """
        return _simulation.OrientationsReference_constructProperty_orientation_weights(self, initValue)


    def get_orientation_weights(self, *args):
        """
        get_orientation_weights(OrientationsReference self, int i) -> OpenSim::Set< OpenSim::OrientationWeight > const

        Parameters
        ----------
        i: int

        get_orientation_weights(OrientationsReference self) -> OpenSim::Set< OpenSim::OrientationWeight > const &

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_get_orientation_weights(self, *args)


    def upd_orientation_weights(self, *args):
        """
        upd_orientation_weights(OrientationsReference self, int i) -> OpenSim::Set< OpenSim::OrientationWeight >

        Parameters
        ----------
        i: int

        upd_orientation_weights(OrientationsReference self) -> OpenSim::Set< OpenSim::OrientationWeight > &

        Parameters
        ----------
        self: OpenSim::OrientationsReference *

        """
        return _simulation.OrientationsReference_upd_orientation_weights(self, *args)


    def set_orientation_weights(self, *args):
        """
        set_orientation_weights(OrientationsReference self, int i, OpenSim::Set< OpenSim::OrientationWeight > const & value)

        Parameters
        ----------
        i: int
        value: OpenSim::Set< OpenSim::OrientationWeight > const &

        set_orientation_weights(OrientationsReference self, OpenSim::Set< OpenSim::OrientationWeight > const & value)

        Parameters
        ----------
        value: OpenSim::Set< OpenSim::OrientationWeight > const &

        """
        return _simulation.OrientationsReference_set_orientation_weights(self, *args)


    def copyProperty_default_weight(self, source):
        """
        copyProperty_default_weight(OrientationsReference self, OrientationsReference source)

        Parameters
        ----------
        source: OpenSim::OrientationsReference::Self const &

        """
        return _simulation.OrientationsReference_copyProperty_default_weight(self, source)


    def append_default_weight(self, value):
        """
        append_default_weight(OrientationsReference self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.OrientationsReference_append_default_weight(self, value)


    def constructProperty_default_weight(self, initValue):
        """
        constructProperty_default_weight(OrientationsReference self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.OrientationsReference_constructProperty_default_weight(self, initValue)


    def get_default_weight(self, *args):
        """
        get_default_weight(OrientationsReference self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_weight(OrientationsReference self) -> double const &

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_get_default_weight(self, *args)


    def upd_default_weight(self, *args):
        """
        upd_default_weight(OrientationsReference self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_weight(OrientationsReference self) -> double &

        Parameters
        ----------
        self: OpenSim::OrientationsReference *

        """
        return _simulation.OrientationsReference_upd_default_weight(self, *args)


    def set_default_weight(self, *args):
        """
        set_default_weight(OrientationsReference self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_weight(OrientationsReference self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.OrientationsReference_set_default_weight(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::OrientationsReference self) -> OrientationsReference
        __init__(OpenSim::OrientationsReference self, std::string const & orientationFileName, Units modelUnits) -> OrientationsReference

        Parameters
        ----------
        orientationFileName: std::string const &
        modelUnits: OpenSim::Units

        __init__(OpenSim::OrientationsReference self, std::string const & orientationFileName) -> OrientationsReference

        Parameters
        ----------
        orientationFileName: std::string const &

        __init__(OpenSim::OrientationsReference self, TimeSeriesTableRotation orientationData, OpenSim::Set< OpenSim::OrientationWeight > const * orientationWeightSet=None) -> OrientationsReference

        Parameters
        ----------
        orientationData: OpenSim::TimeSeriesTable_< SimTK::Rotation_< double > > const &
        orientationWeightSet: OpenSim::Set< OpenSim::OrientationWeight > const *

        __init__(OpenSim::OrientationsReference self, TimeSeriesTableRotation orientationData) -> OrientationsReference

        Parameters
        ----------
        orientationData: OpenSim::TimeSeriesTable_< SimTK::Rotation_< double > > const &

        """
        this = _simulation.new_OrientationsReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_OrientationsReference
    __del__ = lambda self: None

    def loadOrientationsEulerAnglesFile(self, *args):
        """
        loadOrientationsEulerAnglesFile(OrientationsReference self, std::string const eulerAnglesXYZ, Units modelUnits)

        Parameters
        ----------
        eulerAnglesXYZ: std::string const
        modelUnits: OpenSim::Units

        loadOrientationsEulerAnglesFile(OrientationsReference self, std::string const eulerAnglesXYZ)

        Parameters
        ----------
        eulerAnglesXYZ: std::string const

        """
        return _simulation.OrientationsReference_loadOrientationsEulerAnglesFile(self, *args)


    def getNumRefs(self):
        """
        getNumRefs(OrientationsReference self) -> int

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_getNumRefs(self)


    def getValidTimeRange(self):
        """
        getValidTimeRange(OrientationsReference self) -> Vec2

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_getValidTimeRange(self)


    def getTimes(self):
        """
        getTimes(OrientationsReference self) -> StdVectorDouble

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_getTimes(self)


    def getNames(self):
        """
        getNames(OrientationsReference self) -> SimTKArrayString

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_getNames(self)


    def getValues(self, s, values):
        """
        getValues(OrientationsReference self, State s, SimTKArrayRotation values)

        Parameters
        ----------
        s: SimTK::State const &
        values: SimTK::Array_< SimTK::Rotation_< double >,unsigned int > &

        """
        return _simulation.OrientationsReference_getValues(self, s, values)


    def getWeights(self, s, weights):
        """
        getWeights(OrientationsReference self, State s, SimTKArrayDouble weights)

        Parameters
        ----------
        s: SimTK::State const &
        weights: SimTK::Array_< double,unsigned int > &

        """
        return _simulation.OrientationsReference_getWeights(self, s, weights)


    def getSamplingFrequency(self):
        """
        getSamplingFrequency(OrientationsReference self) -> double

        Parameters
        ----------
        self: OpenSim::OrientationsReference const *

        """
        return _simulation.OrientationsReference_getSamplingFrequency(self)


    def updOrientationWeightSet(self):
        """
        updOrientationWeightSet(OrientationsReference self) -> OpenSim::Set< OpenSim::OrientationWeight > &

        Parameters
        ----------
        self: OpenSim::OrientationsReference *

        """
        return _simulation.OrientationsReference_updOrientationWeightSet(self)


    def setOrientationWeightSet(self, orientationWeights):
        """
        setOrientationWeightSet(OrientationsReference self, OpenSim::Set< OpenSim::OrientationWeight > const & orientationWeights)

        Parameters
        ----------
        orientationWeights: OpenSim::Set< OpenSim::OrientationWeight > const &

        """
        return _simulation.OrientationsReference_setOrientationWeightSet(self, orientationWeights)


    def setDefaultWeight(self, weight):
        """
        setDefaultWeight(OrientationsReference self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _simulation.OrientationsReference_setDefaultWeight(self, weight)

OrientationsReference_swigregister = _simulation.OrientationsReference_swigregister
OrientationsReference_swigregister(OrientationsReference)

def OrientationsReference_safeDownCast(obj):
    """
    OrientationsReference_safeDownCast(OpenSimObject obj) -> OrientationsReference

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.OrientationsReference_safeDownCast(obj)

def OrientationsReference_getClassName():
    """OrientationsReference_getClassName() -> std::string const &"""
    return _simulation.OrientationsReference_getClassName()

class AssemblySolver(Solver):
    """Proxy of C++ OpenSim::AssemblySolver class."""

    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssemblySolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssemblySolver, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> AssemblySolver

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.AssemblySolver_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(AssemblySolver self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.AssemblySolver_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.AssemblySolver_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(AssemblySolver self) -> AssemblySolver

        Parameters
        ----------
        self: OpenSim::AssemblySolver const *

        """
        return _simulation.AssemblySolver_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(AssemblySolver self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::AssemblySolver const *

        """
        return _simulation.AssemblySolver_getConcreteClassName(self)


    def __init__(self, *args):
        """
        __init__(OpenSim::AssemblySolver self, Model model, SimTKArrayCoordinateReference coordinateReferences, double constraintWeight) -> AssemblySolver

        Parameters
        ----------
        model: OpenSim::Model const &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > const &
        constraintWeight: double

        __init__(OpenSim::AssemblySolver self, Model model, SimTKArrayCoordinateReference coordinateReferences) -> AssemblySolver

        Parameters
        ----------
        model: OpenSim::Model const &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > const &

        """
        this = _simulation.new_AssemblySolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_AssemblySolver
    __del__ = lambda self: None

    def setAccuracy(self, accuracy):
        """
        setAccuracy(AssemblySolver self, double accuracy)

        Parameters
        ----------
        accuracy: double

        """
        return _simulation.AssemblySolver_setAccuracy(self, accuracy)


    def setConstraintWeight(self, weight):
        """
        setConstraintWeight(AssemblySolver self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _simulation.AssemblySolver_setConstraintWeight(self, weight)


    def getCoordinateReferences(self):
        """
        getCoordinateReferences(AssemblySolver self) -> SimTKArrayCoordinateReference

        Parameters
        ----------
        self: OpenSim::AssemblySolver const *

        """
        return _simulation.AssemblySolver_getCoordinateReferences(self)


    def updateCoordinateReference(self, coordName, value, weight=1.0):
        """
        updateCoordinateReference(AssemblySolver self, std::string const & coordName, double value, double weight=1.0)

        Parameters
        ----------
        coordName: std::string const &
        value: double
        weight: double

        updateCoordinateReference(AssemblySolver self, std::string const & coordName, double value)

        Parameters
        ----------
        coordName: std::string const &
        value: double

        """
        return _simulation.AssemblySolver_updateCoordinateReference(self, coordName, value, weight)


    def assemble(self, s):
        """
        assemble(AssemblySolver self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.AssemblySolver_assemble(self, s)


    def track(self, s):
        """
        track(AssemblySolver self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.AssemblySolver_track(self, s)


    def getAssembler(self):
        """
        getAssembler(AssemblySolver self) -> SimTK::Assembler const &

        Parameters
        ----------
        self: OpenSim::AssemblySolver const *

        """
        return _simulation.AssemblySolver_getAssembler(self)

AssemblySolver_swigregister = _simulation.AssemblySolver_swigregister
AssemblySolver_swigregister(AssemblySolver)

def AssemblySolver_safeDownCast(obj):
    """
    AssemblySolver_safeDownCast(OpenSimObject obj) -> AssemblySolver

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.AssemblySolver_safeDownCast(obj)

def AssemblySolver_getClassName():
    """AssemblySolver_getClassName() -> std::string const &"""
    return _simulation.AssemblySolver_getClassName()

class InverseKinematicsSolver(AssemblySolver):
    """Proxy of C++ OpenSim::InverseKinematicsSolver class."""

    __swig_setmethods__ = {}
    for _s in [AssemblySolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseKinematicsSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [AssemblySolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseKinematicsSolver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _simulation.delete_InverseKinematicsSolver
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::InverseKinematicsSolver self, Model model, MarkersReference markersReference, SimTKArrayCoordinateReference coordinateReferences, double constraintWeight) -> InverseKinematicsSolver

        Parameters
        ----------
        model: OpenSim::Model const &
        markersReference: OpenSim::MarkersReference const &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &
        constraintWeight: double

        __init__(OpenSim::InverseKinematicsSolver self, Model model, MarkersReference markersReference, SimTKArrayCoordinateReference coordinateReferences) -> InverseKinematicsSolver

        Parameters
        ----------
        model: OpenSim::Model const &
        markersReference: OpenSim::MarkersReference const &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &

        __init__(OpenSim::InverseKinematicsSolver self, Model model, MarkersReference markersReference, OrientationsReference orientationsReference, SimTKArrayCoordinateReference coordinateReferences, double constraintWeight) -> InverseKinematicsSolver

        Parameters
        ----------
        model: OpenSim::Model const &
        markersReference: OpenSim::MarkersReference const &
        orientationsReference: OpenSim::OrientationsReference const &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &
        constraintWeight: double

        __init__(OpenSim::InverseKinematicsSolver self, Model model, MarkersReference markersReference, OrientationsReference orientationsReference, SimTKArrayCoordinateReference coordinateReferences) -> InverseKinematicsSolver

        Parameters
        ----------
        model: OpenSim::Model const &
        markersReference: OpenSim::MarkersReference const &
        orientationsReference: OpenSim::OrientationsReference const &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &

        """
        this = _simulation.new_InverseKinematicsSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumMarkersInUse(self):
        """
        getNumMarkersInUse(InverseKinematicsSolver self) -> int

        Parameters
        ----------
        self: OpenSim::InverseKinematicsSolver const *

        """
        return _simulation.InverseKinematicsSolver_getNumMarkersInUse(self)


    def getNumOrientationSensorsInUse(self):
        """
        getNumOrientationSensorsInUse(InverseKinematicsSolver self) -> int

        Parameters
        ----------
        self: OpenSim::InverseKinematicsSolver const *

        """
        return _simulation.InverseKinematicsSolver_getNumOrientationSensorsInUse(self)


    def updateMarkerWeight(self, *args):
        """
        updateMarkerWeight(InverseKinematicsSolver self, std::string const & markerName, double value)

        Parameters
        ----------
        markerName: std::string const &
        value: double

        updateMarkerWeight(InverseKinematicsSolver self, int markerIndex, double value)

        Parameters
        ----------
        markerIndex: int
        value: double

        """
        return _simulation.InverseKinematicsSolver_updateMarkerWeight(self, *args)


    def updateMarkerWeights(self, weights):
        """
        updateMarkerWeights(InverseKinematicsSolver self, SimTKArrayDouble weights)

        Parameters
        ----------
        weights: SimTK::Array_< double,unsigned int > const &

        """
        return _simulation.InverseKinematicsSolver_updateMarkerWeights(self, weights)


    def updateOrientationWeight(self, *args):
        """
        updateOrientationWeight(InverseKinematicsSolver self, std::string const & orientationName, double value)

        Parameters
        ----------
        orientationName: std::string const &
        value: double

        updateOrientationWeight(InverseKinematicsSolver self, int orientationIndex, double value)

        Parameters
        ----------
        orientationIndex: int
        value: double

        """
        return _simulation.InverseKinematicsSolver_updateOrientationWeight(self, *args)


    def updateOrientationWeights(self, weights):
        """
        updateOrientationWeights(InverseKinematicsSolver self, SimTKArrayDouble weights)

        Parameters
        ----------
        weights: SimTK::Array_< double,unsigned int > const &

        """
        return _simulation.InverseKinematicsSolver_updateOrientationWeights(self, weights)


    def computeCurrentMarkerLocation(self, *args):
        """
        computeCurrentMarkerLocation(InverseKinematicsSolver self, std::string const & markerName) -> Vec3

        Parameters
        ----------
        markerName: std::string const &

        computeCurrentMarkerLocation(InverseKinematicsSolver self, int markerIndex) -> Vec3

        Parameters
        ----------
        markerIndex: int

        """
        return _simulation.InverseKinematicsSolver_computeCurrentMarkerLocation(self, *args)


    def computeCurrentMarkerLocations(self, markerLocations):
        """
        computeCurrentMarkerLocations(InverseKinematicsSolver self, SimTKArrayVec3 markerLocations)

        Parameters
        ----------
        markerLocations: SimTK::Array_< SimTK::Vec3,unsigned int > &

        """
        return _simulation.InverseKinematicsSolver_computeCurrentMarkerLocations(self, markerLocations)


    def computeCurrentMarkerError(self, *args):
        """
        computeCurrentMarkerError(InverseKinematicsSolver self, std::string const & markerName) -> double

        Parameters
        ----------
        markerName: std::string const &

        computeCurrentMarkerError(InverseKinematicsSolver self, int markerIndex) -> double

        Parameters
        ----------
        markerIndex: int

        """
        return _simulation.InverseKinematicsSolver_computeCurrentMarkerError(self, *args)


    def computeCurrentMarkerErrors(self, markerErrors):
        """
        computeCurrentMarkerErrors(InverseKinematicsSolver self, SimTKArrayDouble markerErrors)

        Parameters
        ----------
        markerErrors: SimTK::Array_< double,unsigned int > &

        """
        return _simulation.InverseKinematicsSolver_computeCurrentMarkerErrors(self, markerErrors)


    def computeCurrentSquaredMarkerError(self, *args):
        """
        computeCurrentSquaredMarkerError(InverseKinematicsSolver self, std::string const & markerName) -> double

        Parameters
        ----------
        markerName: std::string const &

        computeCurrentSquaredMarkerError(InverseKinematicsSolver self, int markerIndex) -> double

        Parameters
        ----------
        markerIndex: int

        """
        return _simulation.InverseKinematicsSolver_computeCurrentSquaredMarkerError(self, *args)


    def computeCurrentSquaredMarkerErrors(self, markerErrors):
        """
        computeCurrentSquaredMarkerErrors(InverseKinematicsSolver self, SimTKArrayDouble markerErrors)

        Parameters
        ----------
        markerErrors: SimTK::Array_< double,unsigned int > &

        """
        return _simulation.InverseKinematicsSolver_computeCurrentSquaredMarkerErrors(self, markerErrors)


    def getMarkerNameForIndex(self, markerIndex):
        """
        getMarkerNameForIndex(InverseKinematicsSolver self, int markerIndex) -> std::string

        Parameters
        ----------
        markerIndex: int

        """
        return _simulation.InverseKinematicsSolver_getMarkerNameForIndex(self, markerIndex)


    def computeCurrentSensorOrientation(self, *args):
        """
        computeCurrentSensorOrientation(InverseKinematicsSolver self, std::string const & osensorName) -> SimTK::Rotation

        Parameters
        ----------
        osensorName: std::string const &

        computeCurrentSensorOrientation(InverseKinematicsSolver self, int osensorIndex) -> SimTK::Rotation

        Parameters
        ----------
        osensorIndex: int

        """
        return _simulation.InverseKinematicsSolver_computeCurrentSensorOrientation(self, *args)


    def computeCurrentSensorOrientations(self, osensorOrientations):
        """
        computeCurrentSensorOrientations(InverseKinematicsSolver self, SimTK::Array_< SimTK::Rotation,unsigned int > & osensorOrientations)

        Parameters
        ----------
        osensorOrientations: SimTK::Array_< SimTK::Rotation,unsigned int > &

        """
        return _simulation.InverseKinematicsSolver_computeCurrentSensorOrientations(self, osensorOrientations)


    def computeCurrentOrientationError(self, *args):
        """
        computeCurrentOrientationError(InverseKinematicsSolver self, std::string const & osensorName) -> double

        Parameters
        ----------
        osensorName: std::string const &

        computeCurrentOrientationError(InverseKinematicsSolver self, int osensorIndex) -> double

        Parameters
        ----------
        osensorIndex: int

        """
        return _simulation.InverseKinematicsSolver_computeCurrentOrientationError(self, *args)


    def computeCurrentOrientationErrors(self, osensorErrors):
        """
        computeCurrentOrientationErrors(InverseKinematicsSolver self, SimTKArrayDouble osensorErrors)

        Parameters
        ----------
        osensorErrors: SimTK::Array_< double,unsigned int > &

        """
        return _simulation.InverseKinematicsSolver_computeCurrentOrientationErrors(self, osensorErrors)


    def getOrientationSensorNameForIndex(self, osensorIndex):
        """
        getOrientationSensorNameForIndex(InverseKinematicsSolver self, int osensorIndex) -> std::string

        Parameters
        ----------
        osensorIndex: int

        """
        return _simulation.InverseKinematicsSolver_getOrientationSensorNameForIndex(self, osensorIndex)

InverseKinematicsSolver_swigregister = _simulation.InverseKinematicsSolver_swigregister
InverseKinematicsSolver_swigregister(InverseKinematicsSolver)

class IMUPlacer(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::IMUPlacer class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMUPlacer, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMUPlacer, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IMUPlacer

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.IMUPlacer_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(IMUPlacer self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.IMUPlacer_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.IMUPlacer_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(IMUPlacer self) -> IMUPlacer

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IMUPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_getConcreteClassName(self)


    def copyProperty_model_file(self, source):
        """
        copyProperty_model_file(IMUPlacer self, IMUPlacer source)

        Parameters
        ----------
        source: OpenSim::IMUPlacer::Self const &

        """
        return _simulation.IMUPlacer_copyProperty_model_file(self, source)


    def append_model_file(self, value):
        """
        append_model_file(IMUPlacer self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_append_model_file(self, value)


    def constructProperty_model_file(self, initValue):
        """
        constructProperty_model_file(IMUPlacer self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUPlacer_constructProperty_model_file(self, initValue)


    def get_model_file(self, *args):
        """
        get_model_file(IMUPlacer self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_model_file(IMUPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_get_model_file(self, *args)


    def upd_model_file(self, *args):
        """
        upd_model_file(IMUPlacer self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_model_file(IMUPlacer self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUPlacer *

        """
        return _simulation.IMUPlacer_upd_model_file(self, *args)


    def set_model_file(self, *args):
        """
        set_model_file(IMUPlacer self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_model_file(IMUPlacer self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_set_model_file(self, *args)


    def copyProperty_base_imu_label(self, source):
        """
        copyProperty_base_imu_label(IMUPlacer self, IMUPlacer source)

        Parameters
        ----------
        source: OpenSim::IMUPlacer::Self const &

        """
        return _simulation.IMUPlacer_copyProperty_base_imu_label(self, source)


    def append_base_imu_label(self, value):
        """
        append_base_imu_label(IMUPlacer self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_append_base_imu_label(self, value)


    def constructProperty_base_imu_label(self, initValue):
        """
        constructProperty_base_imu_label(IMUPlacer self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUPlacer_constructProperty_base_imu_label(self, initValue)


    def get_base_imu_label(self, *args):
        """
        get_base_imu_label(IMUPlacer self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_base_imu_label(IMUPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_get_base_imu_label(self, *args)


    def upd_base_imu_label(self, *args):
        """
        upd_base_imu_label(IMUPlacer self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_base_imu_label(IMUPlacer self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUPlacer *

        """
        return _simulation.IMUPlacer_upd_base_imu_label(self, *args)


    def set_base_imu_label(self, *args):
        """
        set_base_imu_label(IMUPlacer self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_base_imu_label(IMUPlacer self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_set_base_imu_label(self, *args)


    def copyProperty_base_heading_axis(self, source):
        """
        copyProperty_base_heading_axis(IMUPlacer self, IMUPlacer source)

        Parameters
        ----------
        source: OpenSim::IMUPlacer::Self const &

        """
        return _simulation.IMUPlacer_copyProperty_base_heading_axis(self, source)


    def append_base_heading_axis(self, value):
        """
        append_base_heading_axis(IMUPlacer self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_append_base_heading_axis(self, value)


    def constructProperty_base_heading_axis(self, initValue):
        """
        constructProperty_base_heading_axis(IMUPlacer self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUPlacer_constructProperty_base_heading_axis(self, initValue)


    def get_base_heading_axis(self, *args):
        """
        get_base_heading_axis(IMUPlacer self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_base_heading_axis(IMUPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_get_base_heading_axis(self, *args)


    def upd_base_heading_axis(self, *args):
        """
        upd_base_heading_axis(IMUPlacer self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_base_heading_axis(IMUPlacer self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUPlacer *

        """
        return _simulation.IMUPlacer_upd_base_heading_axis(self, *args)


    def set_base_heading_axis(self, *args):
        """
        set_base_heading_axis(IMUPlacer self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_base_heading_axis(IMUPlacer self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_set_base_heading_axis(self, *args)


    def copyProperty_sensor_to_opensim_rotations(self, source):
        """
        copyProperty_sensor_to_opensim_rotations(IMUPlacer self, IMUPlacer source)

        Parameters
        ----------
        source: OpenSim::IMUPlacer::Self const &

        """
        return _simulation.IMUPlacer_copyProperty_sensor_to_opensim_rotations(self, source)


    def append_sensor_to_opensim_rotations(self, value):
        """
        append_sensor_to_opensim_rotations(IMUPlacer self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.IMUPlacer_append_sensor_to_opensim_rotations(self, value)


    def constructProperty_sensor_to_opensim_rotations(self, initValue):
        """
        constructProperty_sensor_to_opensim_rotations(IMUPlacer self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.IMUPlacer_constructProperty_sensor_to_opensim_rotations(self, initValue)


    def get_sensor_to_opensim_rotations(self, *args):
        """
        get_sensor_to_opensim_rotations(IMUPlacer self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_sensor_to_opensim_rotations(IMUPlacer self) -> Vec3

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_get_sensor_to_opensim_rotations(self, *args)


    def upd_sensor_to_opensim_rotations(self, *args):
        """
        upd_sensor_to_opensim_rotations(IMUPlacer self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_sensor_to_opensim_rotations(IMUPlacer self) -> Vec3

        Parameters
        ----------
        self: OpenSim::IMUPlacer *

        """
        return _simulation.IMUPlacer_upd_sensor_to_opensim_rotations(self, *args)


    def set_sensor_to_opensim_rotations(self, *args):
        """
        set_sensor_to_opensim_rotations(IMUPlacer self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_sensor_to_opensim_rotations(IMUPlacer self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.IMUPlacer_set_sensor_to_opensim_rotations(self, *args)


    def copyProperty_orientation_file_for_calibration(self, source):
        """
        copyProperty_orientation_file_for_calibration(IMUPlacer self, IMUPlacer source)

        Parameters
        ----------
        source: OpenSim::IMUPlacer::Self const &

        """
        return _simulation.IMUPlacer_copyProperty_orientation_file_for_calibration(self, source)


    def append_orientation_file_for_calibration(self, value):
        """
        append_orientation_file_for_calibration(IMUPlacer self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_append_orientation_file_for_calibration(self, value)


    def constructProperty_orientation_file_for_calibration(self, initValue):
        """
        constructProperty_orientation_file_for_calibration(IMUPlacer self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUPlacer_constructProperty_orientation_file_for_calibration(self, initValue)


    def get_orientation_file_for_calibration(self, *args):
        """
        get_orientation_file_for_calibration(IMUPlacer self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_orientation_file_for_calibration(IMUPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_get_orientation_file_for_calibration(self, *args)


    def upd_orientation_file_for_calibration(self, *args):
        """
        upd_orientation_file_for_calibration(IMUPlacer self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_orientation_file_for_calibration(IMUPlacer self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUPlacer *

        """
        return _simulation.IMUPlacer_upd_orientation_file_for_calibration(self, *args)


    def set_orientation_file_for_calibration(self, *args):
        """
        set_orientation_file_for_calibration(IMUPlacer self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_orientation_file_for_calibration(IMUPlacer self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_set_orientation_file_for_calibration(self, *args)


    def copyProperty_output_model_file(self, source):
        """
        copyProperty_output_model_file(IMUPlacer self, IMUPlacer source)

        Parameters
        ----------
        source: OpenSim::IMUPlacer::Self const &

        """
        return _simulation.IMUPlacer_copyProperty_output_model_file(self, source)


    def append_output_model_file(self, value):
        """
        append_output_model_file(IMUPlacer self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_append_output_model_file(self, value)


    def constructProperty_output_model_file(self, initValue):
        """
        constructProperty_output_model_file(IMUPlacer self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUPlacer_constructProperty_output_model_file(self, initValue)


    def get_output_model_file(self, *args):
        """
        get_output_model_file(IMUPlacer self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_output_model_file(IMUPlacer self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_get_output_model_file(self, *args)


    def upd_output_model_file(self, *args):
        """
        upd_output_model_file(IMUPlacer self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_output_model_file(IMUPlacer self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUPlacer *

        """
        return _simulation.IMUPlacer_upd_output_model_file(self, *args)


    def set_output_model_file(self, *args):
        """
        set_output_model_file(IMUPlacer self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_output_model_file(IMUPlacer self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUPlacer_set_output_model_file(self, *args)

    __swig_destroy__ = _simulation.delete_IMUPlacer
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::IMUPlacer self) -> IMUPlacer
        __init__(OpenSim::IMUPlacer self, std::string const & setupFile) -> IMUPlacer

        Parameters
        ----------
        setupFile: std::string const &

        """
        this = _simulation.new_IMUPlacer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, visualizeResults=False):
        """
        run(IMUPlacer self, bool visualizeResults=False) -> bool

        Parameters
        ----------
        visualizeResults: bool

        run(IMUPlacer self) -> bool

        Parameters
        ----------
        self: OpenSim::IMUPlacer *

        """
        return _simulation.IMUPlacer_run(self, visualizeResults)


    def setModel(self, aModel):
        """
        setModel(IMUPlacer self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.IMUPlacer_setModel(self, aModel)


    def getCalibratedModel(self):
        """
        getCalibratedModel(IMUPlacer self) -> Model

        Parameters
        ----------
        self: OpenSim::IMUPlacer const *

        """
        return _simulation.IMUPlacer_getCalibratedModel(self)

IMUPlacer_swigregister = _simulation.IMUPlacer_swigregister
IMUPlacer_swigregister(IMUPlacer)

def IMUPlacer_safeDownCast(obj):
    """
    IMUPlacer_safeDownCast(OpenSimObject obj) -> IMUPlacer

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.IMUPlacer_safeDownCast(obj)

def IMUPlacer_getClassName():
    """IMUPlacer_getClassName() -> std::string const &"""
    return _simulation.IMUPlacer_getClassName()

class OpenSenseUtilities(_object):
    """Proxy of C++ OpenSim::OpenSenseUtilities class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenSenseUtilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenSenseUtilities, name)
    __repr__ = _swig_repr

    def rotateOrientationTable(quaternionsTable, rotationMatrix):
        """
        rotateOrientationTable(TimeSeriesTableQuaternion quaternionsTable, Rotation rotationMatrix)

        Parameters
        ----------
        quaternionsTable: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > &
        rotationMatrix: SimTK::Rotation_< double > const &

        """
        return _simulation.OpenSenseUtilities_rotateOrientationTable(quaternionsTable, rotationMatrix)

    rotateOrientationTable = staticmethod(rotateOrientationTable)

    def convertQuaternionsToRotations(qauternionsTable):
        """
        convertQuaternionsToRotations(TimeSeriesTableQuaternion qauternionsTable) -> TimeSeriesTableRotation

        Parameters
        ----------
        qauternionsTable: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > const &

        """
        return _simulation.OpenSenseUtilities_convertQuaternionsToRotations(qauternionsTable)

    convertQuaternionsToRotations = staticmethod(convertQuaternionsToRotations)

    def computeHeadingCorrection(model, quatTimeSeries, baseIMU, arg4):
        """
        computeHeadingCorrection(Model model, TimeSeriesTableQuaternion quatTimeSeries, std::string const & baseIMU, CoordinateDirection arg4) -> Vec3

        Parameters
        ----------
        model: OpenSim::Model &
        quatTimeSeries: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > &
        baseIMU: std::string const &
        arg4: SimTK::CoordinateDirection const

        """
        return _simulation.OpenSenseUtilities_computeHeadingCorrection(model, quatTimeSeries, baseIMU, arg4)

    computeHeadingCorrection = staticmethod(computeHeadingCorrection)

    def createOrientationsFileFromMarkers(markersFile):
        """
        createOrientationsFileFromMarkers(std::string const & markersFile) -> OpenSim::TimeSeriesTable_< SimTK::Quaternion >

        Parameters
        ----------
        markersFile: std::string const &

        """
        return _simulation.OpenSenseUtilities_createOrientationsFileFromMarkers(markersFile)

    createOrientationsFileFromMarkers = staticmethod(createOrientationsFileFromMarkers)

    def formTransformFromPoints(op, xp, yp):
        """
        formTransformFromPoints(Vec3 op, Vec3 xp, Vec3 yp) -> Transform

        Parameters
        ----------
        op: SimTK::Vec3 const &
        xp: SimTK::Vec3 const &
        yp: SimTK::Vec3 const &

        """
        return _simulation.OpenSenseUtilities_formTransformFromPoints(op, xp, yp)

    formTransformFromPoints = staticmethod(formTransformFromPoints)

    def __init__(self):
        """__init__(OpenSim::OpenSenseUtilities self) -> OpenSenseUtilities"""
        this = _simulation.new_OpenSenseUtilities()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_OpenSenseUtilities
    __del__ = lambda self: None
OpenSenseUtilities_swigregister = _simulation.OpenSenseUtilities_swigregister
OpenSenseUtilities_swigregister(OpenSenseUtilities)

def OpenSenseUtilities_rotateOrientationTable(quaternionsTable, rotationMatrix):
    """
    OpenSenseUtilities_rotateOrientationTable(TimeSeriesTableQuaternion quaternionsTable, Rotation rotationMatrix)

    Parameters
    ----------
    quaternionsTable: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > &
    rotationMatrix: SimTK::Rotation_< double > const &

    """
    return _simulation.OpenSenseUtilities_rotateOrientationTable(quaternionsTable, rotationMatrix)

def OpenSenseUtilities_convertQuaternionsToRotations(qauternionsTable):
    """
    OpenSenseUtilities_convertQuaternionsToRotations(TimeSeriesTableQuaternion qauternionsTable) -> TimeSeriesTableRotation

    Parameters
    ----------
    qauternionsTable: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > const &

    """
    return _simulation.OpenSenseUtilities_convertQuaternionsToRotations(qauternionsTable)

def OpenSenseUtilities_computeHeadingCorrection(model, quatTimeSeries, baseIMU, arg5):
    """
    OpenSenseUtilities_computeHeadingCorrection(Model model, TimeSeriesTableQuaternion quatTimeSeries, std::string const & baseIMU, CoordinateDirection arg5) -> Vec3

    Parameters
    ----------
    model: OpenSim::Model &
    quatTimeSeries: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > &
    baseIMU: std::string const &
    arg4: SimTK::CoordinateDirection const

    """
    return _simulation.OpenSenseUtilities_computeHeadingCorrection(model, quatTimeSeries, baseIMU, arg5)

def OpenSenseUtilities_createOrientationsFileFromMarkers(markersFile):
    """
    OpenSenseUtilities_createOrientationsFileFromMarkers(std::string const & markersFile) -> OpenSim::TimeSeriesTable_< SimTK::Quaternion >

    Parameters
    ----------
    markersFile: std::string const &

    """
    return _simulation.OpenSenseUtilities_createOrientationsFileFromMarkers(markersFile)

def OpenSenseUtilities_formTransformFromPoints(op, xp, yp):
    """
    OpenSenseUtilities_formTransformFromPoints(Vec3 op, Vec3 xp, Vec3 yp) -> Transform

    Parameters
    ----------
    op: SimTK::Vec3 const &
    xp: SimTK::Vec3 const &
    yp: SimTK::Vec3 const &

    """
    return _simulation.OpenSenseUtilities_formTransformFromPoints(op, xp, yp)

class IMUInverseKinematicsTool(opensim.common.OpenSimObject):
    """Proxy of C++ OpenSim::IMUInverseKinematicsTool class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMUInverseKinematicsTool, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.OpenSimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMUInverseKinematicsTool, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> IMUInverseKinematicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.IMUInverseKinematicsTool_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(IMUInverseKinematicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.IMUInverseKinematicsTool_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.IMUInverseKinematicsTool_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(IMUInverseKinematicsTool self) -> IMUInverseKinematicsTool

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(IMUInverseKinematicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_getConcreteClassName(self)


    def copyProperty_model_file(self, source):
        """
        copyProperty_model_file(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _simulation.IMUInverseKinematicsTool_copyProperty_model_file(self, source)


    def append_model_file(self, value):
        """
        append_model_file(IMUInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_append_model_file(self, value)


    def constructProperty_model_file(self, initValue):
        """
        constructProperty_model_file(IMUInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_constructProperty_model_file(self, initValue)


    def get_model_file(self, *args):
        """
        get_model_file(IMUInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_model_file(IMUInverseKinematicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_get_model_file(self, *args)


    def upd_model_file(self, *args):
        """
        upd_model_file(IMUInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_model_file(IMUInverseKinematicsTool self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool *

        """
        return _simulation.IMUInverseKinematicsTool_upd_model_file(self, *args)


    def set_model_file(self, *args):
        """
        set_model_file(IMUInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_model_file(IMUInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_set_model_file(self, *args)


    def copyProperty_marker_file(self, source):
        """
        copyProperty_marker_file(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _simulation.IMUInverseKinematicsTool_copyProperty_marker_file(self, source)


    def append_marker_file(self, value):
        """
        append_marker_file(IMUInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_append_marker_file(self, value)


    def constructProperty_marker_file(self, initValue):
        """
        constructProperty_marker_file(IMUInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_constructProperty_marker_file(self, initValue)


    def get_marker_file(self, *args):
        """
        get_marker_file(IMUInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_marker_file(IMUInverseKinematicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_get_marker_file(self, *args)


    def upd_marker_file(self, *args):
        """
        upd_marker_file(IMUInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_marker_file(IMUInverseKinematicsTool self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool *

        """
        return _simulation.IMUInverseKinematicsTool_upd_marker_file(self, *args)


    def set_marker_file(self, *args):
        """
        set_marker_file(IMUInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_marker_file(IMUInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_set_marker_file(self, *args)


    def copyProperty_orientations_file(self, source):
        """
        copyProperty_orientations_file(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _simulation.IMUInverseKinematicsTool_copyProperty_orientations_file(self, source)


    def append_orientations_file(self, value):
        """
        append_orientations_file(IMUInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_append_orientations_file(self, value)


    def constructProperty_orientations_file(self, initValue):
        """
        constructProperty_orientations_file(IMUInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_constructProperty_orientations_file(self, initValue)


    def get_orientations_file(self, *args):
        """
        get_orientations_file(IMUInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_orientations_file(IMUInverseKinematicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_get_orientations_file(self, *args)


    def upd_orientations_file(self, *args):
        """
        upd_orientations_file(IMUInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_orientations_file(IMUInverseKinematicsTool self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool *

        """
        return _simulation.IMUInverseKinematicsTool_upd_orientations_file(self, *args)


    def set_orientations_file(self, *args):
        """
        set_orientations_file(IMUInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_orientations_file(IMUInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_set_orientations_file(self, *args)


    def copyProperty_sensor_to_opensim_rotations(self, source):
        """
        copyProperty_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _simulation.IMUInverseKinematicsTool_copyProperty_sensor_to_opensim_rotations(self, source)


    def append_sensor_to_opensim_rotations(self, value):
        """
        append_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.IMUInverseKinematicsTool_append_sensor_to_opensim_rotations(self, value)


    def constructProperty_sensor_to_opensim_rotations(self, initValue):
        """
        constructProperty_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _simulation.IMUInverseKinematicsTool_constructProperty_sensor_to_opensim_rotations(self, initValue)


    def get_sensor_to_opensim_rotations(self, *args):
        """
        get_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_sensor_to_opensim_rotations(IMUInverseKinematicsTool self) -> Vec3

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_get_sensor_to_opensim_rotations(self, *args)


    def upd_sensor_to_opensim_rotations(self, *args):
        """
        upd_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_sensor_to_opensim_rotations(IMUInverseKinematicsTool self) -> Vec3

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool *

        """
        return _simulation.IMUInverseKinematicsTool_upd_sensor_to_opensim_rotations(self, *args)


    def set_sensor_to_opensim_rotations(self, *args):
        """
        set_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _simulation.IMUInverseKinematicsTool_set_sensor_to_opensim_rotations(self, *args)


    def copyProperty_time_range(self, source):
        """
        copyProperty_time_range(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _simulation.IMUInverseKinematicsTool_copyProperty_time_range(self, source)


    def get_time_range(self, i):
        """
        get_time_range(IMUInverseKinematicsTool self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _simulation.IMUInverseKinematicsTool_get_time_range(self, i)


    def upd_time_range(self, i):
        """
        upd_time_range(IMUInverseKinematicsTool self, int i) -> double &

        Parameters
        ----------
        i: int

        """
        return _simulation.IMUInverseKinematicsTool_upd_time_range(self, i)


    def set_time_range(self, i, value):
        """
        set_time_range(IMUInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        """
        return _simulation.IMUInverseKinematicsTool_set_time_range(self, i, value)


    def append_time_range(self, value):
        """
        append_time_range(IMUInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.IMUInverseKinematicsTool_append_time_range(self, value)


    def copyProperty_constraint_weight(self, source):
        """
        copyProperty_constraint_weight(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _simulation.IMUInverseKinematicsTool_copyProperty_constraint_weight(self, source)


    def append_constraint_weight(self, value):
        """
        append_constraint_weight(IMUInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.IMUInverseKinematicsTool_append_constraint_weight(self, value)


    def constructProperty_constraint_weight(self, initValue):
        """
        constructProperty_constraint_weight(IMUInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.IMUInverseKinematicsTool_constructProperty_constraint_weight(self, initValue)


    def get_constraint_weight(self, *args):
        """
        get_constraint_weight(IMUInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_constraint_weight(IMUInverseKinematicsTool self) -> double const &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_get_constraint_weight(self, *args)


    def upd_constraint_weight(self, *args):
        """
        upd_constraint_weight(IMUInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_constraint_weight(IMUInverseKinematicsTool self) -> double &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool *

        """
        return _simulation.IMUInverseKinematicsTool_upd_constraint_weight(self, *args)


    def set_constraint_weight(self, *args):
        """
        set_constraint_weight(IMUInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_constraint_weight(IMUInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.IMUInverseKinematicsTool_set_constraint_weight(self, *args)


    def copyProperty_accuracy(self, source):
        """
        copyProperty_accuracy(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _simulation.IMUInverseKinematicsTool_copyProperty_accuracy(self, source)


    def append_accuracy(self, value):
        """
        append_accuracy(IMUInverseKinematicsTool self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.IMUInverseKinematicsTool_append_accuracy(self, value)


    def constructProperty_accuracy(self, initValue):
        """
        constructProperty_accuracy(IMUInverseKinematicsTool self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.IMUInverseKinematicsTool_constructProperty_accuracy(self, initValue)


    def get_accuracy(self, *args):
        """
        get_accuracy(IMUInverseKinematicsTool self, int i) -> double const

        Parameters
        ----------
        i: int

        get_accuracy(IMUInverseKinematicsTool self) -> double const &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_get_accuracy(self, *args)


    def upd_accuracy(self, *args):
        """
        upd_accuracy(IMUInverseKinematicsTool self, int i) -> double

        Parameters
        ----------
        i: int

        upd_accuracy(IMUInverseKinematicsTool self) -> double &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool *

        """
        return _simulation.IMUInverseKinematicsTool_upd_accuracy(self, *args)


    def set_accuracy(self, *args):
        """
        set_accuracy(IMUInverseKinematicsTool self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_accuracy(IMUInverseKinematicsTool self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.IMUInverseKinematicsTool_set_accuracy(self, *args)


    def copyProperty_results_directory(self, source):
        """
        copyProperty_results_directory(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _simulation.IMUInverseKinematicsTool_copyProperty_results_directory(self, source)


    def append_results_directory(self, value):
        """
        append_results_directory(IMUInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_append_results_directory(self, value)


    def constructProperty_results_directory(self, initValue):
        """
        constructProperty_results_directory(IMUInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_constructProperty_results_directory(self, initValue)


    def get_results_directory(self, *args):
        """
        get_results_directory(IMUInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_directory(IMUInverseKinematicsTool self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_get_results_directory(self, *args)


    def upd_results_directory(self, *args):
        """
        upd_results_directory(IMUInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_directory(IMUInverseKinematicsTool self) -> std::string &

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool *

        """
        return _simulation.IMUInverseKinematicsTool_upd_results_directory(self, *args)


    def set_results_directory(self, *args):
        """
        set_results_directory(IMUInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_directory(IMUInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_set_results_directory(self, *args)

    __swig_destroy__ = _simulation.delete_IMUInverseKinematicsTool
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(OpenSim::IMUInverseKinematicsTool self) -> IMUInverseKinematicsTool
        __init__(OpenSim::IMUInverseKinematicsTool self, std::string const & setupFile) -> IMUInverseKinematicsTool

        Parameters
        ----------
        setupFile: std::string const &

        """
        this = _simulation.new_IMUInverseKinematicsTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, visualizeResults=False):
        """
        run(IMUInverseKinematicsTool self, bool visualizeResults=False) -> bool

        Parameters
        ----------
        visualizeResults: bool

        run(IMUInverseKinematicsTool self) -> bool

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool *

        """
        return _simulation.IMUInverseKinematicsTool_run(self, visualizeResults)


    def setModel(self, aModel):
        """
        setModel(IMUInverseKinematicsTool self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _simulation.IMUInverseKinematicsTool_setModel(self, aModel)


    def setStartTime(self, d):
        """
        setStartTime(IMUInverseKinematicsTool self, double d)

        Parameters
        ----------
        d: double

        """
        return _simulation.IMUInverseKinematicsTool_setStartTime(self, d)


    def getStartTime(self):
        """
        getStartTime(IMUInverseKinematicsTool self) -> double

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_getStartTime(self)


    def setEndTime(self, d):
        """
        setEndTime(IMUInverseKinematicsTool self, double d)

        Parameters
        ----------
        d: double

        """
        return _simulation.IMUInverseKinematicsTool_setEndTime(self, d)


    def getEndTime(self):
        """
        getEndTime(IMUInverseKinematicsTool self) -> double

        Parameters
        ----------
        self: OpenSim::IMUInverseKinematicsTool const *

        """
        return _simulation.IMUInverseKinematicsTool_getEndTime(self)


    def loadMarkersFile(markerFile):
        """
        loadMarkersFile(std::string const & markerFile) -> TimeSeriesTableVec3

        Parameters
        ----------
        markerFile: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_loadMarkersFile(markerFile)

    loadMarkersFile = staticmethod(loadMarkersFile)

    def runInverseKinematicsWithOrientationsFromFile(self, model, quaternionStoFileName, visualizeResults=False):
        """
        runInverseKinematicsWithOrientationsFromFile(IMUInverseKinematicsTool self, Model model, std::string const & quaternionStoFileName, bool visualizeResults=False)

        Parameters
        ----------
        model: OpenSim::Model &
        quaternionStoFileName: std::string const &
        visualizeResults: bool

        runInverseKinematicsWithOrientationsFromFile(IMUInverseKinematicsTool self, Model model, std::string const & quaternionStoFileName)

        Parameters
        ----------
        model: OpenSim::Model &
        quaternionStoFileName: std::string const &

        """
        return _simulation.IMUInverseKinematicsTool_runInverseKinematicsWithOrientationsFromFile(self, model, quaternionStoFileName, visualizeResults)

IMUInverseKinematicsTool_swigregister = _simulation.IMUInverseKinematicsTool_swigregister
IMUInverseKinematicsTool_swigregister(IMUInverseKinematicsTool)

def IMUInverseKinematicsTool_safeDownCast(obj):
    """
    IMUInverseKinematicsTool_safeDownCast(OpenSimObject obj) -> IMUInverseKinematicsTool

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.IMUInverseKinematicsTool_safeDownCast(obj)

def IMUInverseKinematicsTool_getClassName():
    """IMUInverseKinematicsTool_getClassName() -> std::string const &"""
    return _simulation.IMUInverseKinematicsTool_getClassName()

def IMUInverseKinematicsTool_loadMarkersFile(markerFile):
    """
    IMUInverseKinematicsTool_loadMarkersFile(std::string const & markerFile) -> TimeSeriesTableVec3

    Parameters
    ----------
    markerFile: std::string const &

    """
    return _simulation.IMUInverseKinematicsTool_loadMarkersFile(markerFile)

class StatesTrajectory(_object):
    """Proxy of C++ OpenSim::StatesTrajectory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatesTrajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StatesTrajectory, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(OpenSim::StatesTrajectory self) -> StatesTrajectory"""
        this = _simulation.new_StatesTrajectory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSize(self):
        """
        getSize(StatesTrajectory self) -> size_t

        Parameters
        ----------
        self: OpenSim::StatesTrajectory const *

        """
        return _simulation.StatesTrajectory_getSize(self)


    def get(self, index):
        """
        get(StatesTrajectory self, size_t index) -> State

        Parameters
        ----------
        index: size_t

        """
        return _simulation.StatesTrajectory_get(self, index)


    def front(self):
        """
        front(StatesTrajectory self) -> State

        Parameters
        ----------
        self: OpenSim::StatesTrajectory const *

        """
        return _simulation.StatesTrajectory_front(self)


    def back(self):
        """
        back(StatesTrajectory self) -> State

        Parameters
        ----------
        self: OpenSim::StatesTrajectory const *

        """
        return _simulation.StatesTrajectory_back(self)


    def begin(self):
        """
        begin(StatesTrajectory self) -> OpenSim::StatesTrajectory::const_iterator

        Parameters
        ----------
        self: OpenSim::StatesTrajectory const *

        """
        return _simulation.StatesTrajectory_begin(self)


    def end(self):
        """
        end(StatesTrajectory self) -> OpenSim::StatesTrajectory::const_iterator

        Parameters
        ----------
        self: OpenSim::StatesTrajectory const *

        """
        return _simulation.StatesTrajectory_end(self)


    def clear(self):
        """
        clear(StatesTrajectory self)

        Parameters
        ----------
        self: OpenSim::StatesTrajectory *

        """
        return _simulation.StatesTrajectory_clear(self)


    def append(self, state):
        """
        append(StatesTrajectory self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.StatesTrajectory_append(self, state)


    def hasIntegrity(self):
        """
        hasIntegrity(StatesTrajectory self) -> bool

        Parameters
        ----------
        self: OpenSim::StatesTrajectory const *

        """
        return _simulation.StatesTrajectory_hasIntegrity(self)


    def isNondecreasingInTime(self):
        """
        isNondecreasingInTime(StatesTrajectory self) -> bool

        Parameters
        ----------
        self: OpenSim::StatesTrajectory const *

        """
        return _simulation.StatesTrajectory_isNondecreasingInTime(self)


    def isConsistent(self):
        """
        isConsistent(StatesTrajectory self) -> bool

        Parameters
        ----------
        self: OpenSim::StatesTrajectory const *

        """
        return _simulation.StatesTrajectory_isConsistent(self)


    def isCompatibleWith(self, model):
        """
        isCompatibleWith(StatesTrajectory self, Model model) -> bool

        Parameters
        ----------
        model: OpenSim::Model const &

        """
        return _simulation.StatesTrajectory_isCompatibleWith(self, model)


    def exportToTable(self, *args):
        """
        exportToTable(StatesTrajectory self, Model model, StdVectorString stateVars) -> TimeSeriesTable

        Parameters
        ----------
        model: OpenSim::Model const &
        stateVars: std::vector< std::string,std::allocator< std::string > > const &

        exportToTable(StatesTrajectory self, Model model) -> TimeSeriesTable

        Parameters
        ----------
        model: OpenSim::Model const &

        """
        return _simulation.StatesTrajectory_exportToTable(self, *args)


    def createFromStatesStorage(*args):
        """
        createFromStatesStorage(Model model, Storage sto, bool allowMissingColumns=False, bool allowExtraColumns=False, bool assemble=False) -> StatesTrajectory

        Parameters
        ----------
        model: OpenSim::Model const &
        sto: OpenSim::Storage const &
        allowMissingColumns: bool
        allowExtraColumns: bool
        assemble: bool

        createFromStatesStorage(Model model, Storage sto, bool allowMissingColumns=False, bool allowExtraColumns=False) -> StatesTrajectory

        Parameters
        ----------
        model: OpenSim::Model const &
        sto: OpenSim::Storage const &
        allowMissingColumns: bool
        allowExtraColumns: bool

        createFromStatesStorage(Model model, Storage sto, bool allowMissingColumns=False) -> StatesTrajectory

        Parameters
        ----------
        model: OpenSim::Model const &
        sto: OpenSim::Storage const &
        allowMissingColumns: bool

        createFromStatesStorage(Model model, Storage sto) -> StatesTrajectory

        Parameters
        ----------
        model: OpenSim::Model const &
        sto: OpenSim::Storage const &

        createFromStatesStorage(Model model, std::string const & filepath) -> StatesTrajectory

        Parameters
        ----------
        model: OpenSim::Model const &
        filepath: std::string const &

        """
        return _simulation.StatesTrajectory_createFromStatesStorage(*args)

    createFromStatesStorage = staticmethod(createFromStatesStorage)


    def __iter__(self):
        """Get an iterator for this Set, to be used as such (where `states` is
        the StatesTrajectory object)::

            for state in states:
                model.calcMassCenterPosition(state)
        """
        it = self.begin()
        while it != self.end():
            yield it.next()

    def getBetween(self, *args, **kwargs):
        iter_range = self._getBetween(*args, **kwargs)
        it = iter_range.begin()
        while it != iter_range.end():
            yield it.next()


    def __getitem__(self, i):
        """
        __getitem__(StatesTrajectory self, int i) -> State

        Parameters
        ----------
        i: int

        """
        return _simulation.StatesTrajectory___getitem__(self, i)

    __swig_destroy__ = _simulation.delete_StatesTrajectory
    __del__ = lambda self: None
StatesTrajectory_swigregister = _simulation.StatesTrajectory_swigregister
StatesTrajectory_swigregister(StatesTrajectory)

def StatesTrajectory_createFromStatesStorage(*args):
    """
    createFromStatesStorage(Model model, Storage sto, bool allowMissingColumns=False, bool allowExtraColumns=False, bool assemble=False) -> StatesTrajectory

    Parameters
    ----------
    model: OpenSim::Model const &
    sto: OpenSim::Storage const &
    allowMissingColumns: bool
    allowExtraColumns: bool
    assemble: bool

    createFromStatesStorage(Model model, Storage sto, bool allowMissingColumns=False, bool allowExtraColumns=False) -> StatesTrajectory

    Parameters
    ----------
    model: OpenSim::Model const &
    sto: OpenSim::Storage const &
    allowMissingColumns: bool
    allowExtraColumns: bool

    createFromStatesStorage(Model model, Storage sto, bool allowMissingColumns=False) -> StatesTrajectory

    Parameters
    ----------
    model: OpenSim::Model const &
    sto: OpenSim::Storage const &
    allowMissingColumns: bool

    createFromStatesStorage(Model model, Storage sto) -> StatesTrajectory

    Parameters
    ----------
    model: OpenSim::Model const &
    sto: OpenSim::Storage const &

    StatesTrajectory_createFromStatesStorage(Model model, std::string const & filepath) -> StatesTrajectory

    Parameters
    ----------
    model: OpenSim::Model const &
    filepath: std::string const &

    """
    return _simulation.StatesTrajectory_createFromStatesStorage(*args)

class IteratorRangeStatesTrajectoryIterator(_object):
    """Proxy of C++ SimTK::IteratorRange<(OpenSim::StatesTrajectory::const_iterator)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IteratorRangeStatesTrajectoryIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IteratorRangeStatesTrajectoryIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SimTK::IteratorRange<(OpenSim::StatesTrajectory::const_iterator)> self, std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator first, std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator last) -> IteratorRangeStatesTrajectoryIterator

        Parameters
        ----------
        first: std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator
        last: std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator

        __init__(SimTK::IteratorRange<(OpenSim::StatesTrajectory::const_iterator)> self, std::pair< std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator,std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator > const & range) -> IteratorRangeStatesTrajectoryIterator

        Parameters
        ----------
        range: std::pair< std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator,std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator > const &

        """
        this = _simulation.new_IteratorRangeStatesTrajectoryIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        """
        begin(IteratorRangeStatesTrajectoryIterator self) -> std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator

        Parameters
        ----------
        self: SimTK::IteratorRange< OpenSim::StatesTrajectory::const_iterator > const *

        """
        return _simulation.IteratorRangeStatesTrajectoryIterator_begin(self)


    def end(self):
        """
        end(IteratorRangeStatesTrajectoryIterator self) -> std::vector< SimTK::State,std::allocator< SimTK::State > >::const_iterator

        Parameters
        ----------
        self: SimTK::IteratorRange< OpenSim::StatesTrajectory::const_iterator > const *

        """
        return _simulation.IteratorRangeStatesTrajectoryIterator_end(self)

    __swig_destroy__ = _simulation.delete_IteratorRangeStatesTrajectoryIterator
    __del__ = lambda self: None
IteratorRangeStatesTrajectoryIterator_swigregister = _simulation.IteratorRangeStatesTrajectoryIterator_swigregister
IteratorRangeStatesTrajectoryIterator_swigregister(IteratorRangeStatesTrajectoryIterator)

class StatesTrajectoryReporter(opensim.common.AbstractReporter):
    """Proxy of C++ OpenSim::StatesTrajectoryReporter class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.AbstractReporter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatesTrajectoryReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.AbstractReporter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatesTrajectoryReporter, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> StatesTrajectoryReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.StatesTrajectoryReporter_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(StatesTrajectoryReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.StatesTrajectoryReporter_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.StatesTrajectoryReporter_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(StatesTrajectoryReporter self) -> StatesTrajectoryReporter

        Parameters
        ----------
        self: OpenSim::StatesTrajectoryReporter const *

        """
        return _simulation.StatesTrajectoryReporter_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(StatesTrajectoryReporter self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::StatesTrajectoryReporter const *

        """
        return _simulation.StatesTrajectoryReporter_getConcreteClassName(self)


    def getStates(self):
        """
        getStates(StatesTrajectoryReporter self) -> StatesTrajectory

        Parameters
        ----------
        self: OpenSim::StatesTrajectoryReporter const *

        """
        return _simulation.StatesTrajectoryReporter_getStates(self)


    def clear(self):
        """
        clear(StatesTrajectoryReporter self)

        Parameters
        ----------
        self: OpenSim::StatesTrajectoryReporter *

        """
        return _simulation.StatesTrajectoryReporter_clear(self)


    def __init__(self):
        """__init__(OpenSim::StatesTrajectoryReporter self) -> StatesTrajectoryReporter"""
        this = _simulation.new_StatesTrajectoryReporter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_StatesTrajectoryReporter
    __del__ = lambda self: None
StatesTrajectoryReporter_swigregister = _simulation.StatesTrajectoryReporter_swigregister
StatesTrajectoryReporter_swigregister(StatesTrajectoryReporter)

def StatesTrajectoryReporter_safeDownCast(obj):
    """
    StatesTrajectoryReporter_safeDownCast(OpenSimObject obj) -> StatesTrajectoryReporter

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.StatesTrajectoryReporter_safeDownCast(obj)

def StatesTrajectoryReporter_getClassName():
    """StatesTrajectoryReporter_getClassName() -> std::string const &"""
    return _simulation.StatesTrajectoryReporter_getClassName()


def simulate(model, initialState, finalTime, saveStatesFile=False):
    """
    simulate(Model model, State initialState, double finalTime, bool saveStatesFile=False) -> State

    Parameters
    ----------
    model: OpenSim::Model &
    initialState: SimTK::State const &
    finalTime: double
    saveStatesFile: bool

    simulate(Model model, State initialState, double finalTime) -> State

    Parameters
    ----------
    model: OpenSim::Model &
    initialState: SimTK::State const &
    finalTime: double

    """
    return _simulation.simulate(model, initialState, finalTime, saveStatesFile)

def updatePre40KinematicsFilesFor40MotionType(*args):
    """
    updatePre40KinematicsFilesFor40MotionType(Model model, StdVectorString filePaths, std::string suffix)

    Parameters
    ----------
    model: OpenSim::Model const &
    filePaths: std::vector< std::string,std::allocator< std::string > > const &
    suffix: std::string

    updatePre40KinematicsFilesFor40MotionType(Model model, StdVectorString filePaths)

    Parameters
    ----------
    model: OpenSim::Model const &
    filePaths: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _simulation.updatePre40KinematicsFilesFor40MotionType(*args)

def updateSocketConnecteesBySearch(model):
    """
    updateSocketConnecteesBySearch(Model model)

    Parameters
    ----------
    model: OpenSim::Model &

    """
    return _simulation.updateSocketConnecteesBySearch(model)
class FrameList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::Frame)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::Frame)> self, Component root, ComponentFilter f) -> FrameList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::Frame)> self, Component root) -> FrameList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _simulation.new_FrameList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_FrameList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(FrameList self) -> FrameIterator
        begin(FrameList self) -> OpenSim::ComponentList< OpenSim::Frame const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Frame const > const *

        """
        return _simulation.FrameList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(FrameList self) -> OpenSim::ComponentList< OpenSim::Frame const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Frame const > const *

        """
        return _simulation.FrameList_cbegin(self)


    def end(self, *args):
        """
        end(FrameList self) -> FrameIterator
        end(FrameList self) -> OpenSim::ComponentList< OpenSim::Frame const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Frame const > const *

        """
        return _simulation.FrameList_end(self, *args)


    def cend(self):
        """
        cend(FrameList self) -> OpenSim::ComponentList< OpenSim::Frame const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Frame const > const *

        """
        return _simulation.FrameList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(FrameList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _simulation.FrameList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

FrameList_swigregister = _simulation.FrameList_swigregister
FrameList_swigregister(FrameList)

class FrameIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::Frame)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(FrameIterator self, FrameIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Frame const > const &

        """
        return _simulation.FrameIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(FrameIterator self, FrameIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Frame const > const &

        """
        return _simulation.FrameIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(FrameIterator self, FrameIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Frame const > const &

        """
        return _simulation.FrameIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(FrameIterator self) -> Frame

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator___ref__(self)


    def deref(self):
        """
        deref(FrameIterator self) -> Frame

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_deref(self)


    def __deref__(self):
        """
        __deref__(FrameIterator self) -> Frame

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator___deref__(self)


    def next(self):
        """
        next(FrameIterator self) -> FrameIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > *

        """
        return _simulation.FrameIterator_next(self)

    __swig_destroy__ = _simulation.delete_FrameIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(FrameIterator self) -> Frame

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FrameIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getConcreteClassName(self)


    def get_frame_geometry(self, *args):
        """
        get_frame_geometry(FrameIterator self, int i) -> FrameGeometry

        Parameters
        ----------
        i: int

        get_frame_geometry(FrameIterator self) -> FrameGeometry

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_get_frame_geometry(self, *args)


    def get_attached_geometry(self, i):
        """
        get_attached_geometry(FrameIterator self, int i) -> Geometry

        Parameters
        ----------
        i: int

        """
        return _simulation.FrameIterator_get_attached_geometry(self, i)

    __swig_getmethods__["_has_output_position"] = _simulation.FrameIterator__has_output_position_get
    if _newclass:
        _has_output_position = _swig_property(_simulation.FrameIterator__has_output_position_get)
    __swig_getmethods__["_has_output_rotation"] = _simulation.FrameIterator__has_output_rotation_get
    if _newclass:
        _has_output_rotation = _swig_property(_simulation.FrameIterator__has_output_rotation_get)
    __swig_getmethods__["_has_output_transform"] = _simulation.FrameIterator__has_output_transform_get
    if _newclass:
        _has_output_transform = _swig_property(_simulation.FrameIterator__has_output_transform_get)
    __swig_getmethods__["_has_output_velocity"] = _simulation.FrameIterator__has_output_velocity_get
    if _newclass:
        _has_output_velocity = _swig_property(_simulation.FrameIterator__has_output_velocity_get)
    __swig_getmethods__["_has_output_angular_velocity"] = _simulation.FrameIterator__has_output_angular_velocity_get
    if _newclass:
        _has_output_angular_velocity = _swig_property(_simulation.FrameIterator__has_output_angular_velocity_get)
    __swig_getmethods__["_has_output_linear_velocity"] = _simulation.FrameIterator__has_output_linear_velocity_get
    if _newclass:
        _has_output_linear_velocity = _swig_property(_simulation.FrameIterator__has_output_linear_velocity_get)
    __swig_getmethods__["_has_output_acceleration"] = _simulation.FrameIterator__has_output_acceleration_get
    if _newclass:
        _has_output_acceleration = _swig_property(_simulation.FrameIterator__has_output_acceleration_get)
    __swig_getmethods__["_has_output_angular_acceleration"] = _simulation.FrameIterator__has_output_angular_acceleration_get
    if _newclass:
        _has_output_angular_acceleration = _swig_property(_simulation.FrameIterator__has_output_angular_acceleration_get)
    __swig_getmethods__["_has_output_linear_acceleration"] = _simulation.FrameIterator__has_output_linear_acceleration_get
    if _newclass:
        _has_output_linear_acceleration = _swig_property(_simulation.FrameIterator__has_output_linear_acceleration_get)

    def getTransformInGround(self, state):
        """
        getTransformInGround(FrameIterator self, State state) -> Transform

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getTransformInGround(self, state)


    def getVelocityInGround(self, state):
        """
        getVelocityInGround(FrameIterator self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getVelocityInGround(self, state)


    def getAngularVelocityInGround(self, state):
        """
        getAngularVelocityInGround(FrameIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getAngularVelocityInGround(self, state)


    def getLinearVelocityInGround(self, state):
        """
        getLinearVelocityInGround(FrameIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getLinearVelocityInGround(self, state)


    def getAccelerationInGround(self, state):
        """
        getAccelerationInGround(FrameIterator self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getAccelerationInGround(self, state)


    def getAngularAccelerationInGround(self, state):
        """
        getAngularAccelerationInGround(FrameIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getAngularAccelerationInGround(self, state)


    def getLinearAccelerationInGround(self, state):
        """
        getLinearAccelerationInGround(FrameIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getLinearAccelerationInGround(self, state)


    def findTransformBetween(self, state, otherFrame):
        """
        findTransformBetween(FrameIterator self, State state, Frame otherFrame) -> Transform

        Parameters
        ----------
        state: SimTK::State const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.FrameIterator_findTransformBetween(self, state, otherFrame)


    def expressVectorInAnotherFrame(self, state, vec_F, otherFrame):
        """
        expressVectorInAnotherFrame(FrameIterator self, State state, Vec3 vec_F, Frame otherFrame) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        vec_F: SimTK::Vec3 const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.FrameIterator_expressVectorInAnotherFrame(self, state, vec_F, otherFrame)


    def expressVectorInGround(self, state, vec_F):
        """
        expressVectorInGround(FrameIterator self, State state, Vec3 vec_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        vec_F: SimTK::Vec3 const &

        """
        return _simulation.FrameIterator_expressVectorInGround(self, state, vec_F)


    def findStationLocationInAnotherFrame(self, state, station_F, otherFrame):
        """
        findStationLocationInAnotherFrame(FrameIterator self, State state, Vec3 station_F, Frame otherFrame) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.FrameIterator_findStationLocationInAnotherFrame(self, state, station_F, otherFrame)


    def findStationLocationInGround(self, state, station_F):
        """
        findStationLocationInGround(FrameIterator self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.FrameIterator_findStationLocationInGround(self, state, station_F)


    def findStationVelocityInGround(self, state, station_F):
        """
        findStationVelocityInGround(FrameIterator self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.FrameIterator_findStationVelocityInGround(self, state, station_F)


    def findStationAccelerationInGround(self, state, station_F):
        """
        findStationAccelerationInGround(FrameIterator self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.FrameIterator_findStationAccelerationInGround(self, state, station_F)


    def findBaseFrame(self):
        """
        findBaseFrame(FrameIterator self) -> Frame

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_findBaseFrame(self)


    def findTransformInBaseFrame(self):
        """
        findTransformInBaseFrame(FrameIterator self) -> Transform

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_findTransformInBaseFrame(self)


    def getPositionInGround(self, state):
        """
        getPositionInGround(FrameIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getPositionInGround(self, state)


    def getRotationInGround(self, state):
        """
        getRotationInGround(FrameIterator self, State state) -> SimTK::Rotation

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getRotationInGround(self, state)


    def getModel(self):
        """
        getModel(FrameIterator self) -> Model

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getModel(self)


    def hasModel(self):
        """
        hasModel(FrameIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_hasModel(self)


    def addToSystem(self, system):
        """
        addToSystem(FrameIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.FrameIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(FrameIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.FrameIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(FrameIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.FrameIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(FrameIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(FrameIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(FrameIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _simulation.FrameIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(FrameIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(FrameIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(FrameIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.FrameIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(FrameIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.FrameIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(FrameIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.FrameIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(FrameIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.FrameIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(FrameIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _simulation.FrameIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(FrameIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(FrameIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(FrameIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(FrameIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.FrameIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(FrameIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.FrameIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(FrameIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(FrameIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(FrameIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(FrameIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(FrameIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.FrameIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(FrameIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.FrameIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(FrameIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.FrameIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(FrameIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _simulation.FrameIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(FrameIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.FrameIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(FrameIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.FrameIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(FrameIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.FrameIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(FrameIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _simulation.FrameIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(FrameIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.FrameIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(FrameIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.FrameIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(FrameIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.FrameIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(FrameIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.FrameIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(FrameIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.FrameIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(FrameIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.FrameIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(FrameIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(FrameIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(FrameIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(FrameIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(FrameIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(FrameIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(FrameIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(FrameIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(FrameIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(FrameIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _simulation.FrameIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(FrameIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(FrameIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _simulation.FrameIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(FrameIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getName(self)


    def getDescription(self):
        """
        getDescription(FrameIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(FrameIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(FrameIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(FrameIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(FrameIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _simulation.FrameIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(FrameIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.FrameIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(FrameIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.FrameIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(FrameIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(FrameIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(FrameIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _simulation.FrameIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(FrameIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(FrameIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(FrameIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(FrameIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.FrameIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(FrameIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_dump(self)


    def isA(self, type):
        """
        isA(FrameIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _simulation.FrameIterator_isA(self, type)


    def toString(self):
        """
        toString(FrameIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Frame const > const *

        """
        return _simulation.FrameIterator_toString(self)

FrameIterator_swigregister = _simulation.FrameIterator_swigregister
FrameIterator_swigregister(FrameIterator)

class BodyList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::Body)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BodyList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::Body)> self, Component root, ComponentFilter f) -> BodyList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::Body)> self, Component root) -> BodyList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _simulation.new_BodyList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_BodyList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(BodyList self) -> BodyIterator
        begin(BodyList self) -> OpenSim::ComponentList< OpenSim::Body const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Body const > const *

        """
        return _simulation.BodyList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(BodyList self) -> OpenSim::ComponentList< OpenSim::Body const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Body const > const *

        """
        return _simulation.BodyList_cbegin(self)


    def end(self, *args):
        """
        end(BodyList self) -> BodyIterator
        end(BodyList self) -> OpenSim::ComponentList< OpenSim::Body const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Body const > const *

        """
        return _simulation.BodyList_end(self, *args)


    def cend(self):
        """
        cend(BodyList self) -> OpenSim::ComponentList< OpenSim::Body const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Body const > const *

        """
        return _simulation.BodyList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(BodyList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _simulation.BodyList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

BodyList_swigregister = _simulation.BodyList_swigregister
BodyList_swigregister(BodyList)

class BodyIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::Body)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BodyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(BodyIterator self, BodyIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Body const > const &

        """
        return _simulation.BodyIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(BodyIterator self, BodyIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Body const > const &

        """
        return _simulation.BodyIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(BodyIterator self, BodyIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Body const > const &

        """
        return _simulation.BodyIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(BodyIterator self) -> Body

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator___ref__(self)


    def deref(self):
        """
        deref(BodyIterator self) -> Body

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_deref(self)


    def __deref__(self):
        """
        __deref__(BodyIterator self) -> Body

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator___deref__(self)


    def next(self):
        """
        next(BodyIterator self) -> BodyIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > *

        """
        return _simulation.BodyIterator_next(self)

    __swig_destroy__ = _simulation.delete_BodyIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(BodyIterator self) -> Body

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(BodyIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getConcreteClassName(self)


    def get_mass(self, *args):
        """
        get_mass(BodyIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_mass(BodyIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_get_mass(self, *args)


    def get_mass_center(self, *args):
        """
        get_mass_center(BodyIterator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_mass_center(BodyIterator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_get_mass_center(self, *args)


    def get_inertia(self, *args):
        """
        get_inertia(BodyIterator self, int i) -> Vec6

        Parameters
        ----------
        i: int

        get_inertia(BodyIterator self) -> Vec6

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_get_inertia(self, *args)


    def getMass(self):
        """
        getMass(BodyIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getMass(self)


    def getMassCenter(self):
        """
        getMassCenter(BodyIterator self) -> Vec3

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getMassCenter(self)


    def getInertia(self):
        """
        getInertia(BodyIterator self) -> Inertia

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getInertia(self)


    def getMassProperties(self):
        """
        getMassProperties(BodyIterator self) -> MassProperties

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getMassProperties(self)


    def get_WrapObjectSet(self, *args):
        """
        get_WrapObjectSet(BodyIterator self, int i) -> WrapObjectSet

        Parameters
        ----------
        i: int

        get_WrapObjectSet(BodyIterator self) -> WrapObjectSet

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_get_WrapObjectSet(self, *args)


    def getMobilizedBodyIndex(self):
        """
        getMobilizedBodyIndex(BodyIterator self) -> SimTK::MobilizedBodyIndex const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getMobilizedBodyIndex(self)


    def getMobilizedBody(self):
        """
        getMobilizedBody(BodyIterator self) -> SimTK::MobilizedBody const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getMobilizedBody(self)


    def getWrapObject(self, aName):
        """
        getWrapObject(BodyIterator self, std::string const & aName) -> WrapObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _simulation.BodyIterator_getWrapObject(self, aName)


    def getWrapObjectSet(self):
        """
        getWrapObjectSet(BodyIterator self) -> WrapObjectSet

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getWrapObjectSet(self)


    def get_frame_geometry(self, *args):
        """
        get_frame_geometry(BodyIterator self, int i) -> FrameGeometry

        Parameters
        ----------
        i: int

        get_frame_geometry(BodyIterator self) -> FrameGeometry

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_get_frame_geometry(self, *args)


    def get_attached_geometry(self, i):
        """
        get_attached_geometry(BodyIterator self, int i) -> Geometry

        Parameters
        ----------
        i: int

        """
        return _simulation.BodyIterator_get_attached_geometry(self, i)

    __swig_getmethods__["_has_output_position"] = _simulation.BodyIterator__has_output_position_get
    if _newclass:
        _has_output_position = _swig_property(_simulation.BodyIterator__has_output_position_get)
    __swig_getmethods__["_has_output_rotation"] = _simulation.BodyIterator__has_output_rotation_get
    if _newclass:
        _has_output_rotation = _swig_property(_simulation.BodyIterator__has_output_rotation_get)
    __swig_getmethods__["_has_output_transform"] = _simulation.BodyIterator__has_output_transform_get
    if _newclass:
        _has_output_transform = _swig_property(_simulation.BodyIterator__has_output_transform_get)
    __swig_getmethods__["_has_output_velocity"] = _simulation.BodyIterator__has_output_velocity_get
    if _newclass:
        _has_output_velocity = _swig_property(_simulation.BodyIterator__has_output_velocity_get)
    __swig_getmethods__["_has_output_angular_velocity"] = _simulation.BodyIterator__has_output_angular_velocity_get
    if _newclass:
        _has_output_angular_velocity = _swig_property(_simulation.BodyIterator__has_output_angular_velocity_get)
    __swig_getmethods__["_has_output_linear_velocity"] = _simulation.BodyIterator__has_output_linear_velocity_get
    if _newclass:
        _has_output_linear_velocity = _swig_property(_simulation.BodyIterator__has_output_linear_velocity_get)
    __swig_getmethods__["_has_output_acceleration"] = _simulation.BodyIterator__has_output_acceleration_get
    if _newclass:
        _has_output_acceleration = _swig_property(_simulation.BodyIterator__has_output_acceleration_get)
    __swig_getmethods__["_has_output_angular_acceleration"] = _simulation.BodyIterator__has_output_angular_acceleration_get
    if _newclass:
        _has_output_angular_acceleration = _swig_property(_simulation.BodyIterator__has_output_angular_acceleration_get)
    __swig_getmethods__["_has_output_linear_acceleration"] = _simulation.BodyIterator__has_output_linear_acceleration_get
    if _newclass:
        _has_output_linear_acceleration = _swig_property(_simulation.BodyIterator__has_output_linear_acceleration_get)

    def getTransformInGround(self, state):
        """
        getTransformInGround(BodyIterator self, State state) -> Transform

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getTransformInGround(self, state)


    def getVelocityInGround(self, state):
        """
        getVelocityInGround(BodyIterator self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getVelocityInGround(self, state)


    def getAngularVelocityInGround(self, state):
        """
        getAngularVelocityInGround(BodyIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getAngularVelocityInGround(self, state)


    def getLinearVelocityInGround(self, state):
        """
        getLinearVelocityInGround(BodyIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getLinearVelocityInGround(self, state)


    def getAccelerationInGround(self, state):
        """
        getAccelerationInGround(BodyIterator self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getAccelerationInGround(self, state)


    def getAngularAccelerationInGround(self, state):
        """
        getAngularAccelerationInGround(BodyIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getAngularAccelerationInGround(self, state)


    def getLinearAccelerationInGround(self, state):
        """
        getLinearAccelerationInGround(BodyIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getLinearAccelerationInGround(self, state)


    def findTransformBetween(self, state, otherFrame):
        """
        findTransformBetween(BodyIterator self, State state, Frame otherFrame) -> Transform

        Parameters
        ----------
        state: SimTK::State const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.BodyIterator_findTransformBetween(self, state, otherFrame)


    def expressVectorInAnotherFrame(self, state, vec_F, otherFrame):
        """
        expressVectorInAnotherFrame(BodyIterator self, State state, Vec3 vec_F, Frame otherFrame) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        vec_F: SimTK::Vec3 const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.BodyIterator_expressVectorInAnotherFrame(self, state, vec_F, otherFrame)


    def expressVectorInGround(self, state, vec_F):
        """
        expressVectorInGround(BodyIterator self, State state, Vec3 vec_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        vec_F: SimTK::Vec3 const &

        """
        return _simulation.BodyIterator_expressVectorInGround(self, state, vec_F)


    def findStationLocationInAnotherFrame(self, state, station_F, otherFrame):
        """
        findStationLocationInAnotherFrame(BodyIterator self, State state, Vec3 station_F, Frame otherFrame) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &
        otherFrame: OpenSim::Frame const &

        """
        return _simulation.BodyIterator_findStationLocationInAnotherFrame(self, state, station_F, otherFrame)


    def findStationLocationInGround(self, state, station_F):
        """
        findStationLocationInGround(BodyIterator self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.BodyIterator_findStationLocationInGround(self, state, station_F)


    def findStationVelocityInGround(self, state, station_F):
        """
        findStationVelocityInGround(BodyIterator self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.BodyIterator_findStationVelocityInGround(self, state, station_F)


    def findStationAccelerationInGround(self, state, station_F):
        """
        findStationAccelerationInGround(BodyIterator self, State state, Vec3 station_F) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        station_F: SimTK::Vec3 const &

        """
        return _simulation.BodyIterator_findStationAccelerationInGround(self, state, station_F)


    def findBaseFrame(self):
        """
        findBaseFrame(BodyIterator self) -> Frame

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_findBaseFrame(self)


    def findTransformInBaseFrame(self):
        """
        findTransformInBaseFrame(BodyIterator self) -> Transform

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_findTransformInBaseFrame(self)


    def getPositionInGround(self, state):
        """
        getPositionInGround(BodyIterator self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getPositionInGround(self, state)


    def getRotationInGround(self, state):
        """
        getRotationInGround(BodyIterator self, State state) -> SimTK::Rotation

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getRotationInGround(self, state)


    def getModel(self):
        """
        getModel(BodyIterator self) -> Model

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getModel(self)


    def hasModel(self):
        """
        hasModel(BodyIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_hasModel(self)


    def addToSystem(self, system):
        """
        addToSystem(BodyIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.BodyIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(BodyIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.BodyIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(BodyIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.BodyIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(BodyIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(BodyIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(BodyIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _simulation.BodyIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(BodyIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(BodyIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(BodyIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.BodyIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(BodyIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.BodyIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(BodyIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.BodyIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(BodyIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.BodyIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(BodyIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _simulation.BodyIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(BodyIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(BodyIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(BodyIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(BodyIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.BodyIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(BodyIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.BodyIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(BodyIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(BodyIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(BodyIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(BodyIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(BodyIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.BodyIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(BodyIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.BodyIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(BodyIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.BodyIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(BodyIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _simulation.BodyIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(BodyIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.BodyIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(BodyIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.BodyIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(BodyIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.BodyIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(BodyIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _simulation.BodyIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(BodyIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.BodyIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(BodyIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.BodyIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(BodyIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.BodyIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(BodyIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.BodyIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(BodyIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.BodyIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(BodyIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.BodyIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(BodyIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(BodyIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(BodyIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(BodyIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(BodyIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(BodyIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(BodyIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(BodyIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(BodyIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(BodyIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _simulation.BodyIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(BodyIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(BodyIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _simulation.BodyIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(BodyIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getName(self)


    def getDescription(self):
        """
        getDescription(BodyIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(BodyIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(BodyIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(BodyIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(BodyIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _simulation.BodyIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(BodyIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.BodyIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(BodyIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.BodyIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(BodyIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(BodyIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(BodyIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _simulation.BodyIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(BodyIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(BodyIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(BodyIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(BodyIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.BodyIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(BodyIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_dump(self)


    def isA(self, type):
        """
        isA(BodyIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _simulation.BodyIterator_isA(self, type)


    def toString(self):
        """
        toString(BodyIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Body const > const *

        """
        return _simulation.BodyIterator_toString(self)

BodyIterator_swigregister = _simulation.BodyIterator_swigregister
BodyIterator_swigregister(BodyIterator)

class MuscleList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::Muscle)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::Muscle)> self, Component root, ComponentFilter f) -> MuscleList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::Muscle)> self, Component root) -> MuscleList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _simulation.new_MuscleList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_MuscleList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(MuscleList self) -> MuscleIterator
        begin(MuscleList self) -> OpenSim::ComponentList< OpenSim::Muscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(MuscleList self) -> OpenSim::ComponentList< OpenSim::Muscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleList_cbegin(self)


    def end(self, *args):
        """
        end(MuscleList self) -> MuscleIterator
        end(MuscleList self) -> OpenSim::ComponentList< OpenSim::Muscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleList_end(self, *args)


    def cend(self):
        """
        cend(MuscleList self) -> OpenSim::ComponentList< OpenSim::Muscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(MuscleList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _simulation.MuscleList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

MuscleList_swigregister = _simulation.MuscleList_swigregister
MuscleList_swigregister(MuscleList)

class MuscleIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::Muscle)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(MuscleIterator self, MuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Muscle const > const &

        """
        return _simulation.MuscleIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(MuscleIterator self, MuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Muscle const > const &

        """
        return _simulation.MuscleIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(MuscleIterator self, MuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Muscle const > const &

        """
        return _simulation.MuscleIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(MuscleIterator self) -> Muscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator___ref__(self)


    def deref(self):
        """
        deref(MuscleIterator self) -> Muscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_deref(self)


    def __deref__(self):
        """
        __deref__(MuscleIterator self) -> Muscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator___deref__(self)


    def next(self):
        """
        next(MuscleIterator self) -> MuscleIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > *

        """
        return _simulation.MuscleIterator_next(self)

    __swig_destroy__ = _simulation.delete_MuscleIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(MuscleIterator self) -> Muscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getConcreteClassName(self)


    def get_max_isometric_force(self, *args):
        """
        get_max_isometric_force(MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_isometric_force(MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_max_isometric_force(self, *args)


    def get_optimal_fiber_length(self, *args):
        """
        get_optimal_fiber_length(MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_fiber_length(MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_optimal_fiber_length(self, *args)


    def get_tendon_slack_length(self, *args):
        """
        get_tendon_slack_length(MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_tendon_slack_length(MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_tendon_slack_length(self, *args)


    def get_pennation_angle_at_optimal(self, *args):
        """
        get_pennation_angle_at_optimal(MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_pennation_angle_at_optimal(MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_pennation_angle_at_optimal(self, *args)


    def get_max_contraction_velocity(self, *args):
        """
        get_max_contraction_velocity(MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_contraction_velocity(MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_max_contraction_velocity(self, *args)


    def get_ignore_tendon_compliance(self, *args):
        """
        get_ignore_tendon_compliance(MuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_tendon_compliance(MuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_ignore_tendon_compliance(self, *args)


    def get_ignore_activation_dynamics(self, *args):
        """
        get_ignore_activation_dynamics(MuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_activation_dynamics(MuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_ignore_activation_dynamics(self, *args)

    __swig_getmethods__["_has_output_excitation"] = _simulation.MuscleIterator__has_output_excitation_get
    if _newclass:
        _has_output_excitation = _swig_property(_simulation.MuscleIterator__has_output_excitation_get)
    __swig_getmethods__["_has_output_activation"] = _simulation.MuscleIterator__has_output_activation_get
    if _newclass:
        _has_output_activation = _swig_property(_simulation.MuscleIterator__has_output_activation_get)
    __swig_getmethods__["_has_output_fiber_length"] = _simulation.MuscleIterator__has_output_fiber_length_get
    if _newclass:
        _has_output_fiber_length = _swig_property(_simulation.MuscleIterator__has_output_fiber_length_get)
    __swig_getmethods__["_has_output_pennation_angle"] = _simulation.MuscleIterator__has_output_pennation_angle_get
    if _newclass:
        _has_output_pennation_angle = _swig_property(_simulation.MuscleIterator__has_output_pennation_angle_get)
    __swig_getmethods__["_has_output_cos_pennation_angle"] = _simulation.MuscleIterator__has_output_cos_pennation_angle_get
    if _newclass:
        _has_output_cos_pennation_angle = _swig_property(_simulation.MuscleIterator__has_output_cos_pennation_angle_get)
    __swig_getmethods__["_has_output_tendon_length"] = _simulation.MuscleIterator__has_output_tendon_length_get
    if _newclass:
        _has_output_tendon_length = _swig_property(_simulation.MuscleIterator__has_output_tendon_length_get)
    __swig_getmethods__["_has_output_normalized_fiber_length"] = _simulation.MuscleIterator__has_output_normalized_fiber_length_get
    if _newclass:
        _has_output_normalized_fiber_length = _swig_property(_simulation.MuscleIterator__has_output_normalized_fiber_length_get)
    __swig_getmethods__["_has_output_fiber_length_along_tendon"] = _simulation.MuscleIterator__has_output_fiber_length_along_tendon_get
    if _newclass:
        _has_output_fiber_length_along_tendon = _swig_property(_simulation.MuscleIterator__has_output_fiber_length_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_strain"] = _simulation.MuscleIterator__has_output_tendon_strain_get
    if _newclass:
        _has_output_tendon_strain = _swig_property(_simulation.MuscleIterator__has_output_tendon_strain_get)
    __swig_getmethods__["_has_output_passive_force_multiplier"] = _simulation.MuscleIterator__has_output_passive_force_multiplier_get
    if _newclass:
        _has_output_passive_force_multiplier = _swig_property(_simulation.MuscleIterator__has_output_passive_force_multiplier_get)
    __swig_getmethods__["_has_output_active_force_length_multiplier"] = _simulation.MuscleIterator__has_output_active_force_length_multiplier_get
    if _newclass:
        _has_output_active_force_length_multiplier = _swig_property(_simulation.MuscleIterator__has_output_active_force_length_multiplier_get)
    __swig_getmethods__["_has_output_fiber_velocity"] = _simulation.MuscleIterator__has_output_fiber_velocity_get
    if _newclass:
        _has_output_fiber_velocity = _swig_property(_simulation.MuscleIterator__has_output_fiber_velocity_get)
    __swig_getmethods__["_has_output_normalized_fiber_velocity"] = _simulation.MuscleIterator__has_output_normalized_fiber_velocity_get
    if _newclass:
        _has_output_normalized_fiber_velocity = _swig_property(_simulation.MuscleIterator__has_output_normalized_fiber_velocity_get)
    __swig_getmethods__["_has_output_fiber_velocity_along_tendon"] = _simulation.MuscleIterator__has_output_fiber_velocity_along_tendon_get
    if _newclass:
        _has_output_fiber_velocity_along_tendon = _swig_property(_simulation.MuscleIterator__has_output_fiber_velocity_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_velocity"] = _simulation.MuscleIterator__has_output_tendon_velocity_get
    if _newclass:
        _has_output_tendon_velocity = _swig_property(_simulation.MuscleIterator__has_output_tendon_velocity_get)
    __swig_getmethods__["_has_output_force_velocity_multiplier"] = _simulation.MuscleIterator__has_output_force_velocity_multiplier_get
    if _newclass:
        _has_output_force_velocity_multiplier = _swig_property(_simulation.MuscleIterator__has_output_force_velocity_multiplier_get)
    __swig_getmethods__["_has_output_pennation_angular_velocity"] = _simulation.MuscleIterator__has_output_pennation_angular_velocity_get
    if _newclass:
        _has_output_pennation_angular_velocity = _swig_property(_simulation.MuscleIterator__has_output_pennation_angular_velocity_get)
    __swig_getmethods__["_has_output_fiber_force"] = _simulation.MuscleIterator__has_output_fiber_force_get
    if _newclass:
        _has_output_fiber_force = _swig_property(_simulation.MuscleIterator__has_output_fiber_force_get)
    __swig_getmethods__["_has_output_fiber_force_along_tendon"] = _simulation.MuscleIterator__has_output_fiber_force_along_tendon_get
    if _newclass:
        _has_output_fiber_force_along_tendon = _swig_property(_simulation.MuscleIterator__has_output_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_active_fiber_force"] = _simulation.MuscleIterator__has_output_active_fiber_force_get
    if _newclass:
        _has_output_active_fiber_force = _swig_property(_simulation.MuscleIterator__has_output_active_fiber_force_get)
    __swig_getmethods__["_has_output_passive_fiber_force"] = _simulation.MuscleIterator__has_output_passive_fiber_force_get
    if _newclass:
        _has_output_passive_fiber_force = _swig_property(_simulation.MuscleIterator__has_output_passive_fiber_force_get)
    __swig_getmethods__["_has_output_active_fiber_force_along_tendon"] = _simulation.MuscleIterator__has_output_active_fiber_force_along_tendon_get
    if _newclass:
        _has_output_active_fiber_force_along_tendon = _swig_property(_simulation.MuscleIterator__has_output_active_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_passive_fiber_force_along_tendon"] = _simulation.MuscleIterator__has_output_passive_fiber_force_along_tendon_get
    if _newclass:
        _has_output_passive_fiber_force_along_tendon = _swig_property(_simulation.MuscleIterator__has_output_passive_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_force"] = _simulation.MuscleIterator__has_output_tendon_force_get
    if _newclass:
        _has_output_tendon_force = _swig_property(_simulation.MuscleIterator__has_output_tendon_force_get)
    __swig_getmethods__["_has_output_fiber_stiffness"] = _simulation.MuscleIterator__has_output_fiber_stiffness_get
    if _newclass:
        _has_output_fiber_stiffness = _swig_property(_simulation.MuscleIterator__has_output_fiber_stiffness_get)
    __swig_getmethods__["_has_output_fiber_stiffness_along_tendon"] = _simulation.MuscleIterator__has_output_fiber_stiffness_along_tendon_get
    if _newclass:
        _has_output_fiber_stiffness_along_tendon = _swig_property(_simulation.MuscleIterator__has_output_fiber_stiffness_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_stiffness"] = _simulation.MuscleIterator__has_output_tendon_stiffness_get
    if _newclass:
        _has_output_tendon_stiffness = _swig_property(_simulation.MuscleIterator__has_output_tendon_stiffness_get)
    __swig_getmethods__["_has_output_muscle_stiffness"] = _simulation.MuscleIterator__has_output_muscle_stiffness_get
    if _newclass:
        _has_output_muscle_stiffness = _swig_property(_simulation.MuscleIterator__has_output_muscle_stiffness_get)
    __swig_getmethods__["_has_output_fiber_active_power"] = _simulation.MuscleIterator__has_output_fiber_active_power_get
    if _newclass:
        _has_output_fiber_active_power = _swig_property(_simulation.MuscleIterator__has_output_fiber_active_power_get)
    __swig_getmethods__["_has_output_fiber_passive_power"] = _simulation.MuscleIterator__has_output_fiber_passive_power_get
    if _newclass:
        _has_output_fiber_passive_power = _swig_property(_simulation.MuscleIterator__has_output_fiber_passive_power_get)
    __swig_getmethods__["_has_output_tendon_power"] = _simulation.MuscleIterator__has_output_tendon_power_get
    if _newclass:
        _has_output_tendon_power = _swig_property(_simulation.MuscleIterator__has_output_tendon_power_get)
    __swig_getmethods__["_has_output_muscle_power"] = _simulation.MuscleIterator__has_output_muscle_power_get
    if _newclass:
        _has_output_muscle_power = _swig_property(_simulation.MuscleIterator__has_output_muscle_power_get)

    def getMaxIsometricForce(self):
        """
        getMaxIsometricForce(MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getMaxIsometricForce(self)


    def getOptimalFiberLength(self):
        """
        getOptimalFiberLength(MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getOptimalFiberLength(self)


    def getTendonSlackLength(self):
        """
        getTendonSlackLength(MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getTendonSlackLength(self)


    def getPennationAngleAtOptimalFiberLength(self):
        """
        getPennationAngleAtOptimalFiberLength(MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getPennationAngleAtOptimalFiberLength(self)


    def getMaxContractionVelocity(self):
        """
        getMaxContractionVelocity(MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getMaxContractionVelocity(self)


    def getIgnoreTendonCompliance(self, s):
        """
        getIgnoreTendonCompliance(MuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getIgnoreTendonCompliance(self, s)


    def setIgnoreTendonCompliance(self, s, ignore):
        """
        setIgnoreTendonCompliance(MuscleIterator self, State s, bool ignore)

        Parameters
        ----------
        s: SimTK::State &
        ignore: bool

        """
        return _simulation.MuscleIterator_setIgnoreTendonCompliance(self, s, ignore)


    def getIgnoreActivationDynamics(self, s):
        """
        getIgnoreActivationDynamics(MuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getIgnoreActivationDynamics(self, s)


    def setIgnoreActivationDynamics(self, s, ignore):
        """
        setIgnoreActivationDynamics(MuscleIterator self, State s, bool ignore)

        Parameters
        ----------
        s: SimTK::State &
        ignore: bool

        """
        return _simulation.MuscleIterator_setIgnoreActivationDynamics(self, s, ignore)


    def getActivation(self, s):
        """
        getActivation(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getActivation(self, s)


    def getFiberLength(self, s):
        """
        getFiberLength(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberLength(self, s)


    def getPennationAngle(self, s):
        """
        getPennationAngle(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getPennationAngle(self, s)


    def getCosPennationAngle(self, s):
        """
        getCosPennationAngle(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getCosPennationAngle(self, s)


    def getTendonLength(self, s):
        """
        getTendonLength(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getTendonLength(self, s)


    def getNormalizedFiberLength(self, s):
        """
        getNormalizedFiberLength(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getNormalizedFiberLength(self, s)


    def getFiberLengthAlongTendon(self, s):
        """
        getFiberLengthAlongTendon(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberLengthAlongTendon(self, s)


    def getTendonStrain(self, s):
        """
        getTendonStrain(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getTendonStrain(self, s)


    def getFiberPotentialEnergy(self, s):
        """
        getFiberPotentialEnergy(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberPotentialEnergy(self, s)


    def getTendonPotentialEnergy(self, s):
        """
        getTendonPotentialEnergy(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getTendonPotentialEnergy(self, s)


    def getMusclePotentialEnergy(self, s):
        """
        getMusclePotentialEnergy(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getMusclePotentialEnergy(self, s)


    def getPassiveForceMultiplier(self, s):
        """
        getPassiveForceMultiplier(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getPassiveForceMultiplier(self, s)


    def getActiveForceLengthMultiplier(self, s):
        """
        getActiveForceLengthMultiplier(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getActiveForceLengthMultiplier(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberVelocity(self, s)


    def getNormalizedFiberVelocity(self, s):
        """
        getNormalizedFiberVelocity(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getNormalizedFiberVelocity(self, s)


    def getFiberVelocityAlongTendon(self, s):
        """
        getFiberVelocityAlongTendon(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberVelocityAlongTendon(self, s)


    def getPennationAngularVelocity(self, s):
        """
        getPennationAngularVelocity(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getPennationAngularVelocity(self, s)


    def getTendonVelocity(self, s):
        """
        getTendonVelocity(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getTendonVelocity(self, s)


    def getForceVelocityMultiplier(self, s):
        """
        getForceVelocityMultiplier(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getForceVelocityMultiplier(self, s)


    def getFiberForce(self, s):
        """
        getFiberForce(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberForce(self, s)


    def getFiberForceAlongTendon(self, s):
        """
        getFiberForceAlongTendon(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberForceAlongTendon(self, s)


    def getActiveFiberForce(self, s):
        """
        getActiveFiberForce(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getActiveFiberForce(self, s)


    def getPassiveFiberForce(self, s):
        """
        getPassiveFiberForce(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getPassiveFiberForce(self, s)


    def getActiveFiberForceAlongTendon(self, s):
        """
        getActiveFiberForceAlongTendon(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getActiveFiberForceAlongTendon(self, s)


    def getPassiveFiberForceAlongTendon(self, s):
        """
        getPassiveFiberForceAlongTendon(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getPassiveFiberForceAlongTendon(self, s)


    def getTendonForce(self, s):
        """
        getTendonForce(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getTendonForce(self, s)


    def getFiberStiffness(self, s):
        """
        getFiberStiffness(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberStiffness(self, s)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberStiffnessAlongTendon(self, s)


    def getTendonStiffness(self, s):
        """
        getTendonStiffness(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getTendonStiffness(self, s)


    def getMuscleStiffness(self, s):
        """
        getMuscleStiffness(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getMuscleStiffness(self, s)


    def getFiberActivePower(self, s):
        """
        getFiberActivePower(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberActivePower(self, s)


    def getFiberPassivePower(self, s):
        """
        getFiberPassivePower(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getFiberPassivePower(self, s)


    def getTendonPower(self, s):
        """
        getTendonPower(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getTendonPower(self, s)


    def getMusclePower(self, s):
        """
        getMusclePower(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getMusclePower(self, s)


    def getStress(self, s):
        """
        getStress(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getStress(self, s)


    def setExcitation(self, s, excitation):
        """
        setExcitation(MuscleIterator self, State s, double excitation)

        Parameters
        ----------
        s: SimTK::State &
        excitation: double

        """
        return _simulation.MuscleIterator_setExcitation(self, s, excitation)


    def getExcitation(self, s):
        """
        getExcitation(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getExcitation(self, s)


    def setActivation(self, s, activation):
        """
        setActivation(MuscleIterator self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _simulation.MuscleIterator_setActivation(self, s, activation)


    def computeActuation(self, s):
        """
        computeActuation(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_computeActuation(self, s)


    def computeEquilibrium(self, s):
        """
        computeEquilibrium(MuscleIterator self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.MuscleIterator_computeEquilibrium(self, s)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(MuscleIterator self, State s, double aActivation) -> double

        Parameters
        ----------
        s: SimTK::State &
        aActivation: double

        """
        return _simulation.MuscleIterator_calcInextensibleTendonActiveFiberForce(self, s, aActivation)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(MuscleIterator self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        get_GeometryPath(MuscleIterator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_GeometryPath(self, *args)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_optimal_force(self, *args)

    __swig_getmethods__["_has_output_tension"] = _simulation.MuscleIterator__has_output_tension_get
    if _newclass:
        _has_output_tension = _swig_property(_simulation.MuscleIterator__has_output_tension_get)

    def getGeometryPath(self):
        """
        getGeometryPath(MuscleIterator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getGeometryPath(self)


    def hasGeometryPath(self):
        """
        hasGeometryPath(MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_hasGeometryPath(self)


    def getOptimalForce(self):
        """
        getOptimalForce(MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getOptimalForce(self)


    def getLength(self, s):
        """
        getLength(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getLength(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getLengtheningSpeed(self, s)


    def getPower(self, s):
        """
        getPower(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getPower(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(MuscleIterator self, State s, Coordinate aCoord) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aCoord: OpenSim::Coordinate &

        """
        return _simulation.MuscleIterator_computeMomentArm(self, s, aCoord)


    def get_min_control(self, *args):
        """
        get_min_control(MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_min_control(MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_min_control(self, *args)


    def get_max_control(self, *args):
        """
        get_max_control(MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_control(MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_max_control(self, *args)

    __swig_getmethods__["_has_output_actuation"] = _simulation.MuscleIterator__has_output_actuation_get
    if _newclass:
        _has_output_actuation = _swig_property(_simulation.MuscleIterator__has_output_actuation_get)
    __swig_getmethods__["_has_output_speed"] = _simulation.MuscleIterator__has_output_speed_get
    if _newclass:
        _has_output_speed = _swig_property(_simulation.MuscleIterator__has_output_speed_get)

    def getControl(self, s):
        """
        getControl(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getControl(self, s)


    def numControls(self):
        """
        numControls(MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_numControls(self)


    def setActuation(self, s, aActuation):
        """
        setActuation(MuscleIterator self, State s, double aActuation)

        Parameters
        ----------
        s: SimTK::State const &
        aActuation: double

        """
        return _simulation.MuscleIterator_setActuation(self, s, aActuation)


    def getActuation(self, s):
        """
        getActuation(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getActuation(self, s)


    def setSpeed(self, s, aspeed):
        """
        setSpeed(MuscleIterator self, State s, double aspeed)

        Parameters
        ----------
        s: SimTK::State const &
        aspeed: double

        """
        return _simulation.MuscleIterator_setSpeed(self, s, aspeed)


    def getSpeed(self, s):
        """
        getSpeed(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getSpeed(self, s)


    def getMinControl(self):
        """
        getMinControl(MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getMinControl(self)


    def getMaxControl(self):
        """
        getMaxControl(MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getMaxControl(self)


    def overrideActuation(self, s, flag):
        """
        overrideActuation(MuscleIterator self, State s, bool flag)

        Parameters
        ----------
        s: SimTK::State &
        flag: bool

        """
        return _simulation.MuscleIterator_overrideActuation(self, s, flag)


    def isActuationOverridden(self, s):
        """
        isActuationOverridden(MuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_isActuationOverridden(self, s)


    def setOverrideActuation(self, s, value):
        """
        setOverrideActuation(MuscleIterator self, State s, double value)

        Parameters
        ----------
        s: SimTK::State &
        value: double

        """
        return _simulation.MuscleIterator_setOverrideActuation(self, s, value)


    def getOverrideActuation(self, s):
        """
        getOverrideActuation(MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_getOverrideActuation(self, s)


    def getControls(self, modelControls, actuatorControls):
        """
        getControls(MuscleIterator self, Vector modelControls, Vector actuatorControls)

        Parameters
        ----------
        modelControls: SimTK::Vector const &
        actuatorControls: SimTK::Vector &

        """
        return _simulation.MuscleIterator_getControls(self, modelControls, actuatorControls)


    def setControls(self, actuatorControls, modelControls):
        """
        setControls(MuscleIterator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.MuscleIterator_setControls(self, actuatorControls, modelControls)


    def addInControls(self, actuatorControls, modelControls):
        """
        addInControls(MuscleIterator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.MuscleIterator_addInControls(self, actuatorControls, modelControls)


    def get_appliesForce(self, *args):
        """
        get_appliesForce(MuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_appliesForce(MuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_get_appliesForce(self, *args)

    __swig_getmethods__["_has_output_potential_energy"] = _simulation.MuscleIterator__has_output_potential_energy_get
    if _newclass:
        _has_output_potential_energy = _swig_property(_simulation.MuscleIterator__has_output_potential_energy_get)

    def shouldBeParallelized(self):
        """
        shouldBeParallelized(MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_shouldBeParallelized(self)


    def appliesForce(self, s):
        """
        appliesForce(MuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.MuscleIterator_appliesForce(self, s)


    def setAppliesForce(self, s, applyForce):
        """
        setAppliesForce(MuscleIterator self, State s, bool applyForce)

        Parameters
        ----------
        s: SimTK::State &
        applyForce: bool

        """
        return _simulation.MuscleIterator_setAppliesForce(self, s, applyForce)


    def getModel(self):
        """
        getModel(MuscleIterator self) -> Model

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getModel(self)


    def hasModel(self):
        """
        hasModel(MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_hasModel(self)


    def addToSystem(self, system):
        """
        addToSystem(MuscleIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.MuscleIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(MuscleIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.MuscleIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(MuscleIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.MuscleIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(MuscleIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(MuscleIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _simulation.MuscleIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(MuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(MuscleIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(MuscleIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.MuscleIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(MuscleIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.MuscleIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(MuscleIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.MuscleIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(MuscleIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.MuscleIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(MuscleIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _simulation.MuscleIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(MuscleIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(MuscleIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.MuscleIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(MuscleIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.MuscleIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(MuscleIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(MuscleIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(MuscleIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.MuscleIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(MuscleIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.MuscleIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(MuscleIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.MuscleIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(MuscleIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _simulation.MuscleIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(MuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.MuscleIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(MuscleIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.MuscleIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(MuscleIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.MuscleIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(MuscleIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _simulation.MuscleIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(MuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.MuscleIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(MuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.MuscleIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(MuscleIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.MuscleIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(MuscleIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.MuscleIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(MuscleIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.MuscleIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(MuscleIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.MuscleIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(MuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(MuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(MuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(MuscleIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(MuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(MuscleIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(MuscleIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(MuscleIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(MuscleIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _simulation.MuscleIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(MuscleIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(MuscleIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _simulation.MuscleIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getName(self)


    def getDescription(self):
        """
        getDescription(MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(MuscleIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _simulation.MuscleIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(MuscleIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.MuscleIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(MuscleIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.MuscleIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(MuscleIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(MuscleIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _simulation.MuscleIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(MuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(MuscleIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.MuscleIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(MuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_dump(self)


    def isA(self, type):
        """
        isA(MuscleIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _simulation.MuscleIterator_isA(self, type)


    def toString(self):
        """
        toString(MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Muscle const > const *

        """
        return _simulation.MuscleIterator_toString(self)

MuscleIterator_swigregister = _simulation.MuscleIterator_swigregister
MuscleIterator_swigregister(MuscleIterator)

class ModelComponentList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::ModelComponent)> self, Component root, ComponentFilter f) -> ModelComponentList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::ModelComponent)> self, Component root) -> ModelComponentList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _simulation.new_ModelComponentList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ModelComponentList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(ModelComponentList self) -> ModelComponentIterator
        begin(ModelComponentList self) -> OpenSim::ComponentList< OpenSim::ModelComponent const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(ModelComponentList self) -> OpenSim::ComponentList< OpenSim::ModelComponent const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentList_cbegin(self)


    def end(self, *args):
        """
        end(ModelComponentList self) -> ModelComponentIterator
        end(ModelComponentList self) -> OpenSim::ComponentList< OpenSim::ModelComponent const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentList_end(self, *args)


    def cend(self):
        """
        cend(ModelComponentList self) -> OpenSim::ComponentList< OpenSim::ModelComponent const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(ModelComponentList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _simulation.ModelComponentList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

ModelComponentList_swigregister = _simulation.ModelComponentList_swigregister
ModelComponentList_swigregister(ModelComponentList)

class ModelComponentIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::ModelComponent)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelComponentIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelComponentIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(ModelComponentIterator self, ModelComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const &

        """
        return _simulation.ModelComponentIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(ModelComponentIterator self, ModelComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const &

        """
        return _simulation.ModelComponentIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(ModelComponentIterator self, ModelComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const &

        """
        return _simulation.ModelComponentIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(ModelComponentIterator self) -> ModelComponent

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator___ref__(self)


    def deref(self):
        """
        deref(ModelComponentIterator self) -> ModelComponent

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_deref(self)


    def __deref__(self):
        """
        __deref__(ModelComponentIterator self) -> ModelComponent

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator___deref__(self)


    def next(self):
        """
        next(ModelComponentIterator self) -> ModelComponentIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > *

        """
        return _simulation.ModelComponentIterator_next(self)

    __swig_destroy__ = _simulation.delete_ModelComponentIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ModelComponentIterator self) -> ModelComponent

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ModelComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getConcreteClassName(self)


    def getModel(self):
        """
        getModel(ModelComponentIterator self) -> Model

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getModel(self)


    def hasModel(self):
        """
        hasModel(ModelComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_hasModel(self)


    def addToSystem(self, system):
        """
        addToSystem(ModelComponentIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.ModelComponentIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(ModelComponentIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.ModelComponentIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(ModelComponentIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.ModelComponentIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(ModelComponentIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(ModelComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(ModelComponentIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _simulation.ModelComponentIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(ModelComponentIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(ModelComponentIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(ModelComponentIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.ModelComponentIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(ModelComponentIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.ModelComponentIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(ModelComponentIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.ModelComponentIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(ModelComponentIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.ModelComponentIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(ModelComponentIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _simulation.ModelComponentIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(ModelComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(ModelComponentIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(ModelComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(ModelComponentIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(ModelComponentIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(ModelComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(ModelComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(ModelComponentIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(ModelComponentIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(ModelComponentIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(ModelComponentIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(ModelComponentIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(ModelComponentIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _simulation.ModelComponentIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(ModelComponentIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(ModelComponentIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.ModelComponentIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(ModelComponentIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ModelComponentIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(ModelComponentIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _simulation.ModelComponentIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(ModelComponentIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(ModelComponentIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(ModelComponentIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.ModelComponentIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(ModelComponentIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(ModelComponentIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(ModelComponentIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(ModelComponentIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(ModelComponentIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(ModelComponentIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(ModelComponentIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(ModelComponentIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(ModelComponentIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(ModelComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(ModelComponentIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(ModelComponentIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(ModelComponentIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _simulation.ModelComponentIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(ModelComponentIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(ModelComponentIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _simulation.ModelComponentIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(ModelComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getName(self)


    def getDescription(self):
        """
        getDescription(ModelComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(ModelComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(ModelComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(ModelComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(ModelComponentIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _simulation.ModelComponentIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(ModelComponentIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(ModelComponentIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ModelComponentIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(ModelComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(ModelComponentIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(ModelComponentIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _simulation.ModelComponentIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(ModelComponentIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(ModelComponentIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(ModelComponentIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(ModelComponentIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.ModelComponentIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(ModelComponentIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_dump(self)


    def isA(self, type):
        """
        isA(ModelComponentIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _simulation.ModelComponentIterator_isA(self, type)


    def toString(self):
        """
        toString(ModelComponentIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::ModelComponent const > const *

        """
        return _simulation.ModelComponentIterator_toString(self)

ModelComponentIterator_swigregister = _simulation.ModelComponentIterator_swigregister
ModelComponentIterator_swigregister(ModelComponentIterator)

class JointList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::Joint)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::Joint)> self, Component root, ComponentFilter f) -> JointList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::Joint)> self, Component root) -> JointList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _simulation.new_JointList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_JointList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(JointList self) -> JointIterator
        begin(JointList self) -> OpenSim::ComponentList< OpenSim::Joint const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Joint const > const *

        """
        return _simulation.JointList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(JointList self) -> OpenSim::ComponentList< OpenSim::Joint const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Joint const > const *

        """
        return _simulation.JointList_cbegin(self)


    def end(self, *args):
        """
        end(JointList self) -> JointIterator
        end(JointList self) -> OpenSim::ComponentList< OpenSim::Joint const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Joint const > const *

        """
        return _simulation.JointList_end(self, *args)


    def cend(self):
        """
        cend(JointList self) -> OpenSim::ComponentList< OpenSim::Joint const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Joint const > const *

        """
        return _simulation.JointList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(JointList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _simulation.JointList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

JointList_swigregister = _simulation.JointList_swigregister
JointList_swigregister(JointList)

class JointIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::Joint)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(JointIterator self, JointIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Joint const > const &

        """
        return _simulation.JointIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(JointIterator self, JointIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Joint const > const &

        """
        return _simulation.JointIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(JointIterator self, JointIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Joint const > const &

        """
        return _simulation.JointIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(JointIterator self) -> Joint

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator___ref__(self)


    def deref(self):
        """
        deref(JointIterator self) -> Joint

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_deref(self)


    def __deref__(self):
        """
        __deref__(JointIterator self) -> Joint

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator___deref__(self)


    def next(self):
        """
        next(JointIterator self) -> JointIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > *

        """
        return _simulation.JointIterator_next(self)

    __swig_destroy__ = _simulation.delete_JointIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(JointIterator self) -> Joint

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(JointIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getConcreteClassName(self)


    def get_coordinates(self, i):
        """
        get_coordinates(JointIterator self, int i) -> Coordinate

        Parameters
        ----------
        i: int

        """
        return _simulation.JointIterator_get_coordinates(self, i)


    def get_frames(self, i):
        """
        get_frames(JointIterator self, int i) -> PhysicalOffsetFrame

        Parameters
        ----------
        i: int

        """
        return _simulation.JointIterator_get_frames(self, i)

    __swig_getmethods__["PropertyIndex_socket_parent_frame"] = _simulation.JointIterator_PropertyIndex_socket_parent_frame_get
    if _newclass:
        PropertyIndex_socket_parent_frame = _swig_property(_simulation.JointIterator_PropertyIndex_socket_parent_frame_get)
    __swig_getmethods__["PropertyIndex_socket_child_frame"] = _simulation.JointIterator_PropertyIndex_socket_child_frame_get
    if _newclass:
        PropertyIndex_socket_child_frame = _swig_property(_simulation.JointIterator_PropertyIndex_socket_child_frame_get)
    __swig_getmethods__["_has_output_power"] = _simulation.JointIterator__has_output_power_get
    if _newclass:
        _has_output_power = _swig_property(_simulation.JointIterator__has_output_power_get)
    __swig_getmethods__["_has_output_reaction_on_parent"] = _simulation.JointIterator__has_output_reaction_on_parent_get
    if _newclass:
        _has_output_reaction_on_parent = _swig_property(_simulation.JointIterator__has_output_reaction_on_parent_get)
    __swig_getmethods__["_has_output_reaction_on_child"] = _simulation.JointIterator__has_output_reaction_on_child_get
    if _newclass:
        _has_output_reaction_on_child = _swig_property(_simulation.JointIterator__has_output_reaction_on_child_get)

    def getChildFrame(self):
        """
        getChildFrame(JointIterator self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getChildFrame(self)


    def getParentFrame(self):
        """
        getParentFrame(JointIterator self) -> PhysicalFrame

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getParentFrame(self)


    def getCoordinate(self):
        """
        getCoordinate(JointIterator self) -> Coordinate

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getCoordinate(self)


    def numCoordinates(self):
        """
        numCoordinates(JointIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_numCoordinates(self)


    def isCoordinateUsed(self, aCoordinate):
        """
        isCoordinateUsed(JointIterator self, Coordinate aCoordinate) -> bool

        Parameters
        ----------
        aCoordinate: OpenSim::Coordinate const &

        """
        return _simulation.JointIterator_isCoordinateUsed(self, aCoordinate)


    def calcEquivalentSpatialForce(self, state, mobilityForces):
        """
        calcEquivalentSpatialForce(JointIterator self, State state, Vector mobilityForces) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &
        mobilityForces: SimTK::Vector const &

        """
        return _simulation.JointIterator_calcEquivalentSpatialForce(self, state, mobilityForces)


    def calcReactionOnParentExpressedInGround(self, state):
        """
        calcReactionOnParentExpressedInGround(JointIterator self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.JointIterator_calcReactionOnParentExpressedInGround(self, state)


    def calcReactionOnChildExpressedInGround(self, state):
        """
        calcReactionOnChildExpressedInGround(JointIterator self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.JointIterator_calcReactionOnChildExpressedInGround(self, state)


    def calcPower(self, s):
        """
        calcPower(JointIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.JointIterator_calcPower(self, s)


    def getModel(self):
        """
        getModel(JointIterator self) -> Model

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getModel(self)


    def hasModel(self):
        """
        hasModel(JointIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_hasModel(self)


    def addToSystem(self, system):
        """
        addToSystem(JointIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.JointIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(JointIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.JointIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(JointIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.JointIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(JointIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(JointIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(JointIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _simulation.JointIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(JointIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(JointIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(JointIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.JointIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(JointIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.JointIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(JointIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.JointIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(JointIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.JointIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(JointIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _simulation.JointIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(JointIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(JointIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(JointIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(JointIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.JointIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(JointIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.JointIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(JointIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(JointIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(JointIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(JointIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(JointIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.JointIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(JointIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.JointIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(JointIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.JointIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(JointIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _simulation.JointIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(JointIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.JointIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(JointIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.JointIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(JointIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.JointIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(JointIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _simulation.JointIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(JointIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.JointIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(JointIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.JointIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(JointIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.JointIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(JointIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.JointIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(JointIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.JointIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(JointIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.JointIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(JointIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(JointIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(JointIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(JointIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(JointIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(JointIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(JointIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(JointIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(JointIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(JointIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _simulation.JointIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(JointIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(JointIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _simulation.JointIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(JointIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getName(self)


    def getDescription(self):
        """
        getDescription(JointIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(JointIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(JointIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(JointIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(JointIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _simulation.JointIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(JointIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.JointIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(JointIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.JointIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(JointIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(JointIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(JointIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _simulation.JointIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(JointIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(JointIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(JointIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(JointIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.JointIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(JointIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_dump(self)


    def isA(self, type):
        """
        isA(JointIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _simulation.JointIterator_isA(self, type)


    def toString(self):
        """
        toString(JointIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Joint const > const *

        """
        return _simulation.JointIterator_toString(self)

JointIterator_swigregister = _simulation.JointIterator_swigregister
JointIterator_swigregister(JointIterator)

class ActuatorList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::Actuator)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActuatorList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActuatorList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::Actuator)> self, Component root, ComponentFilter f) -> ActuatorList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::Actuator)> self, Component root) -> ActuatorList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _simulation.new_ActuatorList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_ActuatorList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(ActuatorList self) -> ActuatorIterator
        begin(ActuatorList self) -> OpenSim::ComponentList< OpenSim::Actuator const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(ActuatorList self) -> OpenSim::ComponentList< OpenSim::Actuator const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorList_cbegin(self)


    def end(self, *args):
        """
        end(ActuatorList self) -> ActuatorIterator
        end(ActuatorList self) -> OpenSim::ComponentList< OpenSim::Actuator const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorList_end(self, *args)


    def cend(self):
        """
        cend(ActuatorList self) -> OpenSim::ComponentList< OpenSim::Actuator const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(ActuatorList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _simulation.ActuatorList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

ActuatorList_swigregister = _simulation.ActuatorList_swigregister
ActuatorList_swigregister(ActuatorList)

class ActuatorIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::Actuator)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActuatorIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActuatorIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(ActuatorIterator self, ActuatorIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Actuator const > const &

        """
        return _simulation.ActuatorIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(ActuatorIterator self, ActuatorIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Actuator const > const &

        """
        return _simulation.ActuatorIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(ActuatorIterator self, ActuatorIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Actuator const > const &

        """
        return _simulation.ActuatorIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(ActuatorIterator self) -> Actuator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator___ref__(self)


    def deref(self):
        """
        deref(ActuatorIterator self) -> Actuator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_deref(self)


    def __deref__(self):
        """
        __deref__(ActuatorIterator self) -> Actuator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator___deref__(self)


    def next(self):
        """
        next(ActuatorIterator self) -> ActuatorIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > *

        """
        return _simulation.ActuatorIterator_next(self)

    __swig_destroy__ = _simulation.delete_ActuatorIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ActuatorIterator self) -> Actuator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActuatorIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getConcreteClassName(self)


    def numControls(self):
        """
        numControls(ActuatorIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_numControls(self)


    def getControls(self, modelControls, actuatorControls):
        """
        getControls(ActuatorIterator self, Vector modelControls, Vector actuatorControls)

        Parameters
        ----------
        modelControls: SimTK::Vector const &
        actuatorControls: SimTK::Vector &

        """
        return _simulation.ActuatorIterator_getControls(self, modelControls, actuatorControls)


    def setControls(self, actuatorControls, modelControls):
        """
        setControls(ActuatorIterator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.ActuatorIterator_setControls(self, actuatorControls, modelControls)


    def addInControls(self, actuatorControls, modelControls):
        """
        addInControls(ActuatorIterator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.ActuatorIterator_addInControls(self, actuatorControls, modelControls)


    def getPower(self, s):
        """
        getPower(ActuatorIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ActuatorIterator_getPower(self, s)


    def computeEquilibrium(self, s):
        """
        computeEquilibrium(ActuatorIterator self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.ActuatorIterator_computeEquilibrium(self, s)


    def get_appliesForce(self, *args):
        """
        get_appliesForce(ActuatorIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_appliesForce(ActuatorIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_get_appliesForce(self, *args)

    __swig_getmethods__["_has_output_potential_energy"] = _simulation.ActuatorIterator__has_output_potential_energy_get
    if _newclass:
        _has_output_potential_energy = _swig_property(_simulation.ActuatorIterator__has_output_potential_energy_get)

    def shouldBeParallelized(self):
        """
        shouldBeParallelized(ActuatorIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_shouldBeParallelized(self)


    def appliesForce(self, s):
        """
        appliesForce(ActuatorIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.ActuatorIterator_appliesForce(self, s)


    def setAppliesForce(self, s, applyForce):
        """
        setAppliesForce(ActuatorIterator self, State s, bool applyForce)

        Parameters
        ----------
        s: SimTK::State &
        applyForce: bool

        """
        return _simulation.ActuatorIterator_setAppliesForce(self, s, applyForce)


    def getRecordLabels(self):
        """
        getRecordLabels(ActuatorIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getRecordLabels(self)


    def getRecordValues(self, state):
        """
        getRecordValues(ActuatorIterator self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ActuatorIterator_getRecordValues(self, state)


    def hasGeometryPath(self):
        """
        hasGeometryPath(ActuatorIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_hasGeometryPath(self)


    def getModel(self):
        """
        getModel(ActuatorIterator self) -> Model

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getModel(self)


    def hasModel(self):
        """
        hasModel(ActuatorIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_hasModel(self)


    def addToSystem(self, system):
        """
        addToSystem(ActuatorIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.ActuatorIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(ActuatorIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.ActuatorIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(ActuatorIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.ActuatorIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(ActuatorIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(ActuatorIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(ActuatorIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _simulation.ActuatorIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(ActuatorIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(ActuatorIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(ActuatorIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.ActuatorIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(ActuatorIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.ActuatorIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(ActuatorIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.ActuatorIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(ActuatorIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.ActuatorIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(ActuatorIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _simulation.ActuatorIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(ActuatorIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(ActuatorIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(ActuatorIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(ActuatorIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(ActuatorIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(ActuatorIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(ActuatorIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(ActuatorIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(ActuatorIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(ActuatorIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(ActuatorIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(ActuatorIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(ActuatorIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _simulation.ActuatorIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(ActuatorIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(ActuatorIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.ActuatorIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(ActuatorIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.ActuatorIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(ActuatorIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _simulation.ActuatorIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(ActuatorIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(ActuatorIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(ActuatorIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.ActuatorIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(ActuatorIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ActuatorIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(ActuatorIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ActuatorIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(ActuatorIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.ActuatorIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(ActuatorIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(ActuatorIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(ActuatorIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(ActuatorIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(ActuatorIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(ActuatorIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(ActuatorIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(ActuatorIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(ActuatorIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(ActuatorIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _simulation.ActuatorIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(ActuatorIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(ActuatorIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _simulation.ActuatorIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(ActuatorIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getName(self)


    def getDescription(self):
        """
        getDescription(ActuatorIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(ActuatorIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(ActuatorIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(ActuatorIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(ActuatorIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _simulation.ActuatorIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(ActuatorIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ActuatorIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(ActuatorIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.ActuatorIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(ActuatorIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(ActuatorIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(ActuatorIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _simulation.ActuatorIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(ActuatorIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(ActuatorIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(ActuatorIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(ActuatorIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.ActuatorIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(ActuatorIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_dump(self)


    def isA(self, type):
        """
        isA(ActuatorIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _simulation.ActuatorIterator_isA(self, type)


    def toString(self):
        """
        toString(ActuatorIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Actuator const > const *

        """
        return _simulation.ActuatorIterator_toString(self)

ActuatorIterator_swigregister = _simulation.ActuatorIterator_swigregister
ActuatorIterator_swigregister(ActuatorIterator)

class ActiveForceLengthCurve(opensim.common.Function):
    """Proxy of C++ OpenSim::ActiveForceLengthCurve class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActiveForceLengthCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActiveForceLengthCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ActiveForceLengthCurve

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ActiveForceLengthCurve_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ActiveForceLengthCurve self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ActiveForceLengthCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ActiveForceLengthCurve_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ActiveForceLengthCurve self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ActiveForceLengthCurve self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_getConcreteClassName(self)


    def copyProperty_min_norm_active_fiber_length(self, source):
        """
        copyProperty_min_norm_active_fiber_length(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _simulation.ActiveForceLengthCurve_copyProperty_min_norm_active_fiber_length(self, source)


    def append_min_norm_active_fiber_length(self, value):
        """
        append_min_norm_active_fiber_length(ActiveForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_append_min_norm_active_fiber_length(self, value)


    def constructProperty_min_norm_active_fiber_length(self, initValue):
        """
        constructProperty_min_norm_active_fiber_length(ActiveForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActiveForceLengthCurve_constructProperty_min_norm_active_fiber_length(self, initValue)


    def get_min_norm_active_fiber_length(self, *args):
        """
        get_min_norm_active_fiber_length(ActiveForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_min_norm_active_fiber_length(ActiveForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_get_min_norm_active_fiber_length(self, *args)


    def upd_min_norm_active_fiber_length(self, *args):
        """
        upd_min_norm_active_fiber_length(ActiveForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_min_norm_active_fiber_length(ActiveForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve *

        """
        return _simulation.ActiveForceLengthCurve_upd_min_norm_active_fiber_length(self, *args)


    def set_min_norm_active_fiber_length(self, *args):
        """
        set_min_norm_active_fiber_length(ActiveForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_min_norm_active_fiber_length(ActiveForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_set_min_norm_active_fiber_length(self, *args)


    def copyProperty_transition_norm_fiber_length(self, source):
        """
        copyProperty_transition_norm_fiber_length(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _simulation.ActiveForceLengthCurve_copyProperty_transition_norm_fiber_length(self, source)


    def append_transition_norm_fiber_length(self, value):
        """
        append_transition_norm_fiber_length(ActiveForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_append_transition_norm_fiber_length(self, value)


    def constructProperty_transition_norm_fiber_length(self, initValue):
        """
        constructProperty_transition_norm_fiber_length(ActiveForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActiveForceLengthCurve_constructProperty_transition_norm_fiber_length(self, initValue)


    def get_transition_norm_fiber_length(self, *args):
        """
        get_transition_norm_fiber_length(ActiveForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_transition_norm_fiber_length(ActiveForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_get_transition_norm_fiber_length(self, *args)


    def upd_transition_norm_fiber_length(self, *args):
        """
        upd_transition_norm_fiber_length(ActiveForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_transition_norm_fiber_length(ActiveForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve *

        """
        return _simulation.ActiveForceLengthCurve_upd_transition_norm_fiber_length(self, *args)


    def set_transition_norm_fiber_length(self, *args):
        """
        set_transition_norm_fiber_length(ActiveForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_transition_norm_fiber_length(ActiveForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_set_transition_norm_fiber_length(self, *args)


    def copyProperty_max_norm_active_fiber_length(self, source):
        """
        copyProperty_max_norm_active_fiber_length(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _simulation.ActiveForceLengthCurve_copyProperty_max_norm_active_fiber_length(self, source)


    def append_max_norm_active_fiber_length(self, value):
        """
        append_max_norm_active_fiber_length(ActiveForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_append_max_norm_active_fiber_length(self, value)


    def constructProperty_max_norm_active_fiber_length(self, initValue):
        """
        constructProperty_max_norm_active_fiber_length(ActiveForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActiveForceLengthCurve_constructProperty_max_norm_active_fiber_length(self, initValue)


    def get_max_norm_active_fiber_length(self, *args):
        """
        get_max_norm_active_fiber_length(ActiveForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_norm_active_fiber_length(ActiveForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_get_max_norm_active_fiber_length(self, *args)


    def upd_max_norm_active_fiber_length(self, *args):
        """
        upd_max_norm_active_fiber_length(ActiveForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_max_norm_active_fiber_length(ActiveForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve *

        """
        return _simulation.ActiveForceLengthCurve_upd_max_norm_active_fiber_length(self, *args)


    def set_max_norm_active_fiber_length(self, *args):
        """
        set_max_norm_active_fiber_length(ActiveForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_max_norm_active_fiber_length(ActiveForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_set_max_norm_active_fiber_length(self, *args)


    def copyProperty_shallow_ascending_slope(self, source):
        """
        copyProperty_shallow_ascending_slope(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _simulation.ActiveForceLengthCurve_copyProperty_shallow_ascending_slope(self, source)


    def append_shallow_ascending_slope(self, value):
        """
        append_shallow_ascending_slope(ActiveForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_append_shallow_ascending_slope(self, value)


    def constructProperty_shallow_ascending_slope(self, initValue):
        """
        constructProperty_shallow_ascending_slope(ActiveForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActiveForceLengthCurve_constructProperty_shallow_ascending_slope(self, initValue)


    def get_shallow_ascending_slope(self, *args):
        """
        get_shallow_ascending_slope(ActiveForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_shallow_ascending_slope(ActiveForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_get_shallow_ascending_slope(self, *args)


    def upd_shallow_ascending_slope(self, *args):
        """
        upd_shallow_ascending_slope(ActiveForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_shallow_ascending_slope(ActiveForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve *

        """
        return _simulation.ActiveForceLengthCurve_upd_shallow_ascending_slope(self, *args)


    def set_shallow_ascending_slope(self, *args):
        """
        set_shallow_ascending_slope(ActiveForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_shallow_ascending_slope(ActiveForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_set_shallow_ascending_slope(self, *args)


    def copyProperty_minimum_value(self, source):
        """
        copyProperty_minimum_value(ActiveForceLengthCurve self, ActiveForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::ActiveForceLengthCurve::Self const &

        """
        return _simulation.ActiveForceLengthCurve_copyProperty_minimum_value(self, source)


    def append_minimum_value(self, value):
        """
        append_minimum_value(ActiveForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_append_minimum_value(self, value)


    def constructProperty_minimum_value(self, initValue):
        """
        constructProperty_minimum_value(ActiveForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ActiveForceLengthCurve_constructProperty_minimum_value(self, initValue)


    def get_minimum_value(self, *args):
        """
        get_minimum_value(ActiveForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_minimum_value(ActiveForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_get_minimum_value(self, *args)


    def upd_minimum_value(self, *args):
        """
        upd_minimum_value(ActiveForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_minimum_value(ActiveForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve *

        """
        return _simulation.ActiveForceLengthCurve_upd_minimum_value(self, *args)


    def set_minimum_value(self, *args):
        """
        set_minimum_value(ActiveForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_minimum_value(ActiveForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ActiveForceLengthCurve_set_minimum_value(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ActiveForceLengthCurve self) -> ActiveForceLengthCurve
        __init__(OpenSim::ActiveForceLengthCurve self, double minActiveNormFiberLength, double transitionNormFiberLength, double maxActiveNormFiberLength, double shallowAscendingSlope, double minimumValue) -> ActiveForceLengthCurve

        Parameters
        ----------
        minActiveNormFiberLength: double
        transitionNormFiberLength: double
        maxActiveNormFiberLength: double
        shallowAscendingSlope: double
        minimumValue: double

        """
        this = _simulation.new_ActiveForceLengthCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMinActiveFiberLength(self):
        """
        getMinActiveFiberLength(ActiveForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_getMinActiveFiberLength(self)


    def getTransitionFiberLength(self):
        """
        getTransitionFiberLength(ActiveForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_getTransitionFiberLength(self)


    def getMaxActiveFiberLength(self):
        """
        getMaxActiveFiberLength(ActiveForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_getMaxActiveFiberLength(self)


    def getShallowAscendingSlope(self):
        """
        getShallowAscendingSlope(ActiveForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_getShallowAscendingSlope(self)


    def getMinValue(self):
        """
        getMinValue(ActiveForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_getMinValue(self)


    def setActiveFiberLengths(self, minActiveNormFiberLength, transitionNormFiberLength, maxActiveNormFiberLength, shallowAscendingSlope):
        """
        setActiveFiberLengths(ActiveForceLengthCurve self, double minActiveNormFiberLength, double transitionNormFiberLength, double maxActiveNormFiberLength, double shallowAscendingSlope)

        Parameters
        ----------
        minActiveNormFiberLength: double
        transitionNormFiberLength: double
        maxActiveNormFiberLength: double
        shallowAscendingSlope: double

        """
        return _simulation.ActiveForceLengthCurve_setActiveFiberLengths(self, minActiveNormFiberLength, transitionNormFiberLength, maxActiveNormFiberLength, shallowAscendingSlope)


    def setMinValue(self, minimumValue):
        """
        setMinValue(ActiveForceLengthCurve self, double minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _simulation.ActiveForceLengthCurve_setMinValue(self, minimumValue)


    def calcValue(self, *args):
        """
        calcValue(ActiveForceLengthCurve self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        calcValue(ActiveForceLengthCurve self, double normFiberLength) -> double

        Parameters
        ----------
        normFiberLength: double

        """
        return _simulation.ActiveForceLengthCurve_calcValue(self, *args)


    def calcDerivative(self, *args):
        """
        calcDerivative(ActiveForceLengthCurve self, double normFiberLength, int order) -> double

        Parameters
        ----------
        normFiberLength: double
        order: int

        calcDerivative(ActiveForceLengthCurve self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _simulation.ActiveForceLengthCurve_calcDerivative(self, *args)


    def getCurveDomain(self):
        """
        getCurveDomain(ActiveForceLengthCurve self) -> Vec2

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve const *

        """
        return _simulation.ActiveForceLengthCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(ActiveForceLengthCurve self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _simulation.ActiveForceLengthCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(ActiveForceLengthCurve self)

        Parameters
        ----------
        self: OpenSim::ActiveForceLengthCurve *

        """
        return _simulation.ActiveForceLengthCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _simulation.delete_ActiveForceLengthCurve
    __del__ = lambda self: None
ActiveForceLengthCurve_swigregister = _simulation.ActiveForceLengthCurve_swigregister
ActiveForceLengthCurve_swigregister(ActiveForceLengthCurve)

def ActiveForceLengthCurve_safeDownCast(obj):
    """
    ActiveForceLengthCurve_safeDownCast(OpenSimObject obj) -> ActiveForceLengthCurve

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ActiveForceLengthCurve_safeDownCast(obj)

def ActiveForceLengthCurve_getClassName():
    """ActiveForceLengthCurve_getClassName() -> std::string const &"""
    return _simulation.ActiveForceLengthCurve_getClassName()

class FiberCompressiveForceCosPennationCurve(opensim.common.Function):
    """Proxy of C++ OpenSim::FiberCompressiveForceCosPennationCurve class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiberCompressiveForceCosPennationCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiberCompressiveForceCosPennationCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(FiberCompressiveForceCosPennationCurve self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.FiberCompressiveForceCosPennationCurve_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(FiberCompressiveForceCosPennationCurve self) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FiberCompressiveForceCosPennationCurve self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_getConcreteClassName(self)


    def copyProperty_engagement_angle_in_degrees(self, source):
        """
        copyProperty_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, FiberCompressiveForceCosPennationCurve source)

        Parameters
        ----------
        source: OpenSim::FiberCompressiveForceCosPennationCurve::Self const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_copyProperty_engagement_angle_in_degrees(self, source)


    def append_engagement_angle_in_degrees(self, value):
        """
        append_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_append_engagement_angle_in_degrees(self, value)


    def constructProperty_engagement_angle_in_degrees(self, initValue):
        """
        constructProperty_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_constructProperty_engagement_angle_in_degrees(self, initValue)


    def get_engagement_angle_in_degrees(self, *args):
        """
        get_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_get_engagement_angle_in_degrees(self, *args)


    def upd_engagement_angle_in_degrees(self, *args):
        """
        upd_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_upd_engagement_angle_in_degrees(self, *args)


    def set_engagement_angle_in_degrees(self, *args):
        """
        set_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_engagement_angle_in_degrees(FiberCompressiveForceCosPennationCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_set_engagement_angle_in_degrees(self, *args)


    def copyProperty_stiffness_at_perpendicular(self, source):
        """
        copyProperty_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, FiberCompressiveForceCosPennationCurve source)

        Parameters
        ----------
        source: OpenSim::FiberCompressiveForceCosPennationCurve::Self const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_copyProperty_stiffness_at_perpendicular(self, source)


    def append_stiffness_at_perpendicular(self, value):
        """
        append_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_append_stiffness_at_perpendicular(self, value)


    def constructProperty_stiffness_at_perpendicular(self, *args):
        """
        constructProperty_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self)
        constructProperty_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_constructProperty_stiffness_at_perpendicular(self, *args)


    def get_stiffness_at_perpendicular(self, *args):
        """
        get_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_get_stiffness_at_perpendicular(self, *args)


    def upd_stiffness_at_perpendicular(self, *args):
        """
        upd_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_upd_stiffness_at_perpendicular(self, *args)


    def set_stiffness_at_perpendicular(self, *args):
        """
        set_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness_at_perpendicular(FiberCompressiveForceCosPennationCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_set_stiffness_at_perpendicular(self, *args)


    def copyProperty_curviness(self, source):
        """
        copyProperty_curviness(FiberCompressiveForceCosPennationCurve self, FiberCompressiveForceCosPennationCurve source)

        Parameters
        ----------
        source: OpenSim::FiberCompressiveForceCosPennationCurve::Self const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_copyProperty_curviness(self, source)


    def append_curviness(self, value):
        """
        append_curviness(FiberCompressiveForceCosPennationCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_append_curviness(self, value)


    def constructProperty_curviness(self, *args):
        """
        constructProperty_curviness(FiberCompressiveForceCosPennationCurve self)
        constructProperty_curviness(FiberCompressiveForceCosPennationCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_constructProperty_curviness(self, *args)


    def get_curviness(self, *args):
        """
        get_curviness(FiberCompressiveForceCosPennationCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_curviness(FiberCompressiveForceCosPennationCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_get_curviness(self, *args)


    def upd_curviness(self, *args):
        """
        upd_curviness(FiberCompressiveForceCosPennationCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_curviness(FiberCompressiveForceCosPennationCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_upd_curviness(self, *args)


    def set_curviness(self, *args):
        """
        set_curviness(FiberCompressiveForceCosPennationCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_curviness(FiberCompressiveForceCosPennationCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_set_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FiberCompressiveForceCosPennationCurve self) -> FiberCompressiveForceCosPennationCurve
        __init__(OpenSim::FiberCompressiveForceCosPennationCurve self, double engagementAngleInDegrees, double stiffnessAtPerpendicular, double curviness, std::string const & muscleName) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        engagementAngleInDegrees: double
        stiffnessAtPerpendicular: double
        curviness: double
        muscleName: std::string const &

        __init__(OpenSim::FiberCompressiveForceCosPennationCurve self, double engagementAngleInDegrees, std::string const & muscleName) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        engagementAngleInDegrees: double
        muscleName: std::string const &

        """
        this = _simulation.new_FiberCompressiveForceCosPennationCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getEngagementAngleInDegrees(self):
        """
        getEngagementAngleInDegrees(FiberCompressiveForceCosPennationCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_getEngagementAngleInDegrees(self)


    def getStiffnessAtPerpendicularInUse(self):
        """
        getStiffnessAtPerpendicularInUse(FiberCompressiveForceCosPennationCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_getStiffnessAtPerpendicularInUse(self)


    def getCurvinessInUse(self):
        """
        getCurvinessInUse(FiberCompressiveForceCosPennationCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_getCurvinessInUse(self)


    def isFittedCurveBeingUsed(self):
        """
        isFittedCurveBeingUsed(FiberCompressiveForceCosPennationCurve self) -> bool

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_isFittedCurveBeingUsed(self)


    def setEngagementAngleInDegrees(self, aEngagementAngleInDegrees):
        """
        setEngagementAngleInDegrees(FiberCompressiveForceCosPennationCurve self, double aEngagementAngleInDegrees)

        Parameters
        ----------
        aEngagementAngleInDegrees: double

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_setEngagementAngleInDegrees(self, aEngagementAngleInDegrees)


    def setOptionalProperties(self, aStiffnessAtPerpendicular, aCurviness):
        """
        setOptionalProperties(FiberCompressiveForceCosPennationCurve self, double aStiffnessAtPerpendicular, double aCurviness)

        Parameters
        ----------
        aStiffnessAtPerpendicular: double
        aCurviness: double

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_setOptionalProperties(self, aStiffnessAtPerpendicular, aCurviness)


    def calcValue(self, *args):
        """
        calcValue(FiberCompressiveForceCosPennationCurve self, double cosPennationAngle) -> double

        Parameters
        ----------
        cosPennationAngle: double

        calcValue(FiberCompressiveForceCosPennationCurve self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_calcValue(self, *args)


    def calcDerivative(self, *args):
        """
        calcDerivative(FiberCompressiveForceCosPennationCurve self, double cosPennationAngle, int order) -> double

        Parameters
        ----------
        cosPennationAngle: double
        order: int

        calcDerivative(FiberCompressiveForceCosPennationCurve self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_calcDerivative(self, *args)


    def calcIntegral(self, cosPennationAngle):
        """
        calcIntegral(FiberCompressiveForceCosPennationCurve self, double cosPennationAngle) -> double

        Parameters
        ----------
        cosPennationAngle: double

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_calcIntegral(self, cosPennationAngle)


    def getCurveDomain(self):
        """
        getCurveDomain(FiberCompressiveForceCosPennationCurve self) -> Vec2

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve const *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(FiberCompressiveForceCosPennationCurve self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(FiberCompressiveForceCosPennationCurve self)

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceCosPennationCurve *

        """
        return _simulation.FiberCompressiveForceCosPennationCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _simulation.delete_FiberCompressiveForceCosPennationCurve
    __del__ = lambda self: None
FiberCompressiveForceCosPennationCurve_swigregister = _simulation.FiberCompressiveForceCosPennationCurve_swigregister
FiberCompressiveForceCosPennationCurve_swigregister(FiberCompressiveForceCosPennationCurve)

def FiberCompressiveForceCosPennationCurve_safeDownCast(obj):
    """
    FiberCompressiveForceCosPennationCurve_safeDownCast(OpenSimObject obj) -> FiberCompressiveForceCosPennationCurve

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.FiberCompressiveForceCosPennationCurve_safeDownCast(obj)

def FiberCompressiveForceCosPennationCurve_getClassName():
    """FiberCompressiveForceCosPennationCurve_getClassName() -> std::string const &"""
    return _simulation.FiberCompressiveForceCosPennationCurve_getClassName()

class FiberCompressiveForceLengthCurve(opensim.common.Function):
    """Proxy of C++ OpenSim::FiberCompressiveForceLengthCurve class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiberCompressiveForceLengthCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiberCompressiveForceLengthCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.FiberCompressiveForceLengthCurve_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(FiberCompressiveForceLengthCurve self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.FiberCompressiveForceLengthCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.FiberCompressiveForceLengthCurve_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(FiberCompressiveForceLengthCurve self) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FiberCompressiveForceLengthCurve self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_getConcreteClassName(self)


    def copyProperty_norm_length_at_zero_force(self, source):
        """
        copyProperty_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, FiberCompressiveForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::FiberCompressiveForceLengthCurve::Self const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_copyProperty_norm_length_at_zero_force(self, source)


    def append_norm_length_at_zero_force(self, value):
        """
        append_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_append_norm_length_at_zero_force(self, value)


    def constructProperty_norm_length_at_zero_force(self, initValue):
        """
        constructProperty_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_constructProperty_norm_length_at_zero_force(self, initValue)


    def get_norm_length_at_zero_force(self, *args):
        """
        get_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_get_norm_length_at_zero_force(self, *args)


    def upd_norm_length_at_zero_force(self, *args):
        """
        upd_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve *

        """
        return _simulation.FiberCompressiveForceLengthCurve_upd_norm_length_at_zero_force(self, *args)


    def set_norm_length_at_zero_force(self, *args):
        """
        set_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_norm_length_at_zero_force(FiberCompressiveForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_set_norm_length_at_zero_force(self, *args)


    def copyProperty_stiffness_at_zero_length(self, source):
        """
        copyProperty_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, FiberCompressiveForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::FiberCompressiveForceLengthCurve::Self const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_copyProperty_stiffness_at_zero_length(self, source)


    def append_stiffness_at_zero_length(self, value):
        """
        append_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_append_stiffness_at_zero_length(self, value)


    def constructProperty_stiffness_at_zero_length(self, *args):
        """
        constructProperty_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self)
        constructProperty_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_constructProperty_stiffness_at_zero_length(self, *args)


    def get_stiffness_at_zero_length(self, *args):
        """
        get_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_get_stiffness_at_zero_length(self, *args)


    def upd_stiffness_at_zero_length(self, *args):
        """
        upd_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve *

        """
        return _simulation.FiberCompressiveForceLengthCurve_upd_stiffness_at_zero_length(self, *args)


    def set_stiffness_at_zero_length(self, *args):
        """
        set_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness_at_zero_length(FiberCompressiveForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_set_stiffness_at_zero_length(self, *args)


    def copyProperty_curviness(self, source):
        """
        copyProperty_curviness(FiberCompressiveForceLengthCurve self, FiberCompressiveForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::FiberCompressiveForceLengthCurve::Self const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_copyProperty_curviness(self, source)


    def append_curviness(self, value):
        """
        append_curviness(FiberCompressiveForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_append_curviness(self, value)


    def constructProperty_curviness(self, *args):
        """
        constructProperty_curviness(FiberCompressiveForceLengthCurve self)
        constructProperty_curviness(FiberCompressiveForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_constructProperty_curviness(self, *args)


    def get_curviness(self, *args):
        """
        get_curviness(FiberCompressiveForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_curviness(FiberCompressiveForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_get_curviness(self, *args)


    def upd_curviness(self, *args):
        """
        upd_curviness(FiberCompressiveForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_curviness(FiberCompressiveForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve *

        """
        return _simulation.FiberCompressiveForceLengthCurve_upd_curviness(self, *args)


    def set_curviness(self, *args):
        """
        set_curviness(FiberCompressiveForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_curviness(FiberCompressiveForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_set_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FiberCompressiveForceLengthCurve self) -> FiberCompressiveForceLengthCurve
        __init__(OpenSim::FiberCompressiveForceLengthCurve self, double normLengthAtZeroForce, double stiffnessAtZeroLength, double curviness, std::string const & muscleName) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        normLengthAtZeroForce: double
        stiffnessAtZeroLength: double
        curviness: double
        muscleName: std::string const &

        """
        this = _simulation.new_FiberCompressiveForceLengthCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNormLengthAtZeroForce(self):
        """
        getNormLengthAtZeroForce(FiberCompressiveForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_getNormLengthAtZeroForce(self)


    def getStiffnessAtZeroLengthInUse(self):
        """
        getStiffnessAtZeroLengthInUse(FiberCompressiveForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_getStiffnessAtZeroLengthInUse(self)


    def getCurvinessInUse(self):
        """
        getCurvinessInUse(FiberCompressiveForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_getCurvinessInUse(self)


    def setNormLengthAtZeroForce(self, aNormLengthAtZeroForce):
        """
        setNormLengthAtZeroForce(FiberCompressiveForceLengthCurve self, double aNormLengthAtZeroForce)

        Parameters
        ----------
        aNormLengthAtZeroForce: double

        """
        return _simulation.FiberCompressiveForceLengthCurve_setNormLengthAtZeroForce(self, aNormLengthAtZeroForce)


    def setOptionalProperties(self, aStiffnessAtZeroLength, aCurviness):
        """
        setOptionalProperties(FiberCompressiveForceLengthCurve self, double aStiffnessAtZeroLength, double aCurviness)

        Parameters
        ----------
        aStiffnessAtZeroLength: double
        aCurviness: double

        """
        return _simulation.FiberCompressiveForceLengthCurve_setOptionalProperties(self, aStiffnessAtZeroLength, aCurviness)


    def isFittedCurveBeingUsed(self):
        """
        isFittedCurveBeingUsed(FiberCompressiveForceLengthCurve self) -> bool

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_isFittedCurveBeingUsed(self)


    def calcValue(self, *args):
        """
        calcValue(FiberCompressiveForceLengthCurve self, double aNormLength) -> double

        Parameters
        ----------
        aNormLength: double

        calcValue(FiberCompressiveForceLengthCurve self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_calcValue(self, *args)


    def calcDerivative(self, *args):
        """
        calcDerivative(FiberCompressiveForceLengthCurve self, double aNormLength, int order) -> double

        Parameters
        ----------
        aNormLength: double
        order: int

        calcDerivative(FiberCompressiveForceLengthCurve self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_calcDerivative(self, *args)


    def calcIntegral(self, aNormLength):
        """
        calcIntegral(FiberCompressiveForceLengthCurve self, double aNormLength) -> double

        Parameters
        ----------
        aNormLength: double

        """
        return _simulation.FiberCompressiveForceLengthCurve_calcIntegral(self, aNormLength)


    def getCurveDomain(self):
        """
        getCurveDomain(FiberCompressiveForceLengthCurve self) -> Vec2

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve const *

        """
        return _simulation.FiberCompressiveForceLengthCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(FiberCompressiveForceLengthCurve self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _simulation.FiberCompressiveForceLengthCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(FiberCompressiveForceLengthCurve self)

        Parameters
        ----------
        self: OpenSim::FiberCompressiveForceLengthCurve *

        """
        return _simulation.FiberCompressiveForceLengthCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _simulation.delete_FiberCompressiveForceLengthCurve
    __del__ = lambda self: None
FiberCompressiveForceLengthCurve_swigregister = _simulation.FiberCompressiveForceLengthCurve_swigregister
FiberCompressiveForceLengthCurve_swigregister(FiberCompressiveForceLengthCurve)

def FiberCompressiveForceLengthCurve_safeDownCast(obj):
    """
    FiberCompressiveForceLengthCurve_safeDownCast(OpenSimObject obj) -> FiberCompressiveForceLengthCurve

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.FiberCompressiveForceLengthCurve_safeDownCast(obj)

def FiberCompressiveForceLengthCurve_getClassName():
    """FiberCompressiveForceLengthCurve_getClassName() -> std::string const &"""
    return _simulation.FiberCompressiveForceLengthCurve_getClassName()

class FiberForceLengthCurve(opensim.common.Function):
    """Proxy of C++ OpenSim::FiberForceLengthCurve class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiberForceLengthCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiberForceLengthCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> FiberForceLengthCurve

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.FiberForceLengthCurve_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(FiberForceLengthCurve self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.FiberForceLengthCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.FiberForceLengthCurve_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(FiberForceLengthCurve self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(FiberForceLengthCurve self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_getConcreteClassName(self)


    def copyProperty_strain_at_zero_force(self, source):
        """
        copyProperty_strain_at_zero_force(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _simulation.FiberForceLengthCurve_copyProperty_strain_at_zero_force(self, source)


    def append_strain_at_zero_force(self, value):
        """
        append_strain_at_zero_force(FiberForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_append_strain_at_zero_force(self, value)


    def constructProperty_strain_at_zero_force(self, initValue):
        """
        constructProperty_strain_at_zero_force(FiberForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberForceLengthCurve_constructProperty_strain_at_zero_force(self, initValue)


    def get_strain_at_zero_force(self, *args):
        """
        get_strain_at_zero_force(FiberForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_strain_at_zero_force(FiberForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_get_strain_at_zero_force(self, *args)


    def upd_strain_at_zero_force(self, *args):
        """
        upd_strain_at_zero_force(FiberForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_strain_at_zero_force(FiberForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve *

        """
        return _simulation.FiberForceLengthCurve_upd_strain_at_zero_force(self, *args)


    def set_strain_at_zero_force(self, *args):
        """
        set_strain_at_zero_force(FiberForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_strain_at_zero_force(FiberForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_set_strain_at_zero_force(self, *args)


    def copyProperty_strain_at_one_norm_force(self, source):
        """
        copyProperty_strain_at_one_norm_force(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _simulation.FiberForceLengthCurve_copyProperty_strain_at_one_norm_force(self, source)


    def append_strain_at_one_norm_force(self, value):
        """
        append_strain_at_one_norm_force(FiberForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_append_strain_at_one_norm_force(self, value)


    def constructProperty_strain_at_one_norm_force(self, initValue):
        """
        constructProperty_strain_at_one_norm_force(FiberForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberForceLengthCurve_constructProperty_strain_at_one_norm_force(self, initValue)


    def get_strain_at_one_norm_force(self, *args):
        """
        get_strain_at_one_norm_force(FiberForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_strain_at_one_norm_force(FiberForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_get_strain_at_one_norm_force(self, *args)


    def upd_strain_at_one_norm_force(self, *args):
        """
        upd_strain_at_one_norm_force(FiberForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_strain_at_one_norm_force(FiberForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve *

        """
        return _simulation.FiberForceLengthCurve_upd_strain_at_one_norm_force(self, *args)


    def set_strain_at_one_norm_force(self, *args):
        """
        set_strain_at_one_norm_force(FiberForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_strain_at_one_norm_force(FiberForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_set_strain_at_one_norm_force(self, *args)


    def copyProperty_stiffness_at_low_force(self, source):
        """
        copyProperty_stiffness_at_low_force(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _simulation.FiberForceLengthCurve_copyProperty_stiffness_at_low_force(self, source)


    def append_stiffness_at_low_force(self, value):
        """
        append_stiffness_at_low_force(FiberForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_append_stiffness_at_low_force(self, value)


    def constructProperty_stiffness_at_low_force(self, *args):
        """
        constructProperty_stiffness_at_low_force(FiberForceLengthCurve self)
        constructProperty_stiffness_at_low_force(FiberForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberForceLengthCurve_constructProperty_stiffness_at_low_force(self, *args)


    def get_stiffness_at_low_force(self, *args):
        """
        get_stiffness_at_low_force(FiberForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness_at_low_force(FiberForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_get_stiffness_at_low_force(self, *args)


    def upd_stiffness_at_low_force(self, *args):
        """
        upd_stiffness_at_low_force(FiberForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness_at_low_force(FiberForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve *

        """
        return _simulation.FiberForceLengthCurve_upd_stiffness_at_low_force(self, *args)


    def set_stiffness_at_low_force(self, *args):
        """
        set_stiffness_at_low_force(FiberForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness_at_low_force(FiberForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_set_stiffness_at_low_force(self, *args)


    def copyProperty_stiffness_at_one_norm_force(self, source):
        """
        copyProperty_stiffness_at_one_norm_force(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _simulation.FiberForceLengthCurve_copyProperty_stiffness_at_one_norm_force(self, source)


    def append_stiffness_at_one_norm_force(self, value):
        """
        append_stiffness_at_one_norm_force(FiberForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_append_stiffness_at_one_norm_force(self, value)


    def constructProperty_stiffness_at_one_norm_force(self, *args):
        """
        constructProperty_stiffness_at_one_norm_force(FiberForceLengthCurve self)
        constructProperty_stiffness_at_one_norm_force(FiberForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberForceLengthCurve_constructProperty_stiffness_at_one_norm_force(self, *args)


    def get_stiffness_at_one_norm_force(self, *args):
        """
        get_stiffness_at_one_norm_force(FiberForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness_at_one_norm_force(FiberForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_get_stiffness_at_one_norm_force(self, *args)


    def upd_stiffness_at_one_norm_force(self, *args):
        """
        upd_stiffness_at_one_norm_force(FiberForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness_at_one_norm_force(FiberForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve *

        """
        return _simulation.FiberForceLengthCurve_upd_stiffness_at_one_norm_force(self, *args)


    def set_stiffness_at_one_norm_force(self, *args):
        """
        set_stiffness_at_one_norm_force(FiberForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness_at_one_norm_force(FiberForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_set_stiffness_at_one_norm_force(self, *args)


    def copyProperty_curviness(self, source):
        """
        copyProperty_curviness(FiberForceLengthCurve self, FiberForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::FiberForceLengthCurve::Self const &

        """
        return _simulation.FiberForceLengthCurve_copyProperty_curviness(self, source)


    def append_curviness(self, value):
        """
        append_curviness(FiberForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_append_curviness(self, value)


    def constructProperty_curviness(self, *args):
        """
        constructProperty_curviness(FiberForceLengthCurve self)
        constructProperty_curviness(FiberForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.FiberForceLengthCurve_constructProperty_curviness(self, *args)


    def get_curviness(self, *args):
        """
        get_curviness(FiberForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_curviness(FiberForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_get_curviness(self, *args)


    def upd_curviness(self, *args):
        """
        upd_curviness(FiberForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_curviness(FiberForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve *

        """
        return _simulation.FiberForceLengthCurve_upd_curviness(self, *args)


    def set_curviness(self, *args):
        """
        set_curviness(FiberForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_curviness(FiberForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.FiberForceLengthCurve_set_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::FiberForceLengthCurve self) -> FiberForceLengthCurve
        __init__(OpenSim::FiberForceLengthCurve self, double strainAtZeroForce, double strainAtOneNormForce, double stiffnessAtLowForce, double stiffnessAtOneNormForce, double curviness) -> FiberForceLengthCurve

        Parameters
        ----------
        strainAtZeroForce: double
        strainAtOneNormForce: double
        stiffnessAtLowForce: double
        stiffnessAtOneNormForce: double
        curviness: double

        """
        this = _simulation.new_FiberForceLengthCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getStrainAtZeroForce(self):
        """
        getStrainAtZeroForce(FiberForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_getStrainAtZeroForce(self)


    def getStrainAtOneNormForce(self):
        """
        getStrainAtOneNormForce(FiberForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_getStrainAtOneNormForce(self)


    def getStiffnessAtLowForceInUse(self):
        """
        getStiffnessAtLowForceInUse(FiberForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_getStiffnessAtLowForceInUse(self)


    def getStiffnessAtOneNormForceInUse(self):
        """
        getStiffnessAtOneNormForceInUse(FiberForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_getStiffnessAtOneNormForceInUse(self)


    def getCurvinessInUse(self):
        """
        getCurvinessInUse(FiberForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_getCurvinessInUse(self)


    def isFittedCurveBeingUsed(self):
        """
        isFittedCurveBeingUsed(FiberForceLengthCurve self) -> bool

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_isFittedCurveBeingUsed(self)


    def setCurveStrains(self, aStrainAtZeroForce, aStrainAtOneNormForce):
        """
        setCurveStrains(FiberForceLengthCurve self, double aStrainAtZeroForce, double aStrainAtOneNormForce)

        Parameters
        ----------
        aStrainAtZeroForce: double
        aStrainAtOneNormForce: double

        """
        return _simulation.FiberForceLengthCurve_setCurveStrains(self, aStrainAtZeroForce, aStrainAtOneNormForce)


    def setOptionalProperties(self, stiffnessAtLowForce, stiffnessAtOneNormForce, curviness):
        """
        setOptionalProperties(FiberForceLengthCurve self, double stiffnessAtLowForce, double stiffnessAtOneNormForce, double curviness)

        Parameters
        ----------
        stiffnessAtLowForce: double
        stiffnessAtOneNormForce: double
        curviness: double

        """
        return _simulation.FiberForceLengthCurve_setOptionalProperties(self, stiffnessAtLowForce, stiffnessAtOneNormForce, curviness)


    def calcValue(self, *args):
        """
        calcValue(FiberForceLengthCurve self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        calcValue(FiberForceLengthCurve self, double normFiberLength) -> double

        Parameters
        ----------
        normFiberLength: double

        """
        return _simulation.FiberForceLengthCurve_calcValue(self, *args)


    def calcDerivative(self, *args):
        """
        calcDerivative(FiberForceLengthCurve self, double normFiberLength, int order) -> double

        Parameters
        ----------
        normFiberLength: double
        order: int

        calcDerivative(FiberForceLengthCurve self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _simulation.FiberForceLengthCurve_calcDerivative(self, *args)


    def calcIntegral(self, normFiberLength):
        """
        calcIntegral(FiberForceLengthCurve self, double normFiberLength) -> double

        Parameters
        ----------
        normFiberLength: double

        """
        return _simulation.FiberForceLengthCurve_calcIntegral(self, normFiberLength)


    def getCurveDomain(self):
        """
        getCurveDomain(FiberForceLengthCurve self) -> Vec2

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve const *

        """
        return _simulation.FiberForceLengthCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(FiberForceLengthCurve self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _simulation.FiberForceLengthCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(FiberForceLengthCurve self)

        Parameters
        ----------
        self: OpenSim::FiberForceLengthCurve *

        """
        return _simulation.FiberForceLengthCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _simulation.delete_FiberForceLengthCurve
    __del__ = lambda self: None
FiberForceLengthCurve_swigregister = _simulation.FiberForceLengthCurve_swigregister
FiberForceLengthCurve_swigregister(FiberForceLengthCurve)

def FiberForceLengthCurve_safeDownCast(obj):
    """
    FiberForceLengthCurve_safeDownCast(OpenSimObject obj) -> FiberForceLengthCurve

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.FiberForceLengthCurve_safeDownCast(obj)

def FiberForceLengthCurve_getClassName():
    """FiberForceLengthCurve_getClassName() -> std::string const &"""
    return _simulation.FiberForceLengthCurve_getClassName()

class ForceVelocityCurve(opensim.common.Function):
    """Proxy of C++ OpenSim::ForceVelocityCurve class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceVelocityCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceVelocityCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForceVelocityCurve

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ForceVelocityCurve_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ForceVelocityCurve self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ForceVelocityCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ForceVelocityCurve_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ForceVelocityCurve self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForceVelocityCurve self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getConcreteClassName(self)


    def copyProperty_concentric_slope_at_vmax(self, source):
        """
        copyProperty_concentric_slope_at_vmax(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _simulation.ForceVelocityCurve_copyProperty_concentric_slope_at_vmax(self, source)


    def append_concentric_slope_at_vmax(self, value):
        """
        append_concentric_slope_at_vmax(ForceVelocityCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_append_concentric_slope_at_vmax(self, value)


    def constructProperty_concentric_slope_at_vmax(self, initValue):
        """
        constructProperty_concentric_slope_at_vmax(ForceVelocityCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityCurve_constructProperty_concentric_slope_at_vmax(self, initValue)


    def get_concentric_slope_at_vmax(self, *args):
        """
        get_concentric_slope_at_vmax(ForceVelocityCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_concentric_slope_at_vmax(ForceVelocityCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_get_concentric_slope_at_vmax(self, *args)


    def upd_concentric_slope_at_vmax(self, *args):
        """
        upd_concentric_slope_at_vmax(ForceVelocityCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_concentric_slope_at_vmax(ForceVelocityCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_upd_concentric_slope_at_vmax(self, *args)


    def set_concentric_slope_at_vmax(self, *args):
        """
        set_concentric_slope_at_vmax(ForceVelocityCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_concentric_slope_at_vmax(ForceVelocityCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_set_concentric_slope_at_vmax(self, *args)


    def copyProperty_concentric_slope_near_vmax(self, source):
        """
        copyProperty_concentric_slope_near_vmax(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _simulation.ForceVelocityCurve_copyProperty_concentric_slope_near_vmax(self, source)


    def append_concentric_slope_near_vmax(self, value):
        """
        append_concentric_slope_near_vmax(ForceVelocityCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_append_concentric_slope_near_vmax(self, value)


    def constructProperty_concentric_slope_near_vmax(self, initValue):
        """
        constructProperty_concentric_slope_near_vmax(ForceVelocityCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityCurve_constructProperty_concentric_slope_near_vmax(self, initValue)


    def get_concentric_slope_near_vmax(self, *args):
        """
        get_concentric_slope_near_vmax(ForceVelocityCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_concentric_slope_near_vmax(ForceVelocityCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_get_concentric_slope_near_vmax(self, *args)


    def upd_concentric_slope_near_vmax(self, *args):
        """
        upd_concentric_slope_near_vmax(ForceVelocityCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_concentric_slope_near_vmax(ForceVelocityCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_upd_concentric_slope_near_vmax(self, *args)


    def set_concentric_slope_near_vmax(self, *args):
        """
        set_concentric_slope_near_vmax(ForceVelocityCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_concentric_slope_near_vmax(ForceVelocityCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_set_concentric_slope_near_vmax(self, *args)


    def copyProperty_isometric_slope(self, source):
        """
        copyProperty_isometric_slope(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _simulation.ForceVelocityCurve_copyProperty_isometric_slope(self, source)


    def append_isometric_slope(self, value):
        """
        append_isometric_slope(ForceVelocityCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_append_isometric_slope(self, value)


    def constructProperty_isometric_slope(self, initValue):
        """
        constructProperty_isometric_slope(ForceVelocityCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityCurve_constructProperty_isometric_slope(self, initValue)


    def get_isometric_slope(self, *args):
        """
        get_isometric_slope(ForceVelocityCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_isometric_slope(ForceVelocityCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_get_isometric_slope(self, *args)


    def upd_isometric_slope(self, *args):
        """
        upd_isometric_slope(ForceVelocityCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_isometric_slope(ForceVelocityCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_upd_isometric_slope(self, *args)


    def set_isometric_slope(self, *args):
        """
        set_isometric_slope(ForceVelocityCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_isometric_slope(ForceVelocityCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_set_isometric_slope(self, *args)


    def copyProperty_eccentric_slope_at_vmax(self, source):
        """
        copyProperty_eccentric_slope_at_vmax(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _simulation.ForceVelocityCurve_copyProperty_eccentric_slope_at_vmax(self, source)


    def append_eccentric_slope_at_vmax(self, value):
        """
        append_eccentric_slope_at_vmax(ForceVelocityCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_append_eccentric_slope_at_vmax(self, value)


    def constructProperty_eccentric_slope_at_vmax(self, initValue):
        """
        constructProperty_eccentric_slope_at_vmax(ForceVelocityCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityCurve_constructProperty_eccentric_slope_at_vmax(self, initValue)


    def get_eccentric_slope_at_vmax(self, *args):
        """
        get_eccentric_slope_at_vmax(ForceVelocityCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_eccentric_slope_at_vmax(ForceVelocityCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_get_eccentric_slope_at_vmax(self, *args)


    def upd_eccentric_slope_at_vmax(self, *args):
        """
        upd_eccentric_slope_at_vmax(ForceVelocityCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_eccentric_slope_at_vmax(ForceVelocityCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_upd_eccentric_slope_at_vmax(self, *args)


    def set_eccentric_slope_at_vmax(self, *args):
        """
        set_eccentric_slope_at_vmax(ForceVelocityCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_eccentric_slope_at_vmax(ForceVelocityCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_set_eccentric_slope_at_vmax(self, *args)


    def copyProperty_eccentric_slope_near_vmax(self, source):
        """
        copyProperty_eccentric_slope_near_vmax(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _simulation.ForceVelocityCurve_copyProperty_eccentric_slope_near_vmax(self, source)


    def append_eccentric_slope_near_vmax(self, value):
        """
        append_eccentric_slope_near_vmax(ForceVelocityCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_append_eccentric_slope_near_vmax(self, value)


    def constructProperty_eccentric_slope_near_vmax(self, initValue):
        """
        constructProperty_eccentric_slope_near_vmax(ForceVelocityCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityCurve_constructProperty_eccentric_slope_near_vmax(self, initValue)


    def get_eccentric_slope_near_vmax(self, *args):
        """
        get_eccentric_slope_near_vmax(ForceVelocityCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_eccentric_slope_near_vmax(ForceVelocityCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_get_eccentric_slope_near_vmax(self, *args)


    def upd_eccentric_slope_near_vmax(self, *args):
        """
        upd_eccentric_slope_near_vmax(ForceVelocityCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_eccentric_slope_near_vmax(ForceVelocityCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_upd_eccentric_slope_near_vmax(self, *args)


    def set_eccentric_slope_near_vmax(self, *args):
        """
        set_eccentric_slope_near_vmax(ForceVelocityCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_eccentric_slope_near_vmax(ForceVelocityCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_set_eccentric_slope_near_vmax(self, *args)


    def copyProperty_max_eccentric_velocity_force_multiplier(self, source):
        """
        copyProperty_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _simulation.ForceVelocityCurve_copyProperty_max_eccentric_velocity_force_multiplier(self, source)


    def append_max_eccentric_velocity_force_multiplier(self, value):
        """
        append_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_append_max_eccentric_velocity_force_multiplier(self, value)


    def constructProperty_max_eccentric_velocity_force_multiplier(self, initValue):
        """
        constructProperty_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityCurve_constructProperty_max_eccentric_velocity_force_multiplier(self, initValue)


    def get_max_eccentric_velocity_force_multiplier(self, *args):
        """
        get_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_get_max_eccentric_velocity_force_multiplier(self, *args)


    def upd_max_eccentric_velocity_force_multiplier(self, *args):
        """
        upd_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_upd_max_eccentric_velocity_force_multiplier(self, *args)


    def set_max_eccentric_velocity_force_multiplier(self, *args):
        """
        set_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_max_eccentric_velocity_force_multiplier(ForceVelocityCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_set_max_eccentric_velocity_force_multiplier(self, *args)


    def copyProperty_concentric_curviness(self, source):
        """
        copyProperty_concentric_curviness(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _simulation.ForceVelocityCurve_copyProperty_concentric_curviness(self, source)


    def append_concentric_curviness(self, value):
        """
        append_concentric_curviness(ForceVelocityCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_append_concentric_curviness(self, value)


    def constructProperty_concentric_curviness(self, initValue):
        """
        constructProperty_concentric_curviness(ForceVelocityCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityCurve_constructProperty_concentric_curviness(self, initValue)


    def get_concentric_curviness(self, *args):
        """
        get_concentric_curviness(ForceVelocityCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_concentric_curviness(ForceVelocityCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_get_concentric_curviness(self, *args)


    def upd_concentric_curviness(self, *args):
        """
        upd_concentric_curviness(ForceVelocityCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_concentric_curviness(ForceVelocityCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_upd_concentric_curviness(self, *args)


    def set_concentric_curviness(self, *args):
        """
        set_concentric_curviness(ForceVelocityCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_concentric_curviness(ForceVelocityCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_set_concentric_curviness(self, *args)


    def copyProperty_eccentric_curviness(self, source):
        """
        copyProperty_eccentric_curviness(ForceVelocityCurve self, ForceVelocityCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityCurve::Self const &

        """
        return _simulation.ForceVelocityCurve_copyProperty_eccentric_curviness(self, source)


    def append_eccentric_curviness(self, value):
        """
        append_eccentric_curviness(ForceVelocityCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_append_eccentric_curviness(self, value)


    def constructProperty_eccentric_curviness(self, initValue):
        """
        constructProperty_eccentric_curviness(ForceVelocityCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityCurve_constructProperty_eccentric_curviness(self, initValue)


    def get_eccentric_curviness(self, *args):
        """
        get_eccentric_curviness(ForceVelocityCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_eccentric_curviness(ForceVelocityCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_get_eccentric_curviness(self, *args)


    def upd_eccentric_curviness(self, *args):
        """
        upd_eccentric_curviness(ForceVelocityCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_eccentric_curviness(ForceVelocityCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_upd_eccentric_curviness(self, *args)


    def set_eccentric_curviness(self, *args):
        """
        set_eccentric_curviness(ForceVelocityCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_eccentric_curviness(ForceVelocityCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityCurve_set_eccentric_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ForceVelocityCurve self) -> ForceVelocityCurve
        __init__(OpenSim::ForceVelocityCurve self, double concentricSlopeAtVmax, double concentricSlopeNearVmax, double isometricSlope, double eccentricSlopeAtVmax, double eccentricSlopeNearVmax, double maxEccentricVelocityForceMultiplier, double concentricCurviness, double eccentricCurviness) -> ForceVelocityCurve

        Parameters
        ----------
        concentricSlopeAtVmax: double
        concentricSlopeNearVmax: double
        isometricSlope: double
        eccentricSlopeAtVmax: double
        eccentricSlopeNearVmax: double
        maxEccentricVelocityForceMultiplier: double
        concentricCurviness: double
        eccentricCurviness: double

        """
        this = _simulation.new_ForceVelocityCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getConcentricSlopeAtVmax(self):
        """
        getConcentricSlopeAtVmax(ForceVelocityCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getConcentricSlopeAtVmax(self)


    def getConcentricSlopeNearVmax(self):
        """
        getConcentricSlopeNearVmax(ForceVelocityCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getConcentricSlopeNearVmax(self)


    def getIsometricSlope(self):
        """
        getIsometricSlope(ForceVelocityCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getIsometricSlope(self)


    def getEccentricSlopeAtVmax(self):
        """
        getEccentricSlopeAtVmax(ForceVelocityCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getEccentricSlopeAtVmax(self)


    def getEccentricSlopeNearVmax(self):
        """
        getEccentricSlopeNearVmax(ForceVelocityCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getEccentricSlopeNearVmax(self)


    def getMaxEccentricVelocityForceMultiplier(self):
        """
        getMaxEccentricVelocityForceMultiplier(ForceVelocityCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getMaxEccentricVelocityForceMultiplier(self)


    def getConcentricCurviness(self):
        """
        getConcentricCurviness(ForceVelocityCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getConcentricCurviness(self)


    def getEccentricCurviness(self):
        """
        getEccentricCurviness(ForceVelocityCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getEccentricCurviness(self)


    def setCurveShape(self, aConcentricSlopeAtVmax, aConcentricSlopeNearVmax, aIsometricSlope, aEccentricSlopeAtVmax, aEccentricSlopeNearVmax, aMaxForceMultiplier):
        """
        setCurveShape(ForceVelocityCurve self, double aConcentricSlopeAtVmax, double aConcentricSlopeNearVmax, double aIsometricSlope, double aEccentricSlopeAtVmax, double aEccentricSlopeNearVmax, double aMaxForceMultiplier)

        Parameters
        ----------
        aConcentricSlopeAtVmax: double
        aConcentricSlopeNearVmax: double
        aIsometricSlope: double
        aEccentricSlopeAtVmax: double
        aEccentricSlopeNearVmax: double
        aMaxForceMultiplier: double

        """
        return _simulation.ForceVelocityCurve_setCurveShape(self, aConcentricSlopeAtVmax, aConcentricSlopeNearVmax, aIsometricSlope, aEccentricSlopeAtVmax, aEccentricSlopeNearVmax, aMaxForceMultiplier)


    def setConcentricCurviness(self, aConcentricCurviness):
        """
        setConcentricCurviness(ForceVelocityCurve self, double aConcentricCurviness)

        Parameters
        ----------
        aConcentricCurviness: double

        """
        return _simulation.ForceVelocityCurve_setConcentricCurviness(self, aConcentricCurviness)


    def setEccentricCurviness(self, aEccentricCurviness):
        """
        setEccentricCurviness(ForceVelocityCurve self, double aEccentricCurviness)

        Parameters
        ----------
        aEccentricCurviness: double

        """
        return _simulation.ForceVelocityCurve_setEccentricCurviness(self, aEccentricCurviness)


    def calcValue(self, *args):
        """
        calcValue(ForceVelocityCurve self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        calcValue(ForceVelocityCurve self, double normFiberVelocity) -> double

        Parameters
        ----------
        normFiberVelocity: double

        """
        return _simulation.ForceVelocityCurve_calcValue(self, *args)


    def calcDerivative(self, *args):
        """
        calcDerivative(ForceVelocityCurve self, double normFiberVelocity, int order) -> double

        Parameters
        ----------
        normFiberVelocity: double
        order: int

        calcDerivative(ForceVelocityCurve self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _simulation.ForceVelocityCurve_calcDerivative(self, *args)


    def getCurveDomain(self):
        """
        getCurveDomain(ForceVelocityCurve self) -> Vec2

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve const *

        """
        return _simulation.ForceVelocityCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(ForceVelocityCurve self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _simulation.ForceVelocityCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(ForceVelocityCurve self)

        Parameters
        ----------
        self: OpenSim::ForceVelocityCurve *

        """
        return _simulation.ForceVelocityCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _simulation.delete_ForceVelocityCurve
    __del__ = lambda self: None
ForceVelocityCurve_swigregister = _simulation.ForceVelocityCurve_swigregister
ForceVelocityCurve_swigregister(ForceVelocityCurve)

def ForceVelocityCurve_safeDownCast(obj):
    """
    ForceVelocityCurve_safeDownCast(OpenSimObject obj) -> ForceVelocityCurve

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ForceVelocityCurve_safeDownCast(obj)

def ForceVelocityCurve_getClassName():
    """ForceVelocityCurve_getClassName() -> std::string const &"""
    return _simulation.ForceVelocityCurve_getClassName()

class ForceVelocityInverseCurve(opensim.common.Function):
    """Proxy of C++ OpenSim::ForceVelocityInverseCurve class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceVelocityInverseCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceVelocityInverseCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> ForceVelocityInverseCurve

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.ForceVelocityInverseCurve_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(ForceVelocityInverseCurve self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.ForceVelocityInverseCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.ForceVelocityInverseCurve_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(ForceVelocityInverseCurve self) -> ForceVelocityInverseCurve

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(ForceVelocityInverseCurve self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getConcreteClassName(self)


    def copyProperty_concentric_slope_at_vmax(self, source):
        """
        copyProperty_concentric_slope_at_vmax(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _simulation.ForceVelocityInverseCurve_copyProperty_concentric_slope_at_vmax(self, source)


    def append_concentric_slope_at_vmax(self, value):
        """
        append_concentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_append_concentric_slope_at_vmax(self, value)


    def constructProperty_concentric_slope_at_vmax(self, initValue):
        """
        constructProperty_concentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityInverseCurve_constructProperty_concentric_slope_at_vmax(self, initValue)


    def get_concentric_slope_at_vmax(self, *args):
        """
        get_concentric_slope_at_vmax(ForceVelocityInverseCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_concentric_slope_at_vmax(ForceVelocityInverseCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_get_concentric_slope_at_vmax(self, *args)


    def upd_concentric_slope_at_vmax(self, *args):
        """
        upd_concentric_slope_at_vmax(ForceVelocityInverseCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_concentric_slope_at_vmax(ForceVelocityInverseCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_upd_concentric_slope_at_vmax(self, *args)


    def set_concentric_slope_at_vmax(self, *args):
        """
        set_concentric_slope_at_vmax(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_concentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_set_concentric_slope_at_vmax(self, *args)


    def copyProperty_concentric_slope_near_vmax(self, source):
        """
        copyProperty_concentric_slope_near_vmax(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _simulation.ForceVelocityInverseCurve_copyProperty_concentric_slope_near_vmax(self, source)


    def append_concentric_slope_near_vmax(self, value):
        """
        append_concentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_append_concentric_slope_near_vmax(self, value)


    def constructProperty_concentric_slope_near_vmax(self, initValue):
        """
        constructProperty_concentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityInverseCurve_constructProperty_concentric_slope_near_vmax(self, initValue)


    def get_concentric_slope_near_vmax(self, *args):
        """
        get_concentric_slope_near_vmax(ForceVelocityInverseCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_concentric_slope_near_vmax(ForceVelocityInverseCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_get_concentric_slope_near_vmax(self, *args)


    def upd_concentric_slope_near_vmax(self, *args):
        """
        upd_concentric_slope_near_vmax(ForceVelocityInverseCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_concentric_slope_near_vmax(ForceVelocityInverseCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_upd_concentric_slope_near_vmax(self, *args)


    def set_concentric_slope_near_vmax(self, *args):
        """
        set_concentric_slope_near_vmax(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_concentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_set_concentric_slope_near_vmax(self, *args)


    def copyProperty_isometric_slope(self, source):
        """
        copyProperty_isometric_slope(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _simulation.ForceVelocityInverseCurve_copyProperty_isometric_slope(self, source)


    def append_isometric_slope(self, value):
        """
        append_isometric_slope(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_append_isometric_slope(self, value)


    def constructProperty_isometric_slope(self, initValue):
        """
        constructProperty_isometric_slope(ForceVelocityInverseCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityInverseCurve_constructProperty_isometric_slope(self, initValue)


    def get_isometric_slope(self, *args):
        """
        get_isometric_slope(ForceVelocityInverseCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_isometric_slope(ForceVelocityInverseCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_get_isometric_slope(self, *args)


    def upd_isometric_slope(self, *args):
        """
        upd_isometric_slope(ForceVelocityInverseCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_isometric_slope(ForceVelocityInverseCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_upd_isometric_slope(self, *args)


    def set_isometric_slope(self, *args):
        """
        set_isometric_slope(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_isometric_slope(ForceVelocityInverseCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_set_isometric_slope(self, *args)


    def copyProperty_eccentric_slope_at_vmax(self, source):
        """
        copyProperty_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _simulation.ForceVelocityInverseCurve_copyProperty_eccentric_slope_at_vmax(self, source)


    def append_eccentric_slope_at_vmax(self, value):
        """
        append_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_append_eccentric_slope_at_vmax(self, value)


    def constructProperty_eccentric_slope_at_vmax(self, initValue):
        """
        constructProperty_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityInverseCurve_constructProperty_eccentric_slope_at_vmax(self, initValue)


    def get_eccentric_slope_at_vmax(self, *args):
        """
        get_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_eccentric_slope_at_vmax(ForceVelocityInverseCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_get_eccentric_slope_at_vmax(self, *args)


    def upd_eccentric_slope_at_vmax(self, *args):
        """
        upd_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_eccentric_slope_at_vmax(ForceVelocityInverseCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_upd_eccentric_slope_at_vmax(self, *args)


    def set_eccentric_slope_at_vmax(self, *args):
        """
        set_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_eccentric_slope_at_vmax(ForceVelocityInverseCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_set_eccentric_slope_at_vmax(self, *args)


    def copyProperty_eccentric_slope_near_vmax(self, source):
        """
        copyProperty_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _simulation.ForceVelocityInverseCurve_copyProperty_eccentric_slope_near_vmax(self, source)


    def append_eccentric_slope_near_vmax(self, value):
        """
        append_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_append_eccentric_slope_near_vmax(self, value)


    def constructProperty_eccentric_slope_near_vmax(self, initValue):
        """
        constructProperty_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityInverseCurve_constructProperty_eccentric_slope_near_vmax(self, initValue)


    def get_eccentric_slope_near_vmax(self, *args):
        """
        get_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_eccentric_slope_near_vmax(ForceVelocityInverseCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_get_eccentric_slope_near_vmax(self, *args)


    def upd_eccentric_slope_near_vmax(self, *args):
        """
        upd_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_eccentric_slope_near_vmax(ForceVelocityInverseCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_upd_eccentric_slope_near_vmax(self, *args)


    def set_eccentric_slope_near_vmax(self, *args):
        """
        set_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_eccentric_slope_near_vmax(ForceVelocityInverseCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_set_eccentric_slope_near_vmax(self, *args)


    def copyProperty_max_eccentric_velocity_force_multiplier(self, source):
        """
        copyProperty_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _simulation.ForceVelocityInverseCurve_copyProperty_max_eccentric_velocity_force_multiplier(self, source)


    def append_max_eccentric_velocity_force_multiplier(self, value):
        """
        append_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_append_max_eccentric_velocity_force_multiplier(self, value)


    def constructProperty_max_eccentric_velocity_force_multiplier(self, initValue):
        """
        constructProperty_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityInverseCurve_constructProperty_max_eccentric_velocity_force_multiplier(self, initValue)


    def get_max_eccentric_velocity_force_multiplier(self, *args):
        """
        get_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_get_max_eccentric_velocity_force_multiplier(self, *args)


    def upd_max_eccentric_velocity_force_multiplier(self, *args):
        """
        upd_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_upd_max_eccentric_velocity_force_multiplier(self, *args)


    def set_max_eccentric_velocity_force_multiplier(self, *args):
        """
        set_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_max_eccentric_velocity_force_multiplier(ForceVelocityInverseCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_set_max_eccentric_velocity_force_multiplier(self, *args)


    def copyProperty_concentric_curviness(self, source):
        """
        copyProperty_concentric_curviness(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _simulation.ForceVelocityInverseCurve_copyProperty_concentric_curviness(self, source)


    def append_concentric_curviness(self, value):
        """
        append_concentric_curviness(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_append_concentric_curviness(self, value)


    def constructProperty_concentric_curviness(self, initValue):
        """
        constructProperty_concentric_curviness(ForceVelocityInverseCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityInverseCurve_constructProperty_concentric_curviness(self, initValue)


    def get_concentric_curviness(self, *args):
        """
        get_concentric_curviness(ForceVelocityInverseCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_concentric_curviness(ForceVelocityInverseCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_get_concentric_curviness(self, *args)


    def upd_concentric_curviness(self, *args):
        """
        upd_concentric_curviness(ForceVelocityInverseCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_concentric_curviness(ForceVelocityInverseCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_upd_concentric_curviness(self, *args)


    def set_concentric_curviness(self, *args):
        """
        set_concentric_curviness(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_concentric_curviness(ForceVelocityInverseCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_set_concentric_curviness(self, *args)


    def copyProperty_eccentric_curviness(self, source):
        """
        copyProperty_eccentric_curviness(ForceVelocityInverseCurve self, ForceVelocityInverseCurve source)

        Parameters
        ----------
        source: OpenSim::ForceVelocityInverseCurve::Self const &

        """
        return _simulation.ForceVelocityInverseCurve_copyProperty_eccentric_curviness(self, source)


    def append_eccentric_curviness(self, value):
        """
        append_eccentric_curviness(ForceVelocityInverseCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_append_eccentric_curviness(self, value)


    def constructProperty_eccentric_curviness(self, initValue):
        """
        constructProperty_eccentric_curviness(ForceVelocityInverseCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.ForceVelocityInverseCurve_constructProperty_eccentric_curviness(self, initValue)


    def get_eccentric_curviness(self, *args):
        """
        get_eccentric_curviness(ForceVelocityInverseCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_eccentric_curviness(ForceVelocityInverseCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_get_eccentric_curviness(self, *args)


    def upd_eccentric_curviness(self, *args):
        """
        upd_eccentric_curviness(ForceVelocityInverseCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_eccentric_curviness(ForceVelocityInverseCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_upd_eccentric_curviness(self, *args)


    def set_eccentric_curviness(self, *args):
        """
        set_eccentric_curviness(ForceVelocityInverseCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_eccentric_curviness(ForceVelocityInverseCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.ForceVelocityInverseCurve_set_eccentric_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::ForceVelocityInverseCurve self) -> ForceVelocityInverseCurve
        __init__(OpenSim::ForceVelocityInverseCurve self, double concentricSlopeAtVmax, double concentricSlopeNearVmax, double isometricSlope, double eccentricSlopeAtVmax, double eccentricSlopeNearVmax, double maxEccentricVelocityForceMultiplier, double concentricCurviness, double eccentricCurviness) -> ForceVelocityInverseCurve

        Parameters
        ----------
        concentricSlopeAtVmax: double
        concentricSlopeNearVmax: double
        isometricSlope: double
        eccentricSlopeAtVmax: double
        eccentricSlopeNearVmax: double
        maxEccentricVelocityForceMultiplier: double
        concentricCurviness: double
        eccentricCurviness: double

        """
        this = _simulation.new_ForceVelocityInverseCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getConcentricSlopeAtVmax(self):
        """
        getConcentricSlopeAtVmax(ForceVelocityInverseCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getConcentricSlopeAtVmax(self)


    def getConcentricSlopeNearVmax(self):
        """
        getConcentricSlopeNearVmax(ForceVelocityInverseCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getConcentricSlopeNearVmax(self)


    def getIsometricSlope(self):
        """
        getIsometricSlope(ForceVelocityInverseCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getIsometricSlope(self)


    def getEccentricSlopeAtVmax(self):
        """
        getEccentricSlopeAtVmax(ForceVelocityInverseCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getEccentricSlopeAtVmax(self)


    def getEccentricSlopeNearVmax(self):
        """
        getEccentricSlopeNearVmax(ForceVelocityInverseCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getEccentricSlopeNearVmax(self)


    def getMaxEccentricVelocityForceMultiplier(self):
        """
        getMaxEccentricVelocityForceMultiplier(ForceVelocityInverseCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getMaxEccentricVelocityForceMultiplier(self)


    def getConcentricCurviness(self):
        """
        getConcentricCurviness(ForceVelocityInverseCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getConcentricCurviness(self)


    def getEccentricCurviness(self):
        """
        getEccentricCurviness(ForceVelocityInverseCurve self) -> double

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getEccentricCurviness(self)


    def setCurveShape(self, aConcentricSlopeAtVmax, aConcentricSlopeNearVmax, aIsometricSlope, aEccentricSlopeAtVmax, aEccentricSlopeNearVmax, aMaxForceMultiplier):
        """
        setCurveShape(ForceVelocityInverseCurve self, double aConcentricSlopeAtVmax, double aConcentricSlopeNearVmax, double aIsometricSlope, double aEccentricSlopeAtVmax, double aEccentricSlopeNearVmax, double aMaxForceMultiplier)

        Parameters
        ----------
        aConcentricSlopeAtVmax: double
        aConcentricSlopeNearVmax: double
        aIsometricSlope: double
        aEccentricSlopeAtVmax: double
        aEccentricSlopeNearVmax: double
        aMaxForceMultiplier: double

        """
        return _simulation.ForceVelocityInverseCurve_setCurveShape(self, aConcentricSlopeAtVmax, aConcentricSlopeNearVmax, aIsometricSlope, aEccentricSlopeAtVmax, aEccentricSlopeNearVmax, aMaxForceMultiplier)


    def setConcentricCurviness(self, aConcentricCurviness):
        """
        setConcentricCurviness(ForceVelocityInverseCurve self, double aConcentricCurviness)

        Parameters
        ----------
        aConcentricCurviness: double

        """
        return _simulation.ForceVelocityInverseCurve_setConcentricCurviness(self, aConcentricCurviness)


    def setEccentricCurviness(self, aEccentricCurviness):
        """
        setEccentricCurviness(ForceVelocityInverseCurve self, double aEccentricCurviness)

        Parameters
        ----------
        aEccentricCurviness: double

        """
        return _simulation.ForceVelocityInverseCurve_setEccentricCurviness(self, aEccentricCurviness)


    def calcValue(self, *args):
        """
        calcValue(ForceVelocityInverseCurve self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        calcValue(ForceVelocityInverseCurve self, double aForceVelocityMultiplier) -> double

        Parameters
        ----------
        aForceVelocityMultiplier: double

        """
        return _simulation.ForceVelocityInverseCurve_calcValue(self, *args)


    def calcDerivative(self, *args):
        """
        calcDerivative(ForceVelocityInverseCurve self, double aForceVelocityMultiplier, int order) -> double

        Parameters
        ----------
        aForceVelocityMultiplier: double
        order: int

        calcDerivative(ForceVelocityInverseCurve self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _simulation.ForceVelocityInverseCurve_calcDerivative(self, *args)


    def getCurveDomain(self):
        """
        getCurveDomain(ForceVelocityInverseCurve self) -> Vec2

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve const *

        """
        return _simulation.ForceVelocityInverseCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(ForceVelocityInverseCurve self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _simulation.ForceVelocityInverseCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(ForceVelocityInverseCurve self)

        Parameters
        ----------
        self: OpenSim::ForceVelocityInverseCurve *

        """
        return _simulation.ForceVelocityInverseCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _simulation.delete_ForceVelocityInverseCurve
    __del__ = lambda self: None
ForceVelocityInverseCurve_swigregister = _simulation.ForceVelocityInverseCurve_swigregister
ForceVelocityInverseCurve_swigregister(ForceVelocityInverseCurve)

def ForceVelocityInverseCurve_safeDownCast(obj):
    """
    ForceVelocityInverseCurve_safeDownCast(OpenSimObject obj) -> ForceVelocityInverseCurve

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.ForceVelocityInverseCurve_safeDownCast(obj)

def ForceVelocityInverseCurve_getClassName():
    """ForceVelocityInverseCurve_getClassName() -> std::string const &"""
    return _simulation.ForceVelocityInverseCurve_getClassName()

class TendonForceLengthCurve(opensim.common.Function):
    """Proxy of C++ OpenSim::TendonForceLengthCurve class."""

    __swig_setmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TendonForceLengthCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [opensim.common.Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TendonForceLengthCurve, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> TendonForceLengthCurve

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.TendonForceLengthCurve_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(TendonForceLengthCurve self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.TendonForceLengthCurve_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.TendonForceLengthCurve_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(TendonForceLengthCurve self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(TendonForceLengthCurve self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_getConcreteClassName(self)


    def copyProperty_strain_at_one_norm_force(self, source):
        """
        copyProperty_strain_at_one_norm_force(TendonForceLengthCurve self, TendonForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::TendonForceLengthCurve::Self const &

        """
        return _simulation.TendonForceLengthCurve_copyProperty_strain_at_one_norm_force(self, source)


    def append_strain_at_one_norm_force(self, value):
        """
        append_strain_at_one_norm_force(TendonForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.TendonForceLengthCurve_append_strain_at_one_norm_force(self, value)


    def constructProperty_strain_at_one_norm_force(self, initValue):
        """
        constructProperty_strain_at_one_norm_force(TendonForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.TendonForceLengthCurve_constructProperty_strain_at_one_norm_force(self, initValue)


    def get_strain_at_one_norm_force(self, *args):
        """
        get_strain_at_one_norm_force(TendonForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_strain_at_one_norm_force(TendonForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_get_strain_at_one_norm_force(self, *args)


    def upd_strain_at_one_norm_force(self, *args):
        """
        upd_strain_at_one_norm_force(TendonForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_strain_at_one_norm_force(TendonForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve *

        """
        return _simulation.TendonForceLengthCurve_upd_strain_at_one_norm_force(self, *args)


    def set_strain_at_one_norm_force(self, *args):
        """
        set_strain_at_one_norm_force(TendonForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_strain_at_one_norm_force(TendonForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.TendonForceLengthCurve_set_strain_at_one_norm_force(self, *args)


    def copyProperty_stiffness_at_one_norm_force(self, source):
        """
        copyProperty_stiffness_at_one_norm_force(TendonForceLengthCurve self, TendonForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::TendonForceLengthCurve::Self const &

        """
        return _simulation.TendonForceLengthCurve_copyProperty_stiffness_at_one_norm_force(self, source)


    def append_stiffness_at_one_norm_force(self, value):
        """
        append_stiffness_at_one_norm_force(TendonForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.TendonForceLengthCurve_append_stiffness_at_one_norm_force(self, value)


    def constructProperty_stiffness_at_one_norm_force(self, *args):
        """
        constructProperty_stiffness_at_one_norm_force(TendonForceLengthCurve self)
        constructProperty_stiffness_at_one_norm_force(TendonForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.TendonForceLengthCurve_constructProperty_stiffness_at_one_norm_force(self, *args)


    def get_stiffness_at_one_norm_force(self, *args):
        """
        get_stiffness_at_one_norm_force(TendonForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness_at_one_norm_force(TendonForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_get_stiffness_at_one_norm_force(self, *args)


    def upd_stiffness_at_one_norm_force(self, *args):
        """
        upd_stiffness_at_one_norm_force(TendonForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness_at_one_norm_force(TendonForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve *

        """
        return _simulation.TendonForceLengthCurve_upd_stiffness_at_one_norm_force(self, *args)


    def set_stiffness_at_one_norm_force(self, *args):
        """
        set_stiffness_at_one_norm_force(TendonForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness_at_one_norm_force(TendonForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.TendonForceLengthCurve_set_stiffness_at_one_norm_force(self, *args)


    def copyProperty_norm_force_at_toe_end(self, source):
        """
        copyProperty_norm_force_at_toe_end(TendonForceLengthCurve self, TendonForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::TendonForceLengthCurve::Self const &

        """
        return _simulation.TendonForceLengthCurve_copyProperty_norm_force_at_toe_end(self, source)


    def append_norm_force_at_toe_end(self, value):
        """
        append_norm_force_at_toe_end(TendonForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.TendonForceLengthCurve_append_norm_force_at_toe_end(self, value)


    def constructProperty_norm_force_at_toe_end(self, *args):
        """
        constructProperty_norm_force_at_toe_end(TendonForceLengthCurve self)
        constructProperty_norm_force_at_toe_end(TendonForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.TendonForceLengthCurve_constructProperty_norm_force_at_toe_end(self, *args)


    def get_norm_force_at_toe_end(self, *args):
        """
        get_norm_force_at_toe_end(TendonForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_norm_force_at_toe_end(TendonForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_get_norm_force_at_toe_end(self, *args)


    def upd_norm_force_at_toe_end(self, *args):
        """
        upd_norm_force_at_toe_end(TendonForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_norm_force_at_toe_end(TendonForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve *

        """
        return _simulation.TendonForceLengthCurve_upd_norm_force_at_toe_end(self, *args)


    def set_norm_force_at_toe_end(self, *args):
        """
        set_norm_force_at_toe_end(TendonForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_norm_force_at_toe_end(TendonForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.TendonForceLengthCurve_set_norm_force_at_toe_end(self, *args)


    def copyProperty_curviness(self, source):
        """
        copyProperty_curviness(TendonForceLengthCurve self, TendonForceLengthCurve source)

        Parameters
        ----------
        source: OpenSim::TendonForceLengthCurve::Self const &

        """
        return _simulation.TendonForceLengthCurve_copyProperty_curviness(self, source)


    def append_curviness(self, value):
        """
        append_curviness(TendonForceLengthCurve self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.TendonForceLengthCurve_append_curviness(self, value)


    def constructProperty_curviness(self, *args):
        """
        constructProperty_curviness(TendonForceLengthCurve self)
        constructProperty_curviness(TendonForceLengthCurve self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.TendonForceLengthCurve_constructProperty_curviness(self, *args)


    def get_curviness(self, *args):
        """
        get_curviness(TendonForceLengthCurve self, int i) -> double const

        Parameters
        ----------
        i: int

        get_curviness(TendonForceLengthCurve self) -> double const &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_get_curviness(self, *args)


    def upd_curviness(self, *args):
        """
        upd_curviness(TendonForceLengthCurve self, int i) -> double

        Parameters
        ----------
        i: int

        upd_curviness(TendonForceLengthCurve self) -> double &

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve *

        """
        return _simulation.TendonForceLengthCurve_upd_curviness(self, *args)


    def set_curviness(self, *args):
        """
        set_curviness(TendonForceLengthCurve self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_curviness(TendonForceLengthCurve self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.TendonForceLengthCurve_set_curviness(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::TendonForceLengthCurve self) -> TendonForceLengthCurve
        __init__(OpenSim::TendonForceLengthCurve self, double strainAtOneNormForce, double stiffnessAtOneNormForce, double normForceAtToeEnd, double curviness) -> TendonForceLengthCurve

        Parameters
        ----------
        strainAtOneNormForce: double
        stiffnessAtOneNormForce: double
        normForceAtToeEnd: double
        curviness: double

        __init__(OpenSim::TendonForceLengthCurve self, double strainAtOneNormForce) -> TendonForceLengthCurve

        Parameters
        ----------
        strainAtOneNormForce: double

        """
        this = _simulation.new_TendonForceLengthCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getStrainAtOneNormForce(self):
        """
        getStrainAtOneNormForce(TendonForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_getStrainAtOneNormForce(self)


    def getStiffnessAtOneNormForceInUse(self):
        """
        getStiffnessAtOneNormForceInUse(TendonForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_getStiffnessAtOneNormForceInUse(self)


    def getNormForceAtToeEndInUse(self):
        """
        getNormForceAtToeEndInUse(TendonForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_getNormForceAtToeEndInUse(self)


    def getCurvinessInUse(self):
        """
        getCurvinessInUse(TendonForceLengthCurve self) -> double

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_getCurvinessInUse(self)


    def isFittedCurveBeingUsed(self):
        """
        isFittedCurveBeingUsed(TendonForceLengthCurve self) -> bool

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_isFittedCurveBeingUsed(self)


    def setStrainAtOneNormForce(self, aStrainAtOneNormForce):
        """
        setStrainAtOneNormForce(TendonForceLengthCurve self, double aStrainAtOneNormForce)

        Parameters
        ----------
        aStrainAtOneNormForce: double

        """
        return _simulation.TendonForceLengthCurve_setStrainAtOneNormForce(self, aStrainAtOneNormForce)


    def setOptionalProperties(self, stiffnessAtOneNormForce, normForceAtToeEnd, curviness):
        """
        setOptionalProperties(TendonForceLengthCurve self, double stiffnessAtOneNormForce, double normForceAtToeEnd, double curviness)

        Parameters
        ----------
        stiffnessAtOneNormForce: double
        normForceAtToeEnd: double
        curviness: double

        """
        return _simulation.TendonForceLengthCurve_setOptionalProperties(self, stiffnessAtOneNormForce, normForceAtToeEnd, curviness)


    def calcValue(self, *args):
        """
        calcValue(TendonForceLengthCurve self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        calcValue(TendonForceLengthCurve self, double aNormLength) -> double

        Parameters
        ----------
        aNormLength: double

        """
        return _simulation.TendonForceLengthCurve_calcValue(self, *args)


    def calcDerivative(self, *args):
        """
        calcDerivative(TendonForceLengthCurve self, double aNormLength, int order) -> double

        Parameters
        ----------
        aNormLength: double
        order: int

        calcDerivative(TendonForceLengthCurve self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _simulation.TendonForceLengthCurve_calcDerivative(self, *args)


    def calcIntegral(self, aNormLength):
        """
        calcIntegral(TendonForceLengthCurve self, double aNormLength) -> double

        Parameters
        ----------
        aNormLength: double

        """
        return _simulation.TendonForceLengthCurve_calcIntegral(self, aNormLength)


    def getCurveDomain(self):
        """
        getCurveDomain(TendonForceLengthCurve self) -> Vec2

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve const *

        """
        return _simulation.TendonForceLengthCurve_getCurveDomain(self)


    def printMuscleCurveToCSVFile(self, path):
        """
        printMuscleCurveToCSVFile(TendonForceLengthCurve self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _simulation.TendonForceLengthCurve_printMuscleCurveToCSVFile(self, path)


    def ensureCurveUpToDate(self):
        """
        ensureCurveUpToDate(TendonForceLengthCurve self)

        Parameters
        ----------
        self: OpenSim::TendonForceLengthCurve *

        """
        return _simulation.TendonForceLengthCurve_ensureCurveUpToDate(self)

    __swig_destroy__ = _simulation.delete_TendonForceLengthCurve
    __del__ = lambda self: None
TendonForceLengthCurve_swigregister = _simulation.TendonForceLengthCurve_swigregister
TendonForceLengthCurve_swigregister(TendonForceLengthCurve)

def TendonForceLengthCurve_safeDownCast(obj):
    """
    TendonForceLengthCurve_safeDownCast(OpenSimObject obj) -> TendonForceLengthCurve

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.TendonForceLengthCurve_safeDownCast(obj)

def TendonForceLengthCurve_getClassName():
    """TendonForceLengthCurve_getClassName() -> std::string const &"""
    return _simulation.TendonForceLengthCurve_getClassName()

class MuscleFirstOrderActivationDynamicModel(ModelComponent):
    """Proxy of C++ OpenSim::MuscleFirstOrderActivationDynamicModel class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleFirstOrderActivationDynamicModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleFirstOrderActivationDynamicModel, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MuscleFirstOrderActivationDynamicModel self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.MuscleFirstOrderActivationDynamicModel_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MuscleFirstOrderActivationDynamicModel self) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleFirstOrderActivationDynamicModel self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_getConcreteClassName(self)


    def copyProperty_activation_time_constant(self, source):
        """
        copyProperty_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, MuscleFirstOrderActivationDynamicModel source)

        Parameters
        ----------
        source: OpenSim::MuscleFirstOrderActivationDynamicModel::Self const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_copyProperty_activation_time_constant(self, source)


    def append_activation_time_constant(self, value):
        """
        append_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_append_activation_time_constant(self, value)


    def constructProperty_activation_time_constant(self, initValue):
        """
        constructProperty_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_constructProperty_activation_time_constant(self, initValue)


    def get_activation_time_constant(self, *args):
        """
        get_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_time_constant(MuscleFirstOrderActivationDynamicModel self) -> double const &

        Parameters
        ----------
        self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_get_activation_time_constant(self, *args)


    def upd_activation_time_constant(self, *args):
        """
        upd_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_time_constant(MuscleFirstOrderActivationDynamicModel self) -> double &

        Parameters
        ----------
        self: OpenSim::MuscleFirstOrderActivationDynamicModel *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_upd_activation_time_constant(self, *args)


    def set_activation_time_constant(self, *args):
        """
        set_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_set_activation_time_constant(self, *args)


    def copyProperty_deactivation_time_constant(self, source):
        """
        copyProperty_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, MuscleFirstOrderActivationDynamicModel source)

        Parameters
        ----------
        source: OpenSim::MuscleFirstOrderActivationDynamicModel::Self const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_copyProperty_deactivation_time_constant(self, source)


    def append_deactivation_time_constant(self, value):
        """
        append_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_append_deactivation_time_constant(self, value)


    def constructProperty_deactivation_time_constant(self, initValue):
        """
        constructProperty_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_constructProperty_deactivation_time_constant(self, initValue)


    def get_deactivation_time_constant(self, *args):
        """
        get_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i) -> double const

        Parameters
        ----------
        i: int

        get_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self) -> double const &

        Parameters
        ----------
        self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_get_deactivation_time_constant(self, *args)


    def upd_deactivation_time_constant(self, *args):
        """
        upd_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i) -> double

        Parameters
        ----------
        i: int

        upd_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self) -> double &

        Parameters
        ----------
        self: OpenSim::MuscleFirstOrderActivationDynamicModel *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_upd_deactivation_time_constant(self, *args)


    def set_deactivation_time_constant(self, *args):
        """
        set_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_deactivation_time_constant(MuscleFirstOrderActivationDynamicModel self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_set_deactivation_time_constant(self, *args)


    def copyProperty_minimum_activation(self, source):
        """
        copyProperty_minimum_activation(MuscleFirstOrderActivationDynamicModel self, MuscleFirstOrderActivationDynamicModel source)

        Parameters
        ----------
        source: OpenSim::MuscleFirstOrderActivationDynamicModel::Self const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_copyProperty_minimum_activation(self, source)


    def append_minimum_activation(self, value):
        """
        append_minimum_activation(MuscleFirstOrderActivationDynamicModel self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_append_minimum_activation(self, value)


    def constructProperty_minimum_activation(self, initValue):
        """
        constructProperty_minimum_activation(MuscleFirstOrderActivationDynamicModel self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_constructProperty_minimum_activation(self, initValue)


    def get_minimum_activation(self, *args):
        """
        get_minimum_activation(MuscleFirstOrderActivationDynamicModel self, int i) -> double const

        Parameters
        ----------
        i: int

        get_minimum_activation(MuscleFirstOrderActivationDynamicModel self) -> double const &

        Parameters
        ----------
        self: OpenSim::MuscleFirstOrderActivationDynamicModel const *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_get_minimum_activation(self, *args)


    def upd_minimum_activation(self, *args):
        """
        upd_minimum_activation(MuscleFirstOrderActivationDynamicModel self, int i) -> double

        Parameters
        ----------
        i: int

        upd_minimum_activation(MuscleFirstOrderActivationDynamicModel self) -> double &

        Parameters
        ----------
        self: OpenSim::MuscleFirstOrderActivationDynamicModel *

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_upd_minimum_activation(self, *args)


    def set_minimum_activation(self, *args):
        """
        set_minimum_activation(MuscleFirstOrderActivationDynamicModel self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_minimum_activation(MuscleFirstOrderActivationDynamicModel self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_set_minimum_activation(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::MuscleFirstOrderActivationDynamicModel self) -> MuscleFirstOrderActivationDynamicModel
        __init__(OpenSim::MuscleFirstOrderActivationDynamicModel self, double tauActivation, double tauDeactivation, double minActivation, std::string const & muscleName) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        tauActivation: double
        tauDeactivation: double
        minActivation: double
        muscleName: std::string const &

        """
        this = _simulation.new_MuscleFirstOrderActivationDynamicModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clampActivation(self, activation):
        """
        clampActivation(MuscleFirstOrderActivationDynamicModel self, double activation) -> double

        Parameters
        ----------
        activation: double

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_clampActivation(self, activation)


    def calcDerivative(self, activation, excitation):
        """
        calcDerivative(MuscleFirstOrderActivationDynamicModel self, double activation, double excitation) -> double

        Parameters
        ----------
        activation: double
        excitation: double

        """
        return _simulation.MuscleFirstOrderActivationDynamicModel_calcDerivative(self, activation, excitation)

    __swig_destroy__ = _simulation.delete_MuscleFirstOrderActivationDynamicModel
    __del__ = lambda self: None
MuscleFirstOrderActivationDynamicModel_swigregister = _simulation.MuscleFirstOrderActivationDynamicModel_swigregister
MuscleFirstOrderActivationDynamicModel_swigregister(MuscleFirstOrderActivationDynamicModel)

def MuscleFirstOrderActivationDynamicModel_safeDownCast(obj):
    """
    MuscleFirstOrderActivationDynamicModel_safeDownCast(OpenSimObject obj) -> MuscleFirstOrderActivationDynamicModel

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.MuscleFirstOrderActivationDynamicModel_safeDownCast(obj)

def MuscleFirstOrderActivationDynamicModel_getClassName():
    """MuscleFirstOrderActivationDynamicModel_getClassName() -> std::string const &"""
    return _simulation.MuscleFirstOrderActivationDynamicModel_getClassName()

class MuscleFixedWidthPennationModel(ModelComponent):
    """Proxy of C++ OpenSim::MuscleFixedWidthPennationModel class."""

    __swig_setmethods__ = {}
    for _s in [ModelComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MuscleFixedWidthPennationModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MuscleFixedWidthPennationModel, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> MuscleFixedWidthPennationModel

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.MuscleFixedWidthPennationModel_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(MuscleFixedWidthPennationModel self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.MuscleFixedWidthPennationModel_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.MuscleFixedWidthPennationModel_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(MuscleFixedWidthPennationModel self) -> MuscleFixedWidthPennationModel

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _simulation.MuscleFixedWidthPennationModel_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(MuscleFixedWidthPennationModel self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _simulation.MuscleFixedWidthPennationModel_getConcreteClassName(self)


    def copyProperty_optimal_fiber_length(self, source):
        """
        copyProperty_optimal_fiber_length(MuscleFixedWidthPennationModel self, MuscleFixedWidthPennationModel source)

        Parameters
        ----------
        source: OpenSim::MuscleFixedWidthPennationModel::Self const &

        """
        return _simulation.MuscleFixedWidthPennationModel_copyProperty_optimal_fiber_length(self, source)


    def append_optimal_fiber_length(self, value):
        """
        append_optimal_fiber_length(MuscleFixedWidthPennationModel self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_append_optimal_fiber_length(self, value)


    def constructProperty_optimal_fiber_length(self, initValue):
        """
        constructProperty_optimal_fiber_length(MuscleFixedWidthPennationModel self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_constructProperty_optimal_fiber_length(self, initValue)


    def get_optimal_fiber_length(self, *args):
        """
        get_optimal_fiber_length(MuscleFixedWidthPennationModel self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_fiber_length(MuscleFixedWidthPennationModel self) -> double const &

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _simulation.MuscleFixedWidthPennationModel_get_optimal_fiber_length(self, *args)


    def upd_optimal_fiber_length(self, *args):
        """
        upd_optimal_fiber_length(MuscleFixedWidthPennationModel self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_fiber_length(MuscleFixedWidthPennationModel self) -> double &

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel *

        """
        return _simulation.MuscleFixedWidthPennationModel_upd_optimal_fiber_length(self, *args)


    def set_optimal_fiber_length(self, *args):
        """
        set_optimal_fiber_length(MuscleFixedWidthPennationModel self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_fiber_length(MuscleFixedWidthPennationModel self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_set_optimal_fiber_length(self, *args)


    def copyProperty_pennation_angle_at_optimal(self, source):
        """
        copyProperty_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self, MuscleFixedWidthPennationModel source)

        Parameters
        ----------
        source: OpenSim::MuscleFixedWidthPennationModel::Self const &

        """
        return _simulation.MuscleFixedWidthPennationModel_copyProperty_pennation_angle_at_optimal(self, source)


    def append_pennation_angle_at_optimal(self, value):
        """
        append_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_append_pennation_angle_at_optimal(self, value)


    def constructProperty_pennation_angle_at_optimal(self, initValue):
        """
        constructProperty_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_constructProperty_pennation_angle_at_optimal(self, initValue)


    def get_pennation_angle_at_optimal(self, *args):
        """
        get_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self, int i) -> double const

        Parameters
        ----------
        i: int

        get_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self) -> double const &

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _simulation.MuscleFixedWidthPennationModel_get_pennation_angle_at_optimal(self, *args)


    def upd_pennation_angle_at_optimal(self, *args):
        """
        upd_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self, int i) -> double

        Parameters
        ----------
        i: int

        upd_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self) -> double &

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel *

        """
        return _simulation.MuscleFixedWidthPennationModel_upd_pennation_angle_at_optimal(self, *args)


    def set_pennation_angle_at_optimal(self, *args):
        """
        set_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_pennation_angle_at_optimal(MuscleFixedWidthPennationModel self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_set_pennation_angle_at_optimal(self, *args)


    def copyProperty_maximum_pennation_angle(self, source):
        """
        copyProperty_maximum_pennation_angle(MuscleFixedWidthPennationModel self, MuscleFixedWidthPennationModel source)

        Parameters
        ----------
        source: OpenSim::MuscleFixedWidthPennationModel::Self const &

        """
        return _simulation.MuscleFixedWidthPennationModel_copyProperty_maximum_pennation_angle(self, source)


    def append_maximum_pennation_angle(self, value):
        """
        append_maximum_pennation_angle(MuscleFixedWidthPennationModel self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_append_maximum_pennation_angle(self, value)


    def constructProperty_maximum_pennation_angle(self, initValue):
        """
        constructProperty_maximum_pennation_angle(MuscleFixedWidthPennationModel self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_constructProperty_maximum_pennation_angle(self, initValue)


    def get_maximum_pennation_angle(self, *args):
        """
        get_maximum_pennation_angle(MuscleFixedWidthPennationModel self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maximum_pennation_angle(MuscleFixedWidthPennationModel self) -> double const &

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _simulation.MuscleFixedWidthPennationModel_get_maximum_pennation_angle(self, *args)


    def upd_maximum_pennation_angle(self, *args):
        """
        upd_maximum_pennation_angle(MuscleFixedWidthPennationModel self, int i) -> double

        Parameters
        ----------
        i: int

        upd_maximum_pennation_angle(MuscleFixedWidthPennationModel self) -> double &

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel *

        """
        return _simulation.MuscleFixedWidthPennationModel_upd_maximum_pennation_angle(self, *args)


    def set_maximum_pennation_angle(self, *args):
        """
        set_maximum_pennation_angle(MuscleFixedWidthPennationModel self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_maximum_pennation_angle(MuscleFixedWidthPennationModel self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.MuscleFixedWidthPennationModel_set_maximum_pennation_angle(self, *args)


    def __init__(self, *args):
        """
        __init__(OpenSim::MuscleFixedWidthPennationModel self) -> MuscleFixedWidthPennationModel
        __init__(OpenSim::MuscleFixedWidthPennationModel self, double optimalFiberLength, double optimalPennationAngle, double maximumPennationAngle) -> MuscleFixedWidthPennationModel

        Parameters
        ----------
        optimalFiberLength: double
        optimalPennationAngle: double
        maximumPennationAngle: double

        """
        this = _simulation.new_MuscleFixedWidthPennationModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getParallelogramHeight(self):
        """
        getParallelogramHeight(MuscleFixedWidthPennationModel self) -> double

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _simulation.MuscleFixedWidthPennationModel_getParallelogramHeight(self)


    def getMinimumFiberLength(self):
        """
        getMinimumFiberLength(MuscleFixedWidthPennationModel self) -> double

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _simulation.MuscleFixedWidthPennationModel_getMinimumFiberLength(self)


    def getMinimumFiberLengthAlongTendon(self):
        """
        getMinimumFiberLengthAlongTendon(MuscleFixedWidthPennationModel self) -> double

        Parameters
        ----------
        self: OpenSim::MuscleFixedWidthPennationModel const *

        """
        return _simulation.MuscleFixedWidthPennationModel_getMinimumFiberLengthAlongTendon(self)


    def calcPennationAngle(self, fiberLength):
        """
        calcPennationAngle(MuscleFixedWidthPennationModel self, double fiberLength) -> double

        Parameters
        ----------
        fiberLength: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcPennationAngle(self, fiberLength)


    def calcTendonLength(self, cosPennationAngle, fiberLength, muscleLength):
        """
        calcTendonLength(MuscleFixedWidthPennationModel self, double cosPennationAngle, double fiberLength, double muscleLength) -> double

        Parameters
        ----------
        cosPennationAngle: double
        fiberLength: double
        muscleLength: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcTendonLength(self, cosPennationAngle, fiberLength, muscleLength)


    def calcFiberLengthAlongTendon(self, fiberLength, cosPennationAngle):
        """
        calcFiberLengthAlongTendon(MuscleFixedWidthPennationModel self, double fiberLength, double cosPennationAngle) -> double

        Parameters
        ----------
        fiberLength: double
        cosPennationAngle: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcFiberLengthAlongTendon(self, fiberLength, cosPennationAngle)


    def calcPennationAngularVelocity(self, tanPennationAngle, fiberLength, fiberVelocity):
        """
        calcPennationAngularVelocity(MuscleFixedWidthPennationModel self, double tanPennationAngle, double fiberLength, double fiberVelocity) -> double

        Parameters
        ----------
        tanPennationAngle: double
        fiberLength: double
        fiberVelocity: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcPennationAngularVelocity(self, tanPennationAngle, fiberLength, fiberVelocity)


    def calcTendonVelocity(self, cosPennationAngle, sinPennationAngle, pennationAngularVelocity, fiberLength, fiberVelocity, muscleVelocity):
        """
        calcTendonVelocity(MuscleFixedWidthPennationModel self, double cosPennationAngle, double sinPennationAngle, double pennationAngularVelocity, double fiberLength, double fiberVelocity, double muscleVelocity) -> double

        Parameters
        ----------
        cosPennationAngle: double
        sinPennationAngle: double
        pennationAngularVelocity: double
        fiberLength: double
        fiberVelocity: double
        muscleVelocity: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcTendonVelocity(self, cosPennationAngle, sinPennationAngle, pennationAngularVelocity, fiberLength, fiberVelocity, muscleVelocity)


    def calcFiberVelocityAlongTendon(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity):
        """
        calcFiberVelocityAlongTendon(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity) -> double

        Parameters
        ----------
        fiberLength: double
        fiberVelocity: double
        sinPennationAngle: double
        cosPennationAngle: double
        pennationAngularVelocity: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcFiberVelocityAlongTendon(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity)


    def calcPennationAngularAcceleration(self, fiberLength, fiberVelocity, fiberAcceleration, sinPennationAngle, cosPennationAngle, pennationAngularVelocity):
        """
        calcPennationAngularAcceleration(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double fiberAcceleration, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity) -> double

        Parameters
        ----------
        fiberLength: double
        fiberVelocity: double
        fiberAcceleration: double
        sinPennationAngle: double
        cosPennationAngle: double
        pennationAngularVelocity: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcPennationAngularAcceleration(self, fiberLength, fiberVelocity, fiberAcceleration, sinPennationAngle, cosPennationAngle, pennationAngularVelocity)


    def calcFiberAccelerationAlongTendon(self, fiberLength, fiberVelocity, fiberAcceleration, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, pennationAngularAcceleration):
        """
        calcFiberAccelerationAlongTendon(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double fiberAcceleration, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity, double pennationAngularAcceleration) -> double

        Parameters
        ----------
        fiberLength: double
        fiberVelocity: double
        fiberAcceleration: double
        sinPennationAngle: double
        cosPennationAngle: double
        pennationAngularVelocity: double
        pennationAngularAcceleration: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcFiberAccelerationAlongTendon(self, fiberLength, fiberVelocity, fiberAcceleration, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, pennationAngularAcceleration)


    def calc_DFiberLengthAlongTendon_DfiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, DpennationAngle_DfiberLength):
        """
        calc_DFiberLengthAlongTendon_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength, double sinPennationAngle, double cosPennationAngle, double DpennationAngle_DfiberLength) -> double

        Parameters
        ----------
        fiberLength: double
        sinPennationAngle: double
        cosPennationAngle: double
        DpennationAngle_DfiberLength: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calc_DFiberLengthAlongTendon_DfiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, DpennationAngle_DfiberLength)


    def calc_DPennationAngularVelocity_DfiberLength(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, DpennationAngle_DfiberLength):
        """
        calc_DPennationAngularVelocity_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity, double DpennationAngle_DfiberLength) -> double

        Parameters
        ----------
        fiberLength: double
        fiberVelocity: double
        sinPennationAngle: double
        cosPennationAngle: double
        pennationAngularVelocity: double
        DpennationAngle_DfiberLength: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calc_DPennationAngularVelocity_DfiberLength(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, DpennationAngle_DfiberLength)


    def calc_DFiberVelocityAlongTendon_DfiberLength(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, DpennationAngle_DfiberLength, DpennationAngularVelocity_DfiberLength):
        """
        calc_DFiberVelocityAlongTendon_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength, double fiberVelocity, double sinPennationAngle, double cosPennationAngle, double pennationAngularVelocity, double DpennationAngle_DfiberLength, double DpennationAngularVelocity_DfiberLength) -> double

        Parameters
        ----------
        fiberLength: double
        fiberVelocity: double
        sinPennationAngle: double
        cosPennationAngle: double
        pennationAngularVelocity: double
        DpennationAngle_DfiberLength: double
        DpennationAngularVelocity_DfiberLength: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calc_DFiberVelocityAlongTendon_DfiberLength(self, fiberLength, fiberVelocity, sinPennationAngle, cosPennationAngle, pennationAngularVelocity, DpennationAngle_DfiberLength, DpennationAngularVelocity_DfiberLength)


    def calc_DPennationAngle_DfiberLength(self, fiberLength):
        """
        calc_DPennationAngle_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength) -> double

        Parameters
        ----------
        fiberLength: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calc_DPennationAngle_DfiberLength(self, fiberLength)


    def calc_DTendonLength_DfiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, DpennationAngle_DfiberLength):
        """
        calc_DTendonLength_DfiberLength(MuscleFixedWidthPennationModel self, double fiberLength, double sinPennationAngle, double cosPennationAngle, double DpennationAngle_DfiberLength) -> double

        Parameters
        ----------
        fiberLength: double
        sinPennationAngle: double
        cosPennationAngle: double
        DpennationAngle_DfiberLength: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calc_DTendonLength_DfiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, DpennationAngle_DfiberLength)


    def calcFiberLength(self, muscleLength, tendonLength):
        """
        calcFiberLength(MuscleFixedWidthPennationModel self, double muscleLength, double tendonLength) -> double

        Parameters
        ----------
        muscleLength: double
        tendonLength: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcFiberLength(self, muscleLength, tendonLength)


    def calcFiberVelocity(self, cosPennationAngle, muscleVelocity, tendonVelocity):
        """
        calcFiberVelocity(MuscleFixedWidthPennationModel self, double cosPennationAngle, double muscleVelocity, double tendonVelocity) -> double

        Parameters
        ----------
        cosPennationAngle: double
        muscleVelocity: double
        tendonVelocity: double

        """
        return _simulation.MuscleFixedWidthPennationModel_calcFiberVelocity(self, cosPennationAngle, muscleVelocity, tendonVelocity)

    __swig_destroy__ = _simulation.delete_MuscleFixedWidthPennationModel
    __del__ = lambda self: None
MuscleFixedWidthPennationModel_swigregister = _simulation.MuscleFixedWidthPennationModel_swigregister
MuscleFixedWidthPennationModel_swigregister(MuscleFixedWidthPennationModel)

def MuscleFixedWidthPennationModel_safeDownCast(obj):
    """
    MuscleFixedWidthPennationModel_safeDownCast(OpenSimObject obj) -> MuscleFixedWidthPennationModel

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.MuscleFixedWidthPennationModel_safeDownCast(obj)

def MuscleFixedWidthPennationModel_getClassName():
    """MuscleFixedWidthPennationModel_getClassName() -> std::string const &"""
    return _simulation.MuscleFixedWidthPennationModel_getClassName()

class Thelen2003Muscle(ActivationFiberLengthMuscle):
    """Proxy of C++ OpenSim::Thelen2003Muscle class."""

    __swig_setmethods__ = {}
    for _s in [ActivationFiberLengthMuscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thelen2003Muscle, name, value)
    __swig_getmethods__ = {}
    for _s in [ActivationFiberLengthMuscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Thelen2003Muscle, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Thelen2003Muscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Thelen2003Muscle_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Thelen2003Muscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Thelen2003Muscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Thelen2003Muscle_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Thelen2003Muscle self) -> Thelen2003Muscle

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Thelen2003Muscle self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_getConcreteClassName(self)


    def copyProperty_FmaxTendonStrain(self, source):
        """
        copyProperty_FmaxTendonStrain(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_FmaxTendonStrain(self, source)


    def append_FmaxTendonStrain(self, value):
        """
        append_FmaxTendonStrain(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_FmaxTendonStrain(self, value)


    def constructProperty_FmaxTendonStrain(self, initValue):
        """
        constructProperty_FmaxTendonStrain(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_FmaxTendonStrain(self, initValue)


    def get_FmaxTendonStrain(self, *args):
        """
        get_FmaxTendonStrain(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_FmaxTendonStrain(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_FmaxTendonStrain(self, *args)


    def upd_FmaxTendonStrain(self, *args):
        """
        upd_FmaxTendonStrain(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_FmaxTendonStrain(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_FmaxTendonStrain(self, *args)


    def set_FmaxTendonStrain(self, *args):
        """
        set_FmaxTendonStrain(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_FmaxTendonStrain(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_FmaxTendonStrain(self, *args)


    def copyProperty_FmaxMuscleStrain(self, source):
        """
        copyProperty_FmaxMuscleStrain(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_FmaxMuscleStrain(self, source)


    def append_FmaxMuscleStrain(self, value):
        """
        append_FmaxMuscleStrain(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_FmaxMuscleStrain(self, value)


    def constructProperty_FmaxMuscleStrain(self, initValue):
        """
        constructProperty_FmaxMuscleStrain(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_FmaxMuscleStrain(self, initValue)


    def get_FmaxMuscleStrain(self, *args):
        """
        get_FmaxMuscleStrain(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_FmaxMuscleStrain(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_FmaxMuscleStrain(self, *args)


    def upd_FmaxMuscleStrain(self, *args):
        """
        upd_FmaxMuscleStrain(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_FmaxMuscleStrain(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_FmaxMuscleStrain(self, *args)


    def set_FmaxMuscleStrain(self, *args):
        """
        set_FmaxMuscleStrain(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_FmaxMuscleStrain(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_FmaxMuscleStrain(self, *args)


    def copyProperty_KshapeActive(self, source):
        """
        copyProperty_KshapeActive(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_KshapeActive(self, source)


    def append_KshapeActive(self, value):
        """
        append_KshapeActive(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_KshapeActive(self, value)


    def constructProperty_KshapeActive(self, initValue):
        """
        constructProperty_KshapeActive(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_KshapeActive(self, initValue)


    def get_KshapeActive(self, *args):
        """
        get_KshapeActive(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_KshapeActive(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_KshapeActive(self, *args)


    def upd_KshapeActive(self, *args):
        """
        upd_KshapeActive(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_KshapeActive(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_KshapeActive(self, *args)


    def set_KshapeActive(self, *args):
        """
        set_KshapeActive(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_KshapeActive(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_KshapeActive(self, *args)


    def copyProperty_KshapePassive(self, source):
        """
        copyProperty_KshapePassive(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_KshapePassive(self, source)


    def append_KshapePassive(self, value):
        """
        append_KshapePassive(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_KshapePassive(self, value)


    def constructProperty_KshapePassive(self, initValue):
        """
        constructProperty_KshapePassive(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_KshapePassive(self, initValue)


    def get_KshapePassive(self, *args):
        """
        get_KshapePassive(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_KshapePassive(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_KshapePassive(self, *args)


    def upd_KshapePassive(self, *args):
        """
        upd_KshapePassive(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_KshapePassive(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_KshapePassive(self, *args)


    def set_KshapePassive(self, *args):
        """
        set_KshapePassive(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_KshapePassive(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_KshapePassive(self, *args)


    def copyProperty_Af(self, source):
        """
        copyProperty_Af(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_Af(self, source)


    def append_Af(self, value):
        """
        append_Af(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_Af(self, value)


    def constructProperty_Af(self, initValue):
        """
        constructProperty_Af(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_Af(self, initValue)


    def get_Af(self, *args):
        """
        get_Af(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_Af(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_Af(self, *args)


    def upd_Af(self, *args):
        """
        upd_Af(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_Af(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_Af(self, *args)


    def set_Af(self, *args):
        """
        set_Af(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_Af(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_Af(self, *args)


    def copyProperty_Flen(self, source):
        """
        copyProperty_Flen(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_Flen(self, source)


    def append_Flen(self, value):
        """
        append_Flen(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_Flen(self, value)


    def constructProperty_Flen(self, initValue):
        """
        constructProperty_Flen(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_Flen(self, initValue)


    def get_Flen(self, *args):
        """
        get_Flen(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_Flen(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_Flen(self, *args)


    def upd_Flen(self, *args):
        """
        upd_Flen(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_Flen(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_Flen(self, *args)


    def set_Flen(self, *args):
        """
        set_Flen(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_Flen(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_Flen(self, *args)


    def copyProperty_fv_linear_extrap_threshold(self, source):
        """
        copyProperty_fv_linear_extrap_threshold(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_fv_linear_extrap_threshold(self, source)


    def append_fv_linear_extrap_threshold(self, value):
        """
        append_fv_linear_extrap_threshold(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_fv_linear_extrap_threshold(self, value)


    def constructProperty_fv_linear_extrap_threshold(self, initValue):
        """
        constructProperty_fv_linear_extrap_threshold(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_fv_linear_extrap_threshold(self, initValue)


    def get_fv_linear_extrap_threshold(self, *args):
        """
        get_fv_linear_extrap_threshold(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fv_linear_extrap_threshold(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_fv_linear_extrap_threshold(self, *args)


    def upd_fv_linear_extrap_threshold(self, *args):
        """
        upd_fv_linear_extrap_threshold(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fv_linear_extrap_threshold(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_fv_linear_extrap_threshold(self, *args)


    def set_fv_linear_extrap_threshold(self, *args):
        """
        set_fv_linear_extrap_threshold(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fv_linear_extrap_threshold(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_fv_linear_extrap_threshold(self, *args)


    def copyProperty_maximum_pennation_angle(self, source):
        """
        copyProperty_maximum_pennation_angle(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_maximum_pennation_angle(self, source)


    def append_maximum_pennation_angle(self, value):
        """
        append_maximum_pennation_angle(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_maximum_pennation_angle(self, value)


    def constructProperty_maximum_pennation_angle(self, initValue):
        """
        constructProperty_maximum_pennation_angle(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_maximum_pennation_angle(self, initValue)


    def get_maximum_pennation_angle(self, *args):
        """
        get_maximum_pennation_angle(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maximum_pennation_angle(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_maximum_pennation_angle(self, *args)


    def upd_maximum_pennation_angle(self, *args):
        """
        upd_maximum_pennation_angle(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_maximum_pennation_angle(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_maximum_pennation_angle(self, *args)


    def set_maximum_pennation_angle(self, *args):
        """
        set_maximum_pennation_angle(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_maximum_pennation_angle(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_maximum_pennation_angle(self, *args)


    def copyProperty_activation_time_constant(self, source):
        """
        copyProperty_activation_time_constant(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_activation_time_constant(self, source)


    def append_activation_time_constant(self, value):
        """
        append_activation_time_constant(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_activation_time_constant(self, value)


    def constructProperty_activation_time_constant(self, initValue):
        """
        constructProperty_activation_time_constant(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_activation_time_constant(self, initValue)


    def get_activation_time_constant(self, *args):
        """
        get_activation_time_constant(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_time_constant(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_activation_time_constant(self, *args)


    def upd_activation_time_constant(self, *args):
        """
        upd_activation_time_constant(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_time_constant(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_activation_time_constant(self, *args)


    def set_activation_time_constant(self, *args):
        """
        set_activation_time_constant(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_time_constant(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_activation_time_constant(self, *args)


    def copyProperty_deactivation_time_constant(self, source):
        """
        copyProperty_deactivation_time_constant(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_deactivation_time_constant(self, source)


    def append_deactivation_time_constant(self, value):
        """
        append_deactivation_time_constant(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_deactivation_time_constant(self, value)


    def constructProperty_deactivation_time_constant(self, initValue):
        """
        constructProperty_deactivation_time_constant(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_deactivation_time_constant(self, initValue)


    def get_deactivation_time_constant(self, *args):
        """
        get_deactivation_time_constant(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_deactivation_time_constant(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_deactivation_time_constant(self, *args)


    def upd_deactivation_time_constant(self, *args):
        """
        upd_deactivation_time_constant(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_deactivation_time_constant(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_deactivation_time_constant(self, *args)


    def set_deactivation_time_constant(self, *args):
        """
        set_deactivation_time_constant(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_deactivation_time_constant(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_deactivation_time_constant(self, *args)


    def copyProperty_minimum_activation(self, source):
        """
        copyProperty_minimum_activation(Thelen2003Muscle self, Thelen2003Muscle source)

        Parameters
        ----------
        source: OpenSim::Thelen2003Muscle::Self const &

        """
        return _simulation.Thelen2003Muscle_copyProperty_minimum_activation(self, source)


    def append_minimum_activation(self, value):
        """
        append_minimum_activation(Thelen2003Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_append_minimum_activation(self, value)


    def constructProperty_minimum_activation(self, initValue):
        """
        constructProperty_minimum_activation(Thelen2003Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Thelen2003Muscle_constructProperty_minimum_activation(self, initValue)


    def get_minimum_activation(self, *args):
        """
        get_minimum_activation(Thelen2003Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_minimum_activation(Thelen2003Muscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_get_minimum_activation(self, *args)


    def upd_minimum_activation(self, *args):
        """
        upd_minimum_activation(Thelen2003Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_minimum_activation(Thelen2003Muscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle *

        """
        return _simulation.Thelen2003Muscle_upd_minimum_activation(self, *args)


    def set_minimum_activation(self, *args):
        """
        set_minimum_activation(Thelen2003Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_minimum_activation(Thelen2003Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Thelen2003Muscle_set_minimum_activation(self, *args)

    FiberActiveForceLength = _simulation.Thelen2003Muscle_FiberActiveForceLength
    FiberPassiveForceLength = _simulation.Thelen2003Muscle_FiberPassiveForceLength
    FiberForceVelocity = _simulation.Thelen2003Muscle_FiberForceVelocity
    TendonForceLength = _simulation.Thelen2003Muscle_TendonForceLength

    def __init__(self, *args):
        """
        __init__(OpenSim::Thelen2003Muscle self) -> Thelen2003Muscle
        __init__(OpenSim::Thelen2003Muscle self, std::string const & aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) -> Thelen2003Muscle

        Parameters
        ----------
        aName: std::string const &
        aMaxIsometricForce: double
        aOptimalFiberLength: double
        aTendonSlackLength: double
        aPennationAngle: double

        """
        this = _simulation.new_Thelen2003Muscle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getActivationTimeConstant(self):
        """
        getActivationTimeConstant(Thelen2003Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_getActivationTimeConstant(self)


    def setActivationTimeConstant(self, actTimeConstant):
        """
        setActivationTimeConstant(Thelen2003Muscle self, double actTimeConstant)

        Parameters
        ----------
        actTimeConstant: double

        """
        return _simulation.Thelen2003Muscle_setActivationTimeConstant(self, actTimeConstant)


    def getDeactivationTimeConstant(self):
        """
        getDeactivationTimeConstant(Thelen2003Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_getDeactivationTimeConstant(self)


    def setDeactivationTimeConstant(self, deactTimeConstant):
        """
        setDeactivationTimeConstant(Thelen2003Muscle self, double deactTimeConstant)

        Parameters
        ----------
        deactTimeConstant: double

        """
        return _simulation.Thelen2003Muscle_setDeactivationTimeConstant(self, deactTimeConstant)


    def getMinimumActivation(self):
        """
        getMinimumActivation(Thelen2003Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_getMinimumActivation(self)


    def setMinimumActivation(self, minimumActivation):
        """
        setMinimumActivation(Thelen2003Muscle self, double minimumActivation)

        Parameters
        ----------
        minimumActivation: double

        """
        return _simulation.Thelen2003Muscle_setMinimumActivation(self, minimumActivation)


    def getMaximumPennationAngle(self):
        """
        getMaximumPennationAngle(Thelen2003Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_getMaximumPennationAngle(self)


    def setMaximumPennationAngle(self, maximumPennationAngle):
        """
        setMaximumPennationAngle(Thelen2003Muscle self, double maximumPennationAngle)

        Parameters
        ----------
        maximumPennationAngle: double

        """
        return _simulation.Thelen2003Muscle_setMaximumPennationAngle(self, maximumPennationAngle)


    def getMinimumFiberLength(self):
        """
        getMinimumFiberLength(Thelen2003Muscle self) -> double

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_getMinimumFiberLength(self)


    def getActivationModel(self):
        """
        getActivationModel(Thelen2003Muscle self) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_getActivationModel(self)


    def getPennationModel(self):
        """
        getPennationModel(Thelen2003Muscle self) -> MuscleFixedWidthPennationModel

        Parameters
        ----------
        self: OpenSim::Thelen2003Muscle const *

        """
        return _simulation.Thelen2003Muscle_getPennationModel(self)


    def printCurveToCSVFile(self, ctype, path):
        """
        printCurveToCSVFile(Thelen2003Muscle self, OpenSim::Thelen2003Muscle::CurveType const ctype, std::string const & path)

        Parameters
        ----------
        ctype: enum OpenSim::Thelen2003Muscle::CurveType const
        path: std::string const &

        """
        return _simulation.Thelen2003Muscle_printCurveToCSVFile(self, ctype, path)


    def computeActuation(self, s):
        """
        computeActuation(Thelen2003Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003Muscle_computeActuation(self, s)


    def computeInitialFiberEquilibrium(self, s):
        """
        computeInitialFiberEquilibrium(Thelen2003Muscle self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Thelen2003Muscle_computeInitialFiberEquilibrium(self, s)


    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        """
        calcActiveFiberForceAlongTendon(Thelen2003Muscle self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters
        ----------
        activation: double
        fiberLength: double
        fiberVelocity: double

        """
        return _simulation.Thelen2003Muscle_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Thelen2003Muscle self, State s, double aActivation) -> double

        Parameters
        ----------
        s: SimTK::State &
        aActivation: double

        """
        return _simulation.Thelen2003Muscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)

    __swig_destroy__ = _simulation.delete_Thelen2003Muscle
    __del__ = lambda self: None
Thelen2003Muscle_swigregister = _simulation.Thelen2003Muscle_swigregister
Thelen2003Muscle_swigregister(Thelen2003Muscle)

def Thelen2003Muscle_safeDownCast(obj):
    """
    Thelen2003Muscle_safeDownCast(OpenSimObject obj) -> Thelen2003Muscle

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Thelen2003Muscle_safeDownCast(obj)

def Thelen2003Muscle_getClassName():
    """Thelen2003Muscle_getClassName() -> std::string const &"""
    return _simulation.Thelen2003Muscle_getClassName()

class Millard2012EquilibriumMuscle(Muscle):
    """Proxy of C++ OpenSim::Millard2012EquilibriumMuscle class."""

    __swig_setmethods__ = {}
    for _s in [Muscle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Millard2012EquilibriumMuscle, name, value)
    __swig_getmethods__ = {}
    for _s in [Muscle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Millard2012EquilibriumMuscle, name)
    __repr__ = _swig_repr

    def safeDownCast(obj):
        """
        safeDownCast(OpenSimObject obj) -> Millard2012EquilibriumMuscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _simulation.Millard2012EquilibriumMuscle_safeDownCast(obj)

    safeDownCast = staticmethod(safeDownCast)

    def assign(self, aObject):
        """
        assign(Millard2012EquilibriumMuscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _simulation.Millard2012EquilibriumMuscle_assign(self, aObject)


    def getClassName():
        """getClassName() -> std::string const &"""
        return _simulation.Millard2012EquilibriumMuscle_getClassName()

    getClassName = staticmethod(getClassName)

    def clone(self):
        """
        clone(Millard2012EquilibriumMuscle self) -> Millard2012EquilibriumMuscle

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Millard2012EquilibriumMuscle self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getConcreteClassName(self)


    def copyProperty_fiber_damping(self, source):
        """
        copyProperty_fiber_damping(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_fiber_damping(self, source)


    def append_fiber_damping(self, value):
        """
        append_fiber_damping(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_fiber_damping(self, value)


    def constructProperty_fiber_damping(self, initValue):
        """
        constructProperty_fiber_damping(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_fiber_damping(self, initValue)


    def get_fiber_damping(self, *args):
        """
        get_fiber_damping(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_damping(Millard2012EquilibriumMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_fiber_damping(self, *args)


    def upd_fiber_damping(self, *args):
        """
        upd_fiber_damping(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_damping(Millard2012EquilibriumMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_fiber_damping(self, *args)


    def set_fiber_damping(self, *args):
        """
        set_fiber_damping(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_damping(Millard2012EquilibriumMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_fiber_damping(self, *args)


    def copyProperty_default_activation(self, source):
        """
        copyProperty_default_activation(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_default_activation(self, source)


    def append_default_activation(self, value):
        """
        append_default_activation(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_default_activation(self, value)


    def constructProperty_default_activation(self, initValue):
        """
        constructProperty_default_activation(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_default_activation(self, initValue)


    def get_default_activation(self, *args):
        """
        get_default_activation(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_activation(Millard2012EquilibriumMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_default_activation(self, *args)


    def upd_default_activation(self, *args):
        """
        upd_default_activation(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_activation(Millard2012EquilibriumMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_default_activation(self, *args)


    def set_default_activation(self, *args):
        """
        set_default_activation(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_activation(Millard2012EquilibriumMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_default_activation(self, *args)


    def copyProperty_default_fiber_length(self, source):
        """
        copyProperty_default_fiber_length(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_default_fiber_length(self, source)


    def append_default_fiber_length(self, value):
        """
        append_default_fiber_length(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_default_fiber_length(self, value)


    def constructProperty_default_fiber_length(self, initValue):
        """
        constructProperty_default_fiber_length(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_default_fiber_length(self, initValue)


    def get_default_fiber_length(self, *args):
        """
        get_default_fiber_length(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_fiber_length(Millard2012EquilibriumMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_default_fiber_length(self, *args)


    def upd_default_fiber_length(self, *args):
        """
        upd_default_fiber_length(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_fiber_length(Millard2012EquilibriumMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_default_fiber_length(self, *args)


    def set_default_fiber_length(self, *args):
        """
        set_default_fiber_length(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_fiber_length(Millard2012EquilibriumMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_default_fiber_length(self, *args)


    def copyProperty_activation_time_constant(self, source):
        """
        copyProperty_activation_time_constant(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_activation_time_constant(self, source)


    def append_activation_time_constant(self, value):
        """
        append_activation_time_constant(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_activation_time_constant(self, value)


    def constructProperty_activation_time_constant(self, initValue):
        """
        constructProperty_activation_time_constant(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_activation_time_constant(self, initValue)


    def get_activation_time_constant(self, *args):
        """
        get_activation_time_constant(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_time_constant(Millard2012EquilibriumMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_activation_time_constant(self, *args)


    def upd_activation_time_constant(self, *args):
        """
        upd_activation_time_constant(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_time_constant(Millard2012EquilibriumMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_activation_time_constant(self, *args)


    def set_activation_time_constant(self, *args):
        """
        set_activation_time_constant(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_time_constant(Millard2012EquilibriumMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_activation_time_constant(self, *args)


    def copyProperty_deactivation_time_constant(self, source):
        """
        copyProperty_deactivation_time_constant(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_deactivation_time_constant(self, source)


    def append_deactivation_time_constant(self, value):
        """
        append_deactivation_time_constant(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_deactivation_time_constant(self, value)


    def constructProperty_deactivation_time_constant(self, initValue):
        """
        constructProperty_deactivation_time_constant(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_deactivation_time_constant(self, initValue)


    def get_deactivation_time_constant(self, *args):
        """
        get_deactivation_time_constant(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_deactivation_time_constant(Millard2012EquilibriumMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_deactivation_time_constant(self, *args)


    def upd_deactivation_time_constant(self, *args):
        """
        upd_deactivation_time_constant(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_deactivation_time_constant(Millard2012EquilibriumMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_deactivation_time_constant(self, *args)


    def set_deactivation_time_constant(self, *args):
        """
        set_deactivation_time_constant(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_deactivation_time_constant(Millard2012EquilibriumMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_deactivation_time_constant(self, *args)


    def copyProperty_minimum_activation(self, source):
        """
        copyProperty_minimum_activation(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_minimum_activation(self, source)


    def append_minimum_activation(self, value):
        """
        append_minimum_activation(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_minimum_activation(self, value)


    def constructProperty_minimum_activation(self, initValue):
        """
        constructProperty_minimum_activation(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_minimum_activation(self, initValue)


    def get_minimum_activation(self, *args):
        """
        get_minimum_activation(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_minimum_activation(Millard2012EquilibriumMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_minimum_activation(self, *args)


    def upd_minimum_activation(self, *args):
        """
        upd_minimum_activation(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_minimum_activation(Millard2012EquilibriumMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_minimum_activation(self, *args)


    def set_minimum_activation(self, *args):
        """
        set_minimum_activation(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_minimum_activation(Millard2012EquilibriumMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_minimum_activation(self, *args)


    def copyProperty_maximum_pennation_angle(self, source):
        """
        copyProperty_maximum_pennation_angle(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_maximum_pennation_angle(self, source)


    def append_maximum_pennation_angle(self, value):
        """
        append_maximum_pennation_angle(Millard2012EquilibriumMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_maximum_pennation_angle(self, value)


    def constructProperty_maximum_pennation_angle(self, initValue):
        """
        constructProperty_maximum_pennation_angle(Millard2012EquilibriumMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_maximum_pennation_angle(self, initValue)


    def get_maximum_pennation_angle(self, *args):
        """
        get_maximum_pennation_angle(Millard2012EquilibriumMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maximum_pennation_angle(Millard2012EquilibriumMuscle self) -> double const &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_maximum_pennation_angle(self, *args)


    def upd_maximum_pennation_angle(self, *args):
        """
        upd_maximum_pennation_angle(Millard2012EquilibriumMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_maximum_pennation_angle(Millard2012EquilibriumMuscle self) -> double &

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_maximum_pennation_angle(self, *args)


    def set_maximum_pennation_angle(self, *args):
        """
        set_maximum_pennation_angle(Millard2012EquilibriumMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_maximum_pennation_angle(Millard2012EquilibriumMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_maximum_pennation_angle(self, *args)


    def copyProperty_ActiveForceLengthCurve(self, source):
        """
        copyProperty_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_ActiveForceLengthCurve(self, source)


    def append_ActiveForceLengthCurve(self, value):
        """
        append_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, ActiveForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::ActiveForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_ActiveForceLengthCurve(self, value)


    def constructProperty_ActiveForceLengthCurve(self, initValue):
        """
        constructProperty_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, ActiveForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::ActiveForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_ActiveForceLengthCurve(self, initValue)


    def get_ActiveForceLengthCurve(self, *args):
        """
        get_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> ActiveForceLengthCurve

        Parameters
        ----------
        i: int

        get_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_ActiveForceLengthCurve(self, *args)


    def upd_ActiveForceLengthCurve(self, *args):
        """
        upd_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> ActiveForceLengthCurve

        Parameters
        ----------
        i: int

        upd_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_ActiveForceLengthCurve(self, *args)


    def set_ActiveForceLengthCurve(self, *args):
        """
        set_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, int i, ActiveForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::ActiveForceLengthCurve const &

        set_ActiveForceLengthCurve(Millard2012EquilibriumMuscle self, ActiveForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::ActiveForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_ActiveForceLengthCurve(self, *args)


    def copyProperty_ForceVelocityCurve(self, source):
        """
        copyProperty_ForceVelocityCurve(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_ForceVelocityCurve(self, source)


    def append_ForceVelocityCurve(self, value):
        """
        append_ForceVelocityCurve(Millard2012EquilibriumMuscle self, ForceVelocityCurve value) -> int

        Parameters
        ----------
        value: OpenSim::ForceVelocityCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_ForceVelocityCurve(self, value)


    def constructProperty_ForceVelocityCurve(self, initValue):
        """
        constructProperty_ForceVelocityCurve(Millard2012EquilibriumMuscle self, ForceVelocityCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::ForceVelocityCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_ForceVelocityCurve(self, initValue)


    def get_ForceVelocityCurve(self, *args):
        """
        get_ForceVelocityCurve(Millard2012EquilibriumMuscle self, int i) -> ForceVelocityCurve

        Parameters
        ----------
        i: int

        get_ForceVelocityCurve(Millard2012EquilibriumMuscle self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_ForceVelocityCurve(self, *args)


    def upd_ForceVelocityCurve(self, *args):
        """
        upd_ForceVelocityCurve(Millard2012EquilibriumMuscle self, int i) -> ForceVelocityCurve

        Parameters
        ----------
        i: int

        upd_ForceVelocityCurve(Millard2012EquilibriumMuscle self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_ForceVelocityCurve(self, *args)


    def set_ForceVelocityCurve(self, *args):
        """
        set_ForceVelocityCurve(Millard2012EquilibriumMuscle self, int i, ForceVelocityCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::ForceVelocityCurve const &

        set_ForceVelocityCurve(Millard2012EquilibriumMuscle self, ForceVelocityCurve value)

        Parameters
        ----------
        value: OpenSim::ForceVelocityCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_ForceVelocityCurve(self, *args)


    def copyProperty_FiberForceLengthCurve(self, source):
        """
        copyProperty_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_FiberForceLengthCurve(self, source)


    def append_FiberForceLengthCurve(self, value):
        """
        append_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, FiberForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::FiberForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_FiberForceLengthCurve(self, value)


    def constructProperty_FiberForceLengthCurve(self, initValue):
        """
        constructProperty_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, FiberForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::FiberForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_FiberForceLengthCurve(self, initValue)


    def get_FiberForceLengthCurve(self, *args):
        """
        get_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> FiberForceLengthCurve

        Parameters
        ----------
        i: int

        get_FiberForceLengthCurve(Millard2012EquilibriumMuscle self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_FiberForceLengthCurve(self, *args)


    def upd_FiberForceLengthCurve(self, *args):
        """
        upd_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> FiberForceLengthCurve

        Parameters
        ----------
        i: int

        upd_FiberForceLengthCurve(Millard2012EquilibriumMuscle self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_FiberForceLengthCurve(self, *args)


    def set_FiberForceLengthCurve(self, *args):
        """
        set_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, int i, FiberForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::FiberForceLengthCurve const &

        set_FiberForceLengthCurve(Millard2012EquilibriumMuscle self, FiberForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::FiberForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_FiberForceLengthCurve(self, *args)


    def copyProperty_TendonForceLengthCurve(self, source):
        """
        copyProperty_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, Millard2012EquilibriumMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012EquilibriumMuscle::Self const &

        """
        return _simulation.Millard2012EquilibriumMuscle_copyProperty_TendonForceLengthCurve(self, source)


    def append_TendonForceLengthCurve(self, value):
        """
        append_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, TendonForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::TendonForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_append_TendonForceLengthCurve(self, value)


    def constructProperty_TendonForceLengthCurve(self, initValue):
        """
        constructProperty_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, TendonForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::TendonForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_constructProperty_TendonForceLengthCurve(self, initValue)


    def get_TendonForceLengthCurve(self, *args):
        """
        get_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> TendonForceLengthCurve

        Parameters
        ----------
        i: int

        get_TendonForceLengthCurve(Millard2012EquilibriumMuscle self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_get_TendonForceLengthCurve(self, *args)


    def upd_TendonForceLengthCurve(self, *args):
        """
        upd_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, int i) -> TendonForceLengthCurve

        Parameters
        ----------
        i: int

        upd_TendonForceLengthCurve(Millard2012EquilibriumMuscle self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle *

        """
        return _simulation.Millard2012EquilibriumMuscle_upd_TendonForceLengthCurve(self, *args)


    def set_TendonForceLengthCurve(self, *args):
        """
        set_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, int i, TendonForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::TendonForceLengthCurve const &

        set_TendonForceLengthCurve(Millard2012EquilibriumMuscle self, TendonForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::TendonForceLengthCurve const &

        """
        return _simulation.Millard2012EquilibriumMuscle_set_TendonForceLengthCurve(self, *args)

    __swig_setmethods__["_has_output_passive_fiber_elastic_force"] = _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_set
    __swig_getmethods__["_has_output_passive_fiber_elastic_force"] = _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_get
    if _newclass:
        _has_output_passive_fiber_elastic_force = _swig_property(_simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_get, _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_set)
    __swig_setmethods__["_has_output_passive_fiber_elastic_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_along_tendon_set
    __swig_getmethods__["_has_output_passive_fiber_elastic_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_along_tendon_get
    if _newclass:
        _has_output_passive_fiber_elastic_force_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_along_tendon_get, _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_along_tendon_set)
    __swig_setmethods__["_has_output_passive_fiber_damping_force"] = _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_set
    __swig_getmethods__["_has_output_passive_fiber_damping_force"] = _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_get
    if _newclass:
        _has_output_passive_fiber_damping_force = _swig_property(_simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_get, _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_set)
    __swig_setmethods__["_has_output_passive_fiber_damping_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_along_tendon_set
    __swig_getmethods__["_has_output_passive_fiber_damping_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_along_tendon_get
    if _newclass:
        _has_output_passive_fiber_damping_force_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_along_tendon_get, _simulation.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_along_tendon_set)

    def __init__(self, *args):
        """
        __init__(OpenSim::Millard2012EquilibriumMuscle self) -> Millard2012EquilibriumMuscle
        __init__(OpenSim::Millard2012EquilibriumMuscle self, std::string const & aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) -> Millard2012EquilibriumMuscle

        Parameters
        ----------
        aName: std::string const &
        aMaxIsometricForce: double
        aOptimalFiberLength: double
        aTendonSlackLength: double
        aPennationAngle: double

        """
        this = _simulation.new_Millard2012EquilibriumMuscle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getUseFiberDamping(self):
        """
        getUseFiberDamping(Millard2012EquilibriumMuscle self) -> bool

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getUseFiberDamping(self)


    def getFiberDamping(self):
        """
        getFiberDamping(Millard2012EquilibriumMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getFiberDamping(self)


    def getDefaultActivation(self):
        """
        getDefaultActivation(Millard2012EquilibriumMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getDefaultActivation(self)


    def getDefaultFiberLength(self):
        """
        getDefaultFiberLength(Millard2012EquilibriumMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getDefaultFiberLength(self)


    def getActivationTimeConstant(self):
        """
        getActivationTimeConstant(Millard2012EquilibriumMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getActivationTimeConstant(self)


    def getDeactivationTimeConstant(self):
        """
        getDeactivationTimeConstant(Millard2012EquilibriumMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getDeactivationTimeConstant(self)


    def getMinimumActivation(self):
        """
        getMinimumActivation(Millard2012EquilibriumMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getMinimumActivation(self)


    def getActiveForceLengthCurve(self):
        """
        getActiveForceLengthCurve(Millard2012EquilibriumMuscle self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getActiveForceLengthCurve(self)


    def getForceVelocityCurve(self):
        """
        getForceVelocityCurve(Millard2012EquilibriumMuscle self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getForceVelocityCurve(self)


    def getFiberForceLengthCurve(self):
        """
        getFiberForceLengthCurve(Millard2012EquilibriumMuscle self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getFiberForceLengthCurve(self)


    def getTendonForceLengthCurve(self):
        """
        getTendonForceLengthCurve(Millard2012EquilibriumMuscle self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getTendonForceLengthCurve(self)


    def getPennationModel(self):
        """
        getPennationModel(Millard2012EquilibriumMuscle self) -> MuscleFixedWidthPennationModel

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getPennationModel(self)


    def getActivationModel(self):
        """
        getActivationModel(Millard2012EquilibriumMuscle self) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getActivationModel(self)


    def getMinimumFiberLength(self):
        """
        getMinimumFiberLength(Millard2012EquilibriumMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getMinimumFiberLength(self)


    def getMinimumFiberLengthAlongTendon(self):
        """
        getMinimumFiberLengthAlongTendon(Millard2012EquilibriumMuscle self) -> double

        Parameters
        ----------
        self: OpenSim::Millard2012EquilibriumMuscle const *

        """
        return _simulation.Millard2012EquilibriumMuscle_getMinimumFiberLengthAlongTendon(self)


    def getTendonForceMultiplier(self, s):
        """
        getTendonForceMultiplier(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Millard2012EquilibriumMuscle_getTendonForceMultiplier(self, s)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscle_getFiberStiffnessAlongTendon(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscle_getFiberVelocity(self, s)


    def getActivationDerivative(self, s):
        """
        getActivationDerivative(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscle_getActivationDerivative(self, s)


    def getPassiveFiberElasticForce(self, s):
        """
        getPassiveFiberElasticForce(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscle_getPassiveFiberElasticForce(self, s)


    def getPassiveFiberElasticForceAlongTendon(self, s):
        """
        getPassiveFiberElasticForceAlongTendon(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscle_getPassiveFiberElasticForceAlongTendon(self, s)


    def getPassiveFiberDampingForce(self, s):
        """
        getPassiveFiberDampingForce(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscle_getPassiveFiberDampingForce(self, s)


    def getPassiveFiberDampingForceAlongTendon(self, s):
        """
        getPassiveFiberDampingForceAlongTendon(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscle_getPassiveFiberDampingForceAlongTendon(self, s)


    def setMuscleConfiguration(self, ignoreTendonCompliance, ignoreActivationDynamics, dampingCoefficient):
        """
        setMuscleConfiguration(Millard2012EquilibriumMuscle self, bool ignoreTendonCompliance, bool ignoreActivationDynamics, double dampingCoefficient)

        Parameters
        ----------
        ignoreTendonCompliance: bool
        ignoreActivationDynamics: bool
        dampingCoefficient: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setMuscleConfiguration(self, ignoreTendonCompliance, ignoreActivationDynamics, dampingCoefficient)


    def setFiberDamping(self, dampingCoefficient):
        """
        setFiberDamping(Millard2012EquilibriumMuscle self, double dampingCoefficient)

        Parameters
        ----------
        dampingCoefficient: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setFiberDamping(self, dampingCoefficient)


    def setDefaultActivation(self, activation):
        """
        setDefaultActivation(Millard2012EquilibriumMuscle self, double activation)

        Parameters
        ----------
        activation: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setDefaultActivation(self, activation)


    def setActivation(self, s, activation):
        """
        setActivation(Millard2012EquilibriumMuscle self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setActivation(self, s, activation)


    def setDefaultFiberLength(self, fiberLength):
        """
        setDefaultFiberLength(Millard2012EquilibriumMuscle self, double fiberLength)

        Parameters
        ----------
        fiberLength: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setDefaultFiberLength(self, fiberLength)


    def setActivationTimeConstant(self, activationTimeConstant):
        """
        setActivationTimeConstant(Millard2012EquilibriumMuscle self, double activationTimeConstant)

        Parameters
        ----------
        activationTimeConstant: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setActivationTimeConstant(self, activationTimeConstant)


    def setDeactivationTimeConstant(self, deactivationTimeConstant):
        """
        setDeactivationTimeConstant(Millard2012EquilibriumMuscle self, double deactivationTimeConstant)

        Parameters
        ----------
        deactivationTimeConstant: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setDeactivationTimeConstant(self, deactivationTimeConstant)


    def setMinimumActivation(self, minimumActivation):
        """
        setMinimumActivation(Millard2012EquilibriumMuscle self, double minimumActivation)

        Parameters
        ----------
        minimumActivation: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setMinimumActivation(self, minimumActivation)


    def setActiveForceLengthCurve(self, aActiveForceLengthCurve):
        """
        setActiveForceLengthCurve(Millard2012EquilibriumMuscle self, ActiveForceLengthCurve aActiveForceLengthCurve)

        Parameters
        ----------
        aActiveForceLengthCurve: OpenSim::ActiveForceLengthCurve &

        """
        return _simulation.Millard2012EquilibriumMuscle_setActiveForceLengthCurve(self, aActiveForceLengthCurve)


    def setForceVelocityCurve(self, aForceVelocityCurve):
        """
        setForceVelocityCurve(Millard2012EquilibriumMuscle self, ForceVelocityCurve aForceVelocityCurve)

        Parameters
        ----------
        aForceVelocityCurve: OpenSim::ForceVelocityCurve &

        """
        return _simulation.Millard2012EquilibriumMuscle_setForceVelocityCurve(self, aForceVelocityCurve)


    def setFiberForceLengthCurve(self, aFiberForceLengthCurve):
        """
        setFiberForceLengthCurve(Millard2012EquilibriumMuscle self, FiberForceLengthCurve aFiberForceLengthCurve)

        Parameters
        ----------
        aFiberForceLengthCurve: OpenSim::FiberForceLengthCurve &

        """
        return _simulation.Millard2012EquilibriumMuscle_setFiberForceLengthCurve(self, aFiberForceLengthCurve)


    def setTendonForceLengthCurve(self, aTendonForceLengthCurve):
        """
        setTendonForceLengthCurve(Millard2012EquilibriumMuscle self, TendonForceLengthCurve aTendonForceLengthCurve)

        Parameters
        ----------
        aTendonForceLengthCurve: OpenSim::TendonForceLengthCurve &

        """
        return _simulation.Millard2012EquilibriumMuscle_setTendonForceLengthCurve(self, aTendonForceLengthCurve)


    def setFiberLength(self, s, fiberLength):
        """
        setFiberLength(Millard2012EquilibriumMuscle self, State s, double fiberLength)

        Parameters
        ----------
        s: SimTK::State &
        fiberLength: double

        """
        return _simulation.Millard2012EquilibriumMuscle_setFiberLength(self, s, fiberLength)


    def computeActuation(self, s):
        """
        computeActuation(Millard2012EquilibriumMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscle_computeActuation(self, s)


    def computeInitialFiberEquilibrium(self, s):
        """
        computeInitialFiberEquilibrium(Millard2012EquilibriumMuscle self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Millard2012EquilibriumMuscle_computeInitialFiberEquilibrium(self, s)


    def computeFiberEquilibrium(self, s, solveForVelocity=False):
        """
        computeFiberEquilibrium(Millard2012EquilibriumMuscle self, State s, bool solveForVelocity=False)

        Parameters
        ----------
        s: SimTK::State &
        solveForVelocity: bool

        computeFiberEquilibrium(Millard2012EquilibriumMuscle self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Millard2012EquilibriumMuscle_computeFiberEquilibrium(self, s, solveForVelocity)


    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        """
        calcActiveFiberForceAlongTendon(Millard2012EquilibriumMuscle self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters
        ----------
        activation: double
        fiberLength: double
        fiberVelocity: double

        """
        return _simulation.Millard2012EquilibriumMuscle_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)


    def calcFiberStateGivenBoundaryCond(self, lengthMT, velocityMT, tendonForce, dTendonForceDT):
        """
        calcFiberStateGivenBoundaryCond(Millard2012EquilibriumMuscle self, double lengthMT, double velocityMT, double tendonForce, double dTendonForceDT) -> Vec4

        Parameters
        ----------
        lengthMT: double
        velocityMT: double
        tendonForce: double
        dTendonForceDT: double

        """
        return _simulation.Millard2012EquilibriumMuscle_calcFiberStateGivenBoundaryCond(self, lengthMT, velocityMT, tendonForce, dTendonForceDT)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Millard2012EquilibriumMuscle self, State s, double aActivation) -> double

        Parameters
        ----------
        s: SimTK::State &
        aActivation: double

        """
        return _simulation.Millard2012EquilibriumMuscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)


    def extendPostScale(self, s, scaleSet):
        """
        extendPostScale(Millard2012EquilibriumMuscle self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _simulation.Millard2012EquilibriumMuscle_extendPostScale(self, s, scaleSet)

    __swig_destroy__ = _simulation.delete_Millard2012EquilibriumMuscle
    __del__ = lambda self: None
Millard2012EquilibriumMuscle_swigregister = _simulation.Millard2012EquilibriumMuscle_swigregister
Millard2012EquilibriumMuscle_swigregister(Millard2012EquilibriumMuscle)

def Millard2012EquilibriumMuscle_safeDownCast(obj):
    """
    Millard2012EquilibriumMuscle_safeDownCast(OpenSimObject obj) -> Millard2012EquilibriumMuscle

    Parameters
    ----------
    obj: OpenSim::Object *

    """
    return _simulation.Millard2012EquilibriumMuscle_safeDownCast(obj)

def Millard2012EquilibriumMuscle_getClassName():
    """Millard2012EquilibriumMuscle_getClassName() -> std::string const &"""
    return _simulation.Millard2012EquilibriumMuscle_getClassName()

class Thelen2003MuscleList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::Thelen2003Muscle)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thelen2003MuscleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thelen2003MuscleList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::Thelen2003Muscle)> self, Component root, ComponentFilter f) -> Thelen2003MuscleList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::Thelen2003Muscle)> self, Component root) -> Thelen2003MuscleList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _simulation.new_Thelen2003MuscleList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Thelen2003MuscleList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(Thelen2003MuscleList self) -> Thelen2003MuscleIterator
        begin(Thelen2003MuscleList self) -> OpenSim::ComponentList< OpenSim::Thelen2003Muscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(Thelen2003MuscleList self) -> OpenSim::ComponentList< OpenSim::Thelen2003Muscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleList_cbegin(self)


    def end(self, *args):
        """
        end(Thelen2003MuscleList self) -> Thelen2003MuscleIterator
        end(Thelen2003MuscleList self) -> OpenSim::ComponentList< OpenSim::Thelen2003Muscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleList_end(self, *args)


    def cend(self):
        """
        cend(Thelen2003MuscleList self) -> OpenSim::ComponentList< OpenSim::Thelen2003Muscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(Thelen2003MuscleList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _simulation.Thelen2003MuscleList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

Thelen2003MuscleList_swigregister = _simulation.Thelen2003MuscleList_swigregister
Thelen2003MuscleList_swigregister(Thelen2003MuscleList)

class Thelen2003MuscleIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::Thelen2003Muscle)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thelen2003MuscleIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thelen2003MuscleIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(Thelen2003MuscleIterator self, Thelen2003MuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const &

        """
        return _simulation.Thelen2003MuscleIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(Thelen2003MuscleIterator self, Thelen2003MuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const &

        """
        return _simulation.Thelen2003MuscleIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(Thelen2003MuscleIterator self, Thelen2003MuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const &

        """
        return _simulation.Thelen2003MuscleIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(Thelen2003MuscleIterator self) -> Thelen2003Muscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator___ref__(self)


    def deref(self):
        """
        deref(Thelen2003MuscleIterator self) -> Thelen2003Muscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_deref(self)


    def __deref__(self):
        """
        __deref__(Thelen2003MuscleIterator self) -> Thelen2003Muscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator___deref__(self)


    def next(self):
        """
        next(Thelen2003MuscleIterator self) -> Thelen2003MuscleIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > *

        """
        return _simulation.Thelen2003MuscleIterator_next(self)

    __swig_destroy__ = _simulation.delete_Thelen2003MuscleIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(Thelen2003MuscleIterator self) -> Thelen2003Muscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Thelen2003MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getConcreteClassName(self)


    def get_FmaxTendonStrain(self, *args):
        """
        get_FmaxTendonStrain(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_FmaxTendonStrain(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_FmaxTendonStrain(self, *args)


    def get_FmaxMuscleStrain(self, *args):
        """
        get_FmaxMuscleStrain(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_FmaxMuscleStrain(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_FmaxMuscleStrain(self, *args)


    def get_KshapeActive(self, *args):
        """
        get_KshapeActive(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_KshapeActive(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_KshapeActive(self, *args)


    def get_KshapePassive(self, *args):
        """
        get_KshapePassive(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_KshapePassive(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_KshapePassive(self, *args)


    def get_Af(self, *args):
        """
        get_Af(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_Af(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_Af(self, *args)


    def get_Flen(self, *args):
        """
        get_Flen(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_Flen(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_Flen(self, *args)


    def get_fv_linear_extrap_threshold(self, *args):
        """
        get_fv_linear_extrap_threshold(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fv_linear_extrap_threshold(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_fv_linear_extrap_threshold(self, *args)


    def get_maximum_pennation_angle(self, *args):
        """
        get_maximum_pennation_angle(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maximum_pennation_angle(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_maximum_pennation_angle(self, *args)


    def get_activation_time_constant(self, *args):
        """
        get_activation_time_constant(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_time_constant(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_activation_time_constant(self, *args)


    def get_deactivation_time_constant(self, *args):
        """
        get_deactivation_time_constant(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_deactivation_time_constant(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_deactivation_time_constant(self, *args)


    def get_minimum_activation(self, *args):
        """
        get_minimum_activation(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_minimum_activation(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_minimum_activation(self, *args)


    def getActivationTimeConstant(self):
        """
        getActivationTimeConstant(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getActivationTimeConstant(self)


    def getDeactivationTimeConstant(self):
        """
        getDeactivationTimeConstant(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getDeactivationTimeConstant(self)


    def getMinimumActivation(self):
        """
        getMinimumActivation(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getMinimumActivation(self)


    def getMaximumPennationAngle(self):
        """
        getMaximumPennationAngle(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getMaximumPennationAngle(self)


    def getMinimumFiberLength(self):
        """
        getMinimumFiberLength(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getMinimumFiberLength(self)


    def getActivationModel(self):
        """
        getActivationModel(Thelen2003MuscleIterator self) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getActivationModel(self)


    def getPennationModel(self):
        """
        getPennationModel(Thelen2003MuscleIterator self) -> MuscleFixedWidthPennationModel

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getPennationModel(self)


    def printCurveToCSVFile(self, ctype, path):
        """
        printCurveToCSVFile(Thelen2003MuscleIterator self, OpenSim::Thelen2003Muscle::CurveType const ctype, std::string const & path)

        Parameters
        ----------
        ctype: enum OpenSim::Thelen2003Muscle::CurveType const
        path: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_printCurveToCSVFile(self, ctype, path)


    def computeActuation(self, s):
        """
        computeActuation(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_computeActuation(self, s)


    def computeInitialFiberEquilibrium(self, s):
        """
        computeInitialFiberEquilibrium(Thelen2003MuscleIterator self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Thelen2003MuscleIterator_computeInitialFiberEquilibrium(self, s)


    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        """
        calcActiveFiberForceAlongTendon(Thelen2003MuscleIterator self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters
        ----------
        activation: double
        fiberLength: double
        fiberVelocity: double

        """
        return _simulation.Thelen2003MuscleIterator_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Thelen2003MuscleIterator self, State s, double aActivation) -> double

        Parameters
        ----------
        s: SimTK::State &
        aActivation: double

        """
        return _simulation.Thelen2003MuscleIterator_calcInextensibleTendonActiveFiberForce(self, s, aActivation)


    def get_default_activation(self, *args):
        """
        get_default_activation(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_activation(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_default_activation(self, *args)


    def get_default_fiber_length(self, *args):
        """
        get_default_fiber_length(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_fiber_length(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_default_fiber_length(self, *args)


    def getDefaultActivation(self):
        """
        getDefaultActivation(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getDefaultActivation(self)


    def getDefaultFiberLength(self):
        """
        getDefaultFiberLength(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getDefaultFiberLength(self)


    def setActivation(self, s, activation):
        """
        setActivation(Thelen2003MuscleIterator self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _simulation.Thelen2003MuscleIterator_setActivation(self, s, activation)


    def setFiberLength(self, s, fiberLength):
        """
        setFiberLength(Thelen2003MuscleIterator self, State s, double fiberLength)

        Parameters
        ----------
        s: SimTK::State &
        fiberLength: double

        """
        return _simulation.Thelen2003MuscleIterator_setFiberLength(self, s, fiberLength)


    def getActivationRate(self, s):
        """
        getActivationRate(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getActivationRate(self, s)


    def get_max_isometric_force(self, *args):
        """
        get_max_isometric_force(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_isometric_force(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_max_isometric_force(self, *args)


    def get_optimal_fiber_length(self, *args):
        """
        get_optimal_fiber_length(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_fiber_length(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_optimal_fiber_length(self, *args)


    def get_tendon_slack_length(self, *args):
        """
        get_tendon_slack_length(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_tendon_slack_length(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_tendon_slack_length(self, *args)


    def get_pennation_angle_at_optimal(self, *args):
        """
        get_pennation_angle_at_optimal(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_pennation_angle_at_optimal(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_pennation_angle_at_optimal(self, *args)


    def get_max_contraction_velocity(self, *args):
        """
        get_max_contraction_velocity(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_contraction_velocity(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_max_contraction_velocity(self, *args)


    def get_ignore_tendon_compliance(self, *args):
        """
        get_ignore_tendon_compliance(Thelen2003MuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_tendon_compliance(Thelen2003MuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_ignore_tendon_compliance(self, *args)


    def get_ignore_activation_dynamics(self, *args):
        """
        get_ignore_activation_dynamics(Thelen2003MuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_activation_dynamics(Thelen2003MuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_ignore_activation_dynamics(self, *args)

    __swig_getmethods__["_has_output_excitation"] = _simulation.Thelen2003MuscleIterator__has_output_excitation_get
    if _newclass:
        _has_output_excitation = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_excitation_get)
    __swig_getmethods__["_has_output_activation"] = _simulation.Thelen2003MuscleIterator__has_output_activation_get
    if _newclass:
        _has_output_activation = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_activation_get)
    __swig_getmethods__["_has_output_fiber_length"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_length_get
    if _newclass:
        _has_output_fiber_length = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_length_get)
    __swig_getmethods__["_has_output_pennation_angle"] = _simulation.Thelen2003MuscleIterator__has_output_pennation_angle_get
    if _newclass:
        _has_output_pennation_angle = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_pennation_angle_get)
    __swig_getmethods__["_has_output_cos_pennation_angle"] = _simulation.Thelen2003MuscleIterator__has_output_cos_pennation_angle_get
    if _newclass:
        _has_output_cos_pennation_angle = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_cos_pennation_angle_get)
    __swig_getmethods__["_has_output_tendon_length"] = _simulation.Thelen2003MuscleIterator__has_output_tendon_length_get
    if _newclass:
        _has_output_tendon_length = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_tendon_length_get)
    __swig_getmethods__["_has_output_normalized_fiber_length"] = _simulation.Thelen2003MuscleIterator__has_output_normalized_fiber_length_get
    if _newclass:
        _has_output_normalized_fiber_length = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_normalized_fiber_length_get)
    __swig_getmethods__["_has_output_fiber_length_along_tendon"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_length_along_tendon_get
    if _newclass:
        _has_output_fiber_length_along_tendon = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_length_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_strain"] = _simulation.Thelen2003MuscleIterator__has_output_tendon_strain_get
    if _newclass:
        _has_output_tendon_strain = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_tendon_strain_get)
    __swig_getmethods__["_has_output_passive_force_multiplier"] = _simulation.Thelen2003MuscleIterator__has_output_passive_force_multiplier_get
    if _newclass:
        _has_output_passive_force_multiplier = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_passive_force_multiplier_get)
    __swig_getmethods__["_has_output_active_force_length_multiplier"] = _simulation.Thelen2003MuscleIterator__has_output_active_force_length_multiplier_get
    if _newclass:
        _has_output_active_force_length_multiplier = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_active_force_length_multiplier_get)
    __swig_getmethods__["_has_output_fiber_velocity"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_velocity_get
    if _newclass:
        _has_output_fiber_velocity = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_velocity_get)
    __swig_getmethods__["_has_output_normalized_fiber_velocity"] = _simulation.Thelen2003MuscleIterator__has_output_normalized_fiber_velocity_get
    if _newclass:
        _has_output_normalized_fiber_velocity = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_normalized_fiber_velocity_get)
    __swig_getmethods__["_has_output_fiber_velocity_along_tendon"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_velocity_along_tendon_get
    if _newclass:
        _has_output_fiber_velocity_along_tendon = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_velocity_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_velocity"] = _simulation.Thelen2003MuscleIterator__has_output_tendon_velocity_get
    if _newclass:
        _has_output_tendon_velocity = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_tendon_velocity_get)
    __swig_getmethods__["_has_output_force_velocity_multiplier"] = _simulation.Thelen2003MuscleIterator__has_output_force_velocity_multiplier_get
    if _newclass:
        _has_output_force_velocity_multiplier = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_force_velocity_multiplier_get)
    __swig_getmethods__["_has_output_pennation_angular_velocity"] = _simulation.Thelen2003MuscleIterator__has_output_pennation_angular_velocity_get
    if _newclass:
        _has_output_pennation_angular_velocity = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_pennation_angular_velocity_get)
    __swig_getmethods__["_has_output_fiber_force"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_force_get
    if _newclass:
        _has_output_fiber_force = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_force_get)
    __swig_getmethods__["_has_output_fiber_force_along_tendon"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_force_along_tendon_get
    if _newclass:
        _has_output_fiber_force_along_tendon = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_active_fiber_force"] = _simulation.Thelen2003MuscleIterator__has_output_active_fiber_force_get
    if _newclass:
        _has_output_active_fiber_force = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_active_fiber_force_get)
    __swig_getmethods__["_has_output_passive_fiber_force"] = _simulation.Thelen2003MuscleIterator__has_output_passive_fiber_force_get
    if _newclass:
        _has_output_passive_fiber_force = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_passive_fiber_force_get)
    __swig_getmethods__["_has_output_active_fiber_force_along_tendon"] = _simulation.Thelen2003MuscleIterator__has_output_active_fiber_force_along_tendon_get
    if _newclass:
        _has_output_active_fiber_force_along_tendon = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_active_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_passive_fiber_force_along_tendon"] = _simulation.Thelen2003MuscleIterator__has_output_passive_fiber_force_along_tendon_get
    if _newclass:
        _has_output_passive_fiber_force_along_tendon = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_passive_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_force"] = _simulation.Thelen2003MuscleIterator__has_output_tendon_force_get
    if _newclass:
        _has_output_tendon_force = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_tendon_force_get)
    __swig_getmethods__["_has_output_fiber_stiffness"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_stiffness_get
    if _newclass:
        _has_output_fiber_stiffness = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_stiffness_get)
    __swig_getmethods__["_has_output_fiber_stiffness_along_tendon"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_stiffness_along_tendon_get
    if _newclass:
        _has_output_fiber_stiffness_along_tendon = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_stiffness_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_stiffness"] = _simulation.Thelen2003MuscleIterator__has_output_tendon_stiffness_get
    if _newclass:
        _has_output_tendon_stiffness = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_tendon_stiffness_get)
    __swig_getmethods__["_has_output_muscle_stiffness"] = _simulation.Thelen2003MuscleIterator__has_output_muscle_stiffness_get
    if _newclass:
        _has_output_muscle_stiffness = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_muscle_stiffness_get)
    __swig_getmethods__["_has_output_fiber_active_power"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_active_power_get
    if _newclass:
        _has_output_fiber_active_power = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_active_power_get)
    __swig_getmethods__["_has_output_fiber_passive_power"] = _simulation.Thelen2003MuscleIterator__has_output_fiber_passive_power_get
    if _newclass:
        _has_output_fiber_passive_power = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_fiber_passive_power_get)
    __swig_getmethods__["_has_output_tendon_power"] = _simulation.Thelen2003MuscleIterator__has_output_tendon_power_get
    if _newclass:
        _has_output_tendon_power = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_tendon_power_get)
    __swig_getmethods__["_has_output_muscle_power"] = _simulation.Thelen2003MuscleIterator__has_output_muscle_power_get
    if _newclass:
        _has_output_muscle_power = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_muscle_power_get)

    def getMaxIsometricForce(self):
        """
        getMaxIsometricForce(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getMaxIsometricForce(self)


    def getOptimalFiberLength(self):
        """
        getOptimalFiberLength(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getOptimalFiberLength(self)


    def getTendonSlackLength(self):
        """
        getTendonSlackLength(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getTendonSlackLength(self)


    def getPennationAngleAtOptimalFiberLength(self):
        """
        getPennationAngleAtOptimalFiberLength(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getPennationAngleAtOptimalFiberLength(self)


    def getMaxContractionVelocity(self):
        """
        getMaxContractionVelocity(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getMaxContractionVelocity(self)


    def getIgnoreTendonCompliance(self, s):
        """
        getIgnoreTendonCompliance(Thelen2003MuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getIgnoreTendonCompliance(self, s)


    def setIgnoreTendonCompliance(self, s, ignore):
        """
        setIgnoreTendonCompliance(Thelen2003MuscleIterator self, State s, bool ignore)

        Parameters
        ----------
        s: SimTK::State &
        ignore: bool

        """
        return _simulation.Thelen2003MuscleIterator_setIgnoreTendonCompliance(self, s, ignore)


    def getIgnoreActivationDynamics(self, s):
        """
        getIgnoreActivationDynamics(Thelen2003MuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getIgnoreActivationDynamics(self, s)


    def setIgnoreActivationDynamics(self, s, ignore):
        """
        setIgnoreActivationDynamics(Thelen2003MuscleIterator self, State s, bool ignore)

        Parameters
        ----------
        s: SimTK::State &
        ignore: bool

        """
        return _simulation.Thelen2003MuscleIterator_setIgnoreActivationDynamics(self, s, ignore)


    def getActivation(self, s):
        """
        getActivation(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getActivation(self, s)


    def getFiberLength(self, s):
        """
        getFiberLength(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberLength(self, s)


    def getPennationAngle(self, s):
        """
        getPennationAngle(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getPennationAngle(self, s)


    def getCosPennationAngle(self, s):
        """
        getCosPennationAngle(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getCosPennationAngle(self, s)


    def getTendonLength(self, s):
        """
        getTendonLength(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getTendonLength(self, s)


    def getNormalizedFiberLength(self, s):
        """
        getNormalizedFiberLength(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getNormalizedFiberLength(self, s)


    def getFiberLengthAlongTendon(self, s):
        """
        getFiberLengthAlongTendon(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberLengthAlongTendon(self, s)


    def getTendonStrain(self, s):
        """
        getTendonStrain(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getTendonStrain(self, s)


    def getFiberPotentialEnergy(self, s):
        """
        getFiberPotentialEnergy(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberPotentialEnergy(self, s)


    def getTendonPotentialEnergy(self, s):
        """
        getTendonPotentialEnergy(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getTendonPotentialEnergy(self, s)


    def getMusclePotentialEnergy(self, s):
        """
        getMusclePotentialEnergy(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getMusclePotentialEnergy(self, s)


    def getPassiveForceMultiplier(self, s):
        """
        getPassiveForceMultiplier(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getPassiveForceMultiplier(self, s)


    def getActiveForceLengthMultiplier(self, s):
        """
        getActiveForceLengthMultiplier(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getActiveForceLengthMultiplier(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberVelocity(self, s)


    def getNormalizedFiberVelocity(self, s):
        """
        getNormalizedFiberVelocity(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getNormalizedFiberVelocity(self, s)


    def getFiberVelocityAlongTendon(self, s):
        """
        getFiberVelocityAlongTendon(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberVelocityAlongTendon(self, s)


    def getPennationAngularVelocity(self, s):
        """
        getPennationAngularVelocity(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getPennationAngularVelocity(self, s)


    def getTendonVelocity(self, s):
        """
        getTendonVelocity(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getTendonVelocity(self, s)


    def getForceVelocityMultiplier(self, s):
        """
        getForceVelocityMultiplier(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getForceVelocityMultiplier(self, s)


    def getFiberForce(self, s):
        """
        getFiberForce(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberForce(self, s)


    def getFiberForceAlongTendon(self, s):
        """
        getFiberForceAlongTendon(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberForceAlongTendon(self, s)


    def getActiveFiberForce(self, s):
        """
        getActiveFiberForce(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getActiveFiberForce(self, s)


    def getPassiveFiberForce(self, s):
        """
        getPassiveFiberForce(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getPassiveFiberForce(self, s)


    def getActiveFiberForceAlongTendon(self, s):
        """
        getActiveFiberForceAlongTendon(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getActiveFiberForceAlongTendon(self, s)


    def getPassiveFiberForceAlongTendon(self, s):
        """
        getPassiveFiberForceAlongTendon(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getPassiveFiberForceAlongTendon(self, s)


    def getTendonForce(self, s):
        """
        getTendonForce(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getTendonForce(self, s)


    def getFiberStiffness(self, s):
        """
        getFiberStiffness(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberStiffness(self, s)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberStiffnessAlongTendon(self, s)


    def getTendonStiffness(self, s):
        """
        getTendonStiffness(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getTendonStiffness(self, s)


    def getMuscleStiffness(self, s):
        """
        getMuscleStiffness(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getMuscleStiffness(self, s)


    def getFiberActivePower(self, s):
        """
        getFiberActivePower(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberActivePower(self, s)


    def getFiberPassivePower(self, s):
        """
        getFiberPassivePower(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getFiberPassivePower(self, s)


    def getTendonPower(self, s):
        """
        getTendonPower(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getTendonPower(self, s)


    def getMusclePower(self, s):
        """
        getMusclePower(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getMusclePower(self, s)


    def getStress(self, s):
        """
        getStress(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getStress(self, s)


    def setExcitation(self, s, excitation):
        """
        setExcitation(Thelen2003MuscleIterator self, State s, double excitation)

        Parameters
        ----------
        s: SimTK::State &
        excitation: double

        """
        return _simulation.Thelen2003MuscleIterator_setExcitation(self, s, excitation)


    def getExcitation(self, s):
        """
        getExcitation(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getExcitation(self, s)


    def computeEquilibrium(self, s):
        """
        computeEquilibrium(Thelen2003MuscleIterator self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Thelen2003MuscleIterator_computeEquilibrium(self, s)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(Thelen2003MuscleIterator self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        get_GeometryPath(Thelen2003MuscleIterator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_GeometryPath(self, *args)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_optimal_force(self, *args)

    __swig_getmethods__["_has_output_tension"] = _simulation.Thelen2003MuscleIterator__has_output_tension_get
    if _newclass:
        _has_output_tension = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_tension_get)

    def getGeometryPath(self):
        """
        getGeometryPath(Thelen2003MuscleIterator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getGeometryPath(self)


    def hasGeometryPath(self):
        """
        hasGeometryPath(Thelen2003MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_hasGeometryPath(self)


    def getOptimalForce(self):
        """
        getOptimalForce(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getOptimalForce(self)


    def getLength(self, s):
        """
        getLength(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getLength(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getLengtheningSpeed(self, s)


    def getPower(self, s):
        """
        getPower(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getPower(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(Thelen2003MuscleIterator self, State s, Coordinate aCoord) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aCoord: OpenSim::Coordinate &

        """
        return _simulation.Thelen2003MuscleIterator_computeMomentArm(self, s, aCoord)


    def get_min_control(self, *args):
        """
        get_min_control(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_min_control(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_min_control(self, *args)


    def get_max_control(self, *args):
        """
        get_max_control(Thelen2003MuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_control(Thelen2003MuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_max_control(self, *args)

    __swig_getmethods__["_has_output_actuation"] = _simulation.Thelen2003MuscleIterator__has_output_actuation_get
    if _newclass:
        _has_output_actuation = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_actuation_get)
    __swig_getmethods__["_has_output_speed"] = _simulation.Thelen2003MuscleIterator__has_output_speed_get
    if _newclass:
        _has_output_speed = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_speed_get)

    def getControl(self, s):
        """
        getControl(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getControl(self, s)


    def numControls(self):
        """
        numControls(Thelen2003MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_numControls(self)


    def setActuation(self, s, aActuation):
        """
        setActuation(Thelen2003MuscleIterator self, State s, double aActuation)

        Parameters
        ----------
        s: SimTK::State const &
        aActuation: double

        """
        return _simulation.Thelen2003MuscleIterator_setActuation(self, s, aActuation)


    def getActuation(self, s):
        """
        getActuation(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getActuation(self, s)


    def setSpeed(self, s, aspeed):
        """
        setSpeed(Thelen2003MuscleIterator self, State s, double aspeed)

        Parameters
        ----------
        s: SimTK::State const &
        aspeed: double

        """
        return _simulation.Thelen2003MuscleIterator_setSpeed(self, s, aspeed)


    def getSpeed(self, s):
        """
        getSpeed(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getSpeed(self, s)


    def getMinControl(self):
        """
        getMinControl(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getMinControl(self)


    def getMaxControl(self):
        """
        getMaxControl(Thelen2003MuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getMaxControl(self)


    def overrideActuation(self, s, flag):
        """
        overrideActuation(Thelen2003MuscleIterator self, State s, bool flag)

        Parameters
        ----------
        s: SimTK::State &
        flag: bool

        """
        return _simulation.Thelen2003MuscleIterator_overrideActuation(self, s, flag)


    def isActuationOverridden(self, s):
        """
        isActuationOverridden(Thelen2003MuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_isActuationOverridden(self, s)


    def setOverrideActuation(self, s, value):
        """
        setOverrideActuation(Thelen2003MuscleIterator self, State s, double value)

        Parameters
        ----------
        s: SimTK::State &
        value: double

        """
        return _simulation.Thelen2003MuscleIterator_setOverrideActuation(self, s, value)


    def getOverrideActuation(self, s):
        """
        getOverrideActuation(Thelen2003MuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getOverrideActuation(self, s)


    def getControls(self, modelControls, actuatorControls):
        """
        getControls(Thelen2003MuscleIterator self, Vector modelControls, Vector actuatorControls)

        Parameters
        ----------
        modelControls: SimTK::Vector const &
        actuatorControls: SimTK::Vector &

        """
        return _simulation.Thelen2003MuscleIterator_getControls(self, modelControls, actuatorControls)


    def setControls(self, actuatorControls, modelControls):
        """
        setControls(Thelen2003MuscleIterator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.Thelen2003MuscleIterator_setControls(self, actuatorControls, modelControls)


    def addInControls(self, actuatorControls, modelControls):
        """
        addInControls(Thelen2003MuscleIterator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.Thelen2003MuscleIterator_addInControls(self, actuatorControls, modelControls)


    def get_appliesForce(self, *args):
        """
        get_appliesForce(Thelen2003MuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_appliesForce(Thelen2003MuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_get_appliesForce(self, *args)

    __swig_getmethods__["_has_output_potential_energy"] = _simulation.Thelen2003MuscleIterator__has_output_potential_energy_get
    if _newclass:
        _has_output_potential_energy = _swig_property(_simulation.Thelen2003MuscleIterator__has_output_potential_energy_get)

    def shouldBeParallelized(self):
        """
        shouldBeParallelized(Thelen2003MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_shouldBeParallelized(self)


    def appliesForce(self, s):
        """
        appliesForce(Thelen2003MuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_appliesForce(self, s)


    def setAppliesForce(self, s, applyForce):
        """
        setAppliesForce(Thelen2003MuscleIterator self, State s, bool applyForce)

        Parameters
        ----------
        s: SimTK::State &
        applyForce: bool

        """
        return _simulation.Thelen2003MuscleIterator_setAppliesForce(self, s, applyForce)


    def getModel(self):
        """
        getModel(Thelen2003MuscleIterator self) -> Model

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getModel(self)


    def hasModel(self):
        """
        hasModel(Thelen2003MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_hasModel(self)


    def addToSystem(self, system):
        """
        addToSystem(Thelen2003MuscleIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.Thelen2003MuscleIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(Thelen2003MuscleIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.Thelen2003MuscleIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(Thelen2003MuscleIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.Thelen2003MuscleIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(Thelen2003MuscleIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(Thelen2003MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(Thelen2003MuscleIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _simulation.Thelen2003MuscleIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(Thelen2003MuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(Thelen2003MuscleIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(Thelen2003MuscleIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.Thelen2003MuscleIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(Thelen2003MuscleIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.Thelen2003MuscleIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(Thelen2003MuscleIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(Thelen2003MuscleIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(Thelen2003MuscleIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(Thelen2003MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(Thelen2003MuscleIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(Thelen2003MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(Thelen2003MuscleIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(Thelen2003MuscleIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(Thelen2003MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(Thelen2003MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(Thelen2003MuscleIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(Thelen2003MuscleIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(Thelen2003MuscleIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(Thelen2003MuscleIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(Thelen2003MuscleIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(Thelen2003MuscleIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _simulation.Thelen2003MuscleIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(Thelen2003MuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(Thelen2003MuscleIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.Thelen2003MuscleIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(Thelen2003MuscleIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Thelen2003MuscleIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(Thelen2003MuscleIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _simulation.Thelen2003MuscleIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(Thelen2003MuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(Thelen2003MuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(Thelen2003MuscleIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.Thelen2003MuscleIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(Thelen2003MuscleIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(Thelen2003MuscleIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(Thelen2003MuscleIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(Thelen2003MuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(Thelen2003MuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(Thelen2003MuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(Thelen2003MuscleIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(Thelen2003MuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(Thelen2003MuscleIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(Thelen2003MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(Thelen2003MuscleIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(Thelen2003MuscleIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(Thelen2003MuscleIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(Thelen2003MuscleIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(Thelen2003MuscleIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _simulation.Thelen2003MuscleIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(Thelen2003MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getName(self)


    def getDescription(self):
        """
        getDescription(Thelen2003MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(Thelen2003MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(Thelen2003MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(Thelen2003MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(Thelen2003MuscleIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _simulation.Thelen2003MuscleIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(Thelen2003MuscleIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(Thelen2003MuscleIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(Thelen2003MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(Thelen2003MuscleIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(Thelen2003MuscleIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _simulation.Thelen2003MuscleIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(Thelen2003MuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(Thelen2003MuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(Thelen2003MuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(Thelen2003MuscleIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.Thelen2003MuscleIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(Thelen2003MuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_dump(self)


    def isA(self, type):
        """
        isA(Thelen2003MuscleIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _simulation.Thelen2003MuscleIterator_isA(self, type)


    def toString(self):
        """
        toString(Thelen2003MuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Thelen2003Muscle const > const *

        """
        return _simulation.Thelen2003MuscleIterator_toString(self)

Thelen2003MuscleIterator_swigregister = _simulation.Thelen2003MuscleIterator_swigregister
Thelen2003MuscleIterator_swigregister(Thelen2003MuscleIterator)

class Millard2012EquilibriumMuscleList(_object):
    """Proxy of C++ OpenSim::ComponentList<(q(const).OpenSim::Millard2012EquilibriumMuscle)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Millard2012EquilibriumMuscleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Millard2012EquilibriumMuscleList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OpenSim::ComponentList<(q(const).OpenSim::Millard2012EquilibriumMuscle)> self, Component root, ComponentFilter f) -> Millard2012EquilibriumMuscleList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(OpenSim::ComponentList<(q(const).OpenSim::Millard2012EquilibriumMuscle)> self, Component root) -> Millard2012EquilibriumMuscleList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        this = _simulation.new_Millard2012EquilibriumMuscleList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simulation.delete_Millard2012EquilibriumMuscleList
    __del__ = lambda self: None

    def begin(self, *args):
        """
        begin(Millard2012EquilibriumMuscleList self) -> Millard2012EquilibriumMuscleIterator
        begin(Millard2012EquilibriumMuscleList self) -> OpenSim::ComponentList< OpenSim::Millard2012EquilibriumMuscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleList_begin(self, *args)


    def cbegin(self):
        """
        cbegin(Millard2012EquilibriumMuscleList self) -> OpenSim::ComponentList< OpenSim::Millard2012EquilibriumMuscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleList_cbegin(self)


    def end(self, *args):
        """
        end(Millard2012EquilibriumMuscleList self) -> Millard2012EquilibriumMuscleIterator
        end(Millard2012EquilibriumMuscleList self) -> OpenSim::ComponentList< OpenSim::Millard2012EquilibriumMuscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleList_end(self, *args)


    def cend(self):
        """
        cend(Millard2012EquilibriumMuscleList self) -> OpenSim::ComponentList< OpenSim::Millard2012EquilibriumMuscle const >::const_iterator

        Parameters
        ----------
        self: OpenSim::ComponentList< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleList_cend(self)


    def setFilter(self, filter):
        """
        setFilter(Millard2012EquilibriumMuscleList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _simulation.Millard2012EquilibriumMuscleList_setFilter(self, filter)



    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()

Millard2012EquilibriumMuscleList_swigregister = _simulation.Millard2012EquilibriumMuscleList_swigregister
Millard2012EquilibriumMuscleList_swigregister(Millard2012EquilibriumMuscleList)

class Millard2012EquilibriumMuscleIterator(_object):
    """Proxy of C++ OpenSim::ComponentListIterator<(q(const).OpenSim::Millard2012EquilibriumMuscle)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Millard2012EquilibriumMuscleIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Millard2012EquilibriumMuscleIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        """
        equals(Millard2012EquilibriumMuscleIterator self, Millard2012EquilibriumMuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_equals(self, other)


    def __eq__(self, other):
        """
        __eq__(Millard2012EquilibriumMuscleIterator self, Millard2012EquilibriumMuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator___eq__(self, other)


    def __ne__(self, other):
        """
        __ne__(Millard2012EquilibriumMuscleIterator self, Millard2012EquilibriumMuscleIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator___ne__(self, other)


    def __ref__(self):
        """
        __ref__(Millard2012EquilibriumMuscleIterator self) -> Millard2012EquilibriumMuscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator___ref__(self)


    def deref(self):
        """
        deref(Millard2012EquilibriumMuscleIterator self) -> Millard2012EquilibriumMuscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_deref(self)


    def __deref__(self):
        """
        __deref__(Millard2012EquilibriumMuscleIterator self) -> Millard2012EquilibriumMuscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator___deref__(self)


    def next(self):
        """
        next(Millard2012EquilibriumMuscleIterator self) -> Millard2012EquilibriumMuscleIterator

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_next(self)

    __swig_destroy__ = _simulation.delete_Millard2012EquilibriumMuscleIterator
    __del__ = lambda self: None

    def clone(self):
        """
        clone(Millard2012EquilibriumMuscleIterator self) -> Millard2012EquilibriumMuscle

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_clone(self)


    def getConcreteClassName(self):
        """
        getConcreteClassName(Millard2012EquilibriumMuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getConcreteClassName(self)


    def get_fiber_damping(self, *args):
        """
        get_fiber_damping(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_damping(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_fiber_damping(self, *args)


    def get_default_activation(self, *args):
        """
        get_default_activation(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_activation(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_default_activation(self, *args)


    def get_default_fiber_length(self, *args):
        """
        get_default_fiber_length(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_fiber_length(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_default_fiber_length(self, *args)


    def get_activation_time_constant(self, *args):
        """
        get_activation_time_constant(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_time_constant(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_activation_time_constant(self, *args)


    def get_deactivation_time_constant(self, *args):
        """
        get_deactivation_time_constant(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_deactivation_time_constant(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_deactivation_time_constant(self, *args)


    def get_minimum_activation(self, *args):
        """
        get_minimum_activation(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_minimum_activation(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_minimum_activation(self, *args)


    def get_maximum_pennation_angle(self, *args):
        """
        get_maximum_pennation_angle(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_maximum_pennation_angle(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_maximum_pennation_angle(self, *args)


    def get_ActiveForceLengthCurve(self, *args):
        """
        get_ActiveForceLengthCurve(Millard2012EquilibriumMuscleIterator self, int i) -> ActiveForceLengthCurve

        Parameters
        ----------
        i: int

        get_ActiveForceLengthCurve(Millard2012EquilibriumMuscleIterator self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_ActiveForceLengthCurve(self, *args)


    def get_ForceVelocityCurve(self, *args):
        """
        get_ForceVelocityCurve(Millard2012EquilibriumMuscleIterator self, int i) -> ForceVelocityCurve

        Parameters
        ----------
        i: int

        get_ForceVelocityCurve(Millard2012EquilibriumMuscleIterator self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_ForceVelocityCurve(self, *args)


    def get_FiberForceLengthCurve(self, *args):
        """
        get_FiberForceLengthCurve(Millard2012EquilibriumMuscleIterator self, int i) -> FiberForceLengthCurve

        Parameters
        ----------
        i: int

        get_FiberForceLengthCurve(Millard2012EquilibriumMuscleIterator self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_FiberForceLengthCurve(self, *args)


    def get_TendonForceLengthCurve(self, *args):
        """
        get_TendonForceLengthCurve(Millard2012EquilibriumMuscleIterator self, int i) -> TendonForceLengthCurve

        Parameters
        ----------
        i: int

        get_TendonForceLengthCurve(Millard2012EquilibriumMuscleIterator self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_TendonForceLengthCurve(self, *args)

    __swig_getmethods__["_has_output_passive_fiber_elastic_force"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_elastic_force_get
    if _newclass:
        _has_output_passive_fiber_elastic_force = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_elastic_force_get)
    __swig_getmethods__["_has_output_passive_fiber_elastic_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_elastic_force_along_tendon_get
    if _newclass:
        _has_output_passive_fiber_elastic_force_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_elastic_force_along_tendon_get)
    __swig_getmethods__["_has_output_passive_fiber_damping_force"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_damping_force_get
    if _newclass:
        _has_output_passive_fiber_damping_force = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_damping_force_get)
    __swig_getmethods__["_has_output_passive_fiber_damping_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_damping_force_along_tendon_get
    if _newclass:
        _has_output_passive_fiber_damping_force_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_damping_force_along_tendon_get)

    def getUseFiberDamping(self):
        """
        getUseFiberDamping(Millard2012EquilibriumMuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getUseFiberDamping(self)


    def getFiberDamping(self):
        """
        getFiberDamping(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberDamping(self)


    def getDefaultActivation(self):
        """
        getDefaultActivation(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getDefaultActivation(self)


    def getDefaultFiberLength(self):
        """
        getDefaultFiberLength(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getDefaultFiberLength(self)


    def getActivationTimeConstant(self):
        """
        getActivationTimeConstant(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActivationTimeConstant(self)


    def getDeactivationTimeConstant(self):
        """
        getDeactivationTimeConstant(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getDeactivationTimeConstant(self)


    def getMinimumActivation(self):
        """
        getMinimumActivation(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMinimumActivation(self)


    def getActiveForceLengthCurve(self):
        """
        getActiveForceLengthCurve(Millard2012EquilibriumMuscleIterator self) -> ActiveForceLengthCurve

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActiveForceLengthCurve(self)


    def getForceVelocityCurve(self):
        """
        getForceVelocityCurve(Millard2012EquilibriumMuscleIterator self) -> ForceVelocityCurve

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getForceVelocityCurve(self)


    def getFiberForceLengthCurve(self):
        """
        getFiberForceLengthCurve(Millard2012EquilibriumMuscleIterator self) -> FiberForceLengthCurve

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberForceLengthCurve(self)


    def getTendonForceLengthCurve(self):
        """
        getTendonForceLengthCurve(Millard2012EquilibriumMuscleIterator self) -> TendonForceLengthCurve

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonForceLengthCurve(self)


    def getPennationModel(self):
        """
        getPennationModel(Millard2012EquilibriumMuscleIterator self) -> MuscleFixedWidthPennationModel

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPennationModel(self)


    def getActivationModel(self):
        """
        getActivationModel(Millard2012EquilibriumMuscleIterator self) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActivationModel(self)


    def getMinimumFiberLength(self):
        """
        getMinimumFiberLength(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMinimumFiberLength(self)


    def getMinimumFiberLengthAlongTendon(self):
        """
        getMinimumFiberLengthAlongTendon(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMinimumFiberLengthAlongTendon(self)


    def getTendonForceMultiplier(self, s):
        """
        getTendonForceMultiplier(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonForceMultiplier(self, s)


    def getFiberStiffnessAlongTendon(self, s):
        """
        getFiberStiffnessAlongTendon(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberStiffnessAlongTendon(self, s)


    def getFiberVelocity(self, s):
        """
        getFiberVelocity(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberVelocity(self, s)


    def getActivationDerivative(self, s):
        """
        getActivationDerivative(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActivationDerivative(self, s)


    def getPassiveFiberElasticForce(self, s):
        """
        getPassiveFiberElasticForce(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPassiveFiberElasticForce(self, s)


    def getPassiveFiberElasticForceAlongTendon(self, s):
        """
        getPassiveFiberElasticForceAlongTendon(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPassiveFiberElasticForceAlongTendon(self, s)


    def getPassiveFiberDampingForce(self, s):
        """
        getPassiveFiberDampingForce(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPassiveFiberDampingForce(self, s)


    def getPassiveFiberDampingForceAlongTendon(self, s):
        """
        getPassiveFiberDampingForceAlongTendon(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPassiveFiberDampingForceAlongTendon(self, s)


    def setActivation(self, s, activation):
        """
        setActivation(Millard2012EquilibriumMuscleIterator self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setActivation(self, s, activation)


    def setFiberLength(self, s, fiberLength):
        """
        setFiberLength(Millard2012EquilibriumMuscleIterator self, State s, double fiberLength)

        Parameters
        ----------
        s: SimTK::State &
        fiberLength: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setFiberLength(self, s, fiberLength)


    def computeActuation(self, s):
        """
        computeActuation(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_computeActuation(self, s)


    def computeInitialFiberEquilibrium(self, s):
        """
        computeInitialFiberEquilibrium(Millard2012EquilibriumMuscleIterator self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_computeInitialFiberEquilibrium(self, s)


    def computeFiberEquilibrium(self, s, solveForVelocity=False):
        """
        computeFiberEquilibrium(Millard2012EquilibriumMuscleIterator self, State s, bool solveForVelocity=False)

        Parameters
        ----------
        s: SimTK::State &
        solveForVelocity: bool

        computeFiberEquilibrium(Millard2012EquilibriumMuscleIterator self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_computeFiberEquilibrium(self, s, solveForVelocity)


    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        """
        calcActiveFiberForceAlongTendon(Millard2012EquilibriumMuscleIterator self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters
        ----------
        activation: double
        fiberLength: double
        fiberVelocity: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)


    def calcFiberStateGivenBoundaryCond(self, lengthMT, velocityMT, tendonForce, dTendonForceDT):
        """
        calcFiberStateGivenBoundaryCond(Millard2012EquilibriumMuscleIterator self, double lengthMT, double velocityMT, double tendonForce, double dTendonForceDT) -> Vec4

        Parameters
        ----------
        lengthMT: double
        velocityMT: double
        tendonForce: double
        dTendonForceDT: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_calcFiberStateGivenBoundaryCond(self, lengthMT, velocityMT, tendonForce, dTendonForceDT)


    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        """
        calcInextensibleTendonActiveFiberForce(Millard2012EquilibriumMuscleIterator self, State s, double aActivation) -> double

        Parameters
        ----------
        s: SimTK::State &
        aActivation: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_calcInextensibleTendonActiveFiberForce(self, s, aActivation)


    def get_max_isometric_force(self, *args):
        """
        get_max_isometric_force(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_isometric_force(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_max_isometric_force(self, *args)


    def get_optimal_fiber_length(self, *args):
        """
        get_optimal_fiber_length(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_fiber_length(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_optimal_fiber_length(self, *args)


    def get_tendon_slack_length(self, *args):
        """
        get_tendon_slack_length(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_tendon_slack_length(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_tendon_slack_length(self, *args)


    def get_pennation_angle_at_optimal(self, *args):
        """
        get_pennation_angle_at_optimal(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_pennation_angle_at_optimal(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_pennation_angle_at_optimal(self, *args)


    def get_max_contraction_velocity(self, *args):
        """
        get_max_contraction_velocity(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_contraction_velocity(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_max_contraction_velocity(self, *args)


    def get_ignore_tendon_compliance(self, *args):
        """
        get_ignore_tendon_compliance(Millard2012EquilibriumMuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_tendon_compliance(Millard2012EquilibriumMuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_ignore_tendon_compliance(self, *args)


    def get_ignore_activation_dynamics(self, *args):
        """
        get_ignore_activation_dynamics(Millard2012EquilibriumMuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_activation_dynamics(Millard2012EquilibriumMuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_ignore_activation_dynamics(self, *args)

    __swig_getmethods__["_has_output_excitation"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_excitation_get
    if _newclass:
        _has_output_excitation = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_excitation_get)
    __swig_getmethods__["_has_output_activation"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_activation_get
    if _newclass:
        _has_output_activation = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_activation_get)
    __swig_getmethods__["_has_output_fiber_length"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_length_get
    if _newclass:
        _has_output_fiber_length = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_length_get)
    __swig_getmethods__["_has_output_pennation_angle"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_pennation_angle_get
    if _newclass:
        _has_output_pennation_angle = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_pennation_angle_get)
    __swig_getmethods__["_has_output_cos_pennation_angle"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_cos_pennation_angle_get
    if _newclass:
        _has_output_cos_pennation_angle = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_cos_pennation_angle_get)
    __swig_getmethods__["_has_output_tendon_length"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_length_get
    if _newclass:
        _has_output_tendon_length = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_length_get)
    __swig_getmethods__["_has_output_normalized_fiber_length"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_normalized_fiber_length_get
    if _newclass:
        _has_output_normalized_fiber_length = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_normalized_fiber_length_get)
    __swig_getmethods__["_has_output_fiber_length_along_tendon"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_length_along_tendon_get
    if _newclass:
        _has_output_fiber_length_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_length_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_strain"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_strain_get
    if _newclass:
        _has_output_tendon_strain = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_strain_get)
    __swig_getmethods__["_has_output_passive_force_multiplier"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_force_multiplier_get
    if _newclass:
        _has_output_passive_force_multiplier = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_force_multiplier_get)
    __swig_getmethods__["_has_output_active_force_length_multiplier"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_active_force_length_multiplier_get
    if _newclass:
        _has_output_active_force_length_multiplier = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_active_force_length_multiplier_get)
    __swig_getmethods__["_has_output_fiber_velocity"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_velocity_get
    if _newclass:
        _has_output_fiber_velocity = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_velocity_get)
    __swig_getmethods__["_has_output_normalized_fiber_velocity"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_normalized_fiber_velocity_get
    if _newclass:
        _has_output_normalized_fiber_velocity = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_normalized_fiber_velocity_get)
    __swig_getmethods__["_has_output_fiber_velocity_along_tendon"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_velocity_along_tendon_get
    if _newclass:
        _has_output_fiber_velocity_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_velocity_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_velocity"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_velocity_get
    if _newclass:
        _has_output_tendon_velocity = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_velocity_get)
    __swig_getmethods__["_has_output_force_velocity_multiplier"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_force_velocity_multiplier_get
    if _newclass:
        _has_output_force_velocity_multiplier = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_force_velocity_multiplier_get)
    __swig_getmethods__["_has_output_pennation_angular_velocity"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_pennation_angular_velocity_get
    if _newclass:
        _has_output_pennation_angular_velocity = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_pennation_angular_velocity_get)
    __swig_getmethods__["_has_output_fiber_force"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_force_get
    if _newclass:
        _has_output_fiber_force = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_force_get)
    __swig_getmethods__["_has_output_fiber_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_force_along_tendon_get
    if _newclass:
        _has_output_fiber_force_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_active_fiber_force"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_active_fiber_force_get
    if _newclass:
        _has_output_active_fiber_force = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_active_fiber_force_get)
    __swig_getmethods__["_has_output_passive_fiber_force"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_force_get
    if _newclass:
        _has_output_passive_fiber_force = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_force_get)
    __swig_getmethods__["_has_output_active_fiber_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_active_fiber_force_along_tendon_get
    if _newclass:
        _has_output_active_fiber_force_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_active_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_passive_fiber_force_along_tendon"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_force_along_tendon_get
    if _newclass:
        _has_output_passive_fiber_force_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_passive_fiber_force_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_force"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_force_get
    if _newclass:
        _has_output_tendon_force = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_force_get)
    __swig_getmethods__["_has_output_fiber_stiffness"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_stiffness_get
    if _newclass:
        _has_output_fiber_stiffness = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_stiffness_get)
    __swig_getmethods__["_has_output_fiber_stiffness_along_tendon"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_stiffness_along_tendon_get
    if _newclass:
        _has_output_fiber_stiffness_along_tendon = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_stiffness_along_tendon_get)
    __swig_getmethods__["_has_output_tendon_stiffness"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_stiffness_get
    if _newclass:
        _has_output_tendon_stiffness = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_stiffness_get)
    __swig_getmethods__["_has_output_muscle_stiffness"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_muscle_stiffness_get
    if _newclass:
        _has_output_muscle_stiffness = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_muscle_stiffness_get)
    __swig_getmethods__["_has_output_fiber_active_power"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_active_power_get
    if _newclass:
        _has_output_fiber_active_power = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_active_power_get)
    __swig_getmethods__["_has_output_fiber_passive_power"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_passive_power_get
    if _newclass:
        _has_output_fiber_passive_power = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_fiber_passive_power_get)
    __swig_getmethods__["_has_output_tendon_power"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_power_get
    if _newclass:
        _has_output_tendon_power = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_tendon_power_get)
    __swig_getmethods__["_has_output_muscle_power"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_muscle_power_get
    if _newclass:
        _has_output_muscle_power = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_muscle_power_get)

    def getMaxIsometricForce(self):
        """
        getMaxIsometricForce(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMaxIsometricForce(self)


    def getOptimalFiberLength(self):
        """
        getOptimalFiberLength(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getOptimalFiberLength(self)


    def getTendonSlackLength(self):
        """
        getTendonSlackLength(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonSlackLength(self)


    def getPennationAngleAtOptimalFiberLength(self):
        """
        getPennationAngleAtOptimalFiberLength(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPennationAngleAtOptimalFiberLength(self)


    def getMaxContractionVelocity(self):
        """
        getMaxContractionVelocity(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMaxContractionVelocity(self)


    def getIgnoreTendonCompliance(self, s):
        """
        getIgnoreTendonCompliance(Millard2012EquilibriumMuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getIgnoreTendonCompliance(self, s)


    def setIgnoreTendonCompliance(self, s, ignore):
        """
        setIgnoreTendonCompliance(Millard2012EquilibriumMuscleIterator self, State s, bool ignore)

        Parameters
        ----------
        s: SimTK::State &
        ignore: bool

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setIgnoreTendonCompliance(self, s, ignore)


    def getIgnoreActivationDynamics(self, s):
        """
        getIgnoreActivationDynamics(Millard2012EquilibriumMuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getIgnoreActivationDynamics(self, s)


    def setIgnoreActivationDynamics(self, s, ignore):
        """
        setIgnoreActivationDynamics(Millard2012EquilibriumMuscleIterator self, State s, bool ignore)

        Parameters
        ----------
        s: SimTK::State &
        ignore: bool

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setIgnoreActivationDynamics(self, s, ignore)


    def getActivation(self, s):
        """
        getActivation(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActivation(self, s)


    def getFiberLength(self, s):
        """
        getFiberLength(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberLength(self, s)


    def getPennationAngle(self, s):
        """
        getPennationAngle(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPennationAngle(self, s)


    def getCosPennationAngle(self, s):
        """
        getCosPennationAngle(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getCosPennationAngle(self, s)


    def getTendonLength(self, s):
        """
        getTendonLength(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonLength(self, s)


    def getNormalizedFiberLength(self, s):
        """
        getNormalizedFiberLength(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getNormalizedFiberLength(self, s)


    def getFiberLengthAlongTendon(self, s):
        """
        getFiberLengthAlongTendon(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberLengthAlongTendon(self, s)


    def getTendonStrain(self, s):
        """
        getTendonStrain(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonStrain(self, s)


    def getFiberPotentialEnergy(self, s):
        """
        getFiberPotentialEnergy(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberPotentialEnergy(self, s)


    def getTendonPotentialEnergy(self, s):
        """
        getTendonPotentialEnergy(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonPotentialEnergy(self, s)


    def getMusclePotentialEnergy(self, s):
        """
        getMusclePotentialEnergy(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMusclePotentialEnergy(self, s)


    def getPassiveForceMultiplier(self, s):
        """
        getPassiveForceMultiplier(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPassiveForceMultiplier(self, s)


    def getActiveForceLengthMultiplier(self, s):
        """
        getActiveForceLengthMultiplier(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActiveForceLengthMultiplier(self, s)


    def getNormalizedFiberVelocity(self, s):
        """
        getNormalizedFiberVelocity(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getNormalizedFiberVelocity(self, s)


    def getFiberVelocityAlongTendon(self, s):
        """
        getFiberVelocityAlongTendon(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberVelocityAlongTendon(self, s)


    def getPennationAngularVelocity(self, s):
        """
        getPennationAngularVelocity(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPennationAngularVelocity(self, s)


    def getTendonVelocity(self, s):
        """
        getTendonVelocity(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonVelocity(self, s)


    def getForceVelocityMultiplier(self, s):
        """
        getForceVelocityMultiplier(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getForceVelocityMultiplier(self, s)


    def getFiberForce(self, s):
        """
        getFiberForce(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberForce(self, s)


    def getFiberForceAlongTendon(self, s):
        """
        getFiberForceAlongTendon(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberForceAlongTendon(self, s)


    def getActiveFiberForce(self, s):
        """
        getActiveFiberForce(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActiveFiberForce(self, s)


    def getPassiveFiberForce(self, s):
        """
        getPassiveFiberForce(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPassiveFiberForce(self, s)


    def getActiveFiberForceAlongTendon(self, s):
        """
        getActiveFiberForceAlongTendon(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActiveFiberForceAlongTendon(self, s)


    def getPassiveFiberForceAlongTendon(self, s):
        """
        getPassiveFiberForceAlongTendon(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPassiveFiberForceAlongTendon(self, s)


    def getTendonForce(self, s):
        """
        getTendonForce(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonForce(self, s)


    def getFiberStiffness(self, s):
        """
        getFiberStiffness(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberStiffness(self, s)


    def getTendonStiffness(self, s):
        """
        getTendonStiffness(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonStiffness(self, s)


    def getMuscleStiffness(self, s):
        """
        getMuscleStiffness(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMuscleStiffness(self, s)


    def getFiberActivePower(self, s):
        """
        getFiberActivePower(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberActivePower(self, s)


    def getFiberPassivePower(self, s):
        """
        getFiberPassivePower(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getFiberPassivePower(self, s)


    def getTendonPower(self, s):
        """
        getTendonPower(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getTendonPower(self, s)


    def getMusclePower(self, s):
        """
        getMusclePower(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMusclePower(self, s)


    def getStress(self, s):
        """
        getStress(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getStress(self, s)


    def setExcitation(self, s, excitation):
        """
        setExcitation(Millard2012EquilibriumMuscleIterator self, State s, double excitation)

        Parameters
        ----------
        s: SimTK::State &
        excitation: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setExcitation(self, s, excitation)


    def getExcitation(self, s):
        """
        getExcitation(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getExcitation(self, s)


    def computeEquilibrium(self, s):
        """
        computeEquilibrium(Millard2012EquilibriumMuscleIterator self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_computeEquilibrium(self, s)


    def get_GeometryPath(self, *args):
        """
        get_GeometryPath(Millard2012EquilibriumMuscleIterator self, int i) -> GeometryPath

        Parameters
        ----------
        i: int

        get_GeometryPath(Millard2012EquilibriumMuscleIterator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_GeometryPath(self, *args)


    def get_optimal_force(self, *args):
        """
        get_optimal_force(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_optimal_force(self, *args)

    __swig_getmethods__["_has_output_tension"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_tension_get
    if _newclass:
        _has_output_tension = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_tension_get)

    def getGeometryPath(self):
        """
        getGeometryPath(Millard2012EquilibriumMuscleIterator self) -> GeometryPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getGeometryPath(self)


    def hasGeometryPath(self):
        """
        hasGeometryPath(Millard2012EquilibriumMuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_hasGeometryPath(self)


    def getOptimalForce(self):
        """
        getOptimalForce(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getOptimalForce(self)


    def getLength(self, s):
        """
        getLength(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getLength(self, s)


    def getLengtheningSpeed(self, s):
        """
        getLengtheningSpeed(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getLengtheningSpeed(self, s)


    def getPower(self, s):
        """
        getPower(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPower(self, s)


    def computeMomentArm(self, s, aCoord):
        """
        computeMomentArm(Millard2012EquilibriumMuscleIterator self, State s, Coordinate aCoord) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aCoord: OpenSim::Coordinate &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_computeMomentArm(self, s, aCoord)


    def get_min_control(self, *args):
        """
        get_min_control(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_min_control(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_min_control(self, *args)


    def get_max_control(self, *args):
        """
        get_max_control(Millard2012EquilibriumMuscleIterator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_max_control(Millard2012EquilibriumMuscleIterator self) -> double const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_max_control(self, *args)

    __swig_getmethods__["_has_output_actuation"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_actuation_get
    if _newclass:
        _has_output_actuation = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_actuation_get)
    __swig_getmethods__["_has_output_speed"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_speed_get
    if _newclass:
        _has_output_speed = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_speed_get)

    def getControl(self, s):
        """
        getControl(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getControl(self, s)


    def numControls(self):
        """
        numControls(Millard2012EquilibriumMuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_numControls(self)


    def setActuation(self, s, aActuation):
        """
        setActuation(Millard2012EquilibriumMuscleIterator self, State s, double aActuation)

        Parameters
        ----------
        s: SimTK::State const &
        aActuation: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setActuation(self, s, aActuation)


    def getActuation(self, s):
        """
        getActuation(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getActuation(self, s)


    def setSpeed(self, s, aspeed):
        """
        setSpeed(Millard2012EquilibriumMuscleIterator self, State s, double aspeed)

        Parameters
        ----------
        s: SimTK::State const &
        aspeed: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setSpeed(self, s, aspeed)


    def getSpeed(self, s):
        """
        getSpeed(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getSpeed(self, s)


    def getMinControl(self):
        """
        getMinControl(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMinControl(self)


    def getMaxControl(self):
        """
        getMaxControl(Millard2012EquilibriumMuscleIterator self) -> double

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getMaxControl(self)


    def overrideActuation(self, s, flag):
        """
        overrideActuation(Millard2012EquilibriumMuscleIterator self, State s, bool flag)

        Parameters
        ----------
        s: SimTK::State &
        flag: bool

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_overrideActuation(self, s, flag)


    def isActuationOverridden(self, s):
        """
        isActuationOverridden(Millard2012EquilibriumMuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_isActuationOverridden(self, s)


    def setOverrideActuation(self, s, value):
        """
        setOverrideActuation(Millard2012EquilibriumMuscleIterator self, State s, double value)

        Parameters
        ----------
        s: SimTK::State &
        value: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setOverrideActuation(self, s, value)


    def getOverrideActuation(self, s):
        """
        getOverrideActuation(Millard2012EquilibriumMuscleIterator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getOverrideActuation(self, s)


    def getControls(self, modelControls, actuatorControls):
        """
        getControls(Millard2012EquilibriumMuscleIterator self, Vector modelControls, Vector actuatorControls)

        Parameters
        ----------
        modelControls: SimTK::Vector const &
        actuatorControls: SimTK::Vector &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getControls(self, modelControls, actuatorControls)


    def setControls(self, actuatorControls, modelControls):
        """
        setControls(Millard2012EquilibriumMuscleIterator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setControls(self, actuatorControls, modelControls)


    def addInControls(self, actuatorControls, modelControls):
        """
        addInControls(Millard2012EquilibriumMuscleIterator self, Vector actuatorControls, Vector modelControls)

        Parameters
        ----------
        actuatorControls: SimTK::Vector const &
        modelControls: SimTK::Vector &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_addInControls(self, actuatorControls, modelControls)


    def get_appliesForce(self, *args):
        """
        get_appliesForce(Millard2012EquilibriumMuscleIterator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_appliesForce(Millard2012EquilibriumMuscleIterator self) -> bool const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_get_appliesForce(self, *args)

    __swig_getmethods__["_has_output_potential_energy"] = _simulation.Millard2012EquilibriumMuscleIterator__has_output_potential_energy_get
    if _newclass:
        _has_output_potential_energy = _swig_property(_simulation.Millard2012EquilibriumMuscleIterator__has_output_potential_energy_get)

    def shouldBeParallelized(self):
        """
        shouldBeParallelized(Millard2012EquilibriumMuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_shouldBeParallelized(self)


    def appliesForce(self, s):
        """
        appliesForce(Millard2012EquilibriumMuscleIterator self, State s) -> bool

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_appliesForce(self, s)


    def setAppliesForce(self, s, applyForce):
        """
        setAppliesForce(Millard2012EquilibriumMuscleIterator self, State s, bool applyForce)

        Parameters
        ----------
        s: SimTK::State &
        applyForce: bool

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setAppliesForce(self, s, applyForce)


    def getModel(self):
        """
        getModel(Millard2012EquilibriumMuscleIterator self) -> Model

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getModel(self)


    def hasModel(self):
        """
        hasModel(Millard2012EquilibriumMuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_hasModel(self)


    def addToSystem(self, system):
        """
        addToSystem(Millard2012EquilibriumMuscleIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_addToSystem(self, system)


    def initStateFromProperties(self, state):
        """
        initStateFromProperties(Millard2012EquilibriumMuscleIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_initStateFromProperties(self, state)


    def generateDecorations(self, fixed, hints, state, appendToThis):
        """
        generateDecorations(Millard2012EquilibriumMuscleIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_generateDecorations(self, fixed, hints, state, appendToThis)


    def getSystem(self):
        """
        getSystem(Millard2012EquilibriumMuscleIterator self) -> SimTK::MultibodySystem const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getSystem(self)


    def hasSystem(self):
        """
        hasSystem(Millard2012EquilibriumMuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_hasSystem(self)


    def isComponentInOwnershipTree(self, component):
        """
        isComponentInOwnershipTree(Millard2012EquilibriumMuscleIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_isComponentInOwnershipTree(self, component)


    def getAbsolutePathString(self):
        """
        getAbsolutePathString(Millard2012EquilibriumMuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getAbsolutePathString(self)


    def getAbsolutePath(self):
        """
        getAbsolutePath(Millard2012EquilibriumMuscleIterator self) -> ComponentPath

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getAbsolutePath(self)


    def getRelativePathString(self, wrt):
        """
        getRelativePathString(Millard2012EquilibriumMuscleIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getRelativePathString(self, wrt)


    def getRelativePath(self, wrt):
        """
        getRelativePath(Millard2012EquilibriumMuscleIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getRelativePath(self, wrt)


    def hasComponent(self, pathname):
        """
        hasComponent(Millard2012EquilibriumMuscleIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_hasComponent(self, pathname)


    def getComponent(self, pathname):
        """
        getComponent(Millard2012EquilibriumMuscleIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getComponent(self, pathname)


    def printComponentsMatching(self, substring):
        """
        printComponentsMatching(Millard2012EquilibriumMuscleIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_printComponentsMatching(self, substring)


    def getNumStateVariables(self):
        """
        getNumStateVariables(Millard2012EquilibriumMuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getNumStateVariables(self)


    def getStateVariableNames(self):
        """
        getStateVariableNames(Millard2012EquilibriumMuscleIterator self) -> ArrayStr

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getStateVariableNames(self)


    def getNumSockets(self):
        """
        getNumSockets(Millard2012EquilibriumMuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getNumSockets(self)


    def getConnectee(self, name):
        """
        getConnectee(Millard2012EquilibriumMuscleIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getConnectee(self, name)


    def getSocket(self, name):
        """
        getSocket(Millard2012EquilibriumMuscleIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getSocket(self, name)


    def getNumInputs(self):
        """
        getNumInputs(Millard2012EquilibriumMuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getNumInputs(self)


    def getNumOutputs(self):
        """
        getNumOutputs(Millard2012EquilibriumMuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getNumOutputs(self)


    def getInputNames(self):
        """
        getInputNames(Millard2012EquilibriumMuscleIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getInputNames(self)


    def getOutputNames(self):
        """
        getOutputNames(Millard2012EquilibriumMuscleIterator self) -> StdVectorString

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getOutputNames(self)


    def getInput(self, name):
        """
        getInput(Millard2012EquilibriumMuscleIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getInput(self, name)


    def getOutput(self, name):
        """
        getOutput(Millard2012EquilibriumMuscleIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getOutput(self, name)


    def getModelingOption(self, state, name):
        """
        getModelingOption(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name) -> int

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getModelingOption(self, state, name)


    def setModelingOption(self, state, name, flag):
        """
        setModelingOption(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name, int flag)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        flag: int

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setModelingOption(self, state, name, flag)


    def getStateVariableValue(self, state, name):
        """
        getStateVariableValue(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getStateVariableValue(self, state, name)


    def setStateVariableValue(self, state, name, value):
        """
        setStateVariableValue(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setStateVariableValue(self, state, name, value)


    def getStateVariableValues(self, state):
        """
        getStateVariableValues(Millard2012EquilibriumMuscleIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getStateVariableValues(self, state)


    def setStateVariableValues(self, state, values):
        """
        setStateVariableValues(Millard2012EquilibriumMuscleIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setStateVariableValues(self, state, values)


    def getStateVariableDerivativeValue(self, state, name):
        """
        getStateVariableDerivativeValue(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getStateVariableDerivativeValue(self, state, name)


    def getDiscreteVariableValue(self, state, name):
        """
        getDiscreteVariableValue(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getDiscreteVariableValue(self, state, name)


    def setDiscreteVariableValue(self, state, name, value):
        """
        setDiscreteVariableValue(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_setDiscreteVariableValue(self, state, name, value)


    def markCacheVariableValid(self, state, name):
        """
        markCacheVariableValid(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_markCacheVariableValid(self, state, name)


    def markCacheVariableInvalid(self, state, name):
        """
        markCacheVariableInvalid(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_markCacheVariableInvalid(self, state, name)


    def isCacheVariableValid(self, state, name):
        """
        isCacheVariableValid(Millard2012EquilibriumMuscleIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_isCacheVariableValid(self, state, name)


    def printSubcomponentInfo(self):
        """
        printSubcomponentInfo(Millard2012EquilibriumMuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_printSubcomponentInfo(self)


    def printSocketInfo(self):
        """
        printSocketInfo(Millard2012EquilibriumMuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_printSocketInfo(self)


    def printInputInfo(self):
        """
        printInputInfo(Millard2012EquilibriumMuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_printInputInfo(self)


    def printOutputInfo(self, includeDescendants=True):
        """
        printOutputInfo(Millard2012EquilibriumMuscleIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        printOutputInfo(Millard2012EquilibriumMuscleIterator self)

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_printOutputInfo(self, includeDescendants)


    def getOwner(self):
        """
        getOwner(Millard2012EquilibriumMuscleIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getOwner(self)


    def hasOwner(self):
        """
        hasOwner(Millard2012EquilibriumMuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_hasOwner(self)


    def getRoot(self):
        """
        getRoot(Millard2012EquilibriumMuscleIterator self) -> Component

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getRoot(self)


    def findComponent(self, *args):
        """
        findComponent(Millard2012EquilibriumMuscleIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(Millard2012EquilibriumMuscleIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_findComponent(self, *args)


    def getComponentsList(self):
        """
        getComponentsList(Millard2012EquilibriumMuscleIterator self) -> ComponentsList

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getComponentsList(self)


    def isEqualTo(self, aObject):
        """
        isEqualTo(Millard2012EquilibriumMuscleIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_isEqualTo(self, aObject)


    def getName(self):
        """
        getName(Millard2012EquilibriumMuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getName(self)


    def getDescription(self):
        """
        getDescription(Millard2012EquilibriumMuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getDescription(self)


    def getAuthors(self):
        """
        getAuthors(Millard2012EquilibriumMuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getAuthors(self)


    def getReferences(self):
        """
        getReferences(Millard2012EquilibriumMuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getReferences(self)


    def getNumProperties(self):
        """
        getNumProperties(Millard2012EquilibriumMuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getNumProperties(self)


    def getPropertyByIndex(self, propertyIndex):
        """
        getPropertyByIndex(Millard2012EquilibriumMuscleIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPropertyByIndex(self, propertyIndex)


    def hasProperty(self, name):
        """
        hasProperty(Millard2012EquilibriumMuscleIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_hasProperty(self, name)


    def getPropertyByName(self, name):
        """
        getPropertyByName(Millard2012EquilibriumMuscleIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getPropertyByName(self, name)


    def isObjectUpToDateWithProperties(self):
        """
        isObjectUpToDateWithProperties(Millard2012EquilibriumMuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_isObjectUpToDateWithProperties(self)


    def updateXMLNode(self, parent, prop=None):
        """
        updateXMLNode(Millard2012EquilibriumMuscleIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        updateXMLNode(Millard2012EquilibriumMuscleIterator self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_updateXMLNode(self, parent, prop)


    def getInlined(self):
        """
        getInlined(Millard2012EquilibriumMuscleIterator self) -> bool

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getInlined(self)


    def getDocumentFileName(self):
        """
        getDocumentFileName(Millard2012EquilibriumMuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getDocumentFileName(self)


    def getDocumentFileVersion(self):
        """
        getDocumentFileVersion(Millard2012EquilibriumMuscleIterator self) -> int

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_getDocumentFileVersion(self)


    def printToXML(self, fileName):
        """
        printToXML(Millard2012EquilibriumMuscleIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_printToXML(self, fileName)


    def dump(self):
        """
        dump(Millard2012EquilibriumMuscleIterator self) -> std::string

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_dump(self)


    def isA(self, type):
        """
        isA(Millard2012EquilibriumMuscleIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_isA(self, type)


    def toString(self):
        """
        toString(Millard2012EquilibriumMuscleIterator self) -> std::string const &

        Parameters
        ----------
        self: OpenSim::ComponentListIterator< OpenSim::Millard2012EquilibriumMuscle const > const *

        """
        return _simulation.Millard2012EquilibriumMuscleIterator_toString(self)

Millard2012EquilibriumMuscleIterator_swigregister = _simulation.Millard2012EquilibriumMuscleIterator_swigregister
Millard2012EquilibriumMuscleIterator_swigregister(Millard2012EquilibriumMuscleIterator)

# This file is compatible with both classic and new-style classes.


